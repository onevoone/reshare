// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/monaco-languages/release/esm/_.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict'; // Allow for running under nodejs/requirejs in tests

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadLanguage = loadLanguage;
exports.registerLanguage = registerLanguage;

var _monaco = typeof monaco === 'undefined' ? self.monaco : monaco;

var languageDefinitions = {};
var lazyLanguageLoaders = {};

var LazyLanguageLoader =
/** @class */
function () {
  function LazyLanguageLoader(languageId) {
    var _this = this;

    this._languageId = languageId;
    this._loadingTriggered = false;
    this._lazyLoadPromise = new Promise(function (resolve, reject) {
      _this._lazyLoadPromiseResolve = resolve;
      _this._lazyLoadPromiseReject = reject;
    });
  }

  LazyLanguageLoader.getOrCreate = function (languageId) {
    if (!lazyLanguageLoaders[languageId]) {
      lazyLanguageLoaders[languageId] = new LazyLanguageLoader(languageId);
    }

    return lazyLanguageLoaders[languageId];
  };

  LazyLanguageLoader.prototype.whenLoaded = function () {
    return this._lazyLoadPromise;
  };

  LazyLanguageLoader.prototype.load = function () {
    var _this = this;

    if (!this._loadingTriggered) {
      this._loadingTriggered = true;

      languageDefinitions[this._languageId].loader().then(function (mod) {
        return _this._lazyLoadPromiseResolve(mod);
      }, function (err) {
        return _this._lazyLoadPromiseReject(err);
      });
    }

    return this._lazyLoadPromise;
  };

  return LazyLanguageLoader;
}();

function loadLanguage(languageId) {
  return LazyLanguageLoader.getOrCreate(languageId).load();
}

function registerLanguage(def) {
  var languageId = def.id;
  languageDefinitions[languageId] = def;

  _monaco.languages.register(def);

  var lazyLanguageLoader = LazyLanguageLoader.getOrCreate(languageId);

  _monaco.languages.setMonarchTokensProvider(languageId, lazyLanguageLoader.whenLoaded().then(function (mod) {
    return mod.language;
  }));

  _monaco.languages.onLanguage(languageId, function () {
    lazyLanguageLoader.load().then(function (mod) {
      _monaco.languages.setLanguageConfiguration(languageId, mod.conf);
    });
  });
}
},{}],"../node_modules/monaco-languages/release/esm/abap/abap.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'abap',
  extensions: ['.abap'],
  aliases: ['abap', 'ABAP'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./abap'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./abap":[["abap.191f1678.js","../node_modules/monaco-languages/release/esm/abap/abap.js"],"abap.191f1678.js.map","../node_modules/monaco-languages/release/esm/abap/abap.js"]}],"../node_modules/monaco-languages/release/esm/apex/apex.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'apex',
  extensions: ['.cls'],
  aliases: ['Apex', 'apex'],
  mimetypes: ['text/x-apex-source', 'text/x-apex'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./apex'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./apex":[["apex.0de3984f.js","../node_modules/monaco-languages/release/esm/apex/apex.js"],"apex.0de3984f.js.map","../node_modules/monaco-languages/release/esm/apex/apex.js"]}],"../node_modules/monaco-languages/release/esm/azcli/azcli.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'azcli',
  extensions: ['.azcli'],
  aliases: ['Azure CLI', 'azcli'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./azcli'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./azcli":[["azcli.5c262bc1.js","../node_modules/monaco-languages/release/esm/azcli/azcli.js"],"azcli.5c262bc1.js.map","../node_modules/monaco-languages/release/esm/azcli/azcli.js"]}],"../node_modules/monaco-languages/release/esm/bat/bat.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'bat',
  extensions: ['.bat', '.cmd'],
  aliases: ['Batch', 'bat'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./bat'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./bat":[["bat.027f64f8.js","../node_modules/monaco-languages/release/esm/bat/bat.js"],"bat.027f64f8.js.map","../node_modules/monaco-languages/release/esm/bat/bat.js"]}],"../node_modules/monaco-languages/release/esm/cameligo/cameligo.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'cameligo',
  extensions: ['.mligo'],
  aliases: ['Cameligo'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./cameligo'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./cameligo":[["cameligo.72a4781d.js","../node_modules/monaco-languages/release/esm/cameligo/cameligo.js"],"cameligo.72a4781d.js.map","../node_modules/monaco-languages/release/esm/cameligo/cameligo.js"]}],"../node_modules/monaco-languages/release/esm/clojure/clojure.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'clojure',
  extensions: ['.clj', '.cljs', '.cljc', '.edn'],
  aliases: ['clojure', 'Clojure'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./clojure'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./clojure":[["clojure.ee5e2949.js","../node_modules/monaco-languages/release/esm/clojure/clojure.js"],"clojure.ee5e2949.js.map","../node_modules/monaco-languages/release/esm/clojure/clojure.js"]}],"../node_modules/monaco-languages/release/esm/coffee/coffee.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'coffeescript',
  extensions: ['.coffee'],
  aliases: ['CoffeeScript', 'coffeescript', 'coffee'],
  mimetypes: ['text/x-coffeescript', 'text/coffeescript'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./coffee'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./coffee":[["coffee.47f498d2.js","../node_modules/monaco-languages/release/esm/coffee/coffee.js"],"coffee.47f498d2.js.map","../node_modules/monaco-languages/release/esm/coffee/coffee.js"]}],"../node_modules/monaco-languages/release/esm/cpp/cpp.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'c',
  extensions: ['.c', '.h'],
  aliases: ['C', 'c'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./cpp'));
  }
});
(0, _.registerLanguage)({
  id: 'cpp',
  extensions: ['.cpp', '.cc', '.cxx', '.hpp', '.hh', '.hxx'],
  aliases: ['C++', 'Cpp', 'cpp'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./cpp'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./cpp":[["cpp.e32ea3c4.js","../node_modules/monaco-languages/release/esm/cpp/cpp.js"],"cpp.e32ea3c4.js.map","../node_modules/monaco-languages/release/esm/cpp/cpp.js"]}],"../node_modules/monaco-languages/release/esm/csharp/csharp.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'csharp',
  extensions: ['.cs', '.csx', '.cake'],
  aliases: ['C#', 'csharp'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./csharp'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./csharp":[["csharp.94381adb.js","../node_modules/monaco-languages/release/esm/csharp/csharp.js"],"csharp.94381adb.js.map","../node_modules/monaco-languages/release/esm/csharp/csharp.js"]}],"../node_modules/monaco-languages/release/esm/csp/csp.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'csp',
  extensions: [],
  aliases: ['CSP', 'csp'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./csp'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./csp":[["csp.e6b67ede.js","../node_modules/monaco-languages/release/esm/csp/csp.js"],"csp.e6b67ede.js.map","../node_modules/monaco-languages/release/esm/csp/csp.js"]}],"../node_modules/monaco-languages/release/esm/css/css.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'css',
  extensions: ['.css'],
  aliases: ['CSS', 'css'],
  mimetypes: ['text/css'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./css'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./css":[["css.2d896b10.js","../node_modules/monaco-languages/release/esm/css/css.js"],"css.2d896b10.js.map","../node_modules/monaco-languages/release/esm/css/css.js"]}],"../node_modules/monaco-languages/release/esm/dockerfile/dockerfile.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'dockerfile',
  extensions: ['.dockerfile'],
  filenames: ['Dockerfile'],
  aliases: ['Dockerfile'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./dockerfile'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./dockerfile":[["dockerfile.addc872c.js","../node_modules/monaco-languages/release/esm/dockerfile/dockerfile.js"],"dockerfile.addc872c.js.map","../node_modules/monaco-languages/release/esm/dockerfile/dockerfile.js"]}],"../node_modules/monaco-languages/release/esm/fsharp/fsharp.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'fsharp',
  extensions: ['.fs', '.fsi', '.ml', '.mli', '.fsx', '.fsscript'],
  aliases: ['F#', 'FSharp', 'fsharp'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./fsharp'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./fsharp":[["fsharp.b1a10325.js","../node_modules/monaco-languages/release/esm/fsharp/fsharp.js"],"fsharp.b1a10325.js.map","../node_modules/monaco-languages/release/esm/fsharp/fsharp.js"]}],"../node_modules/monaco-languages/release/esm/go/go.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'go',
  extensions: ['.go'],
  aliases: ['Go'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./go'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./go":[["go.3d46a3d1.js","../node_modules/monaco-languages/release/esm/go/go.js"],"go.3d46a3d1.js.map","../node_modules/monaco-languages/release/esm/go/go.js"]}],"../node_modules/monaco-languages/release/esm/graphql/graphql.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'graphql',
  extensions: ['.graphql', '.gql'],
  aliases: ['GraphQL', 'graphql', 'gql'],
  mimetypes: ['application/graphql'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./graphql'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./graphql":[["graphql.c605e136.js","../node_modules/monaco-languages/release/esm/graphql/graphql.js"],"graphql.c605e136.js.map","../node_modules/monaco-languages/release/esm/graphql/graphql.js"]}],"../node_modules/monaco-languages/release/esm/handlebars/handlebars.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'handlebars',
  extensions: ['.handlebars', '.hbs'],
  aliases: ['Handlebars', 'handlebars'],
  mimetypes: ['text/x-handlebars-template'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./handlebars'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./handlebars":[["handlebars.e892f0f2.js","../node_modules/monaco-languages/release/esm/handlebars/handlebars.js"],"handlebars.e892f0f2.js.map","../node_modules/monaco-languages/release/esm/handlebars/handlebars.js"]}],"../node_modules/monaco-languages/release/esm/html/html.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'html',
  extensions: ['.html', '.htm', '.shtml', '.xhtml', '.mdoc', '.jsp', '.asp', '.aspx', '.jshtm'],
  aliases: ['HTML', 'htm', 'html', 'xhtml'],
  mimetypes: ['text/html', 'text/x-jshtm', 'text/template', 'text/ng-template'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./html'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./html":[["html.b6d6ea69.js","../node_modules/monaco-languages/release/esm/html/html.js"],"html.b6d6ea69.js.map","../node_modules/monaco-languages/release/esm/html/html.js"]}],"../node_modules/monaco-languages/release/esm/ini/ini.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'ini',
  extensions: ['.ini', '.properties', '.gitconfig'],
  filenames: ['config', '.gitattributes', '.gitconfig', '.editorconfig'],
  aliases: ['Ini', 'ini'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./ini'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./ini":[["ini.7ba16650.js","../node_modules/monaco-languages/release/esm/ini/ini.js"],"ini.7ba16650.js.map","../node_modules/monaco-languages/release/esm/ini/ini.js"]}],"../node_modules/monaco-languages/release/esm/java/java.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'java',
  extensions: ['.java', '.jav'],
  aliases: ['Java', 'java'],
  mimetypes: ['text/x-java-source', 'text/x-java'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./java'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./java":[["java.02bfd885.js","../node_modules/monaco-languages/release/esm/java/java.js"],"java.02bfd885.js.map","../node_modules/monaco-languages/release/esm/java/java.js"]}],"../node_modules/monaco-languages/release/esm/javascript/javascript.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'javascript',
  extensions: ['.js', '.es6', '.jsx'],
  firstLine: '^#!.*\\bnode',
  filenames: ['jakefile'],
  aliases: ['JavaScript', 'javascript', 'js'],
  mimetypes: ['text/javascript'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./javascript'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./javascript":[["javascript.16bcb0a3.js","../node_modules/monaco-languages/release/esm/javascript/javascript.js"],"javascript.16bcb0a3.js.map","../node_modules/monaco-languages/release/esm/javascript/javascript.js"]}],"../node_modules/monaco-languages/release/esm/kotlin/kotlin.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'kotlin',
  extensions: ['.kt'],
  aliases: ['Kotlin', 'kotlin'],
  mimetypes: ['text/x-kotlin-source', 'text/x-kotlin'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./kotlin'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./kotlin":[["kotlin.b0baa6fe.js","../node_modules/monaco-languages/release/esm/kotlin/kotlin.js"],"kotlin.b0baa6fe.js.map","../node_modules/monaco-languages/release/esm/kotlin/kotlin.js"]}],"../node_modules/monaco-languages/release/esm/less/less.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'less',
  extensions: ['.less'],
  aliases: ['Less', 'less'],
  mimetypes: ['text/x-less', 'text/less'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./less'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./less":[["less.85903ec9.js","../node_modules/monaco-languages/release/esm/less/less.js"],"less.85903ec9.js.map","../node_modules/monaco-languages/release/esm/less/less.js"]}],"../node_modules/monaco-languages/release/esm/lua/lua.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'lua',
  extensions: ['.lua'],
  aliases: ['Lua', 'lua'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./lua'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./lua":[["lua.5689524a.js","../node_modules/monaco-languages/release/esm/lua/lua.js"],"lua.5689524a.js.map","../node_modules/monaco-languages/release/esm/lua/lua.js"]}],"../node_modules/monaco-languages/release/esm/markdown/markdown.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'markdown',
  extensions: ['.md', '.markdown', '.mdown', '.mkdn', '.mkd', '.mdwn', '.mdtxt', '.mdtext'],
  aliases: ['Markdown', 'markdown'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./markdown'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./markdown":[["markdown.134c9523.js","../node_modules/monaco-languages/release/esm/markdown/markdown.js"],"markdown.134c9523.js.map","../node_modules/monaco-languages/release/esm/markdown/markdown.js"]}],"../node_modules/monaco-languages/release/esm/mips/mips.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'mips',
  extensions: ['.s'],
  aliases: ['MIPS', 'MIPS-V'],
  mimetypes: ['text/x-mips', 'text/mips', 'text/plaintext'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./mips'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./mips":[["mips.2844739a.js","../node_modules/monaco-languages/release/esm/mips/mips.js"],"mips.2844739a.js.map","../node_modules/monaco-languages/release/esm/mips/mips.js"]}],"../node_modules/monaco-languages/release/esm/msdax/msdax.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'msdax',
  extensions: ['.dax', '.msdax'],
  aliases: ['DAX', 'MSDAX'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./msdax'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./msdax":[["msdax.0f6794e8.js","../node_modules/monaco-languages/release/esm/msdax/msdax.js"],"msdax.0f6794e8.js.map","../node_modules/monaco-languages/release/esm/msdax/msdax.js"]}],"../node_modules/monaco-languages/release/esm/mysql/mysql.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'mysql',
  extensions: [],
  aliases: ['MySQL', 'mysql'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./mysql'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./mysql":[["mysql.601b64f1.js","../node_modules/monaco-languages/release/esm/mysql/mysql.js"],"mysql.601b64f1.js.map","../node_modules/monaco-languages/release/esm/mysql/mysql.js"]}],"../node_modules/monaco-languages/release/esm/objective-c/objective-c.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'objective-c',
  extensions: ['.m'],
  aliases: ['Objective-C'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./objective-c'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./objective-c":[["objective-c.78d3512f.js","../node_modules/monaco-languages/release/esm/objective-c/objective-c.js"],"objective-c.78d3512f.js.map","../node_modules/monaco-languages/release/esm/objective-c/objective-c.js"]}],"../node_modules/monaco-languages/release/esm/pascal/pascal.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'pascal',
  extensions: ['.pas', '.p', '.pp'],
  aliases: ['Pascal', 'pas'],
  mimetypes: ['text/x-pascal-source', 'text/x-pascal'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./pascal'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./pascal":[["pascal.49cd3178.js","../node_modules/monaco-languages/release/esm/pascal/pascal.js"],"pascal.49cd3178.js.map","../node_modules/monaco-languages/release/esm/pascal/pascal.js"]}],"../node_modules/monaco-languages/release/esm/pascaligo/pascaligo.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'pascaligo',
  extensions: ['.ligo'],
  aliases: ['Pascaligo', 'ligo'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./pascaligo'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./pascaligo":[["pascaligo.5b3d0176.js","../node_modules/monaco-languages/release/esm/pascaligo/pascaligo.js"],"pascaligo.5b3d0176.js.map","../node_modules/monaco-languages/release/esm/pascaligo/pascaligo.js"]}],"../node_modules/monaco-languages/release/esm/perl/perl.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'perl',
  extensions: ['.pl'],
  aliases: ['Perl', 'pl'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./perl'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./perl":[["perl.0c355e13.js","../node_modules/monaco-languages/release/esm/perl/perl.js"],"perl.0c355e13.js.map","../node_modules/monaco-languages/release/esm/perl/perl.js"]}],"../node_modules/monaco-languages/release/esm/pgsql/pgsql.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'pgsql',
  extensions: [],
  aliases: ['PostgreSQL', 'postgres', 'pg', 'postgre'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./pgsql'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./pgsql":[["pgsql.4da11afd.js","../node_modules/monaco-languages/release/esm/pgsql/pgsql.js"],"pgsql.4da11afd.js.map","../node_modules/monaco-languages/release/esm/pgsql/pgsql.js"]}],"../node_modules/monaco-languages/release/esm/php/php.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'php',
  extensions: ['.php', '.php4', '.php5', '.phtml', '.ctp'],
  aliases: ['PHP', 'php'],
  mimetypes: ['application/x-php'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./php'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./php":[["php.b26039bc.js","../node_modules/monaco-languages/release/esm/php/php.js"],"php.b26039bc.js.map","../node_modules/monaco-languages/release/esm/php/php.js"]}],"../node_modules/monaco-languages/release/esm/postiats/postiats.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'postiats',
  extensions: ['.dats', '.sats', '.hats'],
  aliases: ['ATS', 'ATS/Postiats'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./postiats'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./postiats":[["postiats.1607a397.js","../node_modules/monaco-languages/release/esm/postiats/postiats.js"],"postiats.1607a397.js.map","../node_modules/monaco-languages/release/esm/postiats/postiats.js"]}],"../node_modules/monaco-languages/release/esm/powerquery/powerquery.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'powerquery',
  extensions: ['.pq', '.pqm'],
  aliases: ['PQ', 'M', 'Power Query', 'Power Query M'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./powerquery'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./powerquery":[["powerquery.54693d49.js","../node_modules/monaco-languages/release/esm/powerquery/powerquery.js"],"powerquery.54693d49.js.map","../node_modules/monaco-languages/release/esm/powerquery/powerquery.js"]}],"../node_modules/monaco-languages/release/esm/powershell/powershell.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'powershell',
  extensions: ['.ps1', '.psm1', '.psd1'],
  aliases: ['PowerShell', 'powershell', 'ps', 'ps1'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./powershell'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./powershell":[["powershell.ed71e4dd.js","../node_modules/monaco-languages/release/esm/powershell/powershell.js"],"powershell.ed71e4dd.js.map","../node_modules/monaco-languages/release/esm/powershell/powershell.js"]}],"../node_modules/monaco-languages/release/esm/pug/pug.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'pug',
  extensions: ['.jade', '.pug'],
  aliases: ['Pug', 'Jade', 'jade'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./pug'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./pug":[["pug.fe47c888.js","../node_modules/monaco-languages/release/esm/pug/pug.js"],"pug.fe47c888.js.map","../node_modules/monaco-languages/release/esm/pug/pug.js"]}],"../node_modules/monaco-languages/release/esm/python/python.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'python',
  extensions: ['.py', '.rpy', '.pyw', '.cpy', '.gyp', '.gypi'],
  aliases: ['Python', 'py'],
  firstLine: '^#!/.*\\bpython[0-9.-]*\\b',
  loader: function () {
    return require("_bundle_loader")(require.resolve('./python'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./python":[["python.7a7b654d.js","../node_modules/monaco-languages/release/esm/python/python.js"],"python.7a7b654d.js.map","../node_modules/monaco-languages/release/esm/python/python.js"]}],"../node_modules/monaco-languages/release/esm/r/r.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'r',
  extensions: ['.r', '.rhistory', '.rprofile', '.rt'],
  aliases: ['R', 'r'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./r'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./r":[["r.178519f8.js","../node_modules/monaco-languages/release/esm/r/r.js"],"r.178519f8.js.map","../node_modules/monaco-languages/release/esm/r/r.js"]}],"../node_modules/monaco-languages/release/esm/razor/razor.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'razor',
  extensions: ['.cshtml'],
  aliases: ['Razor', 'razor'],
  mimetypes: ['text/x-cshtml'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./razor'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./razor":[["razor.21c58531.js","../node_modules/monaco-languages/release/esm/razor/razor.js"],"razor.21c58531.js.map","../node_modules/monaco-languages/release/esm/razor/razor.js"]}],"../node_modules/monaco-languages/release/esm/redis/redis.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'redis',
  extensions: ['.redis'],
  aliases: ['redis'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./redis'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./redis":[["redis.bad1b2dd.js","../node_modules/monaco-languages/release/esm/redis/redis.js"],"redis.bad1b2dd.js.map","../node_modules/monaco-languages/release/esm/redis/redis.js"]}],"../node_modules/monaco-languages/release/esm/redshift/redshift.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'redshift',
  extensions: [],
  aliases: ['Redshift', 'redshift'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./redshift'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./redshift":[["redshift.b5606e05.js","../node_modules/monaco-languages/release/esm/redshift/redshift.js"],"redshift.b5606e05.js.map","../node_modules/monaco-languages/release/esm/redshift/redshift.js"]}],"../node_modules/monaco-languages/release/esm/restructuredtext/restructuredtext.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'restructuredtext',
  extensions: ['.rst'],
  aliases: ['reStructuredText', 'restructuredtext'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./restructuredtext'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./restructuredtext":[["restructuredtext.9666734e.js","../node_modules/monaco-languages/release/esm/restructuredtext/restructuredtext.js"],"restructuredtext.9666734e.js.map","../node_modules/monaco-languages/release/esm/restructuredtext/restructuredtext.js"]}],"../node_modules/monaco-languages/release/esm/ruby/ruby.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'ruby',
  extensions: ['.rb', '.rbx', '.rjs', '.gemspec', '.pp'],
  filenames: ['rakefile'],
  aliases: ['Ruby', 'rb'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./ruby'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./ruby":[["ruby.d4478c47.js","../node_modules/monaco-languages/release/esm/ruby/ruby.js"],"ruby.d4478c47.js.map","../node_modules/monaco-languages/release/esm/ruby/ruby.js"]}],"../node_modules/monaco-languages/release/esm/rust/rust.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'rust',
  extensions: ['.rs', '.rlib'],
  aliases: ['Rust', 'rust'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./rust'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./rust":[["rust.4263df99.js","../node_modules/monaco-languages/release/esm/rust/rust.js"],"rust.4263df99.js.map","../node_modules/monaco-languages/release/esm/rust/rust.js"]}],"../node_modules/monaco-languages/release/esm/sb/sb.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'sb',
  extensions: ['.sb'],
  aliases: ['Small Basic', 'sb'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./sb'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./sb":[["sb.a2abf1a9.js","../node_modules/monaco-languages/release/esm/sb/sb.js"],"sb.a2abf1a9.js.map","../node_modules/monaco-languages/release/esm/sb/sb.js"]}],"../node_modules/monaco-languages/release/esm/scheme/scheme.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'scheme',
  extensions: ['.scm', '.ss', '.sch', '.rkt'],
  aliases: ['scheme', 'Scheme'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./scheme'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./scheme":[["scheme.ab987d19.js","../node_modules/monaco-languages/release/esm/scheme/scheme.js"],"scheme.ab987d19.js.map","../node_modules/monaco-languages/release/esm/scheme/scheme.js"]}],"../node_modules/monaco-languages/release/esm/scss/scss.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'scss',
  extensions: ['.scss'],
  aliases: ['Sass', 'sass', 'scss'],
  mimetypes: ['text/x-scss', 'text/scss'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./scss'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./scss":[["scss.ff39558c.js","../node_modules/monaco-languages/release/esm/scss/scss.js"],"scss.ff39558c.js.map","../node_modules/monaco-languages/release/esm/scss/scss.js"]}],"../node_modules/monaco-languages/release/esm/shell/shell.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'shell',
  extensions: ['.sh', '.bash'],
  aliases: ['Shell', 'sh'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./shell'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./shell":[["shell.af0ceb9f.js","../node_modules/monaco-languages/release/esm/shell/shell.js"],"shell.af0ceb9f.js.map","../node_modules/monaco-languages/release/esm/shell/shell.js"]}],"../node_modules/monaco-languages/release/esm/solidity/solidity.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'sol',
  extensions: ['.sol'],
  aliases: ['sol', 'solidity', 'Solidity'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./solidity'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./solidity":[["solidity.c2bf5015.js","../node_modules/monaco-languages/release/esm/solidity/solidity.js"],"solidity.c2bf5015.js.map","../node_modules/monaco-languages/release/esm/solidity/solidity.js"]}],"../node_modules/monaco-languages/release/esm/sophia/sophia.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'aes',
  extensions: ['.aes'],
  aliases: ['aes', 'sophia', 'Sophia'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./sophia'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./sophia":[["sophia.8b2fe2f3.js","../node_modules/monaco-languages/release/esm/sophia/sophia.js"],"sophia.8b2fe2f3.js.map","../node_modules/monaco-languages/release/esm/sophia/sophia.js"]}],"../node_modules/monaco-languages/release/esm/sql/sql.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'sql',
  extensions: ['.sql'],
  aliases: ['SQL'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./sql'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./sql":[["sql.d985c0bc.js","../node_modules/monaco-languages/release/esm/sql/sql.js"],"sql.d985c0bc.js.map","../node_modules/monaco-languages/release/esm/sql/sql.js"]}],"../node_modules/monaco-languages/release/esm/st/st.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'st',
  extensions: ['.st', '.iecst', '.iecplc', '.lc3lib'],
  aliases: ['StructuredText', 'scl', 'stl'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./st'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./st":[["st.15795551.js","../node_modules/monaco-languages/release/esm/st/st.js"],"st.15795551.js.map","../node_modules/monaco-languages/release/esm/st/st.js"]}],"../node_modules/monaco-languages/release/esm/swift/swift.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'swift',
  aliases: ['Swift', 'swift'],
  extensions: ['.swift'],
  mimetypes: ['text/swift'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./swift'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./swift":[["swift.72ac6c9a.js","../node_modules/monaco-languages/release/esm/swift/swift.js"],"swift.72ac6c9a.js.map","../node_modules/monaco-languages/release/esm/swift/swift.js"]}],"../node_modules/monaco-languages/release/esm/tcl/tcl.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'tcl',
  extensions: ['.tcl'],
  aliases: ['tcl', 'Tcl', 'tcltk', 'TclTk', 'tcl/tk', 'Tcl/Tk'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./tcl'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./tcl":[["tcl.05bdbc27.js","../node_modules/monaco-languages/release/esm/tcl/tcl.js"],"tcl.05bdbc27.js.map","../node_modules/monaco-languages/release/esm/tcl/tcl.js"]}],"../node_modules/monaco-languages/release/esm/twig/twig.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'twig',
  extensions: ['.twig'],
  aliases: ['Twig', 'twig'],
  mimetypes: ['text/x-twig'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./twig'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./twig":[["twig.22a269db.js","../node_modules/monaco-languages/release/esm/twig/twig.js"],"twig.22a269db.js.map","../node_modules/monaco-languages/release/esm/twig/twig.js"]}],"../node_modules/monaco-languages/release/esm/typescript/typescript.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict'; // Allow for running under nodejs/requirejs in tests

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.language = exports.conf = void 0;

var _monaco = typeof monaco === 'undefined' ? self.monaco : monaco;

var conf = {
  wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
  comments: {
    lineComment: '//',
    blockComment: ['/*', '*/']
  },
  brackets: [['{', '}'], ['[', ']'], ['(', ')']],
  onEnterRules: [{
    // e.g. /** | */
    beforeText: /^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,
    afterText: /^\s*\*\/$/,
    action: {
      indentAction: _monaco.languages.IndentAction.IndentOutdent,
      appendText: ' * '
    }
  }, {
    // e.g. /** ...|
    beforeText: /^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,
    action: {
      indentAction: _monaco.languages.IndentAction.None,
      appendText: ' * '
    }
  }, {
    // e.g.  * ...|
    beforeText: /^(\t|(\ \ ))*\ \*(\ ([^\*]|\*(?!\/))*)?$/,
    action: {
      indentAction: _monaco.languages.IndentAction.None,
      appendText: '* '
    }
  }, {
    // e.g.  */|
    beforeText: /^(\t|(\ \ ))*\ \*\/\s*$/,
    action: {
      indentAction: _monaco.languages.IndentAction.None,
      removeText: 1
    }
  }],
  autoClosingPairs: [{
    open: '{',
    close: '}'
  }, {
    open: '[',
    close: ']'
  }, {
    open: '(',
    close: ')'
  }, {
    open: '"',
    close: '"',
    notIn: ['string']
  }, {
    open: '\'',
    close: '\'',
    notIn: ['string', 'comment']
  }, {
    open: '`',
    close: '`',
    notIn: ['string', 'comment']
  }, {
    open: "/**",
    close: " */",
    notIn: ["string"]
  }],
  folding: {
    markers: {
      start: new RegExp("^\\s*//\\s*#?region\\b"),
      end: new RegExp("^\\s*//\\s*#?endregion\\b")
    }
  }
};
exports.conf = conf;
var language = {
  // Set defaultToken to invalid to see what you do not tokenize yet
  defaultToken: 'invalid',
  tokenPostfix: '.ts',
  keywords: ['abstract', 'as', 'break', 'case', 'catch', 'class', 'continue', 'const', 'constructor', 'debugger', 'declare', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function', 'get', 'if', 'implements', 'import', 'in', 'infer', 'instanceof', 'interface', 'is', 'keyof', 'let', 'module', 'namespace', 'never', 'new', 'null', 'package', 'private', 'protected', 'public', 'readonly', 'require', 'global', 'return', 'set', 'static', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try', 'type', 'typeof', 'unique', 'var', 'void', 'while', 'with', 'yield', 'async', 'await', 'of'],
  typeKeywords: ['any', 'boolean', 'number', 'object', 'string', 'undefined'],
  operators: ['<=', '>=', '==', '!=', '===', '!==', '=>', '+', '-', '**', '*', '/', '%', '++', '--', '<<', '</', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '??', '?', ':', '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', '@'],
  // we include these common regular expressions
  symbols: /[=><!~?:&|+\-*\/\^%]+/,
  escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
  digits: /\d+(_+\d+)*/,
  octaldigits: /[0-7]+(_+[0-7]+)*/,
  binarydigits: /[0-1]+(_+[0-1]+)*/,
  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,
  regexpctl: /[(){}\[\]\$\^|\-*+?\.]/,
  regexpesc: /\\(?:[bBdDfnrstvwWn0\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,
  // The main tokenizer for our languages
  tokenizer: {
    root: [[/[{}]/, 'delimiter.bracket'], {
      include: 'common'
    }],
    common: [// identifiers and keywords
    [/[a-z_$][\w$]*/, {
      cases: {
        '@typeKeywords': 'keyword',
        '@keywords': 'keyword',
        '@default': 'identifier'
      }
    }], [/[A-Z][\w\$]*/, 'type.identifier'], // [/[A-Z][\w\$]*/, 'identifier'],
    // whitespace
    {
      include: '@whitespace'
    }, // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)
    [/\/(?=([^\\\/]|\\.)+\/([gimsuy]*)(\s*)(\.|;|,|\)|\]|\}|$))/, {
      token: 'regexp',
      bracket: '@open',
      next: '@regexp'
    }], // delimiters and operators
    [/[()\[\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/!(?=([^=]|$))/, 'delimiter'], [/@symbols/, {
      cases: {
        '@operators': 'delimiter',
        '@default': ''
      }
    }], // numbers
    [/(@digits)[eE]([\-+]?(@digits))?/, 'number.float'], [/(@digits)\.(@digits)([eE][\-+]?(@digits))?/, 'number.float'], [/0[xX](@hexdigits)n?/, 'number.hex'], [/0[oO]?(@octaldigits)n?/, 'number.octal'], [/0[bB](@binarydigits)n?/, 'number.binary'], [/(@digits)n?/, 'number'], // delimiter: after number because of .\d floats
    [/[;,.]/, 'delimiter'], // strings
    [/"([^"\\]|\\.)*$/, 'string.invalid'], [/'([^'\\]|\\.)*$/, 'string.invalid'], [/"/, 'string', '@string_double'], [/'/, 'string', '@string_single'], [/`/, 'string', '@string_backtick']],
    whitespace: [[/[ \t\r\n]+/, ''], [/\/\*\*(?!\/)/, 'comment.doc', '@jsdoc'], [/\/\*/, 'comment', '@comment'], [/\/\/.*$/, 'comment']],
    comment: [[/[^\/*]+/, 'comment'], [/\*\//, 'comment', '@pop'], [/[\/*]/, 'comment']],
    jsdoc: [[/[^\/*]+/, 'comment.doc'], [/\*\//, 'comment.doc', '@pop'], [/[\/*]/, 'comment.doc']],
    // We match regular expression quite precisely
    regexp: [[/(\{)(\d+(?:,\d*)?)(\})/, ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']], [/(\[)(\^?)(?=(?:[^\]\\\/]|\\.)+)/, ['regexp.escape.control', {
      token: 'regexp.escape.control',
      next: '@regexrange'
    }]], [/(\()(\?:|\?=|\?!)/, ['regexp.escape.control', 'regexp.escape.control']], [/[()]/, 'regexp.escape.control'], [/@regexpctl/, 'regexp.escape.control'], [/[^\\\/]/, 'regexp'], [/@regexpesc/, 'regexp.escape'], [/\\\./, 'regexp.invalid'], [/(\/)([gimsuy]*)/, [{
      token: 'regexp',
      bracket: '@close',
      next: '@pop'
    }, 'keyword.other']]],
    regexrange: [[/-/, 'regexp.escape.control'], [/\^/, 'regexp.invalid'], [/@regexpesc/, 'regexp.escape'], [/[^\]]/, 'regexp'], [/\]/, {
      token: 'regexp.escape.control',
      next: '@pop',
      bracket: '@close'
    }]],
    string_double: [[/[^\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/"/, 'string', '@pop']],
    string_single: [[/[^\\']+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/'/, 'string', '@pop']],
    string_backtick: [[/\$\{/, {
      token: 'delimiter.bracket',
      next: '@bracketCounting'
    }], [/[^\\`$]+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/`/, 'string', '@pop']],
    bracketCounting: [[/\{/, 'delimiter.bracket', '@bracketCounting'], [/\}/, 'delimiter.bracket', '@pop'], {
      include: 'common'
    }]
  }
};
exports.language = language;
},{}],"../node_modules/monaco-languages/release/esm/typescript/typescript.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'typescript',
  extensions: ['.ts', '.tsx'],
  aliases: ['TypeScript', 'ts', 'typescript'],
  mimetypes: ['text/typescript'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./typescript'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./typescript":[["monaco-features.04581997.js","monaco-features.js"],"monaco-features.04581997.js.map","monaco-features.04581997.css","../node_modules/monaco-languages/release/esm/typescript/typescript.js"]}],"../node_modules/monaco-languages/release/esm/vb/vb.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'vb',
  extensions: ['.vb'],
  aliases: ['Visual Basic', 'vb'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./vb'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./vb":[["vb.1325f240.js","../node_modules/monaco-languages/release/esm/vb/vb.js"],"vb.1325f240.js.map","../node_modules/monaco-languages/release/esm/vb/vb.js"]}],"../node_modules/monaco-languages/release/esm/xml/xml.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'xml',
  extensions: ['.xml', '.dtd', '.ascx', '.csproj', '.config', '.wxi', '.wxl', '.wxs', '.xaml', '.svg', '.svgz', '.opf', '.xsl'],
  firstLine: '(\\<\\?xml.*)|(\\<svg)|(\\<\\!doctype\\s+svg)',
  aliases: ['XML', 'xml'],
  mimetypes: ['text/xml', 'application/xml', 'application/xaml+xml', 'application/xml-dtd'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./xml'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./xml":[["xml.fcd59855.js","../node_modules/monaco-languages/release/esm/xml/xml.js"],"xml.fcd59855.js.map","../node_modules/monaco-languages/release/esm/xml/xml.js"]}],"../node_modules/monaco-languages/release/esm/yaml/yaml.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

var _ = require("../_.contribution");

(0, _.registerLanguage)({
  id: 'yaml',
  extensions: ['.yaml', '.yml'],
  aliases: ['YAML', 'yaml', 'YML', 'yml'],
  mimetypes: ['application/x-yaml'],
  loader: function () {
    return require("_bundle_loader")(require.resolve('./yaml'));
  }
});
},{"../_.contribution":"../node_modules/monaco-languages/release/esm/_.contribution.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","./yaml":[["yaml.481d0be2.js","../node_modules/monaco-languages/release/esm/yaml/yaml.js"],"yaml.481d0be2.js.map","../node_modules/monaco-languages/release/esm/yaml/yaml.js"]}],"../node_modules/monaco-languages/release/esm/monaco.contribution.js":[function(require,module,exports) {
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

require("./abap/abap.contribution");

require("./apex/apex.contribution");

require("./azcli/azcli.contribution");

require("./bat/bat.contribution");

require("./cameligo/cameligo.contribution");

require("./clojure/clojure.contribution");

require("./coffee/coffee.contribution");

require("./cpp/cpp.contribution");

require("./csharp/csharp.contribution");

require("./csp/csp.contribution");

require("./css/css.contribution");

require("./dockerfile/dockerfile.contribution");

require("./fsharp/fsharp.contribution");

require("./go/go.contribution");

require("./graphql/graphql.contribution");

require("./handlebars/handlebars.contribution");

require("./html/html.contribution");

require("./ini/ini.contribution");

require("./java/java.contribution");

require("./javascript/javascript.contribution");

require("./kotlin/kotlin.contribution");

require("./less/less.contribution");

require("./lua/lua.contribution");

require("./markdown/markdown.contribution");

require("./mips/mips.contribution");

require("./msdax/msdax.contribution");

require("./mysql/mysql.contribution");

require("./objective-c/objective-c.contribution");

require("./pascal/pascal.contribution");

require("./pascaligo/pascaligo.contribution");

require("./perl/perl.contribution");

require("./pgsql/pgsql.contribution");

require("./php/php.contribution");

require("./postiats/postiats.contribution");

require("./powerquery/powerquery.contribution");

require("./powershell/powershell.contribution");

require("./pug/pug.contribution");

require("./python/python.contribution");

require("./r/r.contribution");

require("./razor/razor.contribution");

require("./redis/redis.contribution");

require("./redshift/redshift.contribution");

require("./restructuredtext/restructuredtext.contribution");

require("./ruby/ruby.contribution");

require("./rust/rust.contribution");

require("./sb/sb.contribution");

require("./scheme/scheme.contribution");

require("./scss/scss.contribution");

require("./shell/shell.contribution");

require("./solidity/solidity.contribution");

require("./sophia/sophia.contribution");

require("./sql/sql.contribution");

require("./st/st.contribution");

require("./swift/swift.contribution");

require("./tcl/tcl.contribution");

require("./twig/twig.contribution");

require("./typescript/typescript.contribution");

require("./vb/vb.contribution");

require("./xml/xml.contribution");

require("./yaml/yaml.contribution");
},{"./abap/abap.contribution":"../node_modules/monaco-languages/release/esm/abap/abap.contribution.js","./apex/apex.contribution":"../node_modules/monaco-languages/release/esm/apex/apex.contribution.js","./azcli/azcli.contribution":"../node_modules/monaco-languages/release/esm/azcli/azcli.contribution.js","./bat/bat.contribution":"../node_modules/monaco-languages/release/esm/bat/bat.contribution.js","./cameligo/cameligo.contribution":"../node_modules/monaco-languages/release/esm/cameligo/cameligo.contribution.js","./clojure/clojure.contribution":"../node_modules/monaco-languages/release/esm/clojure/clojure.contribution.js","./coffee/coffee.contribution":"../node_modules/monaco-languages/release/esm/coffee/coffee.contribution.js","./cpp/cpp.contribution":"../node_modules/monaco-languages/release/esm/cpp/cpp.contribution.js","./csharp/csharp.contribution":"../node_modules/monaco-languages/release/esm/csharp/csharp.contribution.js","./csp/csp.contribution":"../node_modules/monaco-languages/release/esm/csp/csp.contribution.js","./css/css.contribution":"../node_modules/monaco-languages/release/esm/css/css.contribution.js","./dockerfile/dockerfile.contribution":"../node_modules/monaco-languages/release/esm/dockerfile/dockerfile.contribution.js","./fsharp/fsharp.contribution":"../node_modules/monaco-languages/release/esm/fsharp/fsharp.contribution.js","./go/go.contribution":"../node_modules/monaco-languages/release/esm/go/go.contribution.js","./graphql/graphql.contribution":"../node_modules/monaco-languages/release/esm/graphql/graphql.contribution.js","./handlebars/handlebars.contribution":"../node_modules/monaco-languages/release/esm/handlebars/handlebars.contribution.js","./html/html.contribution":"../node_modules/monaco-languages/release/esm/html/html.contribution.js","./ini/ini.contribution":"../node_modules/monaco-languages/release/esm/ini/ini.contribution.js","./java/java.contribution":"../node_modules/monaco-languages/release/esm/java/java.contribution.js","./javascript/javascript.contribution":"../node_modules/monaco-languages/release/esm/javascript/javascript.contribution.js","./kotlin/kotlin.contribution":"../node_modules/monaco-languages/release/esm/kotlin/kotlin.contribution.js","./less/less.contribution":"../node_modules/monaco-languages/release/esm/less/less.contribution.js","./lua/lua.contribution":"../node_modules/monaco-languages/release/esm/lua/lua.contribution.js","./markdown/markdown.contribution":"../node_modules/monaco-languages/release/esm/markdown/markdown.contribution.js","./mips/mips.contribution":"../node_modules/monaco-languages/release/esm/mips/mips.contribution.js","./msdax/msdax.contribution":"../node_modules/monaco-languages/release/esm/msdax/msdax.contribution.js","./mysql/mysql.contribution":"../node_modules/monaco-languages/release/esm/mysql/mysql.contribution.js","./objective-c/objective-c.contribution":"../node_modules/monaco-languages/release/esm/objective-c/objective-c.contribution.js","./pascal/pascal.contribution":"../node_modules/monaco-languages/release/esm/pascal/pascal.contribution.js","./pascaligo/pascaligo.contribution":"../node_modules/monaco-languages/release/esm/pascaligo/pascaligo.contribution.js","./perl/perl.contribution":"../node_modules/monaco-languages/release/esm/perl/perl.contribution.js","./pgsql/pgsql.contribution":"../node_modules/monaco-languages/release/esm/pgsql/pgsql.contribution.js","./php/php.contribution":"../node_modules/monaco-languages/release/esm/php/php.contribution.js","./postiats/postiats.contribution":"../node_modules/monaco-languages/release/esm/postiats/postiats.contribution.js","./powerquery/powerquery.contribution":"../node_modules/monaco-languages/release/esm/powerquery/powerquery.contribution.js","./powershell/powershell.contribution":"../node_modules/monaco-languages/release/esm/powershell/powershell.contribution.js","./pug/pug.contribution":"../node_modules/monaco-languages/release/esm/pug/pug.contribution.js","./python/python.contribution":"../node_modules/monaco-languages/release/esm/python/python.contribution.js","./r/r.contribution":"../node_modules/monaco-languages/release/esm/r/r.contribution.js","./razor/razor.contribution":"../node_modules/monaco-languages/release/esm/razor/razor.contribution.js","./redis/redis.contribution":"../node_modules/monaco-languages/release/esm/redis/redis.contribution.js","./redshift/redshift.contribution":"../node_modules/monaco-languages/release/esm/redshift/redshift.contribution.js","./restructuredtext/restructuredtext.contribution":"../node_modules/monaco-languages/release/esm/restructuredtext/restructuredtext.contribution.js","./ruby/ruby.contribution":"../node_modules/monaco-languages/release/esm/ruby/ruby.contribution.js","./rust/rust.contribution":"../node_modules/monaco-languages/release/esm/rust/rust.contribution.js","./sb/sb.contribution":"../node_modules/monaco-languages/release/esm/sb/sb.contribution.js","./scheme/scheme.contribution":"../node_modules/monaco-languages/release/esm/scheme/scheme.contribution.js","./scss/scss.contribution":"../node_modules/monaco-languages/release/esm/scss/scss.contribution.js","./shell/shell.contribution":"../node_modules/monaco-languages/release/esm/shell/shell.contribution.js","./solidity/solidity.contribution":"../node_modules/monaco-languages/release/esm/solidity/solidity.contribution.js","./sophia/sophia.contribution":"../node_modules/monaco-languages/release/esm/sophia/sophia.contribution.js","./sql/sql.contribution":"../node_modules/monaco-languages/release/esm/sql/sql.contribution.js","./st/st.contribution":"../node_modules/monaco-languages/release/esm/st/st.contribution.js","./swift/swift.contribution":"../node_modules/monaco-languages/release/esm/swift/swift.contribution.js","./tcl/tcl.contribution":"../node_modules/monaco-languages/release/esm/tcl/tcl.contribution.js","./twig/twig.contribution":"../node_modules/monaco-languages/release/esm/twig/twig.contribution.js","./typescript/typescript.contribution":"../node_modules/monaco-languages/release/esm/typescript/typescript.contribution.js","./vb/vb.contribution":"../node_modules/monaco-languages/release/esm/vb/vb.contribution.js","./xml/xml.contribution":"../node_modules/monaco-languages/release/esm/xml/xml.contribution.js","./yaml/yaml.contribution":"../node_modules/monaco-languages/release/esm/yaml/yaml.contribution.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/bracketMatching/bracketMatching.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/bracketMatching/bracketMatching.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BracketMatchingController = void 0;

require("./bracketMatching.css");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _async = require("../../../base/common/async.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _position = require("../../common/core/position.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _model = require("../../common/model.js");

var _textModel = require("../../common/model/textModel.js");

var _editorColorRegistry = require("../../common/view/editorColorRegistry.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

var _actions = require("../../../platform/actions/common/actions.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var overviewRulerBracketMatchForeground = (0, _colorRegistry.registerColor)('editorOverviewRuler.bracketMatchForeground', {
  dark: '#A0A0A0',
  light: '#A0A0A0',
  hc: '#A0A0A0'
}, nls.localize('overviewRulerBracketMatchForeground', 'Overview ruler marker color for matching brackets.'));

var JumpToBracketAction =
/** @class */
function (_super) {
  __extends(JumpToBracketAction, _super);

  function JumpToBracketAction() {
    return _super.call(this, {
      id: 'editor.action.jumpToBracket',
      label: nls.localize('smartSelect.jumpBracket', "Go to Bracket"),
      alias: 'Go to Bracket',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 88
        /* US_BACKSLASH */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  JumpToBracketAction.prototype.run = function (accessor, editor) {
    var controller = BracketMatchingController.get(editor);

    if (!controller) {
      return;
    }

    controller.jumpToBracket();
  };

  return JumpToBracketAction;
}(_editorExtensions.EditorAction);

var SelectToBracketAction =
/** @class */
function (_super) {
  __extends(SelectToBracketAction, _super);

  function SelectToBracketAction() {
    return _super.call(this, {
      id: 'editor.action.selectToBracket',
      label: nls.localize('smartSelect.selectToBracket', "Select to Bracket"),
      alias: 'Select to Bracket',
      precondition: undefined,
      description: {
        description: "Select to Bracket",
        args: [{
          name: 'args',
          schema: {
            type: 'object',
            properties: {
              'selectBrackets': {
                type: 'boolean',
                default: true
              }
            }
          }
        }]
      }
    }) || this;
  }

  SelectToBracketAction.prototype.run = function (accessor, editor, args) {
    var controller = BracketMatchingController.get(editor);

    if (!controller) {
      return;
    }

    var selectBrackets = true;

    if (args && args.selectBrackets === false) {
      selectBrackets = false;
    }

    controller.selectToBracket(selectBrackets);
  };

  return SelectToBracketAction;
}(_editorExtensions.EditorAction);

var BracketsData =
/** @class */
function () {
  function BracketsData(position, brackets, options) {
    this.position = position;
    this.brackets = brackets;
    this.options = options;
  }

  return BracketsData;
}();

var BracketMatchingController =
/** @class */
function (_super) {
  __extends(BracketMatchingController, _super);

  function BracketMatchingController(editor) {
    var _this = _super.call(this) || this;

    _this._editor = editor;
    _this._lastBracketsData = [];
    _this._lastVersionId = 0;
    _this._decorations = [];
    _this._updateBracketsSoon = _this._register(new _async.RunOnceScheduler(function () {
      return _this._updateBrackets();
    }, 50));
    _this._matchBrackets = _this._editor.getOption(51
    /* matchBrackets */
    );

    _this._updateBracketsSoon.schedule();

    _this._register(editor.onDidChangeCursorPosition(function (e) {
      if (_this._matchBrackets === 'never') {
        // Early exit if nothing needs to be done!
        // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)
        return;
      }

      _this._updateBracketsSoon.schedule();
    }));

    _this._register(editor.onDidChangeModelContent(function (e) {
      _this._updateBracketsSoon.schedule();
    }));

    _this._register(editor.onDidChangeModel(function (e) {
      _this._lastBracketsData = [];
      _this._decorations = [];

      _this._updateBracketsSoon.schedule();
    }));

    _this._register(editor.onDidChangeModelLanguageConfiguration(function (e) {
      _this._lastBracketsData = [];

      _this._updateBracketsSoon.schedule();
    }));

    _this._register(editor.onDidChangeConfiguration(function (e) {
      if (e.hasChanged(51
      /* matchBrackets */
      )) {
        _this._matchBrackets = _this._editor.getOption(51
        /* matchBrackets */
        );
        _this._decorations = _this._editor.deltaDecorations(_this._decorations, []);
        _this._lastBracketsData = [];
        _this._lastVersionId = 0;

        _this._updateBracketsSoon.schedule();
      }
    }));

    return _this;
  }

  BracketMatchingController.get = function (editor) {
    return editor.getContribution(BracketMatchingController.ID);
  };

  BracketMatchingController.prototype.jumpToBracket = function () {
    if (!this._editor.hasModel()) {
      return;
    }

    var model = this._editor.getModel();

    var newSelections = this._editor.getSelections().map(function (selection) {
      var position = selection.getStartPosition(); // find matching brackets if position is on a bracket

      var brackets = model.matchBracket(position);
      var newCursorPosition = null;

      if (brackets) {
        if (brackets[0].containsPosition(position)) {
          newCursorPosition = brackets[1].getStartPosition();
        } else if (brackets[1].containsPosition(position)) {
          newCursorPosition = brackets[0].getStartPosition();
        }
      } else {
        // find the enclosing brackets if the position isn't on a matching bracket
        var enclosingBrackets = model.findEnclosingBrackets(position);

        if (enclosingBrackets) {
          newCursorPosition = enclosingBrackets[0].getStartPosition();
        } else {
          // no enclosing brackets, try the very first next bracket
          var nextBracket = model.findNextBracket(position);

          if (nextBracket && nextBracket.range) {
            newCursorPosition = nextBracket.range.getStartPosition();
          }
        }
      }

      if (newCursorPosition) {
        return new _selection.Selection(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);
      }

      return new _selection.Selection(position.lineNumber, position.column, position.lineNumber, position.column);
    });

    this._editor.setSelections(newSelections);

    this._editor.revealRange(newSelections[0]);
  };

  BracketMatchingController.prototype.selectToBracket = function (selectBrackets) {
    if (!this._editor.hasModel()) {
      return;
    }

    var model = this._editor.getModel();

    var newSelections = [];

    this._editor.getSelections().forEach(function (selection) {
      var position = selection.getStartPosition();
      var brackets = model.matchBracket(position);

      if (!brackets) {
        brackets = model.findEnclosingBrackets(position);

        if (!brackets) {
          var nextBracket = model.findNextBracket(position);

          if (nextBracket && nextBracket.range) {
            brackets = model.matchBracket(nextBracket.range.getStartPosition());
          }
        }
      }

      var selectFrom = null;
      var selectTo = null;

      if (brackets) {
        brackets.sort(_range.Range.compareRangesUsingStarts);
        var open_1 = brackets[0],
            close_1 = brackets[1];
        selectFrom = selectBrackets ? open_1.getStartPosition() : open_1.getEndPosition();
        selectTo = selectBrackets ? close_1.getEndPosition() : close_1.getStartPosition();
      }

      if (selectFrom && selectTo) {
        newSelections.push(new _selection.Selection(selectFrom.lineNumber, selectFrom.column, selectTo.lineNumber, selectTo.column));
      }
    });

    if (newSelections.length > 0) {
      this._editor.setSelections(newSelections);

      this._editor.revealRange(newSelections[0]);
    }
  };

  BracketMatchingController.prototype._updateBrackets = function () {
    if (this._matchBrackets === 'never') {
      return;
    }

    this._recomputeBrackets();

    var newDecorations = [],
        newDecorationsLen = 0;

    for (var _i = 0, _a = this._lastBracketsData; _i < _a.length; _i++) {
      var bracketData = _a[_i];
      var brackets = bracketData.brackets;

      if (brackets) {
        newDecorations[newDecorationsLen++] = {
          range: brackets[0],
          options: bracketData.options
        };
        newDecorations[newDecorationsLen++] = {
          range: brackets[1],
          options: bracketData.options
        };
      }
    }

    this._decorations = this._editor.deltaDecorations(this._decorations, newDecorations);
  };

  BracketMatchingController.prototype._recomputeBrackets = function () {
    if (!this._editor.hasModel()) {
      // no model => no brackets!
      this._lastBracketsData = [];
      this._lastVersionId = 0;
      return;
    }

    var selections = this._editor.getSelections();

    if (selections.length > 100) {
      // no bracket matching for high numbers of selections
      this._lastBracketsData = [];
      this._lastVersionId = 0;
      return;
    }

    var model = this._editor.getModel();

    var versionId = model.getVersionId();
    var previousData = [];

    if (this._lastVersionId === versionId) {
      // use the previous data only if the model is at the same version id
      previousData = this._lastBracketsData;
    }

    var positions = [],
        positionsLen = 0;

    for (var i = 0, len = selections.length; i < len; i++) {
      var selection = selections[i];

      if (selection.isEmpty()) {
        // will bracket match a cursor only if the selection is collapsed
        positions[positionsLen++] = selection.getStartPosition();
      }
    } // sort positions for `previousData` cache hits


    if (positions.length > 1) {
      positions.sort(_position.Position.compare);
    }

    var newData = [],
        newDataLen = 0;
    var previousIndex = 0,
        previousLen = previousData.length;

    for (var i = 0, len = positions.length; i < len; i++) {
      var position = positions[i];

      while (previousIndex < previousLen && previousData[previousIndex].position.isBefore(position)) {
        previousIndex++;
      }

      if (previousIndex < previousLen && previousData[previousIndex].position.equals(position)) {
        newData[newDataLen++] = previousData[previousIndex];
      } else {
        var brackets = model.matchBracket(position);
        var options = BracketMatchingController._DECORATION_OPTIONS_WITH_OVERVIEW_RULER;

        if (!brackets && this._matchBrackets === 'always') {
          brackets = model.findEnclosingBrackets(position, 20
          /* give at most 20ms to compute */
          );
          options = BracketMatchingController._DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER;
        }

        newData[newDataLen++] = new BracketsData(position, brackets, options);
      }
    }

    this._lastBracketsData = newData;
    this._lastVersionId = versionId;
  };

  BracketMatchingController.ID = 'editor.contrib.bracketMatchingController';
  BracketMatchingController._DECORATION_OPTIONS_WITH_OVERVIEW_RULER = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    className: 'bracket-match',
    overviewRuler: {
      color: (0, _themeService.themeColorFromId)(overviewRulerBracketMatchForeground),
      position: _model.OverviewRulerLane.Center
    }
  });
  BracketMatchingController._DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    className: 'bracket-match'
  });
  return BracketMatchingController;
}(_lifecycle.Disposable);

exports.BracketMatchingController = BracketMatchingController;
(0, _editorExtensions.registerEditorContribution)(BracketMatchingController.ID, BracketMatchingController);
(0, _editorExtensions.registerEditorAction)(SelectToBracketAction);
(0, _editorExtensions.registerEditorAction)(JumpToBracketAction);
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var bracketMatchBackground = theme.getColor(_editorColorRegistry.editorBracketMatchBackground);

  if (bracketMatchBackground) {
    collector.addRule(".monaco-editor .bracket-match { background-color: " + bracketMatchBackground + "; }");
  }

  var bracketMatchBorder = theme.getColor(_editorColorRegistry.editorBracketMatchBorder);

  if (bracketMatchBorder) {
    collector.addRule(".monaco-editor .bracket-match { border: 1px solid " + bracketMatchBorder + "; }");
  }
}); // Go to menu

_actions.MenuRegistry.appendMenuItem(17
/* MenubarGoMenu */
, {
  group: '5_infile_nav',
  command: {
    id: 'editor.action.jumpToBracket',
    title: nls.localize({
      key: 'miGoToBracket',
      comment: ['&& denotes a mnemonic']
    }, "Go to &&Bracket")
  },
  order: 2
});
},{"./bracketMatching.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/bracketMatching/bracketMatching.css","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../common/model.js":"../node_modules/monaco-editor/esm/vs/editor/common/model.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../common/view/editorColorRegistry.js":"../node_modules/monaco-editor/esm/vs/editor/common/view/editorColorRegistry.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../platform/actions/common/actions.js":"../node_modules/monaco-editor/esm/vs/platform/actions/common/actions.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/moveCaretCommand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MoveCaretCommand = void 0;

var _range = require("../../common/core/range.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var MoveCaretCommand =
/** @class */
function () {
  function MoveCaretCommand(selection, isMovingLeft) {
    this._selection = selection;
    this._isMovingLeft = isMovingLeft;
    this._cutStartIndex = -1;
    this._cutEndIndex = -1;
    this._moved = false;
    this._selectionId = null;
  }

  MoveCaretCommand.prototype.getEditOperations = function (model, builder) {
    var s = this._selection;
    this._selectionId = builder.trackSelection(s);

    if (s.startLineNumber !== s.endLineNumber) {
      return;
    }

    if (this._isMovingLeft && s.startColumn === 0) {
      return;
    } else if (!this._isMovingLeft && s.endColumn === model.getLineMaxColumn(s.startLineNumber)) {
      return;
    }

    var lineNumber = s.selectionStartLineNumber;
    var lineContent = model.getLineContent(lineNumber);
    var left;
    var middle;
    var right;

    if (this._isMovingLeft) {
      left = lineContent.substring(0, s.startColumn - 2);
      middle = lineContent.substring(s.startColumn - 1, s.endColumn - 1);
      right = lineContent.substring(s.startColumn - 2, s.startColumn - 1) + lineContent.substring(s.endColumn - 1);
    } else {
      left = lineContent.substring(0, s.startColumn - 1) + lineContent.substring(s.endColumn - 1, s.endColumn);
      middle = lineContent.substring(s.startColumn - 1, s.endColumn - 1);
      right = lineContent.substring(s.endColumn);
    }

    var newLineContent = left + middle + right;
    builder.addEditOperation(new _range.Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber)), null);
    builder.addEditOperation(new _range.Range(lineNumber, 1, lineNumber, 1), newLineContent);
    this._cutStartIndex = s.startColumn + (this._isMovingLeft ? -1 : 1);
    this._cutEndIndex = this._cutStartIndex + s.endColumn - s.startColumn;
    this._moved = true;
  };

  MoveCaretCommand.prototype.computeCursorState = function (model, helper) {
    var result = helper.getTrackedSelection(this._selectionId);

    if (this._moved) {
      result = result.setStartPosition(result.startLineNumber, this._cutStartIndex);
      result = result.setEndPosition(result.startLineNumber, this._cutEndIndex);
    }

    return result;
  };

  return MoveCaretCommand;
}();

exports.MoveCaretCommand = MoveCaretCommand;
},{"../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/caretOperations.js":[function(require,module,exports) {
"use strict";

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _editorExtensions = require("../../browser/editorExtensions.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _moveCaretCommand = require("./moveCaretCommand.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var MoveCaretAction =
/** @class */
function (_super) {
  __extends(MoveCaretAction, _super);

  function MoveCaretAction(left, opts) {
    var _this = _super.call(this, opts) || this;

    _this.left = left;
    return _this;
  }

  MoveCaretAction.prototype.run = function (accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var commands = [];
    var selections = editor.getSelections();

    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {
      var selection = selections_1[_i];
      commands.push(new _moveCaretCommand.MoveCaretCommand(selection, this.left));
    }

    editor.pushUndoStop();
    editor.executeCommands(this.id, commands);
    editor.pushUndoStop();
  };

  return MoveCaretAction;
}(_editorExtensions.EditorAction);

var MoveCaretLeftAction =
/** @class */
function (_super) {
  __extends(MoveCaretLeftAction, _super);

  function MoveCaretLeftAction() {
    return _super.call(this, true, {
      id: 'editor.action.moveCarretLeftAction',
      label: nls.localize('caret.moveLeft', "Move Caret Left"),
      alias: 'Move Caret Left',
      precondition: _editorContextKeys.EditorContextKeys.writable
    }) || this;
  }

  return MoveCaretLeftAction;
}(MoveCaretAction);

var MoveCaretRightAction =
/** @class */
function (_super) {
  __extends(MoveCaretRightAction, _super);

  function MoveCaretRightAction() {
    return _super.call(this, false, {
      id: 'editor.action.moveCarretRightAction',
      label: nls.localize('caret.moveRight', "Move Caret Right"),
      alias: 'Move Caret Right',
      precondition: _editorContextKeys.EditorContextKeys.writable
    }) || this;
  }

  return MoveCaretRightAction;
}(MoveCaretAction);

(0, _editorExtensions.registerEditorAction)(MoveCaretLeftAction);
(0, _editorExtensions.registerEditorAction)(MoveCaretRightAction);
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","./moveCaretCommand.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/moveCaretCommand.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/transpose.js":[function(require,module,exports) {
"use strict";

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _editorExtensions = require("../../browser/editorExtensions.js");

var _replaceCommand = require("../../common/commands/replaceCommand.js");

var _range = require("../../common/core/range.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _cursorMoveOperations = require("../../common/controller/cursorMoveOperations.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var TransposeLettersAction =
/** @class */
function (_super) {
  __extends(TransposeLettersAction, _super);

  function TransposeLettersAction() {
    return _super.call(this, {
      id: 'editor.action.transposeLetters',
      label: nls.localize('transposeLetters.label', "Transpose Letters"),
      alias: 'Transpose Letters',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256
          /* WinCtrl */
          | 50
          /* KEY_T */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  TransposeLettersAction.prototype.run = function (accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var model = editor.getModel();
    var commands = [];
    var selections = editor.getSelections();

    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {
      var selection = selections_1[_i];

      if (!selection.isEmpty()) {
        continue;
      }

      var lineNumber = selection.startLineNumber;
      var column = selection.startColumn;
      var lastColumn = model.getLineMaxColumn(lineNumber);

      if (lineNumber === 1 && (column === 1 || column === 2 && lastColumn === 2)) {
        // at beginning of file, nothing to do
        continue;
      } // handle special case: when at end of line, transpose left two chars
      // otherwise, transpose left and right chars


      var endPosition = column === lastColumn ? selection.getPosition() : _cursorMoveOperations.MoveOperations.rightPosition(model, selection.getPosition().lineNumber, selection.getPosition().column);

      var middlePosition = _cursorMoveOperations.MoveOperations.leftPosition(model, endPosition.lineNumber, endPosition.column);

      var beginPosition = _cursorMoveOperations.MoveOperations.leftPosition(model, middlePosition.lineNumber, middlePosition.column);

      var leftChar = model.getValueInRange(_range.Range.fromPositions(beginPosition, middlePosition));
      var rightChar = model.getValueInRange(_range.Range.fromPositions(middlePosition, endPosition));

      var replaceRange = _range.Range.fromPositions(beginPosition, endPosition);

      commands.push(new _replaceCommand.ReplaceCommand(replaceRange, rightChar + leftChar));
    }

    if (commands.length > 0) {
      editor.pushUndoStop();
      editor.executeCommands(this.id, commands);
      editor.pushUndoStop();
    }
  };

  return TransposeLettersAction;
}(_editorExtensions.EditorAction);

(0, _editorExtensions.registerEditorAction)(TransposeLettersAction);
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/commands/replaceCommand.js":"../node_modules/monaco-editor/esm/vs/editor/common/commands/replaceCommand.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../common/controller/cursorMoveOperations.js":"../node_modules/monaco-editor/esm/vs/editor/common/controller/cursorMoveOperations.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/clipboard/clipboard.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/clipboard/clipboard.js":[function(require,module,exports) {
"use strict";

require("./clipboard.css");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var browser = _interopRequireWildcard(require("../../../base/browser/browser.js"));

var platform = _interopRequireWildcard(require("../../../base/common/platform.js"));

var _textAreaInput = require("../../browser/controller/textAreaInput.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _codeEditorService = require("../../browser/services/codeEditorService.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';
var supportsCut = platform.isNative || document.queryCommandSupported('cut');
var supportsCopy = platform.isNative || document.queryCommandSupported('copy'); // IE and Edge have trouble with setting html content in clipboard

var supportsCopyWithSyntaxHighlighting = supportsCopy && !browser.isEdgeOrIE; // Chrome incorrectly returns true for document.queryCommandSupported('paste')
// when the paste feature is available but the calling script has insufficient
// privileges to actually perform the action

var supportsPaste = platform.isNative || !browser.isChrome && document.queryCommandSupported('paste');

var ExecCommandAction =
/** @class */
function (_super) {
  __extends(ExecCommandAction, _super);

  function ExecCommandAction(browserCommand, opts) {
    var _this = _super.call(this, opts) || this;

    _this.browserCommand = browserCommand;
    return _this;
  }

  ExecCommandAction.prototype.runCommand = function (accessor, args) {
    var focusedEditor = accessor.get(_codeEditorService.ICodeEditorService).getFocusedCodeEditor(); // Only if editor text focus (i.e. not if editor has widget focus).

    if (focusedEditor && focusedEditor.hasTextFocus()) {
      focusedEditor.trigger('keyboard', this.id, args);
      return;
    }

    document.execCommand(this.browserCommand);
  };

  ExecCommandAction.prototype.run = function (accessor, editor) {
    editor.focus();
    document.execCommand(this.browserCommand);
  };

  return ExecCommandAction;
}(_editorExtensions.EditorAction);

var ExecCommandCutAction =
/** @class */
function (_super) {
  __extends(ExecCommandCutAction, _super);

  function ExecCommandCutAction() {
    var _this = this;

    var kbOpts = {
      kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
      primary: 2048
      /* CtrlCmd */
      | 54
      /* KEY_X */
      ,
      win: {
        primary: 2048
        /* CtrlCmd */
        | 54
        /* KEY_X */
        ,
        secondary: [1024
        /* Shift */
        | 20
        /* Delete */
        ]
      },
      weight: 100
      /* EditorContrib */

    }; // Do not bind cut keybindings in the browser,
    // since browsers do that for us and it avoids security prompts

    if (!platform.isNative) {
      kbOpts = undefined;
    }

    _this = _super.call(this, 'cut', {
      id: 'editor.action.clipboardCutAction',
      label: nls.localize('actions.clipboard.cutLabel', "Cut"),
      alias: 'Cut',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: kbOpts,
      contextMenuOpts: {
        group: CLIPBOARD_CONTEXT_MENU_GROUP,
        order: 1
      },
      menuOpts: {
        menuId: 15
        /* MenubarEditMenu */
        ,
        group: '2_ccp',
        title: nls.localize({
          key: 'miCut',
          comment: ['&& denotes a mnemonic']
        }, "Cu&&t"),
        order: 1
      }
    }) || this;
    return _this;
  }

  ExecCommandCutAction.prototype.run = function (accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var emptySelectionClipboard = editor.getOption(24
    /* emptySelectionClipboard */
    );

    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {
      return;
    }

    _super.prototype.run.call(this, accessor, editor);
  };

  return ExecCommandCutAction;
}(ExecCommandAction);

var ExecCommandCopyAction =
/** @class */
function (_super) {
  __extends(ExecCommandCopyAction, _super);

  function ExecCommandCopyAction() {
    var _this = this;

    var kbOpts = {
      kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
      primary: 2048
      /* CtrlCmd */
      | 33
      /* KEY_C */
      ,
      win: {
        primary: 2048
        /* CtrlCmd */
        | 33
        /* KEY_C */
        ,
        secondary: [2048
        /* CtrlCmd */
        | 19
        /* Insert */
        ]
      },
      weight: 100
      /* EditorContrib */

    }; // Do not bind copy keybindings in the browser,
    // since browsers do that for us and it avoids security prompts

    if (!platform.isNative) {
      kbOpts = undefined;
    }

    _this = _super.call(this, 'copy', {
      id: 'editor.action.clipboardCopyAction',
      label: nls.localize('actions.clipboard.copyLabel', "Copy"),
      alias: 'Copy',
      precondition: undefined,
      kbOpts: kbOpts,
      contextMenuOpts: {
        group: CLIPBOARD_CONTEXT_MENU_GROUP,
        order: 2
      },
      menuOpts: {
        menuId: 15
        /* MenubarEditMenu */
        ,
        group: '2_ccp',
        title: nls.localize({
          key: 'miCopy',
          comment: ['&& denotes a mnemonic']
        }, "&&Copy"),
        order: 2
      }
    }) || this;
    return _this;
  }

  ExecCommandCopyAction.prototype.run = function (accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var emptySelectionClipboard = editor.getOption(24
    /* emptySelectionClipboard */
    );

    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {
      return;
    }

    _super.prototype.run.call(this, accessor, editor);
  };

  return ExecCommandCopyAction;
}(ExecCommandAction);

var ExecCommandPasteAction =
/** @class */
function (_super) {
  __extends(ExecCommandPasteAction, _super);

  function ExecCommandPasteAction() {
    var _this = this;

    var kbOpts = {
      kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
      primary: 2048
      /* CtrlCmd */
      | 52
      /* KEY_V */
      ,
      win: {
        primary: 2048
        /* CtrlCmd */
        | 52
        /* KEY_V */
        ,
        secondary: [1024
        /* Shift */
        | 19
        /* Insert */
        ]
      },
      weight: 100
      /* EditorContrib */

    }; // Do not bind paste keybindings in the browser,
    // since browsers do that for us and it avoids security prompts

    if (!platform.isNative) {
      kbOpts = undefined;
    }

    _this = _super.call(this, 'paste', {
      id: 'editor.action.clipboardPasteAction',
      label: nls.localize('actions.clipboard.pasteLabel', "Paste"),
      alias: 'Paste',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: kbOpts,
      contextMenuOpts: {
        group: CLIPBOARD_CONTEXT_MENU_GROUP,
        order: 3
      },
      menuOpts: {
        menuId: 15
        /* MenubarEditMenu */
        ,
        group: '2_ccp',
        title: nls.localize({
          key: 'miPaste',
          comment: ['&& denotes a mnemonic']
        }, "&&Paste"),
        order: 3
      }
    }) || this;
    return _this;
  }

  return ExecCommandPasteAction;
}(ExecCommandAction);

var ExecCommandCopyWithSyntaxHighlightingAction =
/** @class */
function (_super) {
  __extends(ExecCommandCopyWithSyntaxHighlightingAction, _super);

  function ExecCommandCopyWithSyntaxHighlightingAction() {
    return _super.call(this, 'copy', {
      id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',
      label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', "Copy With Syntax Highlighting"),
      alias: 'Copy With Syntax Highlighting',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 0,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  ExecCommandCopyWithSyntaxHighlightingAction.prototype.run = function (accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var emptySelectionClipboard = editor.getOption(24
    /* emptySelectionClipboard */
    );

    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {
      return;
    }

    _textAreaInput.CopyOptions.forceCopyWithSyntaxHighlighting = true;

    _super.prototype.run.call(this, accessor, editor);

    _textAreaInput.CopyOptions.forceCopyWithSyntaxHighlighting = false;
  };

  return ExecCommandCopyWithSyntaxHighlightingAction;
}(ExecCommandAction);

if (supportsCut) {
  (0, _editorExtensions.registerEditorAction)(ExecCommandCutAction);
}

if (supportsCopy) {
  (0, _editorExtensions.registerEditorAction)(ExecCommandCopyAction);
}

if (supportsPaste) {
  (0, _editorExtensions.registerEditorAction)(ExecCommandPasteAction);
}

if (supportsCopyWithSyntaxHighlighting) {
  (0, _editorExtensions.registerEditorAction)(ExecCommandCopyWithSyntaxHighlightingAction);
}
},{"./clipboard.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/clipboard/clipboard.css","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/browser/browser.js":"../node_modules/monaco-editor/esm/vs/base/browser/browser.js","../../../base/common/platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js","../../browser/controller/textAreaInput.js":"../node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaInput.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../browser/services/codeEditorService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js"}],"../node_modules/monaco-editor/esm/vs/base/common/lazy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Lazy = void 0;

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var Lazy =
/** @class */
function () {
  function Lazy(executor) {
    this.executor = executor;
    this._didRun = false;
  }
  /**
   * Get the wrapped value.
   *
   * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only
   * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value
   */


  Lazy.prototype.getValue = function () {
    if (!this._didRun) {
      try {
        this._value = this.executor();
      } catch (err) {
        this._error = err;
      } finally {
        this._didRun = true;
      }
    }

    if (this._error) {
      throw this._error;
    }

    return this._value;
  };

  Object.defineProperty(Lazy.prototype, "rawValue", {
    /**
     * Get the wrapped value without forcing evaluation.
     */
    get: function () {
      return this._value;
    },
    enumerable: true,
    configurable: true
  });
  return Lazy;
}();

exports.Lazy = Lazy;
},{}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mayIncludeActionsOfKind = mayIncludeActionsOfKind;
exports.filtersAction = filtersAction;
exports.CodeActionCommandArgs = exports.CodeActionKind = void 0;

var _strings = require("../../../base/common/strings.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var CodeActionKind =
/** @class */
function () {
  function CodeActionKind(value) {
    this.value = value;
  }

  CodeActionKind.prototype.equals = function (other) {
    return this.value === other.value;
  };

  CodeActionKind.prototype.contains = function (other) {
    return this.equals(other) || this.value === '' || (0, _strings.startsWith)(other.value, this.value + CodeActionKind.sep);
  };

  CodeActionKind.prototype.intersects = function (other) {
    return this.contains(other) || other.contains(this);
  };

  CodeActionKind.prototype.append = function (part) {
    return new CodeActionKind(this.value + CodeActionKind.sep + part);
  };

  CodeActionKind.sep = '.';
  CodeActionKind.None = new CodeActionKind('@@none@@'); // Special code action that contains nothing

  CodeActionKind.Empty = new CodeActionKind('');
  CodeActionKind.QuickFix = new CodeActionKind('quickfix');
  CodeActionKind.Refactor = new CodeActionKind('refactor');
  CodeActionKind.Source = new CodeActionKind('source');
  CodeActionKind.SourceOrganizeImports = CodeActionKind.Source.append('organizeImports');
  CodeActionKind.SourceFixAll = CodeActionKind.Source.append('fixAll');
  return CodeActionKind;
}();

exports.CodeActionKind = CodeActionKind;

function mayIncludeActionsOfKind(filter, providedKind) {
  // A provided kind may be a subset or superset of our filtered kind.
  if (filter.include && !filter.include.intersects(providedKind)) {
    return false;
  } // Don't return source actions unless they are explicitly requested


  if (!filter.includeSourceActions && CodeActionKind.Source.contains(providedKind)) {
    return false;
  }

  return true;
}

function filtersAction(filter, action) {
  var actionKind = action.kind ? new CodeActionKind(action.kind) : undefined; // Filter out actions by kind

  if (filter.include) {
    if (!actionKind || !filter.include.contains(actionKind)) {
      return false;
    }
  }

  if (filter.excludes) {
    if (actionKind && filter.excludes.some(function (exclude) {
      // Excludes are overwritten by includes
      return exclude.contains(actionKind) && (!filter.include || !filter.include.contains(actionKind));
    })) {
      return false;
    }
  } // Don't return source actions unless they are explicitly requested


  if (!filter.includeSourceActions) {
    if (actionKind && CodeActionKind.Source.contains(actionKind)) {
      return false;
    }
  }

  if (filter.onlyIncludePreferredActions) {
    if (!action.isPreferred) {
      return false;
    }
  }

  return true;
}

var CodeActionCommandArgs =
/** @class */
function () {
  function CodeActionCommandArgs(kind, apply, preferred) {
    this.kind = kind;
    this.apply = apply;
    this.preferred = preferred;
  }

  CodeActionCommandArgs.fromUser = function (arg, defaults) {
    if (!arg || typeof arg !== 'object') {
      return new CodeActionCommandArgs(defaults.kind, defaults.apply, false);
    }

    return new CodeActionCommandArgs(CodeActionCommandArgs.getKindFromUser(arg, defaults.kind), CodeActionCommandArgs.getApplyFromUser(arg, defaults.apply), CodeActionCommandArgs.getPreferredUser(arg));
  };

  CodeActionCommandArgs.getApplyFromUser = function (arg, defaultAutoApply) {
    switch (typeof arg.apply === 'string' ? arg.apply.toLowerCase() : '') {
      case 'first':
        return "first"
        /* First */
        ;

      case 'never':
        return "never"
        /* Never */
        ;

      case 'ifsingle':
        return "ifSingle"
        /* IfSingle */
        ;

      default:
        return defaultAutoApply;
    }
  };

  CodeActionCommandArgs.getKindFromUser = function (arg, defaultKind) {
    return typeof arg.kind === 'string' ? new CodeActionKind(arg.kind) : defaultKind;
  };

  CodeActionCommandArgs.getPreferredUser = function (arg) {
    return typeof arg.preferred === 'boolean' ? arg.preferred : false;
  };

  return CodeActionCommandArgs;
}();

exports.CodeActionCommandArgs = CodeActionCommandArgs;
},{"../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeAction.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCodeActions = getCodeActions;
exports.fixAllCommandId = exports.organizeImportsCommandId = exports.sourceActionCommandId = exports.refactorCommandId = exports.codeActionCommandId = void 0;

var _arrays = require("../../../base/common/arrays.js");

var _cancellation = require("../../../base/common/cancellation.js");

var _errors = require("../../../base/common/errors.js");

var _uri = require("../../../base/common/uri.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _modes = require("../../common/modes.js");

var _modelService = require("../../common/services/modelService.js");

var _types = require("./types.js");

var _editorState = require("../../browser/core/editorState.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __spreadArrays = void 0 && (void 0).__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
};

var codeActionCommandId = 'editor.action.codeAction';
exports.codeActionCommandId = codeActionCommandId;
var refactorCommandId = 'editor.action.refactor';
exports.refactorCommandId = refactorCommandId;
var sourceActionCommandId = 'editor.action.sourceAction';
exports.sourceActionCommandId = sourceActionCommandId;
var organizeImportsCommandId = 'editor.action.organizeImports';
exports.organizeImportsCommandId = organizeImportsCommandId;
var fixAllCommandId = 'editor.action.fixAll';
exports.fixAllCommandId = fixAllCommandId;

var ManagedCodeActionSet =
/** @class */
function (_super) {
  __extends(ManagedCodeActionSet, _super);

  function ManagedCodeActionSet(actions, disposables) {
    var _this = _super.call(this) || this;

    _this._register(disposables);

    _this.allActions = (0, _arrays.mergeSort)(__spreadArrays(actions), ManagedCodeActionSet.codeActionsComparator);
    _this.validActions = _this.allActions.filter(function (action) {
      return !action.disabled;
    });
    return _this;
  }

  ManagedCodeActionSet.codeActionsComparator = function (a, b) {
    if ((0, _arrays.isNonEmptyArray)(a.diagnostics)) {
      if ((0, _arrays.isNonEmptyArray)(b.diagnostics)) {
        return a.diagnostics[0].message.localeCompare(b.diagnostics[0].message);
      } else {
        return -1;
      }
    } else if ((0, _arrays.isNonEmptyArray)(b.diagnostics)) {
      return 1;
    } else {
      return 0; // both have no diagnostics
    }
  };

  Object.defineProperty(ManagedCodeActionSet.prototype, "hasAutoFix", {
    get: function () {
      return this.validActions.some(function (fix) {
        return !!fix.kind && _types.CodeActionKind.QuickFix.contains(new _types.CodeActionKind(fix.kind)) && !!fix.isPreferred;
      });
    },
    enumerable: true,
    configurable: true
  });
  return ManagedCodeActionSet;
}(_lifecycle.Disposable);

function getCodeActions(model, rangeOrSelection, trigger, token) {
  var _this = this;

  var _a;

  var filter = trigger.filter || {};
  var codeActionContext = {
    only: (_a = filter.include) === null || _a === void 0 ? void 0 : _a.value,
    trigger: trigger.type === 'manual' ? 2
    /* Manual */
    : 1
    /* Automatic */

  };
  var cts = new _editorState.TextModelCancellationTokenSource(model, token);
  var providers = getCodeActionProviders(model, filter);
  var disposables = new _lifecycle.DisposableStore();
  var promises = providers.map(function (provider) {
    return __awaiter(_this, void 0, void 0, function () {
      var providedCodeActions, err_1;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2,, 3]);

            return [4
            /*yield*/
            , provider.provideCodeActions(model, rangeOrSelection, codeActionContext, cts.token)];

          case 1:
            providedCodeActions = _a.sent();

            if (cts.token.isCancellationRequested || !providedCodeActions) {
              return [2
              /*return*/
              , []];
            }

            disposables.add(providedCodeActions);
            return [2
            /*return*/
            , providedCodeActions.actions.filter(function (action) {
              return action && (0, _types.filtersAction)(filter, action);
            })];

          case 2:
            err_1 = _a.sent();

            if ((0, _errors.isPromiseCanceledError)(err_1)) {
              throw err_1;
            }

            (0, _errors.onUnexpectedExternalError)(err_1);
            return [2
            /*return*/
            , []];

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  });

  var listener = _modes.CodeActionProviderRegistry.onDidChange(function () {
    var newProviders = _modes.CodeActionProviderRegistry.all(model);

    if (!(0, _arrays.equals)(newProviders, providers)) {
      cts.cancel();
    }
  });

  return Promise.all(promises).then(_arrays.flatten).then(function (actions) {
    return new ManagedCodeActionSet(actions, disposables);
  }).finally(function () {
    listener.dispose();
    cts.dispose();
  });
}

function getCodeActionProviders(model, filter) {
  return _modes.CodeActionProviderRegistry.all(model) // Don't include providers that we know will not return code actions of interest
  .filter(function (provider) {
    if (!provider.providedCodeActionKinds) {
      // We don't know what type of actions this provider will return.
      return true;
    }

    return provider.providedCodeActionKinds.some(function (kind) {
      return (0, _types.mayIncludeActionsOfKind)(filter, new _types.CodeActionKind(kind));
    });
  });
}

(0, _editorExtensions.registerLanguageCommand)('_executeCodeActionProvider', function (accessor, args) {
  return __awaiter(this, void 0, void 0, function () {
    var resource, rangeOrSelection, kind, model, validatedRangeOrSelection, codeActionSet;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          resource = args.resource, rangeOrSelection = args.rangeOrSelection, kind = args.kind;

          if (!(resource instanceof _uri.URI)) {
            throw (0, _errors.illegalArgument)();
          }

          model = accessor.get(_modelService.IModelService).getModel(resource);

          if (!model) {
            throw (0, _errors.illegalArgument)();
          }

          validatedRangeOrSelection = _selection.Selection.isISelection(rangeOrSelection) ? _selection.Selection.liftSelection(rangeOrSelection) : _range.Range.isIRange(rangeOrSelection) ? model.validateRange(rangeOrSelection) : undefined;

          if (!validatedRangeOrSelection) {
            throw (0, _errors.illegalArgument)();
          }

          return [4
          /*yield*/
          , getCodeActions(model, validatedRangeOrSelection, {
            type: 'manual',
            filter: {
              includeSourceActions: true,
              include: kind && kind.value ? new _types.CodeActionKind(kind.value) : undefined
            }
          }, _cancellation.CancellationToken.None)];

        case 1:
          codeActionSet = _a.sent();
          setTimeout(function () {
            return codeActionSet.dispose();
          }, 100);
          return [2
          /*return*/
          , codeActionSet.validActions];
      }
    });
  });
});
},{"../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../common/services/modelService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js","./types.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/types.js","../../browser/core/editorState.js":"../node_modules/monaco-editor/esm/vs/editor/browser/core/editorState.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/message/messageController.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/message/messageController.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageController = void 0;

require("./messageController.css");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _async = require("../../../base/common/async.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _aria = require("../../../base/browser/ui/aria/aria.js");

var _range = require("../../common/core/range.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var MessageController =
/** @class */
function (_super) {
  __extends(MessageController, _super);

  function MessageController(editor, contextKeyService) {
    var _this = _super.call(this) || this;

    _this.closeTimeout = 3000; // close after 3s

    _this._messageWidget = _this._register(new _lifecycle.MutableDisposable());
    _this._messageListeners = _this._register(new _lifecycle.DisposableStore());
    _this._editor = editor;
    _this._visible = MessageController.MESSAGE_VISIBLE.bindTo(contextKeyService);

    _this._register(_this._editor.onDidAttemptReadOnlyEdit(function () {
      return _this._onDidAttemptReadOnlyEdit();
    }));

    return _this;
  }

  MessageController.get = function (editor) {
    return editor.getContribution(MessageController.ID);
  };

  MessageController.prototype.dispose = function () {
    _super.prototype.dispose.call(this);

    this._visible.reset();
  };

  MessageController.prototype.showMessage = function (message, position) {
    var _this = this;

    (0, _aria.alert)(message);

    this._visible.set(true);

    this._messageWidget.clear();

    this._messageListeners.clear();

    this._messageWidget.value = new MessageWidget(this._editor, position, message); // close on blur, cursor, model change, dispose

    this._messageListeners.add(this._editor.onDidBlurEditorText(function () {
      return _this.closeMessage();
    }));

    this._messageListeners.add(this._editor.onDidChangeCursorPosition(function () {
      return _this.closeMessage();
    }));

    this._messageListeners.add(this._editor.onDidDispose(function () {
      return _this.closeMessage();
    }));

    this._messageListeners.add(this._editor.onDidChangeModel(function () {
      return _this.closeMessage();
    }));

    this._messageListeners.add(new _async.TimeoutTimer(function () {
      return _this.closeMessage();
    }, this.closeTimeout)); // close on mouse move


    var bounds;

    this._messageListeners.add(this._editor.onMouseMove(function (e) {
      // outside the text area
      if (!e.target.position) {
        return;
      }

      if (!bounds) {
        // define bounding box around position and first mouse occurance
        bounds = new _range.Range(position.lineNumber - 3, 1, e.target.position.lineNumber + 3, 1);
      } else if (!bounds.containsPosition(e.target.position)) {
        // check if position is still in bounds
        _this.closeMessage();
      }
    }));
  };

  MessageController.prototype.closeMessage = function () {
    this._visible.reset();

    this._messageListeners.clear();

    if (this._messageWidget.value) {
      this._messageListeners.add(MessageWidget.fadeOut(this._messageWidget.value));
    }
  };

  MessageController.prototype._onDidAttemptReadOnlyEdit = function () {
    if (this._editor.hasModel()) {
      this.showMessage(nls.localize('editor.readonly', "Cannot edit in read-only editor"), this._editor.getPosition());
    }
  };

  MessageController.ID = 'editor.contrib.messageController';
  MessageController.MESSAGE_VISIBLE = new _contextkey.RawContextKey('messageVisible', false);
  MessageController = __decorate([__param(1, _contextkey.IContextKeyService)], MessageController);
  return MessageController;
}(_lifecycle.Disposable);

exports.MessageController = MessageController;

var MessageCommand = _editorExtensions.EditorCommand.bindToContribution(MessageController.get);

(0, _editorExtensions.registerEditorCommand)(new MessageCommand({
  id: 'leaveEditorMessage',
  precondition: MessageController.MESSAGE_VISIBLE,
  handler: function (c) {
    return c.closeMessage();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 30,
    primary: 9
    /* Escape */

  }
}));

var MessageWidget =
/** @class */
function () {
  function MessageWidget(editor, _a, text) {
    var lineNumber = _a.lineNumber,
        column = _a.column; // Editor.IContentWidget.allowEditorOverflow

    this.allowEditorOverflow = true;
    this.suppressMouseDown = false;
    this._editor = editor;

    this._editor.revealLinesInCenterIfOutsideViewport(lineNumber, lineNumber, 0
    /* Smooth */
    );

    this._position = {
      lineNumber: lineNumber,
      column: column - 1
    };
    this._domNode = document.createElement('div');

    this._domNode.classList.add('monaco-editor-overlaymessage');

    var message = document.createElement('div');
    message.classList.add('message');
    message.textContent = text;

    this._domNode.appendChild(message);

    var anchor = document.createElement('div');
    anchor.classList.add('anchor');

    this._domNode.appendChild(anchor);

    this._editor.addContentWidget(this);

    this._domNode.classList.add('fadeIn');
  }

  MessageWidget.fadeOut = function (messageWidget) {
    var handle;

    var dispose = function () {
      messageWidget.dispose();
      clearTimeout(handle);
      messageWidget.getDomNode().removeEventListener('animationend', dispose);
    };

    handle = setTimeout(dispose, 110);
    messageWidget.getDomNode().addEventListener('animationend', dispose);
    messageWidget.getDomNode().classList.add('fadeOut');
    return {
      dispose: dispose
    };
  };

  MessageWidget.prototype.dispose = function () {
    this._editor.removeContentWidget(this);
  };

  MessageWidget.prototype.getId = function () {
    return 'messageoverlay';
  };

  MessageWidget.prototype.getDomNode = function () {
    return this._domNode;
  };

  MessageWidget.prototype.getPosition = function () {
    return {
      position: this._position,
      preference: [1
      /* ABOVE */
      , 2
      /* BELOW */
      ]
    };
  };

  return MessageWidget;
}();

(0, _editorExtensions.registerEditorContribution)(MessageController.ID, MessageController);
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var border = theme.getColor(_colorRegistry.inputValidationInfoBorder);

  if (border) {
    var borderWidth = theme.type === _themeService.HIGH_CONTRAST ? 2 : 1;
    collector.addRule(".monaco-editor .monaco-editor-overlaymessage .anchor { border-top-color: " + border + "; }");
    collector.addRule(".monaco-editor .monaco-editor-overlaymessage .message { border: " + borderWidth + "px solid " + border + "; }");
  }

  var background = theme.getColor(_colorRegistry.inputValidationInfoBackground);

  if (background) {
    collector.addRule(".monaco-editor .monaco-editor-overlaymessage .message { background-color: " + background + "; }");
  }

  var foreground = theme.getColor(_colorRegistry.inputValidationInfoForeground);

  if (foreground) {
    collector.addRule(".monaco-editor .monaco-editor-overlaymessage .message { color: " + foreground + "; }");
  }
});
},{"./messageController.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/message/messageController.css","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/browser/ui/aria/aria.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeActionMenu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeActionKeybindingResolver = exports.CodeActionMenu = void 0;

var _dom = require("../../../base/browser/dom.js");

var _actions = require("../../../base/common/actions.js");

var _errors = require("../../../base/common/errors.js");

var _lazy = require("../../../base/common/lazy.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _position = require("../../common/core/position.js");

var _codeAction = require("./codeAction.js");

var _types = require("./types.js");

var _contextView = require("../../../platform/contextview/browser/contextView.js");

var _keybinding = require("../../../platform/keybinding/common/keybinding.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var CodeActionAction =
/** @class */
function (_super) {
  __extends(CodeActionAction, _super);

  function CodeActionAction(action, callback) {
    var _this = _super.call(this, action.command ? action.command.id : action.title, action.title, undefined, !action.disabled, callback) || this;

    _this.action = action;
    return _this;
  }

  return CodeActionAction;
}(_actions.Action);

var CodeActionMenu =
/** @class */
function (_super) {
  __extends(CodeActionMenu, _super);

  function CodeActionMenu(_editor, _delegate, _contextMenuService, keybindingService) {
    var _this = _super.call(this) || this;

    _this._editor = _editor;
    _this._delegate = _delegate;
    _this._contextMenuService = _contextMenuService;
    _this._visible = false;
    _this._showingActions = _this._register(new _lifecycle.MutableDisposable());
    _this._keybindingResolver = new CodeActionKeybindingResolver({
      getKeybindings: function () {
        return keybindingService.getKeybindings();
      }
    });
    return _this;
  }

  Object.defineProperty(CodeActionMenu.prototype, "isVisible", {
    get: function () {
      return this._visible;
    },
    enumerable: true,
    configurable: true
  });

  CodeActionMenu.prototype.show = function (codeActions, at, options) {
    return __awaiter(this, void 0, void 0, function () {
      var actionsToShow, menuActions, anchor, resolver;

      var _this = this;

      return __generator(this, function (_a) {
        actionsToShow = options.includeDisabledActions ? codeActions.allActions : codeActions.validActions;

        if (!actionsToShow.length) {
          this._visible = false;
          return [2
          /*return*/
          ];
        }

        if (!this._editor.getDomNode()) {
          // cancel when editor went off-dom
          this._visible = false;
          throw (0, _errors.canceled)();
        }

        this._visible = true;
        this._showingActions.value = codeActions;
        menuActions = actionsToShow.map(function (action) {
          return new CodeActionAction(action, function () {
            return _this._delegate.onSelectCodeAction(action);
          });
        });
        anchor = _position.Position.isIPosition(at) ? this._toCoords(at) : at || {
          x: 0,
          y: 0
        };
        resolver = this._keybindingResolver.getResolver();

        this._contextMenuService.showContextMenu({
          getAnchor: function () {
            return anchor;
          },
          getActions: function () {
            return menuActions;
          },
          onHide: function () {
            _this._visible = false;

            _this._editor.focus();
          },
          autoSelectFirstItem: true,
          getKeyBinding: function (action) {
            return action instanceof CodeActionAction ? resolver(action.action) : undefined;
          }
        });

        return [2
        /*return*/
        ];
      });
    });
  };

  CodeActionMenu.prototype._toCoords = function (position) {
    if (!this._editor.hasModel()) {
      return {
        x: 0,
        y: 0
      };
    }

    this._editor.revealPosition(position, 1
    /* Immediate */
    );

    this._editor.render(); // Translate to absolute editor position


    var cursorCoords = this._editor.getScrolledVisiblePosition(position);

    var editorCoords = (0, _dom.getDomNodePagePosition)(this._editor.getDomNode());
    var x = editorCoords.left + cursorCoords.left;
    var y = editorCoords.top + cursorCoords.top + cursorCoords.height;
    return {
      x: x,
      y: y
    };
  };

  CodeActionMenu = __decorate([__param(2, _contextView.IContextMenuService), __param(3, _keybinding.IKeybindingService)], CodeActionMenu);
  return CodeActionMenu;
}(_lifecycle.Disposable);

exports.CodeActionMenu = CodeActionMenu;

var CodeActionKeybindingResolver =
/** @class */
function () {
  function CodeActionKeybindingResolver(_keybindingProvider) {
    this._keybindingProvider = _keybindingProvider;
  }

  CodeActionKeybindingResolver.prototype.getResolver = function () {
    var _this = this; // Lazy since we may not actually ever read the value


    var allCodeActionBindings = new _lazy.Lazy(function () {
      return _this._keybindingProvider.getKeybindings().filter(function (item) {
        return CodeActionKeybindingResolver.codeActionCommands.indexOf(item.command) >= 0;
      }).filter(function (item) {
        return item.resolvedKeybinding;
      }).map(function (item) {
        // Special case these commands since they come built-in with VS Code and don't use 'commandArgs'
        var commandArgs = item.commandArgs;

        if (item.command === _codeAction.organizeImportsCommandId) {
          commandArgs = {
            kind: _types.CodeActionKind.SourceOrganizeImports.value
          };
        } else if (item.command === _codeAction.fixAllCommandId) {
          commandArgs = {
            kind: _types.CodeActionKind.SourceFixAll.value
          };
        }

        return __assign({
          resolvedKeybinding: item.resolvedKeybinding
        }, _types.CodeActionCommandArgs.fromUser(commandArgs, {
          kind: _types.CodeActionKind.None,
          apply: "never"
          /* Never */

        }));
      });
    });
    return function (action) {
      var _a;

      if (action.kind) {
        var binding = _this.bestKeybindingForCodeAction(action, allCodeActionBindings.getValue());

        return (_a = binding) === null || _a === void 0 ? void 0 : _a.resolvedKeybinding;
      }

      return undefined;
    };
  };

  CodeActionKeybindingResolver.prototype.bestKeybindingForCodeAction = function (action, candidates) {
    if (!action.kind) {
      return undefined;
    }

    var kind = new _types.CodeActionKind(action.kind);
    return candidates.filter(function (candidate) {
      return candidate.kind.contains(kind);
    }).filter(function (candidate) {
      if (candidate.preferred) {
        // If the candidate keybinding only applies to preferred actions, the this action must also be preferred
        return action.isPreferred;
      }

      return true;
    }).reduceRight(function (currentBest, candidate) {
      if (!currentBest) {
        return candidate;
      } // Select the more specific binding


      return currentBest.kind.contains(candidate.kind) ? candidate : currentBest;
    }, undefined);
  };

  CodeActionKeybindingResolver.codeActionCommands = [_codeAction.refactorCommandId, _codeAction.codeActionCommandId, _codeAction.sourceActionCommandId, _codeAction.organizeImportsCommandId, _codeAction.fixAllCommandId];
  return CodeActionKeybindingResolver;
}();

exports.CodeActionKeybindingResolver = CodeActionKeybindingResolver;
},{"../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/common/actions.js":"../node_modules/monaco-editor/esm/vs/base/common/actions.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/lazy.js":"../node_modules/monaco-editor/esm/vs/base/common/lazy.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","./codeAction.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeAction.js","./types.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/types.js","../../../platform/contextview/browser/contextView.js":"../node_modules/monaco-editor/esm/vs/platform/contextview/browser/contextView.js","../../../platform/keybinding/common/keybinding.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/lightBulbWidget.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/lightBulbWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LightBulbWidget = void 0;

var dom = _interopRequireWildcard(require("../../../base/browser/dom.js"));

var _globalMouseMoveMonitor = require("../../../base/browser/globalMouseMoveMonitor.js");

var _event = require("../../../base/common/event.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

require("./lightBulbWidget.css");

var _textModel = require("../../common/model/textModel.js");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _keybinding = require("../../../platform/keybinding/common/keybinding.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _touch = require("../../../base/browser/touch.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var LightBulbState;

(function (LightBulbState) {
  LightBulbState.Hidden = {
    type: 0
    /* Hidden */

  };

  var Showing =
  /** @class */
  function () {
    function Showing(actions, editorPosition, widgetPosition) {
      this.actions = actions;
      this.editorPosition = editorPosition;
      this.widgetPosition = widgetPosition;
      this.type = 1
      /* Showing */
      ;
    }

    return Showing;
  }();

  LightBulbState.Showing = Showing;
})(LightBulbState || (LightBulbState = {}));

var LightBulbWidget =
/** @class */
function (_super) {
  __extends(LightBulbWidget, _super);

  function LightBulbWidget(_editor, _quickFixActionId, _preferredFixActionId, _keybindingService) {
    var _this = _super.call(this) || this;

    _this._editor = _editor;
    _this._quickFixActionId = _quickFixActionId;
    _this._preferredFixActionId = _preferredFixActionId;
    _this._keybindingService = _keybindingService;
    _this._onClick = _this._register(new _event.Emitter());
    _this.onClick = _this._onClick.event;
    _this._state = LightBulbState.Hidden;
    _this._domNode = document.createElement('div');
    _this._domNode.className = 'codicon codicon-lightbulb';

    _this._editor.addContentWidget(_this);

    _this._register(_this._editor.onDidChangeModelContent(function (_) {
      // cancel when the line in question has been removed
      var editorModel = _this._editor.getModel();

      if (_this.state.type !== 1
      /* Showing */
      || !editorModel || _this.state.editorPosition.lineNumber >= editorModel.getLineCount()) {
        _this.hide();
      }
    }));

    _touch.Gesture.ignoreTarget(_this._domNode);

    _this._register(dom.addStandardDisposableGenericMouseDownListner(_this._domNode, function (e) {
      if (_this.state.type !== 1
      /* Showing */
      ) {
          return;
        } // Make sure that focus / cursor location is not lost when clicking widget icon


      _this._editor.focus();

      e.preventDefault(); // a bit of extra work to make sure the menu
      // doesn't cover the line-text

      var _a = dom.getDomNodePagePosition(_this._domNode),
          top = _a.top,
          height = _a.height;

      var lineHeight = _this._editor.getOption(47
      /* lineHeight */
      );

      var pad = Math.floor(lineHeight / 3);

      if (_this.state.widgetPosition.position !== null && _this.state.widgetPosition.position.lineNumber < _this.state.editorPosition.lineNumber) {
        pad += lineHeight;
      }

      _this._onClick.fire({
        x: e.posx,
        y: top + height + pad,
        actions: _this.state.actions
      });
    }));

    _this._register(dom.addDisposableListener(_this._domNode, 'mouseenter', function (e) {
      if ((e.buttons & 1) !== 1) {
        return;
      } // mouse enters lightbulb while the primary/left button
      // is being pressed -> hide the lightbulb and block future
      // showings until mouse is released


      _this.hide();

      var monitor = new _globalMouseMoveMonitor.GlobalMouseMoveMonitor();
      monitor.startMonitoring(_globalMouseMoveMonitor.standardMouseMoveMerger, function () {}, function () {
        monitor.dispose();
      });
    }));

    _this._register(_this._editor.onDidChangeConfiguration(function (e) {
      // hide when told to do so
      if (e.hasChanged(45
      /* lightbulb */
      ) && !_this._editor.getOption(45
      /* lightbulb */
      ).enabled) {
        _this.hide();
      }
    }));

    _this._updateLightBulbTitle();

    _this._register(_this._keybindingService.onDidUpdateKeybindings(_this._updateLightBulbTitle, _this));

    return _this;
  }

  LightBulbWidget.prototype.dispose = function () {
    _super.prototype.dispose.call(this);

    this._editor.removeContentWidget(this);
  };

  LightBulbWidget.prototype.getId = function () {
    return 'LightBulbWidget';
  };

  LightBulbWidget.prototype.getDomNode = function () {
    return this._domNode;
  };

  LightBulbWidget.prototype.getPosition = function () {
    return this._state.type === 1
    /* Showing */
    ? this._state.widgetPosition : null;
  };

  LightBulbWidget.prototype.update = function (actions, atPosition) {
    var _this = this;

    if (actions.validActions.length <= 0) {
      return this.hide();
    }

    var options = this._editor.getOptions();

    if (!options.get(45
    /* lightbulb */
    ).enabled) {
      return this.hide();
    }

    var lineNumber = atPosition.lineNumber,
        column = atPosition.column;

    var model = this._editor.getModel();

    if (!model) {
      return this.hide();
    }

    var tabSize = model.getOptions().tabSize;
    var fontInfo = options.get(32
    /* fontInfo */
    );
    var lineContent = model.getLineContent(lineNumber);

    var indent = _textModel.TextModel.computeIndentLevel(lineContent, tabSize);

    var lineHasSpace = fontInfo.spaceWidth * indent > 22;

    var isFolded = function (lineNumber) {
      return lineNumber > 2 && _this._editor.getTopForLineNumber(lineNumber) === _this._editor.getTopForLineNumber(lineNumber - 1);
    };

    var effectiveLineNumber = lineNumber;

    if (!lineHasSpace) {
      if (lineNumber > 1 && !isFolded(lineNumber - 1)) {
        effectiveLineNumber -= 1;
      } else if (!isFolded(lineNumber + 1)) {
        effectiveLineNumber += 1;
      } else if (column * fontInfo.spaceWidth < 22) {
        // cannot show lightbulb above/below and showing
        // it inline would overlay the cursor...
        return this.hide();
      }
    }

    this.state = new LightBulbState.Showing(actions, atPosition, {
      position: {
        lineNumber: effectiveLineNumber,
        column: 1
      },
      preference: LightBulbWidget._posPref
    });
    dom.toggleClass(this._domNode, 'codicon-lightbulb-autofix', actions.hasAutoFix);

    this._editor.layoutContentWidget(this);
  };

  LightBulbWidget.prototype.hide = function () {
    this.state = LightBulbState.Hidden;

    this._editor.layoutContentWidget(this);
  };

  Object.defineProperty(LightBulbWidget.prototype, "state", {
    get: function () {
      return this._state;
    },
    set: function (value) {
      this._state = value;

      this._updateLightBulbTitle();
    },
    enumerable: true,
    configurable: true
  });

  LightBulbWidget.prototype._updateLightBulbTitle = function () {
    if (this.state.type === 1
    /* Showing */
    && this.state.actions.hasAutoFix) {
      var preferredKb = this._keybindingService.lookupKeybinding(this._preferredFixActionId);

      if (preferredKb) {
        this.title = nls.localize('prefferedQuickFixWithKb', "Show Fixes. Preferred Fix Available ({0})", preferredKb.getLabel());
        return;
      }
    }

    var kb = this._keybindingService.lookupKeybinding(this._quickFixActionId);

    if (kb) {
      this.title = nls.localize('quickFixWithKb', "Show Fixes ({0})", kb.getLabel());
    } else {
      this.title = nls.localize('quickFix', "Show Fixes");
    }
  };

  Object.defineProperty(LightBulbWidget.prototype, "title", {
    set: function (value) {
      this._domNode.title = value;
    },
    enumerable: true,
    configurable: true
  });
  LightBulbWidget._posPref = [0
  /* EXACT */
  ];
  LightBulbWidget = __decorate([__param(3, _keybinding.IKeybindingService)], LightBulbWidget);
  return LightBulbWidget;
}(_lifecycle.Disposable);

exports.LightBulbWidget = LightBulbWidget;
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  // Lightbulb Icon
  var editorLightBulbForegroundColor = theme.getColor(_colorRegistry.editorLightBulbForeground);

  if (editorLightBulbForegroundColor) {
    collector.addRule("\n\t\t.monaco-editor .contentWidgets .codicon-lightbulb,\n\t\t.monaco-workbench .markers-panel-container .codicon-lightbulb {\n\t\t\tcolor: " + editorLightBulbForegroundColor + ";\n\t\t}");
  } // Lightbulb Auto Fix Icon


  var editorLightBulbAutoFixForegroundColor = theme.getColor(_colorRegistry.editorLightBulbAutoFixForeground);

  if (editorLightBulbAutoFixForegroundColor) {
    collector.addRule("\n\t\t.monaco-editor .contentWidgets .codicon-lightbulb-autofix,\n\t\t.monaco-workbench .markers-panel-container .codicon-lightbulb-autofix {\n\t\t\tcolor: " + editorLightBulbAutoFixForegroundColor + ";\n\t\t}");
  }
});
},{"../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/browser/globalMouseMoveMonitor.js":"../node_modules/monaco-editor/esm/vs/base/browser/globalMouseMoveMonitor.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","./lightBulbWidget.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/lightBulbWidget.css","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../platform/keybinding/common/keybinding.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../base/browser/touch.js":"../node_modules/monaco-editor/esm/vs/base/browser/touch.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeActionUi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeActionUi = void 0;

var _arrays = require("../../../base/common/arrays.js");

var _errors = require("../../../base/common/errors.js");

var _lazy = require("../../../base/common/lazy.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _messageController = require("../message/messageController.js");

var _codeActionMenu = require("./codeActionMenu.js");

var _lightBulbWidget = require("./lightBulbWidget.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var CodeActionUi =
/** @class */
function (_super) {
  __extends(CodeActionUi, _super);

  function CodeActionUi(_editor, quickFixActionId, preferredFixActionId, delegate, instantiationService) {
    var _this = _super.call(this) || this;

    _this._editor = _editor;
    _this.delegate = delegate;
    _this._activeCodeActions = _this._register(new _lifecycle.MutableDisposable());
    _this._codeActionWidget = new _lazy.Lazy(function () {
      return _this._register(instantiationService.createInstance(_codeActionMenu.CodeActionMenu, _this._editor, {
        onSelectCodeAction: function (action) {
          return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
              this.delegate.applyCodeAction(action,
              /* retrigger */
              true);
              return [2
              /*return*/
              ];
            });
          });
        }
      }));
    });
    _this._lightBulbWidget = new _lazy.Lazy(function () {
      var widget = _this._register(instantiationService.createInstance(_lightBulbWidget.LightBulbWidget, _this._editor, quickFixActionId, preferredFixActionId));

      _this._register(widget.onClick(function (e) {
        return _this.showCodeActionList(e.actions, e, {
          includeDisabledActions: false
        });
      }));

      return widget;
    });
    return _this;
  }

  CodeActionUi.prototype.update = function (newState) {
    var _a, _b, _c;

    return __awaiter(this, void 0, void 0, function () {
      var actions, e_1, validActionToApply, invalidAction, includeDisabledActions;
      return __generator(this, function (_d) {
        switch (_d.label) {
          case 0:
            if (newState.type !== 1
            /* Triggered */
            ) {
                (_a = this._lightBulbWidget.rawValue) === null || _a === void 0 ? void 0 : _a.hide();
                return [2
                /*return*/
                ];
              }

            _d.label = 1;

          case 1:
            _d.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , newState.actions];

          case 2:
            actions = _d.sent();
            return [3
            /*break*/
            , 4];

          case 3:
            e_1 = _d.sent();
            (0, _errors.onUnexpectedError)(e_1);
            return [2
            /*return*/
            ];

          case 4:
            this._lightBulbWidget.getValue().update(actions, newState.position);

            if (!(newState.trigger.type === 'manual')) return [3
            /*break*/
            , 11];
            if (!((_b = newState.trigger.filter) === null || _b === void 0 ? void 0 : _b.include)) return [3
            /*break*/
            , 10];
            validActionToApply = this.tryGetValidActionToApply(newState.trigger, actions);
            if (!validActionToApply) return [3
            /*break*/
            , 9];
            _d.label = 5;

          case 5:
            _d.trys.push([5,, 7, 8]);

            return [4
            /*yield*/
            , this.delegate.applyCodeAction(validActionToApply, false)];

          case 6:
            _d.sent();

            return [3
            /*break*/
            , 8];

          case 7:
            actions.dispose();
            return [7
            /*endfinally*/
            ];

          case 8:
            return [2
            /*return*/
            ];

          case 9:
            // Check to see if there is an action that we would have applied were it not invalid
            if (newState.trigger.context) {
              invalidAction = this.getInvalidActionThatWouldHaveBeenApplied(newState.trigger, actions);

              if (invalidAction && invalidAction.disabled) {
                _messageController.MessageController.get(this._editor).showMessage(invalidAction.disabled, newState.trigger.context.position);

                actions.dispose();
                return [2
                /*return*/
                ];
              }
            }

            _d.label = 10;

          case 10:
            includeDisabledActions = !!((_c = newState.trigger.filter) === null || _c === void 0 ? void 0 : _c.include);

            if (newState.trigger.context) {
              if (!actions.allActions.length || !includeDisabledActions && !actions.validActions.length) {
                _messageController.MessageController.get(this._editor).showMessage(newState.trigger.context.notAvailableMessage, newState.trigger.context.position);

                this._activeCodeActions.value = actions;
                actions.dispose();
                return [2
                /*return*/
                ];
              }
            }

            this._activeCodeActions.value = actions;

            this._codeActionWidget.getValue().show(actions, newState.position, {
              includeDisabledActions: includeDisabledActions
            });

            return [3
            /*break*/
            , 12];

          case 11:
            // auto magically triggered
            if (this._codeActionWidget.getValue().isVisible) {
              // TODO: Figure out if we should update the showing menu?
              actions.dispose();
            } else {
              this._activeCodeActions.value = actions;
            }

            _d.label = 12;

          case 12:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  CodeActionUi.prototype.getInvalidActionThatWouldHaveBeenApplied = function (trigger, actions) {
    if (!actions.allActions.length) {
      return undefined;
    }

    if (trigger.autoApply === "first"
    /* First */
    && actions.validActions.length === 0 || trigger.autoApply === "ifSingle"
    /* IfSingle */
    && actions.allActions.length === 1) {
      return (0, _arrays.find)(actions.allActions, function (action) {
        return action.disabled;
      });
    }

    return undefined;
  };

  CodeActionUi.prototype.tryGetValidActionToApply = function (trigger, actions) {
    if (!actions.validActions.length) {
      return undefined;
    }

    if (trigger.autoApply === "first"
    /* First */
    && actions.validActions.length > 0 || trigger.autoApply === "ifSingle"
    /* IfSingle */
    && actions.validActions.length === 1) {
      return actions.validActions[0];
    }

    return undefined;
  };

  CodeActionUi.prototype.showCodeActionList = function (actions, at, options) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        this._codeActionWidget.getValue().show(actions, at, options);

        return [2
        /*return*/
        ];
      });
    });
  };

  CodeActionUi = __decorate([__param(4, _instantiation.IInstantiationService)], CodeActionUi);
  return CodeActionUi;
}(_lifecycle.Disposable);

exports.CodeActionUi = CodeActionUi;
},{"../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/lazy.js":"../node_modules/monaco-editor/esm/vs/base/common/lazy.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../message/messageController.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/message/messageController.js","./codeActionMenu.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeActionMenu.js","./lightBulbWidget.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/lightBulbWidget.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeActionModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeActionModel = exports.CodeActionsState = exports.SUPPORTED_CODE_ACTIONS = void 0;

var _async = require("../../../base/common/async.js");

var _event = require("../../../base/common/event.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _range = require("../../common/core/range.js");

var _modes = require("../../common/modes.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _codeAction = require("./codeAction.js");

var _resources = require("../../../base/common/resources.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var SUPPORTED_CODE_ACTIONS = new _contextkey.RawContextKey('supportedCodeAction', '');
exports.SUPPORTED_CODE_ACTIONS = SUPPORTED_CODE_ACTIONS;

var CodeActionOracle =
/** @class */
function (_super) {
  __extends(CodeActionOracle, _super);

  function CodeActionOracle(_editor, _markerService, _signalChange, _delay) {
    if (_delay === void 0) {
      _delay = 250;
    }

    var _this = _super.call(this) || this;

    _this._editor = _editor;
    _this._markerService = _markerService;
    _this._signalChange = _signalChange;
    _this._delay = _delay;
    _this._autoTriggerTimer = _this._register(new _async.TimeoutTimer());

    _this._register(_this._markerService.onMarkerChanged(function (e) {
      return _this._onMarkerChanges(e);
    }));

    _this._register(_this._editor.onDidChangeCursorPosition(function () {
      return _this._onCursorChange();
    }));

    return _this;
  }

  CodeActionOracle.prototype.trigger = function (trigger) {
    var selection = this._getRangeOfSelectionUnlessWhitespaceEnclosed(trigger);

    return this._createEventAndSignalChange(trigger, selection);
  };

  CodeActionOracle.prototype._onMarkerChanges = function (resources) {
    var _this = this;

    var model = this._editor.getModel();

    if (!model) {
      return;
    }

    if (resources.some(function (resource) {
      return (0, _resources.isEqual)(resource, model.uri);
    })) {
      this._autoTriggerTimer.cancelAndSet(function () {
        _this.trigger({
          type: 'auto'
        });
      }, this._delay);
    }
  };

  CodeActionOracle.prototype._onCursorChange = function () {
    var _this = this;

    this._autoTriggerTimer.cancelAndSet(function () {
      _this.trigger({
        type: 'auto'
      });
    }, this._delay);
  };

  CodeActionOracle.prototype._getRangeOfMarker = function (selection) {
    var model = this._editor.getModel();

    if (!model) {
      return undefined;
    }

    for (var _i = 0, _a = this._markerService.read({
      resource: model.uri
    }); _i < _a.length; _i++) {
      var marker = _a[_i];
      var markerRange = model.validateRange(marker);

      if (_range.Range.intersectRanges(markerRange, selection)) {
        return _range.Range.lift(markerRange);
      }
    }

    return undefined;
  };

  CodeActionOracle.prototype._getRangeOfSelectionUnlessWhitespaceEnclosed = function (trigger) {
    if (!this._editor.hasModel()) {
      return undefined;
    }

    var model = this._editor.getModel();

    var selection = this._editor.getSelection();

    if (selection.isEmpty() && trigger.type === 'auto') {
      var _a = selection.getPosition(),
          lineNumber = _a.lineNumber,
          column = _a.column;

      var line = model.getLineContent(lineNumber);

      if (line.length === 0) {
        // empty line
        return undefined;
      } else if (column === 1) {
        // look only right
        if (/\s/.test(line[0])) {
          return undefined;
        }
      } else if (column === model.getLineMaxColumn(lineNumber)) {
        // look only left
        if (/\s/.test(line[line.length - 1])) {
          return undefined;
        }
      } else {
        // look left and right
        if (/\s/.test(line[column - 2]) && /\s/.test(line[column - 1])) {
          return undefined;
        }
      }
    }

    return selection;
  };

  CodeActionOracle.prototype._createEventAndSignalChange = function (trigger, selection) {
    var model = this._editor.getModel();

    if (!selection || !model) {
      // cancel
      this._signalChange(undefined);

      return undefined;
    }

    var markerRange = this._getRangeOfMarker(selection);

    var position = markerRange ? markerRange.getStartPosition() : selection.getStartPosition();
    var e = {
      trigger: trigger,
      selection: selection,
      position: position
    };

    this._signalChange(e);

    return e;
  };

  return CodeActionOracle;
}(_lifecycle.Disposable);

var CodeActionsState;
exports.CodeActionsState = CodeActionsState;

(function (CodeActionsState) {
  CodeActionsState.Empty = {
    type: 0
    /* Empty */

  };

  var Triggered =
  /** @class */
  function () {
    function Triggered(trigger, rangeOrSelection, position, actions) {
      this.trigger = trigger;
      this.rangeOrSelection = rangeOrSelection;
      this.position = position;
      this.actions = actions;
      this.type = 1
      /* Triggered */
      ;
    }

    return Triggered;
  }();

  CodeActionsState.Triggered = Triggered;
})(CodeActionsState || (exports.CodeActionsState = CodeActionsState = {}));

var CodeActionModel =
/** @class */
function (_super) {
  __extends(CodeActionModel, _super);

  function CodeActionModel(_editor, _markerService, contextKeyService, _progressService) {
    var _this = _super.call(this) || this;

    _this._editor = _editor;
    _this._markerService = _markerService;
    _this._progressService = _progressService;
    _this._codeActionOracle = _this._register(new _lifecycle.MutableDisposable());
    _this._state = CodeActionsState.Empty;
    _this._onDidChangeState = _this._register(new _event.Emitter());
    _this.onDidChangeState = _this._onDidChangeState.event;
    _this._supportedCodeActions = SUPPORTED_CODE_ACTIONS.bindTo(contextKeyService);

    _this._register(_this._editor.onDidChangeModel(function () {
      return _this._update();
    }));

    _this._register(_this._editor.onDidChangeModelLanguage(function () {
      return _this._update();
    }));

    _this._register(_modes.CodeActionProviderRegistry.onDidChange(function () {
      return _this._update();
    }));

    _this._update();

    return _this;
  }

  CodeActionModel.prototype.dispose = function () {
    _super.prototype.dispose.call(this);

    this.setState(CodeActionsState.Empty, true);
  };

  CodeActionModel.prototype._update = function () {
    var _this = this;

    this._codeActionOracle.value = undefined;
    this.setState(CodeActionsState.Empty);

    var model = this._editor.getModel();

    if (model && _modes.CodeActionProviderRegistry.has(model) && !this._editor.getOption(65
    /* readOnly */
    )) {
      var supportedActions = [];

      for (var _i = 0, _a = _modes.CodeActionProviderRegistry.all(model); _i < _a.length; _i++) {
        var provider = _a[_i];

        if (Array.isArray(provider.providedCodeActionKinds)) {
          supportedActions.push.apply(supportedActions, provider.providedCodeActionKinds);
        }
      }

      this._supportedCodeActions.set(supportedActions.join(' '));

      this._codeActionOracle.value = new CodeActionOracle(this._editor, this._markerService, function (trigger) {
        if (!trigger) {
          _this.setState(CodeActionsState.Empty);

          return;
        }

        var actions = (0, _async.createCancelablePromise)(function (token) {
          return (0, _codeAction.getCodeActions)(model, trigger.selection, trigger.trigger, token);
        });

        if (_this._progressService && trigger.trigger.type === 'manual') {
          _this._progressService.showWhile(actions, 250);
        }

        _this.setState(new CodeActionsState.Triggered(trigger.trigger, trigger.selection, trigger.position, actions));
      }, undefined);

      this._codeActionOracle.value.trigger({
        type: 'auto'
      });
    } else {
      this._supportedCodeActions.reset();
    }
  };

  CodeActionModel.prototype.trigger = function (trigger) {
    if (this._codeActionOracle.value) {
      this._codeActionOracle.value.trigger(trigger);
    }
  };

  CodeActionModel.prototype.setState = function (newState, skipNotify) {
    if (newState === this._state) {
      return;
    } // Cancel old request


    if (this._state.type === 1
    /* Triggered */
    ) {
        this._state.actions.cancel();
      }

    this._state = newState;

    if (!skipNotify) {
      this._onDidChangeState.fire(newState);
    }
  };

  return CodeActionModel;
}(_lifecycle.Disposable);

exports.CodeActionModel = CodeActionModel;
},{"../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","./codeAction.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeAction.js","../../../base/common/resources.js":"../node_modules/monaco-editor/esm/vs/base/common/resources.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeActionCommands.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyCodeAction = applyCodeAction;
exports.AutoFixAction = exports.FixAllAction = exports.OrganizeImportsAction = exports.SourceAction = exports.RefactorAction = exports.CodeActionCommand = exports.QuickFixAction = exports.QuickFixController = void 0;

var _lazy = require("../../../base/common/lazy.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _strings = require("../../../base/common/strings.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _bulkEditService2 = require("../../browser/services/bulkEditService.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _codeAction = require("./codeAction.js");

var _codeActionUi = require("./codeActionUi.js");

var _messageController = require("../message/messageController.js");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _commands = require("../../../platform/commands/common/commands.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _contextView = require("../../../platform/contextview/browser/contextView.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _keybinding = require("../../../platform/keybinding/common/keybinding.js");

var _markers = require("../../../platform/markers/common/markers.js");

var _notification = require("../../../platform/notification/common/notification.js");

var _progress = require("../../../platform/progress/common/progress.js");

var _codeActionModel = require("./codeActionModel.js");

var _types = require("./types.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __spreadArrays = void 0 && (void 0).__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
};

function contextKeyForSupportedActions(kind) {
  return _contextkey.ContextKeyExpr.regex(_codeActionModel.SUPPORTED_CODE_ACTIONS.keys()[0], new RegExp('(\\s|^)' + (0, _strings.escapeRegExpCharacters)(kind.value) + '\\b'));
}

var argsSchema = {
  type: 'object',
  required: ['kind'],
  defaultSnippets: [{
    body: {
      kind: ''
    }
  }],
  properties: {
    'kind': {
      type: 'string',
      description: nls.localize('args.schema.kind', "Kind of the code action to run.")
    },
    'apply': {
      type: 'string',
      description: nls.localize('args.schema.apply', "Controls when the returned actions are applied."),
      default: "ifSingle"
      /* IfSingle */
      ,
      enum: ["first"
      /* First */
      , "ifSingle"
      /* IfSingle */
      , "never"
      /* Never */
      ],
      enumDescriptions: [nls.localize('args.schema.apply.first', "Always apply the first returned code action."), nls.localize('args.schema.apply.ifSingle', "Apply the first returned code action if it is the only one."), nls.localize('args.schema.apply.never', "Do not apply the returned code actions.")]
    },
    'preferred': {
      type: 'boolean',
      default: false,
      description: nls.localize('args.schema.preferred', "Controls if only preferred code actions should be returned.")
    }
  }
};

var QuickFixController =
/** @class */
function (_super) {
  __extends(QuickFixController, _super);

  function QuickFixController(editor, markerService, contextKeyService, progressService, contextMenuService, keybindingService, _commandService, _bulkEditService, _instantiationService) {
    var _this = _super.call(this) || this;

    _this._commandService = _commandService;
    _this._bulkEditService = _bulkEditService;
    _this._instantiationService = _instantiationService;
    _this._editor = editor;
    _this._model = _this._register(new _codeActionModel.CodeActionModel(_this._editor, markerService, contextKeyService, progressService));

    _this._register(_this._model.onDidChangeState(function (newState) {
      return _this.update(newState);
    }));

    _this._ui = new _lazy.Lazy(function () {
      return _this._register(new _codeActionUi.CodeActionUi(editor, QuickFixAction.Id, AutoFixAction.Id, {
        applyCodeAction: function (action, retrigger) {
          return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
              switch (_a.label) {
                case 0:
                  _a.trys.push([0,, 2, 3]);

                  return [4
                  /*yield*/
                  , this._applyCodeAction(action)];

                case 1:
                  _a.sent();

                  return [3
                  /*break*/
                  , 3];

                case 2:
                  if (retrigger) {
                    this._trigger({
                      type: 'auto',
                      filter: {}
                    });
                  }

                  return [7
                  /*endfinally*/
                  ];

                case 3:
                  return [2
                  /*return*/
                  ];
              }
            });
          });
        }
      }, _this._instantiationService));
    });
    return _this;
  }

  QuickFixController.get = function (editor) {
    return editor.getContribution(QuickFixController.ID);
  };

  QuickFixController.prototype.update = function (newState) {
    this._ui.getValue().update(newState);
  };

  QuickFixController.prototype.showCodeActions = function (actions, at) {
    return this._ui.getValue().showCodeActionList(actions, at, {
      includeDisabledActions: false
    });
  };

  QuickFixController.prototype.manualTriggerAtCurrentPosition = function (notAvailableMessage, filter, autoApply) {
    if (!this._editor.hasModel()) {
      return;
    }

    _messageController.MessageController.get(this._editor).closeMessage();

    var triggerPosition = this._editor.getPosition();

    this._trigger({
      type: 'manual',
      filter: filter,
      autoApply: autoApply,
      context: {
        notAvailableMessage: notAvailableMessage,
        position: triggerPosition
      }
    });
  };

  QuickFixController.prototype._trigger = function (trigger) {
    return this._model.trigger(trigger);
  };

  QuickFixController.prototype._applyCodeAction = function (action) {
    return this._instantiationService.invokeFunction(applyCodeAction, action, this._bulkEditService, this._commandService, this._editor);
  };

  QuickFixController.ID = 'editor.contrib.quickFixController';
  QuickFixController = __decorate([__param(1, _markers.IMarkerService), __param(2, _contextkey.IContextKeyService), __param(3, _progress.IEditorProgressService), __param(4, _contextView.IContextMenuService), __param(5, _keybinding.IKeybindingService), __param(6, _commands.ICommandService), __param(7, _bulkEditService2.IBulkEditService), __param(8, _instantiation.IInstantiationService)], QuickFixController);
  return QuickFixController;
}(_lifecycle.Disposable);

exports.QuickFixController = QuickFixController;

function applyCodeAction(accessor, action, bulkEditService, commandService, editor) {
  return __awaiter(this, void 0, void 0, function () {
    var notificationService, err_1, message;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          notificationService = accessor.get(_notification.INotificationService);
          if (!action.edit) return [3
          /*break*/
          , 2];
          return [4
          /*yield*/
          , bulkEditService.apply(action.edit, {
            editor: editor
          })];

        case 1:
          _a.sent();

          _a.label = 2;

        case 2:
          if (!action.command) return [3
          /*break*/
          , 6];
          _a.label = 3;

        case 3:
          _a.trys.push([3, 5,, 6]);

          return [4
          /*yield*/
          , commandService.executeCommand.apply(commandService, __spreadArrays([action.command.id], action.command.arguments || []))];

        case 4:
          _a.sent();

          return [3
          /*break*/
          , 6];

        case 5:
          err_1 = _a.sent();
          message = asMessage(err_1);
          notificationService.error(typeof message === 'string' ? message : nls.localize('applyCodeActionFailed', "An unknown error occurred while applying the code action"));
          return [3
          /*break*/
          , 6];

        case 6:
          return [2
          /*return*/
          ];
      }
    });
  });
}

function asMessage(err) {
  if (typeof err === 'string') {
    return err;
  } else if (err instanceof Error && typeof err.message === 'string') {
    return err.message;
  } else {
    return undefined;
  }
}

function triggerCodeActionsForEditorSelection(editor, notAvailableMessage, filter, autoApply) {
  if (editor.hasModel()) {
    var controller = QuickFixController.get(editor);

    if (controller) {
      controller.manualTriggerAtCurrentPosition(notAvailableMessage, filter, autoApply);
    }
  }
}

var QuickFixAction =
/** @class */
function (_super) {
  __extends(QuickFixAction, _super);

  function QuickFixAction() {
    return _super.call(this, {
      id: QuickFixAction.Id,
      label: nls.localize('quickfix.trigger.label', "Quick Fix..."),
      alias: 'Quick Fix...',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, _editorContextKeys.EditorContextKeys.hasCodeActionsProvider),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 84
        /* US_DOT */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  QuickFixAction.prototype.run = function (_accessor, editor) {
    return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', "No code actions available"), undefined, undefined);
  };

  QuickFixAction.Id = 'editor.action.quickFix';
  return QuickFixAction;
}(_editorExtensions.EditorAction);

exports.QuickFixAction = QuickFixAction;

var CodeActionCommand =
/** @class */
function (_super) {
  __extends(CodeActionCommand, _super);

  function CodeActionCommand() {
    return _super.call(this, {
      id: _codeAction.codeActionCommandId,
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, _editorContextKeys.EditorContextKeys.hasCodeActionsProvider),
      description: {
        description: 'Trigger a code action',
        args: [{
          name: 'args',
          schema: argsSchema
        }]
      }
    }) || this;
  }

  CodeActionCommand.prototype.runEditorCommand = function (_accessor, editor, userArgs) {
    var _a;

    var args = _types.CodeActionCommandArgs.fromUser(userArgs, {
      kind: _types.CodeActionKind.Empty,
      apply: "ifSingle"
      /* IfSingle */

    });

    return triggerCodeActionsForEditorSelection(editor, typeof ((_a = userArgs) === null || _a === void 0 ? void 0 : _a.kind) === 'string' ? args.preferred ? nls.localize('editor.action.codeAction.noneMessage.preferred.kind', "No preferred code actions for '{0}' available", userArgs.kind) : nls.localize('editor.action.codeAction.noneMessage.kind', "No code actions for '{0}' available", userArgs.kind) : args.preferred ? nls.localize('editor.action.codeAction.noneMessage.preferred', "No preferred code actions available") : nls.localize('editor.action.codeAction.noneMessage', "No code actions available"), {
      include: args.kind,
      includeSourceActions: true,
      onlyIncludePreferredActions: args.preferred
    }, args.apply);
  };

  return CodeActionCommand;
}(_editorExtensions.EditorCommand);

exports.CodeActionCommand = CodeActionCommand;

var RefactorAction =
/** @class */
function (_super) {
  __extends(RefactorAction, _super);

  function RefactorAction() {
    return _super.call(this, {
      id: _codeAction.refactorCommandId,
      label: nls.localize('refactor.label', "Refactor..."),
      alias: 'Refactor...',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, _editorContextKeys.EditorContextKeys.hasCodeActionsProvider),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 48
        /* KEY_R */
        ,
        mac: {
          primary: 256
          /* WinCtrl */
          | 1024
          /* Shift */
          | 48
          /* KEY_R */

        },
        weight: 100
        /* EditorContrib */

      },
      contextMenuOpts: {
        group: '1_modification',
        order: 2,
        when: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, contextKeyForSupportedActions(_types.CodeActionKind.Refactor))
      },
      description: {
        description: 'Refactor...',
        args: [{
          name: 'args',
          schema: argsSchema
        }]
      }
    }) || this;
  }

  RefactorAction.prototype.run = function (_accessor, editor, userArgs) {
    var _a;

    var args = _types.CodeActionCommandArgs.fromUser(userArgs, {
      kind: _types.CodeActionKind.Refactor,
      apply: "never"
      /* Never */

    });

    return triggerCodeActionsForEditorSelection(editor, typeof ((_a = userArgs) === null || _a === void 0 ? void 0 : _a.kind) === 'string' ? args.preferred ? nls.localize('editor.action.refactor.noneMessage.preferred.kind', "No preferred refactorings for '{0}' available", userArgs.kind) : nls.localize('editor.action.refactor.noneMessage.kind', "No refactorings for '{0}' available", userArgs.kind) : args.preferred ? nls.localize('editor.action.refactor.noneMessage.preferred', "No preferred refactorings available") : nls.localize('editor.action.refactor.noneMessage', "No refactorings available"), {
      include: _types.CodeActionKind.Refactor.contains(args.kind) ? args.kind : _types.CodeActionKind.None,
      onlyIncludePreferredActions: args.preferred
    }, args.apply);
  };

  return RefactorAction;
}(_editorExtensions.EditorAction);

exports.RefactorAction = RefactorAction;

var SourceAction =
/** @class */
function (_super) {
  __extends(SourceAction, _super);

  function SourceAction() {
    return _super.call(this, {
      id: _codeAction.sourceActionCommandId,
      label: nls.localize('source.label', "Source Action..."),
      alias: 'Source Action...',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, _editorContextKeys.EditorContextKeys.hasCodeActionsProvider),
      contextMenuOpts: {
        group: '1_modification',
        order: 2.1,
        when: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, contextKeyForSupportedActions(_types.CodeActionKind.Source))
      },
      description: {
        description: 'Source Action...',
        args: [{
          name: 'args',
          schema: argsSchema
        }]
      }
    }) || this;
  }

  SourceAction.prototype.run = function (_accessor, editor, userArgs) {
    var _a;

    var args = _types.CodeActionCommandArgs.fromUser(userArgs, {
      kind: _types.CodeActionKind.Source,
      apply: "never"
      /* Never */

    });

    return triggerCodeActionsForEditorSelection(editor, typeof ((_a = userArgs) === null || _a === void 0 ? void 0 : _a.kind) === 'string' ? args.preferred ? nls.localize('editor.action.source.noneMessage.preferred.kind', "No preferred source actions for '{0}' available", userArgs.kind) : nls.localize('editor.action.source.noneMessage.kind', "No source actions for '{0}' available", userArgs.kind) : args.preferred ? nls.localize('editor.action.source.noneMessage.preferred', "No preferred source actions available") : nls.localize('editor.action.source.noneMessage', "No source actions available"), {
      include: _types.CodeActionKind.Source.contains(args.kind) ? args.kind : _types.CodeActionKind.None,
      includeSourceActions: true,
      onlyIncludePreferredActions: args.preferred
    }, args.apply);
  };

  return SourceAction;
}(_editorExtensions.EditorAction);

exports.SourceAction = SourceAction;

var OrganizeImportsAction =
/** @class */
function (_super) {
  __extends(OrganizeImportsAction, _super);

  function OrganizeImportsAction() {
    return _super.call(this, {
      id: _codeAction.organizeImportsCommandId,
      label: nls.localize('organizeImports.label', "Organize Imports"),
      alias: 'Organize Imports',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, contextKeyForSupportedActions(_types.CodeActionKind.SourceOrganizeImports)),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 1024
        /* Shift */
        | 512
        /* Alt */
        | 45
        /* KEY_O */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  OrganizeImportsAction.prototype.run = function (_accessor, editor) {
    return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.organize.noneMessage', "No organize imports action available"), {
      include: _types.CodeActionKind.SourceOrganizeImports,
      includeSourceActions: true
    }, "ifSingle"
    /* IfSingle */
    );
  };

  return OrganizeImportsAction;
}(_editorExtensions.EditorAction);

exports.OrganizeImportsAction = OrganizeImportsAction;

var FixAllAction =
/** @class */
function (_super) {
  __extends(FixAllAction, _super);

  function FixAllAction() {
    return _super.call(this, {
      id: _codeAction.fixAllCommandId,
      label: nls.localize('fixAll.label', "Fix All"),
      alias: 'Fix All',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, contextKeyForSupportedActions(_types.CodeActionKind.SourceFixAll))
    }) || this;
  }

  FixAllAction.prototype.run = function (_accessor, editor) {
    return triggerCodeActionsForEditorSelection(editor, nls.localize('fixAll.noneMessage', "No fix all action available"), {
      include: _types.CodeActionKind.SourceFixAll,
      includeSourceActions: true
    }, "ifSingle"
    /* IfSingle */
    );
  };

  return FixAllAction;
}(_editorExtensions.EditorAction);

exports.FixAllAction = FixAllAction;

var AutoFixAction =
/** @class */
function (_super) {
  __extends(AutoFixAction, _super);

  function AutoFixAction() {
    return _super.call(this, {
      id: AutoFixAction.Id,
      label: nls.localize('autoFix.label', "Auto Fix..."),
      alias: 'Auto Fix...',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, contextKeyForSupportedActions(_types.CodeActionKind.QuickFix)),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 512
        /* Alt */
        | 1024
        /* Shift */
        | 84
        /* US_DOT */
        ,
        mac: {
          primary: 2048
          /* CtrlCmd */
          | 512
          /* Alt */
          | 84
          /* US_DOT */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  AutoFixAction.prototype.run = function (_accessor, editor) {
    return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.autoFix.noneMessage', "No auto fixes available"), {
      include: _types.CodeActionKind.QuickFix,
      onlyIncludePreferredActions: true
    }, "ifSingle"
    /* IfSingle */
    );
  };

  AutoFixAction.Id = 'editor.action.autoFix';
  return AutoFixAction;
}(_editorExtensions.EditorAction);

exports.AutoFixAction = AutoFixAction;
},{"../../../base/common/lazy.js":"../node_modules/monaco-editor/esm/vs/base/common/lazy.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../browser/services/bulkEditService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/bulkEditService.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","./codeAction.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeAction.js","./codeActionUi.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeActionUi.js","../message/messageController.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/message/messageController.js","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../platform/commands/common/commands.js":"../node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/contextview/browser/contextView.js":"../node_modules/monaco-editor/esm/vs/platform/contextview/browser/contextView.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../platform/keybinding/common/keybinding.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding.js","../../../platform/markers/common/markers.js":"../node_modules/monaco-editor/esm/vs/platform/markers/common/markers.js","../../../platform/notification/common/notification.js":"../node_modules/monaco-editor/esm/vs/platform/notification/common/notification.js","../../../platform/progress/common/progress.js":"../node_modules/monaco-editor/esm/vs/platform/progress/common/progress.js","./codeActionModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeActionModel.js","./types.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/types.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeActionContributions.js":[function(require,module,exports) {
"use strict";

var _editorExtensions = require("../../browser/editorExtensions.js");

var _codeActionCommands = require("./codeActionCommands.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
(0, _editorExtensions.registerEditorContribution)(_codeActionCommands.QuickFixController.ID, _codeActionCommands.QuickFixController);
(0, _editorExtensions.registerEditorAction)(_codeActionCommands.QuickFixAction);
(0, _editorExtensions.registerEditorAction)(_codeActionCommands.RefactorAction);
(0, _editorExtensions.registerEditorAction)(_codeActionCommands.SourceAction);
(0, _editorExtensions.registerEditorAction)(_codeActionCommands.OrganizeImportsAction);
(0, _editorExtensions.registerEditorAction)(_codeActionCommands.AutoFixAction);
(0, _editorExtensions.registerEditorAction)(_codeActionCommands.FixAllAction);
(0, _editorExtensions.registerEditorCommand)(new _codeActionCommands.CodeActionCommand());
},{"../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","./codeActionCommands.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeActionCommands.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codelens/codelens.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCodeLensData = getCodeLensData;
exports.CodeLensModel = void 0;

var _arrays = require("../../../base/common/arrays.js");

var _cancellation = require("../../../base/common/cancellation.js");

var _errors = require("../../../base/common/errors.js");

var _uri = require("../../../base/common/uri.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _modes = require("../../common/modes.js");

var _modelService = require("../../common/services/modelService.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var CodeLensModel =
/** @class */
function () {
  function CodeLensModel() {
    this.lenses = [];
    this._disposables = new _lifecycle.DisposableStore();
  }

  CodeLensModel.prototype.dispose = function () {
    this._disposables.dispose();
  };

  CodeLensModel.prototype.add = function (list, provider) {
    this._disposables.add(list);

    for (var _i = 0, _a = list.lenses; _i < _a.length; _i++) {
      var symbol = _a[_i];
      this.lenses.push({
        symbol: symbol,
        provider: provider
      });
    }
  };

  return CodeLensModel;
}();

exports.CodeLensModel = CodeLensModel;

function getCodeLensData(model, token) {
  var provider = _modes.CodeLensProviderRegistry.ordered(model);

  var providerRanks = new Map();
  var result = new CodeLensModel();
  var promises = provider.map(function (provider, i) {
    providerRanks.set(provider, i);
    return Promise.resolve(provider.provideCodeLenses(model, token)).then(function (list) {
      return list && result.add(list, provider);
    }).catch(_errors.onUnexpectedExternalError);
  });
  return Promise.all(promises).then(function () {
    result.lenses = (0, _arrays.mergeSort)(result.lenses, function (a, b) {
      // sort by lineNumber, provider-rank, and column
      if (a.symbol.range.startLineNumber < b.symbol.range.startLineNumber) {
        return -1;
      } else if (a.symbol.range.startLineNumber > b.symbol.range.startLineNumber) {
        return 1;
      } else if (providerRanks.get(a.provider) < providerRanks.get(b.provider)) {
        return -1;
      } else if (providerRanks.get(a.provider) > providerRanks.get(b.provider)) {
        return 1;
      } else if (a.symbol.range.startColumn < b.symbol.range.startColumn) {
        return -1;
      } else if (a.symbol.range.startColumn > b.symbol.range.startColumn) {
        return 1;
      } else {
        return 0;
      }
    });
    return result;
  });
}

(0, _editorExtensions.registerLanguageCommand)('_executeCodeLensProvider', function (accessor, args) {
  var resource = args.resource,
      itemResolveCount = args.itemResolveCount;

  if (!(resource instanceof _uri.URI)) {
    throw (0, _errors.illegalArgument)();
  }

  var model = accessor.get(_modelService.IModelService).getModel(resource);

  if (!model) {
    throw (0, _errors.illegalArgument)();
  }

  var result = [];
  var disposables = new _lifecycle.DisposableStore();
  return getCodeLensData(model, _cancellation.CancellationToken.None).then(function (value) {
    disposables.add(value);
    var resolve = [];

    var _loop_1 = function (item) {
      if (typeof itemResolveCount === 'undefined' || Boolean(item.symbol.command)) {
        result.push(item.symbol);
      } else if (itemResolveCount-- > 0 && item.provider.resolveCodeLens) {
        resolve.push(Promise.resolve(item.provider.resolveCodeLens(model, item.symbol, _cancellation.CancellationToken.None)).then(function (symbol) {
          return result.push(symbol || item.symbol);
        }));
      }
    };

    for (var _i = 0, _a = value.lenses; _i < _a.length; _i++) {
      var item = _a[_i];

      _loop_1(item);
    }

    return Promise.all(resolve);
  }).then(function () {
    return result;
  }).finally(function () {
    // make sure to return results, then (on next tick)
    // dispose the results
    setTimeout(function () {
      return disposables.dispose();
    }, 100);
  });
});
},{"../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../common/services/modelService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codelens/codelensWidget.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/codiconLabel/codicon/codicon.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"./codicon.ttf":[["codicon.34da14e2.ttf","../node_modules/monaco-editor/esm/vs/base/browser/ui/codiconLabel/codicon/codicon.ttf"],"../node_modules/monaco-editor/esm/vs/base/browser/ui/codiconLabel/codicon/codicon.ttf"],"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/codiconLabel/codicon/codicon-animations.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/codiconLabel/codiconLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderCodicons = renderCodicons;

require("./codicon/codicon.css");

require("./codicon/codicon-animations.css");

var _strings = require("../../../common/strings.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function expand(text) {
  return text.replace(/\$\((([a-z0-9\-]+?)(~([a-z0-9\-]*?))?)\)/gi, function (_match, _g1, name, _g3, animation) {
    return "<span class=\"codicon codicon-" + name + " " + (animation ? "codicon-animation-" + animation : '') + "\"></span>";
  });
}

function renderCodicons(label) {
  return expand((0, _strings.escape)(label));
}
},{"./codicon/codicon.css":"../node_modules/monaco-editor/esm/vs/base/browser/ui/codiconLabel/codicon/codicon.css","./codicon/codicon-animations.css":"../node_modules/monaco-editor/esm/vs/base/browser/ui/codiconLabel/codicon/codicon-animations.css","../../../common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codelens/codelensWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeLensWidget = exports.CodeLensHelper = void 0;

require("./codelensWidget.css");

var dom = _interopRequireWildcard(require("../../../base/browser/dom.js"));

var _codiconLabel = require("../../../base/browser/ui/codiconLabel/codiconLabel.js");

var _range = require("../../common/core/range.js");

var _textModel = require("../../common/model/textModel.js");

var _editorColorRegistry = require("../../common/view/editorColorRegistry.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var CodeLensViewZone =
/** @class */
function () {
  function CodeLensViewZone(afterLineNumber, onHeight) {
    this.afterLineNumber = afterLineNumber;
    this._onHeight = onHeight;
    this.heightInLines = 1;
    this.suppressMouseDown = true;
    this.domNode = document.createElement('div');
  }

  CodeLensViewZone.prototype.onComputedHeight = function (height) {
    if (this._lastHeight === undefined) {
      this._lastHeight = height;
    } else if (this._lastHeight !== height) {
      this._lastHeight = height;

      this._onHeight();
    }
  };

  return CodeLensViewZone;
}();

var CodeLensContentWidget =
/** @class */
function () {
  function CodeLensContentWidget(editor, className, line) {
    // Editor.IContentWidget.allowEditorOverflow
    this.allowEditorOverflow = false;
    this.suppressMouseDown = true;
    this._commands = new Map();
    this._isEmpty = true;
    this._editor = editor;
    this._id = "codelens.widget-" + CodeLensContentWidget._idPool++;
    this.updatePosition(line);
    this._domNode = document.createElement('span');
    this._domNode.className = "codelens-decoration " + className;
  }

  CodeLensContentWidget.prototype.withCommands = function (lenses, animate) {
    this._commands.clear();

    var innerHtml = '';
    var hasSymbol = false;

    for (var i = 0; i < lenses.length; i++) {
      var lens = lenses[i];

      if (!lens) {
        continue;
      }

      hasSymbol = true;

      if (lens.command) {
        var title = (0, _codiconLabel.renderCodicons)(lens.command.title);

        if (lens.command.id) {
          innerHtml += "<a id=" + i + ">" + title + "</a>";

          this._commands.set(String(i), lens.command);
        } else {
          innerHtml += "<span>" + title + "</span>";
        }

        if (i + 1 < lenses.length) {
          innerHtml += '<span>&#160;|&#160;</span>';
        }
      }
    }

    if (!hasSymbol) {
      // symbols but no commands
      this._domNode.innerHTML = '<span>no commands</span>';
    } else {
      // symbols and commands
      if (!innerHtml) {
        innerHtml = '&#160;';
      }

      this._domNode.innerHTML = innerHtml;

      if (this._isEmpty && animate) {
        dom.addClass(this._domNode, 'fadein');
      }

      this._isEmpty = false;
    }
  };

  CodeLensContentWidget.prototype.getCommand = function (link) {
    return link.parentElement === this._domNode ? this._commands.get(link.id) : undefined;
  };

  CodeLensContentWidget.prototype.getId = function () {
    return this._id;
  };

  CodeLensContentWidget.prototype.getDomNode = function () {
    return this._domNode;
  };

  CodeLensContentWidget.prototype.updatePosition = function (line) {
    var column = this._editor.getModel().getLineFirstNonWhitespaceColumn(line);

    this._widgetPosition = {
      position: {
        lineNumber: line,
        column: column
      },
      preference: [1
      /* ABOVE */
      ]
    };
  };

  CodeLensContentWidget.prototype.getPosition = function () {
    return this._widgetPosition || null;
  };

  CodeLensContentWidget._idPool = 0;
  return CodeLensContentWidget;
}();

var CodeLensHelper =
/** @class */
function () {
  function CodeLensHelper() {
    this._removeDecorations = [];
    this._addDecorations = [];
    this._addDecorationsCallbacks = [];
  }

  CodeLensHelper.prototype.addDecoration = function (decoration, callback) {
    this._addDecorations.push(decoration);

    this._addDecorationsCallbacks.push(callback);
  };

  CodeLensHelper.prototype.removeDecoration = function (decorationId) {
    this._removeDecorations.push(decorationId);
  };

  CodeLensHelper.prototype.commit = function (changeAccessor) {
    var resultingDecorations = changeAccessor.deltaDecorations(this._removeDecorations, this._addDecorations);

    for (var i = 0, len = resultingDecorations.length; i < len; i++) {
      this._addDecorationsCallbacks[i](resultingDecorations[i]);
    }
  };

  return CodeLensHelper;
}();

exports.CodeLensHelper = CodeLensHelper;

var CodeLensWidget =
/** @class */
function () {
  function CodeLensWidget(data, editor, className, helper, viewZoneChangeAccessor, updateCallback) {
    var _this = this;

    this._isDisposed = false;
    this._editor = editor;
    this._className = className;
    this._data = data; // create combined range, track all ranges with decorations,
    // check if there is already something to render

    this._decorationIds = [];
    var range;
    var lenses = [];

    this._data.forEach(function (codeLensData, i) {
      if (codeLensData.symbol.command) {
        lenses.push(codeLensData.symbol);
      }

      helper.addDecoration({
        range: codeLensData.symbol.range,
        options: _textModel.ModelDecorationOptions.EMPTY
      }, function (id) {
        return _this._decorationIds[i] = id;
      }); // the range contains all lenses on this line

      if (!range) {
        range = _range.Range.lift(codeLensData.symbol.range);
      } else {
        range = _range.Range.plusRange(range, codeLensData.symbol.range);
      }
    });

    this._viewZone = new CodeLensViewZone(range.startLineNumber - 1, updateCallback);
    this._viewZoneId = viewZoneChangeAccessor.addZone(this._viewZone);

    if (lenses.length > 0) {
      this._createContentWidgetIfNecessary();

      this._contentWidget.withCommands(lenses, false);
    }
  }

  CodeLensWidget.prototype._createContentWidgetIfNecessary = function () {
    if (!this._contentWidget) {
      this._contentWidget = new CodeLensContentWidget(this._editor, this._className, this._viewZone.afterLineNumber + 1);

      this._editor.addContentWidget(this._contentWidget);
    }
  };

  CodeLensWidget.prototype.dispose = function (helper, viewZoneChangeAccessor) {
    this._decorationIds.forEach(helper.removeDecoration, helper);

    this._decorationIds = [];

    if (viewZoneChangeAccessor) {
      viewZoneChangeAccessor.removeZone(this._viewZoneId);
    }

    if (this._contentWidget) {
      this._editor.removeContentWidget(this._contentWidget);

      this._contentWidget = undefined;
    }

    this._isDisposed = true;
  };

  CodeLensWidget.prototype.isDisposed = function () {
    return this._isDisposed;
  };

  CodeLensWidget.prototype.isValid = function () {
    var _this = this;

    return this._decorationIds.some(function (id, i) {
      var range = _this._editor.getModel().getDecorationRange(id);

      var symbol = _this._data[i].symbol;
      return !!(range && _range.Range.isEmpty(symbol.range) === range.isEmpty());
    });
  };

  CodeLensWidget.prototype.updateCodeLensSymbols = function (data, helper) {
    var _this = this;

    this._decorationIds.forEach(helper.removeDecoration, helper);

    this._decorationIds = [];
    this._data = data;

    this._data.forEach(function (codeLensData, i) {
      helper.addDecoration({
        range: codeLensData.symbol.range,
        options: _textModel.ModelDecorationOptions.EMPTY
      }, function (id) {
        return _this._decorationIds[i] = id;
      });
    });
  };

  CodeLensWidget.prototype.computeIfNecessary = function (model) {
    if (!this._viewZone.domNode.hasAttribute('monaco-visible-view-zone')) {
      return null;
    } // Read editor current state


    for (var i = 0; i < this._decorationIds.length; i++) {
      var range = model.getDecorationRange(this._decorationIds[i]);

      if (range) {
        this._data[i].symbol.range = range;
      }
    }

    return this._data;
  };

  CodeLensWidget.prototype.updateCommands = function (symbols) {
    this._createContentWidgetIfNecessary();

    this._contentWidget.withCommands(symbols, true);

    for (var i = 0; i < this._data.length; i++) {
      var resolved = symbols[i];

      if (resolved) {
        var symbol = this._data[i].symbol;
        symbol.command = resolved.command || symbol.command;
      }
    }
  };

  CodeLensWidget.prototype.getCommand = function (link) {
    var _a;

    return (_a = this._contentWidget) === null || _a === void 0 ? void 0 : _a.getCommand(link);
  };

  CodeLensWidget.prototype.getLineNumber = function () {
    var range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);

    if (range) {
      return range.startLineNumber;
    }

    return -1;
  };

  CodeLensWidget.prototype.update = function (viewZoneChangeAccessor) {
    if (this.isValid()) {
      var range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);

      if (range) {
        this._viewZone.afterLineNumber = range.startLineNumber - 1;
        viewZoneChangeAccessor.layoutZone(this._viewZoneId);

        if (this._contentWidget) {
          this._contentWidget.updatePosition(range.startLineNumber);

          this._editor.layoutContentWidget(this._contentWidget);
        }
      }
    }
  };

  return CodeLensWidget;
}();

exports.CodeLensWidget = CodeLensWidget;
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var codeLensForeground = theme.getColor(_editorColorRegistry.editorCodeLensForeground);

  if (codeLensForeground) {
    collector.addRule(".monaco-editor .codelens-decoration { color: " + codeLensForeground + "; }");
  }

  var activeLinkForeground = theme.getColor(_colorRegistry.editorActiveLinkForeground);

  if (activeLinkForeground) {
    collector.addRule(".monaco-editor .codelens-decoration > a:hover { color: " + activeLinkForeground + " !important; }");
  }
});
},{"./codelensWidget.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/codelens/codelensWidget.css","../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/browser/ui/codiconLabel/codiconLabel.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/codiconLabel/codiconLabel.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../common/view/editorColorRegistry.js":"../node_modules/monaco-editor/esm/vs/editor/common/view/editorColorRegistry.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codelens/codeLensCache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeLensCache = exports.ICodeLensCache = void 0;

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _extensions = require("../../../platform/instantiation/common/extensions.js");

var _codelens = require("./codelens.js");

var _map = require("../../../base/common/map.js");

var _storage = require("../../../platform/storage/common/storage.js");

var _range = require("../../common/core/range.js");

var _async = require("../../../base/common/async.js");

var _functional = require("../../../base/common/functional.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var ICodeLensCache = (0, _instantiation.createDecorator)('ICodeLensCache');
exports.ICodeLensCache = ICodeLensCache;

var CacheItem =
/** @class */
function () {
  function CacheItem(lineCount, data) {
    this.lineCount = lineCount;
    this.data = data;
  }

  return CacheItem;
}();

var CodeLensCache =
/** @class */
function () {
  function CodeLensCache(storageService) {
    var _this = this;

    this._fakeProvider = new (
    /** @class */
    function () {
      function class_1() {}

      class_1.prototype.provideCodeLenses = function () {
        throw new Error('not supported');
      };

      return class_1;
    }())();
    this._cache = new _map.LRUCache(20, 0.75); // remove old data

    var oldkey = 'codelens/cache';
    (0, _async.runWhenIdle)(function () {
      return storageService.remove(oldkey, 1
      /* WORKSPACE */
      );
    }); // restore lens data on start

    var key = 'codelens/cache2';
    var raw = storageService.get(key, 1
    /* WORKSPACE */
    , '{}');

    this._deserialize(raw); // store lens data on shutdown


    (0, _functional.once)(storageService.onWillSaveState)(function (e) {
      if (e.reason === _storage.WillSaveStateReason.SHUTDOWN) {
        storageService.store(key, _this._serialize(), 1
        /* WORKSPACE */
        );
      }
    });
  }

  CodeLensCache.prototype.put = function (model, data) {
    // create a copy of the model that is without command-ids
    // but with comand-labels
    var copyItems = data.lenses.map(function (item) {
      var _a;

      return {
        range: item.symbol.range,
        command: item.symbol.command && {
          id: '',
          title: (_a = item.symbol.command) === null || _a === void 0 ? void 0 : _a.title
        }
      };
    });
    var copyModel = new _codelens.CodeLensModel();
    copyModel.add({
      lenses: copyItems,
      dispose: function () {}
    }, this._fakeProvider);
    var item = new CacheItem(model.getLineCount(), copyModel);

    this._cache.set(model.uri.toString(), item);
  };

  CodeLensCache.prototype.get = function (model) {
    var item = this._cache.get(model.uri.toString());

    return item && item.lineCount === model.getLineCount() ? item.data : undefined;
  };

  CodeLensCache.prototype.delete = function (model) {
    this._cache.delete(model.uri.toString());
  }; // --- persistence


  CodeLensCache.prototype._serialize = function () {
    var data = Object.create(null);

    this._cache.forEach(function (value, key) {
      var lines = new Set();

      for (var _i = 0, _a = value.data.lenses; _i < _a.length; _i++) {
        var d = _a[_i];
        lines.add(d.symbol.range.startLineNumber);
      }

      data[key] = {
        lineCount: value.lineCount,
        lines: (0, _map.values)(lines)
      };
    });

    return JSON.stringify(data);
  };

  CodeLensCache.prototype._deserialize = function (raw) {
    try {
      var data = JSON.parse(raw);

      for (var key in data) {
        var element = data[key];
        var lenses = [];

        for (var _i = 0, _a = element.lines; _i < _a.length; _i++) {
          var line = _a[_i];
          lenses.push({
            range: new _range.Range(line, 1, line, 11)
          });
        }

        var model = new _codelens.CodeLensModel();
        model.add({
          lenses: lenses,
          dispose: function () {}
        }, this._fakeProvider);

        this._cache.set(key, new CacheItem(element.lineCount, model));
      }
    } catch (_b) {// ignore...
    }
  };

  CodeLensCache = __decorate([__param(0, _storage.IStorageService)], CodeLensCache);
  return CodeLensCache;
}();

exports.CodeLensCache = CodeLensCache;
(0, _extensions.registerSingleton)(ICodeLensCache, CodeLensCache);
},{"../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../platform/instantiation/common/extensions.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/extensions.js","./codelens.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codelens/codelens.js","../../../base/common/map.js":"../node_modules/monaco-editor/esm/vs/base/common/map.js","../../../platform/storage/common/storage.js":"../node_modules/monaco-editor/esm/vs/platform/storage/common/storage.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/functional.js":"../node_modules/monaco-editor/esm/vs/base/common/functional.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/codelens/codelensController.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeLensContribution = void 0;

var _async = require("../../../base/common/async.js");

var _errors = require("../../../base/common/errors.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _editorState = require("../../browser/core/editorState.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _modes = require("../../common/modes.js");

var _codelens = require("./codelens.js");

var _codelensWidget = require("./codelensWidget.js");

var _commands = require("../../../platform/commands/common/commands.js");

var _notification = require("../../../platform/notification/common/notification.js");

var _codeLensCache2 = require("./codeLensCache.js");

var _dom = require("../../../base/browser/dom.js");

var _hash = require("../../../base/common/hash.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __spreadArrays = void 0 && (void 0).__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
};

var CodeLensContribution =
/** @class */
function () {
  function CodeLensContribution(_editor, _commandService, _notificationService, _codeLensCache) {
    var _this = this;

    this._editor = _editor;
    this._commandService = _commandService;
    this._notificationService = _notificationService;
    this._codeLensCache = _codeLensCache;
    this._globalToDispose = new _lifecycle.DisposableStore();
    this._localToDispose = new _lifecycle.DisposableStore();
    this._lenses = [];
    this._oldCodeLensModels = new _lifecycle.DisposableStore();
    this._modelChangeCounter = 0;
    this._isEnabled = this._editor.getOption(11
    /* codeLens */
    );

    this._globalToDispose.add(this._editor.onDidChangeModel(function () {
      return _this._onModelChange();
    }));

    this._globalToDispose.add(this._editor.onDidChangeModelLanguage(function () {
      return _this._onModelChange();
    }));

    this._globalToDispose.add(this._editor.onDidChangeConfiguration(function () {
      var prevIsEnabled = _this._isEnabled;
      _this._isEnabled = _this._editor.getOption(11
      /* codeLens */
      );

      if (prevIsEnabled !== _this._isEnabled) {
        _this._onModelChange();
      }
    }));

    this._globalToDispose.add(_modes.CodeLensProviderRegistry.onDidChange(this._onModelChange, this));

    this._globalToDispose.add(this._editor.onDidChangeConfiguration(function (e) {
      if (e.hasChanged(32
      /* fontInfo */
      )) {
        _this._updateLensStyle();
      }
    }));

    this._onModelChange();

    this._styleClassName = (0, _hash.hash)(this._editor.getId()).toString(16);
    this._styleElement = (0, _dom.createStyleSheet)();

    this._updateLensStyle();
  }

  CodeLensContribution.prototype.dispose = function () {
    this._localDispose();

    this._globalToDispose.dispose();

    this._oldCodeLensModels.dispose();

    (0, _lifecycle.dispose)(this._currentCodeLensModel);
  };

  CodeLensContribution.prototype._updateLensStyle = function () {
    var options = this._editor.getOptions();

    var fontInfo = options.get(32
    /* fontInfo */
    );
    var lineHeight = options.get(47
    /* lineHeight */
    );
    var newStyle = ".monaco-editor .codelens-decoration." + this._styleClassName + " { height: " + Math.round(lineHeight * 1.1) + "px; line-height: " + lineHeight + "px; font-size: " + Math.round(fontInfo.fontSize * 0.9) + "px; padding-right: " + Math.round(fontInfo.fontSize * 0.45) + "px;}";
    this._styleElement.innerHTML = newStyle;
  };

  CodeLensContribution.prototype._localDispose = function () {
    if (this._currentFindCodeLensSymbolsPromise) {
      this._currentFindCodeLensSymbolsPromise.cancel();

      this._currentFindCodeLensSymbolsPromise = undefined;
      this._modelChangeCounter++;
    }

    if (this._currentResolveCodeLensSymbolsPromise) {
      this._currentResolveCodeLensSymbolsPromise.cancel();

      this._currentResolveCodeLensSymbolsPromise = undefined;
    }

    this._localToDispose.clear();

    this._oldCodeLensModels.clear();

    (0, _lifecycle.dispose)(this._currentCodeLensModel);
  };

  CodeLensContribution.prototype._onModelChange = function () {
    var _this = this;

    this._localDispose();

    var model = this._editor.getModel();

    if (!model) {
      return;
    }

    if (!this._isEnabled) {
      return;
    }

    var cachedLenses = this._codeLensCache.get(model);

    if (cachedLenses) {
      this._renderCodeLensSymbols(cachedLenses);
    }

    if (!_modes.CodeLensProviderRegistry.has(model)) {
      // no provider -> return but check with
      // cached lenses. they expire after 30 seconds
      if (cachedLenses) {
        this._localToDispose.add((0, _async.disposableTimeout)(function () {
          var cachedLensesNow = _this._codeLensCache.get(model);

          if (cachedLenses === cachedLensesNow) {
            _this._codeLensCache.delete(model);

            _this._onModelChange();
          }
        }, 30 * 1000));
      }

      return;
    }

    for (var _i = 0, _a = _modes.CodeLensProviderRegistry.all(model); _i < _a.length; _i++) {
      var provider = _a[_i];

      if (typeof provider.onDidChange === 'function') {
        var registration = provider.onDidChange(function () {
          return scheduler.schedule();
        });

        this._localToDispose.add(registration);
      }
    }

    var detectVisibleLenses = this._detectVisibleLenses = new _async.RunOnceScheduler(function () {
      return _this._onViewportChanged();
    }, 250);
    var scheduler = new _async.RunOnceScheduler(function () {
      var counterValue = ++_this._modelChangeCounter;

      if (_this._currentFindCodeLensSymbolsPromise) {
        _this._currentFindCodeLensSymbolsPromise.cancel();
      }

      _this._currentFindCodeLensSymbolsPromise = (0, _async.createCancelablePromise)(function (token) {
        return (0, _codelens.getCodeLensData)(model, token);
      });

      _this._currentFindCodeLensSymbolsPromise.then(function (result) {
        if (counterValue === _this._modelChangeCounter) {
          // only the last one wins
          if (_this._currentCodeLensModel) {
            _this._oldCodeLensModels.add(_this._currentCodeLensModel);
          }

          _this._currentCodeLensModel = result; // cache model to reduce flicker

          _this._codeLensCache.put(model, result); // render lenses


          _this._renderCodeLensSymbols(result);

          detectVisibleLenses.schedule();
        }
      }, _errors.onUnexpectedError);
    }, 250);

    this._localToDispose.add(scheduler);

    this._localToDispose.add(detectVisibleLenses);

    this._localToDispose.add(this._editor.onDidChangeModelContent(function () {
      _this._editor.changeDecorations(function (decorationsAccessor) {
        _this._editor.changeViewZones(function (viewZonesAccessor) {
          var toDispose = [];
          var lastLensLineNumber = -1;

          _this._lenses.forEach(function (lens) {
            if (!lens.isValid() || lastLensLineNumber === lens.getLineNumber()) {
              // invalid -> lens collapsed, attach range doesn't exist anymore
              // line_number -> lenses should never be on the same line
              toDispose.push(lens);
            } else {
              lens.update(viewZonesAccessor);
              lastLensLineNumber = lens.getLineNumber();
            }
          });

          var helper = new _codelensWidget.CodeLensHelper();
          toDispose.forEach(function (l) {
            l.dispose(helper, viewZonesAccessor);

            _this._lenses.splice(_this._lenses.indexOf(l), 1);
          });
          helper.commit(decorationsAccessor);
        });
      }); // Compute new `visible` code lenses


      detectVisibleLenses.schedule(); // Ask for all references again

      scheduler.schedule();
    }));

    this._localToDispose.add(this._editor.onDidScrollChange(function (e) {
      if (e.scrollTopChanged && _this._lenses.length > 0) {
        detectVisibleLenses.schedule();
      }
    }));

    this._localToDispose.add(this._editor.onDidLayoutChange(function () {
      detectVisibleLenses.schedule();
    }));

    this._localToDispose.add((0, _lifecycle.toDisposable)(function () {
      if (_this._editor.getModel()) {
        var scrollState = _editorState.StableEditorScrollState.capture(_this._editor);

        _this._editor.changeDecorations(function (decorationsAccessor) {
          _this._editor.changeViewZones(function (viewZonesAccessor) {
            _this._disposeAllLenses(decorationsAccessor, viewZonesAccessor);
          });
        });

        scrollState.restore(_this._editor);
      } else {
        // No accessors available
        _this._disposeAllLenses(undefined, undefined);
      }
    }));

    this._localToDispose.add(this._editor.onMouseUp(function (e) {
      var _a;

      var _b, _c;

      if (e.target.type !== 9
      /* CONTENT_WIDGET */
      ) {
          return;
        }

      var target = e.target.element;

      if (((_b = target) === null || _b === void 0 ? void 0 : _b.tagName) === 'SPAN') {
        target = target.parentElement;
      }

      if (((_c = target) === null || _c === void 0 ? void 0 : _c.tagName) === 'A') {
        for (var _i = 0, _d = _this._lenses; _i < _d.length; _i++) {
          var lens = _d[_i];
          var command = lens.getCommand(target);

          if (command) {
            (_a = _this._commandService).executeCommand.apply(_a, __spreadArrays([command.id], command.arguments || [])).catch(function (err) {
              return _this._notificationService.error(err);
            });

            break;
          }
        }
      }
    }));

    scheduler.schedule();
  };

  CodeLensContribution.prototype._disposeAllLenses = function (decChangeAccessor, viewZoneChangeAccessor) {
    var helper = new _codelensWidget.CodeLensHelper();

    for (var _i = 0, _a = this._lenses; _i < _a.length; _i++) {
      var lens = _a[_i];
      lens.dispose(helper, viewZoneChangeAccessor);
    }

    if (decChangeAccessor) {
      helper.commit(decChangeAccessor);
    }

    this._lenses = [];
  };

  CodeLensContribution.prototype._renderCodeLensSymbols = function (symbols) {
    var _this = this;

    if (!this._editor.hasModel()) {
      return;
    }

    var maxLineNumber = this._editor.getModel().getLineCount();

    var groups = [];
    var lastGroup;

    for (var _i = 0, _a = symbols.lenses; _i < _a.length; _i++) {
      var symbol = _a[_i];
      var line = symbol.symbol.range.startLineNumber;

      if (line < 1 || line > maxLineNumber) {
        // invalid code lens
        continue;
      } else if (lastGroup && lastGroup[lastGroup.length - 1].symbol.range.startLineNumber === line) {
        // on same line as previous
        lastGroup.push(symbol);
      } else {
        // on later line as previous
        lastGroup = [symbol];
        groups.push(lastGroup);
      }
    }

    var scrollState = _editorState.StableEditorScrollState.capture(this._editor);

    this._editor.changeDecorations(function (decorationsAccessor) {
      _this._editor.changeViewZones(function (viewZoneAccessor) {
        var helper = new _codelensWidget.CodeLensHelper();
        var codeLensIndex = 0;
        var groupsIndex = 0;

        while (groupsIndex < groups.length && codeLensIndex < _this._lenses.length) {
          var symbolsLineNumber = groups[groupsIndex][0].symbol.range.startLineNumber;

          var codeLensLineNumber = _this._lenses[codeLensIndex].getLineNumber();

          if (codeLensLineNumber < symbolsLineNumber) {
            _this._lenses[codeLensIndex].dispose(helper, viewZoneAccessor);

            _this._lenses.splice(codeLensIndex, 1);
          } else if (codeLensLineNumber === symbolsLineNumber) {
            _this._lenses[codeLensIndex].updateCodeLensSymbols(groups[groupsIndex], helper);

            groupsIndex++;
            codeLensIndex++;
          } else {
            _this._lenses.splice(codeLensIndex, 0, new _codelensWidget.CodeLensWidget(groups[groupsIndex], _this._editor, _this._styleClassName, helper, viewZoneAccessor, function () {
              return _this._detectVisibleLenses && _this._detectVisibleLenses.schedule();
            }));

            codeLensIndex++;
            groupsIndex++;
          }
        } // Delete extra code lenses


        while (codeLensIndex < _this._lenses.length) {
          _this._lenses[codeLensIndex].dispose(helper, viewZoneAccessor);

          _this._lenses.splice(codeLensIndex, 1);
        } // Create extra symbols


        while (groupsIndex < groups.length) {
          _this._lenses.push(new _codelensWidget.CodeLensWidget(groups[groupsIndex], _this._editor, _this._styleClassName, helper, viewZoneAccessor, function () {
            return _this._detectVisibleLenses && _this._detectVisibleLenses.schedule();
          }));

          groupsIndex++;
        }

        helper.commit(decorationsAccessor);
      });
    });

    scrollState.restore(this._editor);
  };

  CodeLensContribution.prototype._onViewportChanged = function () {
    var _this = this;

    if (this._currentResolveCodeLensSymbolsPromise) {
      this._currentResolveCodeLensSymbolsPromise.cancel();

      this._currentResolveCodeLensSymbolsPromise = undefined;
    }

    var model = this._editor.getModel();

    if (!model) {
      return;
    }

    var toResolve = [];
    var lenses = [];

    this._lenses.forEach(function (lens) {
      var request = lens.computeIfNecessary(model);

      if (request) {
        toResolve.push(request);
        lenses.push(lens);
      }
    });

    if (toResolve.length === 0) {
      return;
    }

    var resolvePromise = (0, _async.createCancelablePromise)(function (token) {
      var promises = toResolve.map(function (request, i) {
        var resolvedSymbols = new Array(request.length);
        var promises = request.map(function (request, i) {
          if (!request.symbol.command && typeof request.provider.resolveCodeLens === 'function') {
            return Promise.resolve(request.provider.resolveCodeLens(model, request.symbol, token)).then(function (symbol) {
              resolvedSymbols[i] = symbol;
            }, _errors.onUnexpectedExternalError);
          } else {
            resolvedSymbols[i] = request.symbol;
            return Promise.resolve(undefined);
          }
        });
        return Promise.all(promises).then(function () {
          if (!token.isCancellationRequested && !lenses[i].isDisposed()) {
            lenses[i].updateCommands(resolvedSymbols);
          }
        });
      });
      return Promise.all(promises);
    });
    this._currentResolveCodeLensSymbolsPromise = resolvePromise;

    this._currentResolveCodeLensSymbolsPromise.then(function () {
      if (_this._currentCodeLensModel) {
        // update the cached state with new resolved items
        _this._codeLensCache.put(model, _this._currentCodeLensModel);
      }

      _this._oldCodeLensModels.clear(); // dispose old models once we have updated the UI with the current model


      if (resolvePromise === _this._currentResolveCodeLensSymbolsPromise) {
        _this._currentResolveCodeLensSymbolsPromise = undefined;
      }
    }, function (err) {
      (0, _errors.onUnexpectedError)(err); // can also be cancellation!

      if (resolvePromise === _this._currentResolveCodeLensSymbolsPromise) {
        _this._currentResolveCodeLensSymbolsPromise = undefined;
      }
    });
  };

  CodeLensContribution.ID = 'css.editor.codeLens';
  CodeLensContribution = __decorate([__param(1, _commands.ICommandService), __param(2, _notification.INotificationService), __param(3, _codeLensCache2.ICodeLensCache)], CodeLensContribution);
  return CodeLensContribution;
}();

exports.CodeLensContribution = CodeLensContribution;
(0, _editorExtensions.registerEditorContribution)(CodeLensContribution.ID, CodeLensContribution);
},{"../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../browser/core/editorState.js":"../node_modules/monaco-editor/esm/vs/editor/browser/core/editorState.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","./codelens.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codelens/codelens.js","./codelensWidget.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codelens/codelensWidget.js","../../../platform/commands/common/commands.js":"../node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js","../../../platform/notification/common/notification.js":"../node_modules/monaco-editor/esm/vs/platform/notification/common/notification.js","./codeLensCache.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codelens/codeLensCache.js","../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/common/hash.js":"../node_modules/monaco-editor/esm/vs/base/common/hash.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/color.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getColors = getColors;
exports.getColorPresentations = getColorPresentations;

var _cancellation = require("../../../base/common/cancellation.js");

var _errors = require("../../../base/common/errors.js");

var _uri = require("../../../base/common/uri.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _range = require("../../common/core/range.js");

var _modes = require("../../common/modes.js");

var _modelService = require("../../common/services/modelService.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function getColors(model, token) {
  var colors = [];

  var providers = _modes.ColorProviderRegistry.ordered(model).reverse();

  var promises = providers.map(function (provider) {
    return Promise.resolve(provider.provideDocumentColors(model, token)).then(function (result) {
      if (Array.isArray(result)) {
        for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
          var colorInfo = result_1[_i];
          colors.push({
            colorInfo: colorInfo,
            provider: provider
          });
        }
      }
    });
  });
  return Promise.all(promises).then(function () {
    return colors;
  });
}

function getColorPresentations(model, colorInfo, provider, token) {
  return Promise.resolve(provider.provideColorPresentations(model, colorInfo, token));
}

(0, _editorExtensions.registerLanguageCommand)('_executeDocumentColorProvider', function (accessor, args) {
  var resource = args.resource;

  if (!(resource instanceof _uri.URI)) {
    throw (0, _errors.illegalArgument)();
  }

  var model = accessor.get(_modelService.IModelService).getModel(resource);

  if (!model) {
    throw (0, _errors.illegalArgument)();
  }

  var rawCIs = [];

  var providers = _modes.ColorProviderRegistry.ordered(model).reverse();

  var promises = providers.map(function (provider) {
    return Promise.resolve(provider.provideDocumentColors(model, _cancellation.CancellationToken.None)).then(function (result) {
      if (Array.isArray(result)) {
        for (var _i = 0, result_2 = result; _i < result_2.length; _i++) {
          var ci = result_2[_i];
          rawCIs.push({
            range: ci.range,
            color: [ci.color.red, ci.color.green, ci.color.blue, ci.color.alpha]
          });
        }
      }
    });
  });
  return Promise.all(promises).then(function () {
    return rawCIs;
  });
});
(0, _editorExtensions.registerLanguageCommand)('_executeColorPresentationProvider', function (accessor, args) {
  var resource = args.resource,
      color = args.color,
      range = args.range;

  if (!(resource instanceof _uri.URI) || !Array.isArray(color) || color.length !== 4 || !_range.Range.isIRange(range)) {
    throw (0, _errors.illegalArgument)();
  }

  var red = color[0],
      green = color[1],
      blue = color[2],
      alpha = color[3];
  var model = accessor.get(_modelService.IModelService).getModel(resource);

  if (!model) {
    throw (0, _errors.illegalArgument)();
  }

  var colorInfo = {
    range: range,
    color: {
      red: red,
      green: green,
      blue: blue,
      alpha: alpha
    }
  };
  var presentations = [];

  var providers = _modes.ColorProviderRegistry.ordered(model).reverse();

  var promises = providers.map(function (provider) {
    return Promise.resolve(provider.provideColorPresentations(model, colorInfo, _cancellation.CancellationToken.None)).then(function (result) {
      if (Array.isArray(result)) {
        presentations.push.apply(presentations, result);
      }
    });
  });
  return Promise.all(promises).then(function () {
    return presentations;
  });
});
},{"../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../common/services/modelService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/colorDetector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorDetector = void 0;

var _async = require("../../../base/common/async.js");

var _color = require("../../../base/common/color.js");

var _errors = require("../../../base/common/errors.js");

var _hash = require("../../../base/common/hash.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _codeEditorService2 = require("../../browser/services/codeEditorService.js");

var _range = require("../../common/core/range.js");

var _textModel = require("../../common/model/textModel.js");

var _modes = require("../../common/modes.js");

var _color2 = require("./color.js");

var _configuration = require("../../../platform/configuration/common/configuration.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var MAX_DECORATORS = 500;

var ColorDetector =
/** @class */
function (_super) {
  __extends(ColorDetector, _super);

  function ColorDetector(_editor, _codeEditorService, _configurationService) {
    var _this = _super.call(this) || this;

    _this._editor = _editor;
    _this._codeEditorService = _codeEditorService;
    _this._configurationService = _configurationService;
    _this._localToDispose = _this._register(new _lifecycle.DisposableStore());
    _this._decorationsIds = [];
    _this._colorDatas = new Map();
    _this._colorDecoratorIds = [];
    _this._decorationsTypes = new Set();

    _this._register(_editor.onDidChangeModel(function (e) {
      _this._isEnabled = _this.isEnabled();

      _this.onModelChanged();
    }));

    _this._register(_editor.onDidChangeModelLanguage(function (e) {
      return _this.onModelChanged();
    }));

    _this._register(_modes.ColorProviderRegistry.onDidChange(function (e) {
      return _this.onModelChanged();
    }));

    _this._register(_editor.onDidChangeConfiguration(function (e) {
      var prevIsEnabled = _this._isEnabled;
      _this._isEnabled = _this.isEnabled();

      if (prevIsEnabled !== _this._isEnabled) {
        if (_this._isEnabled) {
          _this.onModelChanged();
        } else {
          _this.removeAllDecorations();
        }
      }
    }));

    _this._timeoutTimer = null;
    _this._computePromise = null;
    _this._isEnabled = _this.isEnabled();

    _this.onModelChanged();

    return _this;
  }

  ColorDetector.prototype.isEnabled = function () {
    var model = this._editor.getModel();

    if (!model) {
      return false;
    }

    var languageId = model.getLanguageIdentifier(); // handle deprecated settings. [languageId].colorDecorators.enable

    var deprecatedConfig = this._configurationService.getValue(languageId.language);

    if (deprecatedConfig) {
      var colorDecorators = deprecatedConfig['colorDecorators']; // deprecatedConfig.valueOf('.colorDecorators.enable');

      if (colorDecorators && colorDecorators['enable'] !== undefined && !colorDecorators['enable']) {
        return colorDecorators['enable'];
      }
    }

    return this._editor.getOption(12
    /* colorDecorators */
    );
  };

  ColorDetector.get = function (editor) {
    return editor.getContribution(this.ID);
  };

  ColorDetector.prototype.dispose = function () {
    this.stop();
    this.removeAllDecorations();

    _super.prototype.dispose.call(this);
  };

  ColorDetector.prototype.onModelChanged = function () {
    var _this = this;

    this.stop();

    if (!this._isEnabled) {
      return;
    }

    var model = this._editor.getModel();

    if (!model || !_modes.ColorProviderRegistry.has(model)) {
      return;
    }

    this._localToDispose.add(this._editor.onDidChangeModelContent(function (e) {
      if (!_this._timeoutTimer) {
        _this._timeoutTimer = new _async.TimeoutTimer();

        _this._timeoutTimer.cancelAndSet(function () {
          _this._timeoutTimer = null;

          _this.beginCompute();
        }, ColorDetector.RECOMPUTE_TIME);
      }
    }));

    this.beginCompute();
  };

  ColorDetector.prototype.beginCompute = function () {
    var _this = this;

    this._computePromise = (0, _async.createCancelablePromise)(function (token) {
      var model = _this._editor.getModel();

      if (!model) {
        return Promise.resolve([]);
      }

      return (0, _color2.getColors)(model, token);
    });

    this._computePromise.then(function (colorInfos) {
      _this.updateDecorations(colorInfos);

      _this.updateColorDecorators(colorInfos);

      _this._computePromise = null;
    }, _errors.onUnexpectedError);
  };

  ColorDetector.prototype.stop = function () {
    if (this._timeoutTimer) {
      this._timeoutTimer.cancel();

      this._timeoutTimer = null;
    }

    if (this._computePromise) {
      this._computePromise.cancel();

      this._computePromise = null;
    }

    this._localToDispose.clear();
  };

  ColorDetector.prototype.updateDecorations = function (colorDatas) {
    var _this = this;

    var decorations = colorDatas.map(function (c) {
      return {
        range: {
          startLineNumber: c.colorInfo.range.startLineNumber,
          startColumn: c.colorInfo.range.startColumn,
          endLineNumber: c.colorInfo.range.endLineNumber,
          endColumn: c.colorInfo.range.endColumn
        },
        options: _textModel.ModelDecorationOptions.EMPTY
      };
    });
    this._decorationsIds = this._editor.deltaDecorations(this._decorationsIds, decorations);
    this._colorDatas = new Map();

    this._decorationsIds.forEach(function (id, i) {
      return _this._colorDatas.set(id, colorDatas[i]);
    });
  };

  ColorDetector.prototype.updateColorDecorators = function (colorData) {
    var _this = this;

    var decorations = [];
    var newDecorationsTypes = {};

    for (var i = 0; i < colorData.length && decorations.length < MAX_DECORATORS; i++) {
      var _a = colorData[i].colorInfo.color,
          red = _a.red,
          green = _a.green,
          blue = _a.blue,
          alpha = _a.alpha;
      var rgba = new _color.RGBA(Math.round(red * 255), Math.round(green * 255), Math.round(blue * 255), alpha);
      var subKey = (0, _hash.hash)(rgba).toString(16);
      var color = "rgba(" + rgba.r + ", " + rgba.g + ", " + rgba.b + ", " + rgba.a + ")";
      var key = 'colorBox-' + subKey;

      if (!this._decorationsTypes.has(key) && !newDecorationsTypes[key]) {
        this._codeEditorService.registerDecorationType(key, {
          before: {
            contentText: ' ',
            border: 'solid 0.1em #000',
            margin: '0.1em 0.2em 0 0.2em',
            width: '0.8em',
            height: '0.8em',
            backgroundColor: color
          },
          dark: {
            before: {
              border: 'solid 0.1em #eee'
            }
          }
        });
      }

      newDecorationsTypes[key] = true;
      decorations.push({
        range: {
          startLineNumber: colorData[i].colorInfo.range.startLineNumber,
          startColumn: colorData[i].colorInfo.range.startColumn,
          endLineNumber: colorData[i].colorInfo.range.endLineNumber,
          endColumn: colorData[i].colorInfo.range.endColumn
        },
        options: this._codeEditorService.resolveDecorationOptions(key, true)
      });
    }

    this._decorationsTypes.forEach(function (subType) {
      if (!newDecorationsTypes[subType]) {
        _this._codeEditorService.removeDecorationType(subType);
      }
    });

    this._colorDecoratorIds = this._editor.deltaDecorations(this._colorDecoratorIds, decorations);
  };

  ColorDetector.prototype.removeAllDecorations = function () {
    var _this = this;

    this._decorationsIds = this._editor.deltaDecorations(this._decorationsIds, []);
    this._colorDecoratorIds = this._editor.deltaDecorations(this._colorDecoratorIds, []);

    this._decorationsTypes.forEach(function (subType) {
      _this._codeEditorService.removeDecorationType(subType);
    });
  };

  ColorDetector.prototype.getColorData = function (position) {
    var _this = this;

    var model = this._editor.getModel();

    if (!model) {
      return null;
    }

    var decorations = model.getDecorationsInRange(_range.Range.fromPositions(position, position)).filter(function (d) {
      return _this._colorDatas.has(d.id);
    });

    if (decorations.length === 0) {
      return null;
    }

    return this._colorDatas.get(decorations[0].id);
  };

  ColorDetector.ID = 'editor.contrib.colorDetector';
  ColorDetector.RECOMPUTE_TIME = 1000; // ms

  ColorDetector = __decorate([__param(1, _codeEditorService2.ICodeEditorService), __param(2, _configuration.IConfigurationService)], ColorDetector);
  return ColorDetector;
}(_lifecycle.Disposable);

exports.ColorDetector = ColorDetector;
(0, _editorExtensions.registerEditorContribution)(ColorDetector.ID, ColorDetector);
},{"../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/hash.js":"../node_modules/monaco-editor/esm/vs/base/common/hash.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../browser/services/codeEditorService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","./color.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/color.js","../../../platform/configuration/common/configuration.js":"../node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/comment/blockCommentCommand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockCommentCommand = void 0;

var _editOperation = require("../../common/core/editOperation.js");

var _position = require("../../common/core/position.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _languageConfigurationRegistry = require("../../common/modes/languageConfigurationRegistry.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var BlockCommentCommand =
/** @class */
function () {
  function BlockCommentCommand(selection) {
    this._selection = selection;
    this._usedEndToken = null;
  }

  BlockCommentCommand._haystackHasNeedleAtOffset = function (haystack, needle, offset) {
    if (offset < 0) {
      return false;
    }

    var needleLength = needle.length;
    var haystackLength = haystack.length;

    if (offset + needleLength > haystackLength) {
      return false;
    }

    for (var i = 0; i < needleLength; i++) {
      var codeA = haystack.charCodeAt(offset + i);
      var codeB = needle.charCodeAt(i);

      if (codeA === codeB) {
        continue;
      }

      if (codeA >= 65
      /* A */
      && codeA <= 90
      /* Z */
      && codeA + 32 === codeB) {
        // codeA is upper-case variant of codeB
        continue;
      }

      if (codeB >= 65
      /* A */
      && codeB <= 90
      /* Z */
      && codeB + 32 === codeA) {
        // codeB is upper-case variant of codeA
        continue;
      }

      return false;
    }

    return true;
  };

  BlockCommentCommand.prototype._createOperationsForBlockComment = function (selection, startToken, endToken, model, builder) {
    var startLineNumber = selection.startLineNumber;
    var startColumn = selection.startColumn;
    var endLineNumber = selection.endLineNumber;
    var endColumn = selection.endColumn;
    var startLineText = model.getLineContent(startLineNumber);
    var endLineText = model.getLineContent(endLineNumber);
    var startTokenIndex = startLineText.lastIndexOf(startToken, startColumn - 1 + startToken.length);
    var endTokenIndex = endLineText.indexOf(endToken, endColumn - 1 - endToken.length);

    if (startTokenIndex !== -1 && endTokenIndex !== -1) {
      if (startLineNumber === endLineNumber) {
        var lineBetweenTokens = startLineText.substring(startTokenIndex + startToken.length, endTokenIndex);

        if (lineBetweenTokens.indexOf(endToken) >= 0) {
          // force to add a block comment
          startTokenIndex = -1;
          endTokenIndex = -1;
        }
      } else {
        var startLineAfterStartToken = startLineText.substring(startTokenIndex + startToken.length);
        var endLineBeforeEndToken = endLineText.substring(0, endTokenIndex);

        if (startLineAfterStartToken.indexOf(endToken) >= 0 || endLineBeforeEndToken.indexOf(endToken) >= 0) {
          // force to add a block comment
          startTokenIndex = -1;
          endTokenIndex = -1;
        }
      }
    }

    var ops;

    if (startTokenIndex !== -1 && endTokenIndex !== -1) {
      // Consider spaces as part of the comment tokens
      if (startTokenIndex + startToken.length < startLineText.length) {
        if (startLineText.charCodeAt(startTokenIndex + startToken.length) === 32
        /* Space */
        ) {
            // Pretend the start token contains a trailing space
            startToken = startToken + ' ';
          }
      }

      if (endTokenIndex > 0) {
        if (endLineText.charCodeAt(endTokenIndex - 1) === 32
        /* Space */
        ) {
            // Pretend the end token contains a leading space
            endToken = ' ' + endToken;
            endTokenIndex -= 1;
          }
      }

      ops = BlockCommentCommand._createRemoveBlockCommentOperations(new _range.Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken);
    } else {
      ops = BlockCommentCommand._createAddBlockCommentOperations(selection, startToken, endToken);
      this._usedEndToken = ops.length === 1 ? endToken : null;
    }

    for (var _i = 0, ops_1 = ops; _i < ops_1.length; _i++) {
      var op = ops_1[_i];
      builder.addTrackedEditOperation(op.range, op.text);
    }
  };

  BlockCommentCommand._createRemoveBlockCommentOperations = function (r, startToken, endToken) {
    var res = [];

    if (!_range.Range.isEmpty(r)) {
      // Remove block comment start
      res.push(_editOperation.EditOperation.delete(new _range.Range(r.startLineNumber, r.startColumn - startToken.length, r.startLineNumber, r.startColumn))); // Remove block comment end

      res.push(_editOperation.EditOperation.delete(new _range.Range(r.endLineNumber, r.endColumn, r.endLineNumber, r.endColumn + endToken.length)));
    } else {
      // Remove both continuously
      res.push(_editOperation.EditOperation.delete(new _range.Range(r.startLineNumber, r.startColumn - startToken.length, r.endLineNumber, r.endColumn + endToken.length)));
    }

    return res;
  };

  BlockCommentCommand._createAddBlockCommentOperations = function (r, startToken, endToken) {
    var res = [];

    if (!_range.Range.isEmpty(r)) {
      // Insert block comment start
      res.push(_editOperation.EditOperation.insert(new _position.Position(r.startLineNumber, r.startColumn), startToken + ' ')); // Insert block comment end

      res.push(_editOperation.EditOperation.insert(new _position.Position(r.endLineNumber, r.endColumn), ' ' + endToken));
    } else {
      // Insert both continuously
      res.push(_editOperation.EditOperation.replace(new _range.Range(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn), startToken + '  ' + endToken));
    }

    return res;
  };

  BlockCommentCommand.prototype.getEditOperations = function (model, builder) {
    var startLineNumber = this._selection.startLineNumber;
    var startColumn = this._selection.startColumn;
    model.tokenizeIfCheap(startLineNumber);
    var languageId = model.getLanguageIdAtPosition(startLineNumber, startColumn);

    var config = _languageConfigurationRegistry.LanguageConfigurationRegistry.getComments(languageId);

    if (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {
      // Mode does not support block comments
      return;
    }

    this._createOperationsForBlockComment(this._selection, config.blockCommentStartToken, config.blockCommentEndToken, model, builder);
  };

  BlockCommentCommand.prototype.computeCursorState = function (model, helper) {
    var inverseEditOperations = helper.getInverseEditOperations();

    if (inverseEditOperations.length === 2) {
      var startTokenEditOperation = inverseEditOperations[0];
      var endTokenEditOperation = inverseEditOperations[1];
      return new _selection.Selection(startTokenEditOperation.range.endLineNumber, startTokenEditOperation.range.endColumn, endTokenEditOperation.range.startLineNumber, endTokenEditOperation.range.startColumn);
    } else {
      var srcRange = inverseEditOperations[0].range;
      var deltaColumn = this._usedEndToken ? -this._usedEndToken.length - 1 : 0; // minus 1 space before endToken

      return new _selection.Selection(srcRange.endLineNumber, srcRange.endColumn + deltaColumn, srcRange.endLineNumber, srcRange.endColumn + deltaColumn);
    }
  };

  return BlockCommentCommand;
}();

exports.BlockCommentCommand = BlockCommentCommand;
},{"../../common/core/editOperation.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/editOperation.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/modes/languageConfigurationRegistry.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes/languageConfigurationRegistry.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/comment/lineCommentCommand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LineCommentCommand = void 0;

var strings = _interopRequireWildcard(require("../../../base/common/strings.js"));

var _editOperation = require("../../common/core/editOperation.js");

var _position = require("../../common/core/position.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _languageConfigurationRegistry = require("../../common/modes/languageConfigurationRegistry.js");

var _blockCommentCommand = require("./blockCommentCommand.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var LineCommentCommand =
/** @class */
function () {
  function LineCommentCommand(selection, tabSize, type) {
    this._selection = selection;
    this._selectionId = null;
    this._tabSize = tabSize;
    this._type = type;
    this._deltaColumn = 0;
    this._moveEndPositionDown = false;
  }
  /**
   * Do an initial pass over the lines and gather info about the line comment string.
   * Returns null if any of the lines doesn't support a line comment string.
   */


  LineCommentCommand._gatherPreflightCommentStrings = function (model, startLineNumber, endLineNumber) {
    model.tokenizeIfCheap(startLineNumber);
    var languageId = model.getLanguageIdAtPosition(startLineNumber, 1);

    var config = _languageConfigurationRegistry.LanguageConfigurationRegistry.getComments(languageId);

    var commentStr = config ? config.lineCommentToken : null;

    if (!commentStr) {
      // Mode does not support line comments
      return null;
    }

    var lines = [];

    for (var i = 0, lineCount = endLineNumber - startLineNumber + 1; i < lineCount; i++) {
      lines[i] = {
        ignore: false,
        commentStr: commentStr,
        commentStrOffset: 0,
        commentStrLength: commentStr.length
      };
    }

    return lines;
  };
  /**
   * Analyze lines and decide which lines are relevant and what the toggle should do.
   * Also, build up several offsets and lengths useful in the generation of editor operations.
   */


  LineCommentCommand._analyzeLines = function (type, model, lines, startLineNumber) {
    var onlyWhitespaceLines = true;
    var shouldRemoveComments;

    if (type === 0
    /* Toggle */
    ) {
        shouldRemoveComments = true;
      } else if (type === 1
    /* ForceAdd */
    ) {
        shouldRemoveComments = false;
      } else {
      shouldRemoveComments = true;
    }

    for (var i = 0, lineCount = lines.length; i < lineCount; i++) {
      var lineData = lines[i];
      var lineNumber = startLineNumber + i;
      var lineContent = model.getLineContent(lineNumber);
      var lineContentStartOffset = strings.firstNonWhitespaceIndex(lineContent);

      if (lineContentStartOffset === -1) {
        // Empty or whitespace only line
        if (type === 0
        /* Toggle */
        ) {
            lineData.ignore = true;
          } else if (type === 1
        /* ForceAdd */
        ) {
            lineData.ignore = true;
          } else {
          lineData.ignore = true;
        }

        lineData.commentStrOffset = lineContent.length;
        continue;
      }

      onlyWhitespaceLines = false;
      lineData.ignore = false;
      lineData.commentStrOffset = lineContentStartOffset;

      if (shouldRemoveComments && !_blockCommentCommand.BlockCommentCommand._haystackHasNeedleAtOffset(lineContent, lineData.commentStr, lineContentStartOffset)) {
        if (type === 0
        /* Toggle */
        ) {
            // Every line so far has been a line comment, but this one is not
            shouldRemoveComments = false;
          } else if (type === 1
        /* ForceAdd */
        ) {// Will not happen
          } else {
          lineData.ignore = true;
        }
      }

      if (shouldRemoveComments) {
        var commentStrEndOffset = lineContentStartOffset + lineData.commentStrLength;

        if (commentStrEndOffset < lineContent.length && lineContent.charCodeAt(commentStrEndOffset) === 32
        /* Space */
        ) {
            lineData.commentStrLength += 1;
          }
      }
    }

    if (type === 0
    /* Toggle */
    && onlyWhitespaceLines) {
      // For only whitespace lines, we insert comments
      shouldRemoveComments = false; // Also, no longer ignore them

      for (var i = 0, lineCount = lines.length; i < lineCount; i++) {
        lines[i].ignore = false;
      }
    }

    return {
      supported: true,
      shouldRemoveComments: shouldRemoveComments,
      lines: lines
    };
  };
  /**
   * Analyze all lines and decide exactly what to do => not supported | insert line comments | remove line comments
   */


  LineCommentCommand._gatherPreflightData = function (type, model, startLineNumber, endLineNumber) {
    var lines = LineCommentCommand._gatherPreflightCommentStrings(model, startLineNumber, endLineNumber);

    if (lines === null) {
      return {
        supported: false
      };
    }

    return LineCommentCommand._analyzeLines(type, model, lines, startLineNumber);
  };
  /**
   * Given a successful analysis, execute either insert line comments, either remove line comments
   */


  LineCommentCommand.prototype._executeLineComments = function (model, builder, data, s) {
    var ops;

    if (data.shouldRemoveComments) {
      ops = LineCommentCommand._createRemoveLineCommentsOperations(data.lines, s.startLineNumber);
    } else {
      LineCommentCommand._normalizeInsertionPoint(model, data.lines, s.startLineNumber, this._tabSize);

      ops = LineCommentCommand._createAddLineCommentsOperations(data.lines, s.startLineNumber);
    }

    var cursorPosition = new _position.Position(s.positionLineNumber, s.positionColumn);

    for (var i = 0, len = ops.length; i < len; i++) {
      builder.addEditOperation(ops[i].range, ops[i].text);

      if (ops[i].range.isEmpty() && ops[i].range.getStartPosition().equals(cursorPosition)) {
        var lineContent = model.getLineContent(cursorPosition.lineNumber);

        if (lineContent.length + 1 === cursorPosition.column) {
          this._deltaColumn = (ops[i].text || '').length;
        }
      }
    }

    this._selectionId = builder.trackSelection(s);
  };

  LineCommentCommand.prototype._attemptRemoveBlockComment = function (model, s, startToken, endToken) {
    var startLineNumber = s.startLineNumber;
    var endLineNumber = s.endLineNumber;
    var startTokenAllowedBeforeColumn = endToken.length + Math.max(model.getLineFirstNonWhitespaceColumn(s.startLineNumber), s.startColumn);
    var startTokenIndex = model.getLineContent(startLineNumber).lastIndexOf(startToken, startTokenAllowedBeforeColumn - 1);
    var endTokenIndex = model.getLineContent(endLineNumber).indexOf(endToken, s.endColumn - 1 - startToken.length);

    if (startTokenIndex !== -1 && endTokenIndex === -1) {
      endTokenIndex = model.getLineContent(startLineNumber).indexOf(endToken, startTokenIndex + startToken.length);
      endLineNumber = startLineNumber;
    }

    if (startTokenIndex === -1 && endTokenIndex !== -1) {
      startTokenIndex = model.getLineContent(endLineNumber).lastIndexOf(startToken, endTokenIndex);
      startLineNumber = endLineNumber;
    }

    if (s.isEmpty() && (startTokenIndex === -1 || endTokenIndex === -1)) {
      startTokenIndex = model.getLineContent(startLineNumber).indexOf(startToken);

      if (startTokenIndex !== -1) {
        endTokenIndex = model.getLineContent(startLineNumber).indexOf(endToken, startTokenIndex + startToken.length);
      }
    } // We have to adjust to possible inner white space.
    // For Space after startToken, add Space to startToken - range math will work out.


    if (startTokenIndex !== -1 && model.getLineContent(startLineNumber).charCodeAt(startTokenIndex + startToken.length) === 32
    /* Space */
    ) {
        startToken += ' ';
      } // For Space before endToken, add Space before endToken and shift index one left.


    if (endTokenIndex !== -1 && model.getLineContent(endLineNumber).charCodeAt(endTokenIndex - 1) === 32
    /* Space */
    ) {
        endToken = ' ' + endToken;
        endTokenIndex -= 1;
      }

    if (startTokenIndex !== -1 && endTokenIndex !== -1) {
      return _blockCommentCommand.BlockCommentCommand._createRemoveBlockCommentOperations(new _range.Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken);
    }

    return null;
  };
  /**
   * Given an unsuccessful analysis, delegate to the block comment command
   */


  LineCommentCommand.prototype._executeBlockComment = function (model, builder, s) {
    model.tokenizeIfCheap(s.startLineNumber);
    var languageId = model.getLanguageIdAtPosition(s.startLineNumber, 1);

    var config = _languageConfigurationRegistry.LanguageConfigurationRegistry.getComments(languageId);

    if (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {
      // Mode does not support block comments
      return;
    }

    var startToken = config.blockCommentStartToken;
    var endToken = config.blockCommentEndToken;

    var ops = this._attemptRemoveBlockComment(model, s, startToken, endToken);

    if (!ops) {
      if (s.isEmpty()) {
        var lineContent = model.getLineContent(s.startLineNumber);
        var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);

        if (firstNonWhitespaceIndex === -1) {
          // Line is empty or contains only whitespace
          firstNonWhitespaceIndex = lineContent.length;
        }

        ops = _blockCommentCommand.BlockCommentCommand._createAddBlockCommentOperations(new _range.Range(s.startLineNumber, firstNonWhitespaceIndex + 1, s.startLineNumber, lineContent.length + 1), startToken, endToken);
      } else {
        ops = _blockCommentCommand.BlockCommentCommand._createAddBlockCommentOperations(new _range.Range(s.startLineNumber, model.getLineFirstNonWhitespaceColumn(s.startLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), startToken, endToken);
      }

      if (ops.length === 1) {
        // Leave cursor after token and Space
        this._deltaColumn = startToken.length + 1;
      }
    }

    this._selectionId = builder.trackSelection(s);

    for (var _i = 0, ops_1 = ops; _i < ops_1.length; _i++) {
      var op = ops_1[_i];
      builder.addEditOperation(op.range, op.text);
    }
  };

  LineCommentCommand.prototype.getEditOperations = function (model, builder) {
    var s = this._selection;
    this._moveEndPositionDown = false;

    if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {
      this._moveEndPositionDown = true;
      s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));
    }

    var data = LineCommentCommand._gatherPreflightData(this._type, model, s.startLineNumber, s.endLineNumber);

    if (data.supported) {
      return this._executeLineComments(model, builder, data, s);
    }

    return this._executeBlockComment(model, builder, s);
  };

  LineCommentCommand.prototype.computeCursorState = function (model, helper) {
    var result = helper.getTrackedSelection(this._selectionId);

    if (this._moveEndPositionDown) {
      result = result.setEndPosition(result.endLineNumber + 1, 1);
    }

    return new _selection.Selection(result.selectionStartLineNumber, result.selectionStartColumn + this._deltaColumn, result.positionLineNumber, result.positionColumn + this._deltaColumn);
  };
  /**
   * Generate edit operations in the remove line comment case
   */


  LineCommentCommand._createRemoveLineCommentsOperations = function (lines, startLineNumber) {
    var res = [];

    for (var i = 0, len = lines.length; i < len; i++) {
      var lineData = lines[i];

      if (lineData.ignore) {
        continue;
      }

      res.push(_editOperation.EditOperation.delete(new _range.Range(startLineNumber + i, lineData.commentStrOffset + 1, startLineNumber + i, lineData.commentStrOffset + lineData.commentStrLength + 1)));
    }

    return res;
  };
  /**
   * Generate edit operations in the add line comment case
   */


  LineCommentCommand._createAddLineCommentsOperations = function (lines, startLineNumber) {
    var res = [];

    for (var i = 0, len = lines.length; i < len; i++) {
      var lineData = lines[i];

      if (lineData.ignore) {
        continue;
      }

      res.push(_editOperation.EditOperation.insert(new _position.Position(startLineNumber + i, lineData.commentStrOffset + 1), lineData.commentStr + ' '));
    }

    return res;
  }; // TODO@Alex -> duplicated in characterHardWrappingLineMapper


  LineCommentCommand.nextVisibleColumn = function (currentVisibleColumn, tabSize, isTab, columnSize) {
    if (isTab) {
      return currentVisibleColumn + (tabSize - currentVisibleColumn % tabSize);
    }

    return currentVisibleColumn + columnSize;
  };
  /**
   * Adjust insertion points to have them vertically aligned in the add line comment case
   */


  LineCommentCommand._normalizeInsertionPoint = function (model, lines, startLineNumber, tabSize) {
    var minVisibleColumn = 1073741824
    /* MAX_SAFE_SMALL_INTEGER */
    ;
    var j;
    var lenJ;

    for (var i = 0, len = lines.length; i < len; i++) {
      if (lines[i].ignore) {
        continue;
      }

      var lineContent = model.getLineContent(startLineNumber + i);
      var currentVisibleColumn = 0;

      for (var j_1 = 0, lenJ_1 = lines[i].commentStrOffset; currentVisibleColumn < minVisibleColumn && j_1 < lenJ_1; j_1++) {
        currentVisibleColumn = LineCommentCommand.nextVisibleColumn(currentVisibleColumn, tabSize, lineContent.charCodeAt(j_1) === 9
        /* Tab */
        , 1);
      }

      if (currentVisibleColumn < minVisibleColumn) {
        minVisibleColumn = currentVisibleColumn;
      }
    }

    minVisibleColumn = Math.floor(minVisibleColumn / tabSize) * tabSize;

    for (var i = 0, len = lines.length; i < len; i++) {
      if (lines[i].ignore) {
        continue;
      }

      var lineContent = model.getLineContent(startLineNumber + i);
      var currentVisibleColumn = 0;

      for (j = 0, lenJ = lines[i].commentStrOffset; currentVisibleColumn < minVisibleColumn && j < lenJ; j++) {
        currentVisibleColumn = LineCommentCommand.nextVisibleColumn(currentVisibleColumn, tabSize, lineContent.charCodeAt(j) === 9
        /* Tab */
        , 1);
      }

      if (currentVisibleColumn > minVisibleColumn) {
        lines[i].commentStrOffset = j - 1;
      } else {
        lines[i].commentStrOffset = j;
      }
    }
  };

  return LineCommentCommand;
}();

exports.LineCommentCommand = LineCommentCommand;
},{"../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../common/core/editOperation.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/editOperation.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/modes/languageConfigurationRegistry.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes/languageConfigurationRegistry.js","./blockCommentCommand.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/comment/blockCommentCommand.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/comment/comment.js":[function(require,module,exports) {
"use strict";

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _keyCodes = require("../../../base/common/keyCodes.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _blockCommentCommand = require("./blockCommentCommand.js");

var _lineCommentCommand = require("./lineCommentCommand.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var CommentLineAction =
/** @class */
function (_super) {
  __extends(CommentLineAction, _super);

  function CommentLineAction(type, opts) {
    var _this = _super.call(this, opts) || this;

    _this._type = type;
    return _this;
  }

  CommentLineAction.prototype.run = function (accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var model = editor.getModel();
    var commands = [];
    var selections = editor.getSelections();
    var opts = model.getOptions();

    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {
      var selection = selections_1[_i];
      commands.push(new _lineCommentCommand.LineCommentCommand(selection, opts.tabSize, this._type));
    }

    editor.pushUndoStop();
    editor.executeCommands(this.id, commands);
    editor.pushUndoStop();
  };

  return CommentLineAction;
}(_editorExtensions.EditorAction);

var ToggleCommentLineAction =
/** @class */
function (_super) {
  __extends(ToggleCommentLineAction, _super);

  function ToggleCommentLineAction() {
    return _super.call(this, 0
    /* Toggle */
    , {
      id: 'editor.action.commentLine',
      label: nls.localize('comment.line', "Toggle Line Comment"),
      alias: 'Toggle Line Comment',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 85
        /* US_SLASH */
        ,
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 15
        /* MenubarEditMenu */
        ,
        group: '5_insert',
        title: nls.localize({
          key: 'miToggleLineComment',
          comment: ['&& denotes a mnemonic']
        }, "&&Toggle Line Comment"),
        order: 1
      }
    }) || this;
  }

  return ToggleCommentLineAction;
}(CommentLineAction);

var AddLineCommentAction =
/** @class */
function (_super) {
  __extends(AddLineCommentAction, _super);

  function AddLineCommentAction() {
    return _super.call(this, 1
    /* ForceAdd */
    , {
      id: 'editor.action.addCommentLine',
      label: nls.localize('comment.line.add', "Add Line Comment"),
      alias: 'Add Line Comment',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 33
        /* KEY_C */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return AddLineCommentAction;
}(CommentLineAction);

var RemoveLineCommentAction =
/** @class */
function (_super) {
  __extends(RemoveLineCommentAction, _super);

  function RemoveLineCommentAction() {
    return _super.call(this, 2
    /* ForceRemove */
    , {
      id: 'editor.action.removeCommentLine',
      label: nls.localize('comment.line.remove', "Remove Line Comment"),
      alias: 'Remove Line Comment',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 51
        /* KEY_U */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return RemoveLineCommentAction;
}(CommentLineAction);

var BlockCommentAction =
/** @class */
function (_super) {
  __extends(BlockCommentAction, _super);

  function BlockCommentAction() {
    return _super.call(this, {
      id: 'editor.action.blockComment',
      label: nls.localize('comment.block', "Toggle Block Comment"),
      alias: 'Toggle Block Comment',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 1024
        /* Shift */
        | 512
        /* Alt */
        | 31
        /* KEY_A */
        ,
        linux: {
          primary: 2048
          /* CtrlCmd */
          | 1024
          /* Shift */
          | 31
          /* KEY_A */

        },
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 15
        /* MenubarEditMenu */
        ,
        group: '5_insert',
        title: nls.localize({
          key: 'miToggleBlockComment',
          comment: ['&& denotes a mnemonic']
        }, "Toggle &&Block Comment"),
        order: 2
      }
    }) || this;
  }

  BlockCommentAction.prototype.run = function (accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var commands = [];
    var selections = editor.getSelections();

    for (var _i = 0, selections_2 = selections; _i < selections_2.length; _i++) {
      var selection = selections_2[_i];
      commands.push(new _blockCommentCommand.BlockCommentCommand(selection));
    }

    editor.pushUndoStop();
    editor.executeCommands(this.id, commands);
    editor.pushUndoStop();
  };

  return BlockCommentAction;
}(_editorExtensions.EditorAction);

(0, _editorExtensions.registerEditorAction)(ToggleCommentLineAction);
(0, _editorExtensions.registerEditorAction)(AddLineCommentAction);
(0, _editorExtensions.registerEditorAction)(RemoveLineCommentAction);
(0, _editorExtensions.registerEditorAction)(BlockCommentAction);
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/keyCodes.js":"../node_modules/monaco-editor/esm/vs/base/common/keyCodes.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","./blockCommentCommand.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/comment/blockCommentCommand.js","./lineCommentCommand.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/comment/lineCommentCommand.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/contextmenu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextSubMenu = void 0;

var _menu = require("./ui/menu/menu.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var ContextSubMenu =
/** @class */
function (_super) {
  __extends(ContextSubMenu, _super);

  function ContextSubMenu(label, entries) {
    var _this = _super.call(this, label, entries, 'contextsubmenu') || this;

    _this.entries = entries;
    return _this;
  }

  return ContextSubMenu;
}(_menu.SubmenuAction);

exports.ContextSubMenu = ContextSubMenu;
},{"./ui/menu/menu.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/menu/menu.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/contextmenu/contextmenu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextMenuController = void 0;

var nls = _interopRequireWildcard(require("../../../nls.js"));

var dom = _interopRequireWildcard(require("../../../base/browser/dom.js"));

var _actionbar = require("../../../base/browser/ui/actionbar/actionbar.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _actions = require("../../../platform/actions/common/actions.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _contextView = require("../../../platform/contextview/browser/contextView.js");

var _keybinding = require("../../../platform/keybinding/common/keybinding.js");

var _contextmenu = require("../../../base/browser/contextmenu.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var ContextMenuController =
/** @class */
function () {
  function ContextMenuController(editor, _contextMenuService, _contextViewService, _contextKeyService, _keybindingService, _menuService) {
    var _this = this;

    this._contextMenuService = _contextMenuService;
    this._contextViewService = _contextViewService;
    this._contextKeyService = _contextKeyService;
    this._keybindingService = _keybindingService;
    this._menuService = _menuService;
    this._toDispose = new _lifecycle.DisposableStore();
    this._contextMenuIsBeingShownCount = 0;
    this._editor = editor;

    this._toDispose.add(this._editor.onContextMenu(function (e) {
      return _this._onContextMenu(e);
    }));

    this._toDispose.add(this._editor.onMouseWheel(function (e) {
      if (_this._contextMenuIsBeingShownCount > 0) {
        _this._contextViewService.hideContextView();
      }
    }));

    this._toDispose.add(this._editor.onKeyDown(function (e) {
      if (e.keyCode === 58
      /* ContextMenu */
      ) {
          // Chrome is funny like that
          e.preventDefault();
          e.stopPropagation();

          _this.showContextMenu();
        }
    }));
  }

  ContextMenuController.get = function (editor) {
    return editor.getContribution(ContextMenuController.ID);
  };

  ContextMenuController.prototype._onContextMenu = function (e) {
    if (!this._editor.hasModel()) {
      return;
    }

    if (!this._editor.getOption(13
    /* contextmenu */
    )) {
      this._editor.focus(); // Ensure the cursor is at the position of the mouse click


      if (e.target.position && !this._editor.getSelection().containsPosition(e.target.position)) {
        this._editor.setPosition(e.target.position);
      }

      return; // Context menu is turned off through configuration
    }

    if (e.target.type === 12
    /* OVERLAY_WIDGET */
    ) {
        return; // allow native menu on widgets to support right click on input field for example in find
      }

    e.event.preventDefault();

    if (e.target.type !== 6
    /* CONTENT_TEXT */
    && e.target.type !== 7
    /* CONTENT_EMPTY */
    && e.target.type !== 1
    /* TEXTAREA */
    ) {
        return; // only support mouse click into text or native context menu key for now
      } // Ensure the editor gets focus if it hasn't, so the right events are being sent to other contributions


    this._editor.focus(); // Ensure the cursor is at the position of the mouse click


    if (e.target.position) {
      var hasSelectionAtPosition = false;

      for (var _i = 0, _a = this._editor.getSelections(); _i < _a.length; _i++) {
        var selection = _a[_i];

        if (selection.containsPosition(e.target.position)) {
          hasSelectionAtPosition = true;
          break;
        }
      }

      if (!hasSelectionAtPosition) {
        this._editor.setPosition(e.target.position);
      }
    } // Unless the user triggerd the context menu through Shift+F10, use the mouse position as menu position


    var anchor = null;

    if (e.target.type !== 1
    /* TEXTAREA */
    ) {
        anchor = {
          x: e.event.posx - 1,
          width: 2,
          y: e.event.posy - 1,
          height: 2
        };
      } // Show the context menu


    this.showContextMenu(anchor);
  };

  ContextMenuController.prototype.showContextMenu = function (anchor) {
    if (!this._editor.getOption(13
    /* contextmenu */
    )) {
      return; // Context menu is turned off through configuration
    }

    if (!this._editor.hasModel()) {
      return;
    }

    if (!this._contextMenuService) {
      this._editor.focus();

      return; // We need the context menu service to function
    } // Find actions available for menu


    var menuActions = this._getMenuActions(this._editor.getModel(), 7
    /* EditorContext */
    ); // Show menu if we have actions to show


    if (menuActions.length > 0) {
      this._doShowContextMenu(menuActions, anchor);
    }
  };

  ContextMenuController.prototype._getMenuActions = function (model, menuId) {
    var result = []; // get menu groups

    var menu = this._menuService.createMenu(menuId, this._contextKeyService);

    var groups = menu.getActions({
      arg: model.uri
    });
    menu.dispose(); // translate them into other actions

    for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
      var group = groups_1[_i];
      var actions = group[1];
      var addedItems = 0;

      for (var _a = 0, actions_1 = actions; _a < actions_1.length; _a++) {
        var action = actions_1[_a];

        if (action instanceof _actions.SubmenuItemAction) {
          var subActions = this._getMenuActions(model, action.item.submenu);

          if (subActions.length > 0) {
            result.push(new _contextmenu.ContextSubMenu(action.label, subActions));
            addedItems++;
          }
        } else {
          result.push(action);
          addedItems++;
        }
      }

      if (addedItems) {
        result.push(new _actionbar.Separator());
      }
    }

    if (result.length) {
      result.pop(); // remove last separator
    }

    return result;
  };

  ContextMenuController.prototype._doShowContextMenu = function (actions, anchor) {
    var _this = this;

    if (anchor === void 0) {
      anchor = null;
    }

    if (!this._editor.hasModel()) {
      return;
    } // Disable hover


    var oldHoverSetting = this._editor.getOption(42
    /* hover */
    );

    this._editor.updateOptions({
      hover: {
        enabled: false
      }
    });

    if (!anchor) {
      // Ensure selection is visible
      this._editor.revealPosition(this._editor.getPosition(), 1
      /* Immediate */
      );

      this._editor.render();

      var cursorCoords = this._editor.getScrolledVisiblePosition(this._editor.getPosition()); // Translate to absolute editor position


      var editorCoords = dom.getDomNodePagePosition(this._editor.getDomNode());
      var posx = editorCoords.left + cursorCoords.left;
      var posy = editorCoords.top + cursorCoords.top + cursorCoords.height;
      anchor = {
        x: posx,
        y: posy
      };
    } // Show menu


    this._contextMenuIsBeingShownCount++;

    this._contextMenuService.showContextMenu({
      getAnchor: function () {
        return anchor;
      },
      getActions: function () {
        return actions;
      },
      getActionViewItem: function (action) {
        var keybinding = _this._keybindingFor(action);

        if (keybinding) {
          return new _actionbar.ActionViewItem(action, action, {
            label: true,
            keybinding: keybinding.getLabel(),
            isMenu: true
          });
        }

        var customActionViewItem = action;

        if (typeof customActionViewItem.getActionViewItem === 'function') {
          return customActionViewItem.getActionViewItem();
        }

        return new _actionbar.ActionViewItem(action, action, {
          icon: true,
          label: true,
          isMenu: true
        });
      },
      getKeyBinding: function (action) {
        return _this._keybindingFor(action);
      },
      onHide: function (wasCancelled) {
        _this._contextMenuIsBeingShownCount--;

        _this._editor.focus();

        _this._editor.updateOptions({
          hover: oldHoverSetting
        });
      }
    });
  };

  ContextMenuController.prototype._keybindingFor = function (action) {
    return this._keybindingService.lookupKeybinding(action.id);
  };

  ContextMenuController.prototype.dispose = function () {
    if (this._contextMenuIsBeingShownCount > 0) {
      this._contextViewService.hideContextView();
    }

    this._toDispose.dispose();
  };

  ContextMenuController.ID = 'editor.contrib.contextmenu';
  ContextMenuController = __decorate([__param(1, _contextView.IContextMenuService), __param(2, _contextView.IContextViewService), __param(3, _contextkey.IContextKeyService), __param(4, _keybinding.IKeybindingService), __param(5, _actions.IMenuService)], ContextMenuController);
  return ContextMenuController;
}();

exports.ContextMenuController = ContextMenuController;

var ShowContextMenu =
/** @class */
function (_super) {
  __extends(ShowContextMenu, _super);

  function ShowContextMenu() {
    return _super.call(this, {
      id: 'editor.action.showContextMenu',
      label: nls.localize('action.showContextMenu.label', "Show Editor Context Menu"),
      alias: 'Show Editor Context Menu',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 1024
        /* Shift */
        | 68
        /* F10 */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  ShowContextMenu.prototype.run = function (accessor, editor) {
    var contribution = ContextMenuController.get(editor);
    contribution.showContextMenu();
  };

  return ShowContextMenu;
}(_editorExtensions.EditorAction);

(0, _editorExtensions.registerEditorContribution)(ContextMenuController.ID, ContextMenuController);
(0, _editorExtensions.registerEditorAction)(ShowContextMenu);
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/browser/ui/actionbar/actionbar.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../../platform/actions/common/actions.js":"../node_modules/monaco-editor/esm/vs/platform/actions/common/actions.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/contextview/browser/contextView.js":"../node_modules/monaco-editor/esm/vs/platform/contextview/browser/contextView.js","../../../platform/keybinding/common/keybinding.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding.js","../../../base/browser/contextmenu.js":"../node_modules/monaco-editor/esm/vs/base/browser/contextmenu.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/cursorUndo/cursorUndo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CursorRedo = exports.CursorUndo = exports.CursorUndoRedoController = void 0;

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _lifecycle = require("../../../base/common/lifecycle.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var CursorState =
/** @class */
function () {
  function CursorState(selections) {
    this.selections = selections;
  }

  CursorState.prototype.equals = function (other) {
    var thisLen = this.selections.length;
    var otherLen = other.selections.length;

    if (thisLen !== otherLen) {
      return false;
    }

    for (var i = 0; i < thisLen; i++) {
      if (!this.selections[i].equalsSelection(other.selections[i])) {
        return false;
      }
    }

    return true;
  };

  return CursorState;
}();

var CursorUndoRedoController =
/** @class */
function (_super) {
  __extends(CursorUndoRedoController, _super);

  function CursorUndoRedoController(editor) {
    var _this = _super.call(this) || this;

    _this._editor = editor;
    _this._isCursorUndoRedo = false;
    _this._undoStack = [];
    _this._redoStack = [];

    _this._register(editor.onDidChangeModel(function (e) {
      _this._undoStack = [];
      _this._redoStack = [];
    }));

    _this._register(editor.onDidChangeModelContent(function (e) {
      _this._undoStack = [];
      _this._redoStack = [];
    }));

    _this._register(editor.onDidChangeCursorSelection(function (e) {
      if (_this._isCursorUndoRedo) {
        return;
      }

      if (!e.oldSelections) {
        return;
      }

      if (e.oldModelVersionId !== e.modelVersionId) {
        return;
      }

      var prevState = new CursorState(e.oldSelections);

      var isEqualToLastUndoStack = _this._undoStack.length > 0 && _this._undoStack[_this._undoStack.length - 1].equals(prevState);

      if (!isEqualToLastUndoStack) {
        _this._undoStack.push(prevState);

        _this._redoStack = [];

        if (_this._undoStack.length > 50) {
          // keep the cursor undo stack bounded
          _this._undoStack.shift();
        }
      }
    }));

    return _this;
  }

  CursorUndoRedoController.get = function (editor) {
    return editor.getContribution(CursorUndoRedoController.ID);
  };

  CursorUndoRedoController.prototype.cursorUndo = function () {
    if (!this._editor.hasModel() || this._undoStack.length === 0) {
      return;
    }

    this._redoStack.push(new CursorState(this._editor.getSelections()));

    this._applyState(this._undoStack.pop());
  };

  CursorUndoRedoController.prototype.cursorRedo = function () {
    if (!this._editor.hasModel() || this._redoStack.length === 0) {
      return;
    }

    this._undoStack.push(new CursorState(this._editor.getSelections()));

    this._applyState(this._redoStack.pop());
  };

  CursorUndoRedoController.prototype._applyState = function (state) {
    this._isCursorUndoRedo = true;

    this._editor.setSelections(state.selections);

    this._editor.revealRangeInCenterIfOutsideViewport(state.selections[0], 0
    /* Smooth */
    );

    this._isCursorUndoRedo = false;
  };

  CursorUndoRedoController.ID = 'editor.contrib.cursorUndoRedoController';
  return CursorUndoRedoController;
}(_lifecycle.Disposable);

exports.CursorUndoRedoController = CursorUndoRedoController;

var CursorUndo =
/** @class */
function (_super) {
  __extends(CursorUndo, _super);

  function CursorUndo() {
    return _super.call(this, {
      id: 'cursorUndo',
      label: nls.localize('cursor.undo', "Cursor Undo"),
      alias: 'Cursor Undo',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 2048
        /* CtrlCmd */
        | 51
        /* KEY_U */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  CursorUndo.prototype.run = function (accessor, editor, args) {
    CursorUndoRedoController.get(editor).cursorUndo();
  };

  return CursorUndo;
}(_editorExtensions.EditorAction);

exports.CursorUndo = CursorUndo;

var CursorRedo =
/** @class */
function (_super) {
  __extends(CursorRedo, _super);

  function CursorRedo() {
    return _super.call(this, {
      id: 'cursorRedo',
      label: nls.localize('cursor.redo', "Cursor Redo"),
      alias: 'Cursor Redo',
      precondition: undefined
    }) || this;
  }

  CursorRedo.prototype.run = function (accessor, editor, args) {
    CursorUndoRedoController.get(editor).cursorRedo();
  };

  return CursorRedo;
}(_editorExtensions.EditorAction);

exports.CursorRedo = CursorRedo;
(0, _editorExtensions.registerEditorContribution)(CursorUndoRedoController.ID, CursorUndoRedoController);
(0, _editorExtensions.registerEditorAction)(CursorUndo);
(0, _editorExtensions.registerEditorAction)(CursorRedo);
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/dnd/dnd.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/dnd/dragAndDropCommand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DragAndDropCommand = void 0;

var _selection = require("../../common/core/selection.js");

var _range = require("../../common/core/range.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var DragAndDropCommand =
/** @class */
function () {
  function DragAndDropCommand(selection, targetPosition, copy) {
    this.selection = selection;
    this.targetPosition = targetPosition;
    this.copy = copy;
    this.targetSelection = null;
  }

  DragAndDropCommand.prototype.getEditOperations = function (model, builder) {
    var text = model.getValueInRange(this.selection);

    if (!this.copy) {
      builder.addEditOperation(this.selection, null);
    }

    builder.addEditOperation(new _range.Range(this.targetPosition.lineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.targetPosition.column), text);

    if (this.selection.containsPosition(this.targetPosition) && !(this.copy && (this.selection.getEndPosition().equals(this.targetPosition) || this.selection.getStartPosition().equals(this.targetPosition)) // we allow users to paste content beside the selection
    )) {
      this.targetSelection = this.selection;
      return;
    }

    if (this.copy) {
      this.targetSelection = new _selection.Selection(this.targetPosition.lineNumber, this.targetPosition.column, this.selection.endLineNumber - this.selection.startLineNumber + this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);
      return;
    }

    if (this.targetPosition.lineNumber > this.selection.endLineNumber) {
      // Drag the selection downwards
      this.targetSelection = new _selection.Selection(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);
      return;
    }

    if (this.targetPosition.lineNumber < this.selection.endLineNumber) {
      // Drag the selection upwards
      this.targetSelection = new _selection.Selection(this.targetPosition.lineNumber, this.targetPosition.column, this.targetPosition.lineNumber + this.selection.endLineNumber - this.selection.startLineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);
      return;
    } // The target position is at the same line as the selection's end position.


    if (this.selection.endColumn <= this.targetPosition.column) {
      // The target position is after the selection's end position
      this.targetSelection = new _selection.Selection(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column - this.selection.endColumn + this.selection.startColumn : this.targetPosition.column - this.selection.endColumn + this.selection.startColumn, this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column : this.selection.endColumn);
    } else {
      // The target position is before the selection's end position. Since the selection doesn't contain the target position, the selection is one-line and target position is before this selection.
      this.targetSelection = new _selection.Selection(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.targetPosition.column + this.selection.endColumn - this.selection.startColumn);
    }
  };

  DragAndDropCommand.prototype.computeCursorState = function (model, helper) {
    return this.targetSelection;
  };

  return DragAndDropCommand;
}();

exports.DragAndDropCommand = DragAndDropCommand;
},{"../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/dnd/dnd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DragAndDropController = void 0;

require("./dnd.css");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _platform = require("../../../base/common/platform.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _position = require("../../common/core/position.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _dragAndDropCommand = require("./dragAndDropCommand.js");

var _textModel = require("../../common/model/textModel.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

function hasTriggerModifier(e) {
  if (_platform.isMacintosh) {
    return e.altKey;
  } else {
    return e.ctrlKey;
  }
}

var DragAndDropController =
/** @class */
function (_super) {
  __extends(DragAndDropController, _super);

  function DragAndDropController(editor) {
    var _this = _super.call(this) || this;

    _this._editor = editor;

    _this._register(_this._editor.onMouseDown(function (e) {
      return _this._onEditorMouseDown(e);
    }));

    _this._register(_this._editor.onMouseUp(function (e) {
      return _this._onEditorMouseUp(e);
    }));

    _this._register(_this._editor.onMouseDrag(function (e) {
      return _this._onEditorMouseDrag(e);
    }));

    _this._register(_this._editor.onMouseDrop(function (e) {
      return _this._onEditorMouseDrop(e);
    }));

    _this._register(_this._editor.onKeyDown(function (e) {
      return _this.onEditorKeyDown(e);
    }));

    _this._register(_this._editor.onKeyUp(function (e) {
      return _this.onEditorKeyUp(e);
    }));

    _this._register(_this._editor.onDidBlurEditorWidget(function () {
      return _this.onEditorBlur();
    }));

    _this._dndDecorationIds = [];
    _this._mouseDown = false;
    _this._modifierPressed = false;
    _this._dragSelection = null;
    return _this;
  }

  DragAndDropController.prototype.onEditorBlur = function () {
    this._removeDecoration();

    this._dragSelection = null;
    this._mouseDown = false;
    this._modifierPressed = false;
  };

  DragAndDropController.prototype.onEditorKeyDown = function (e) {
    if (!this._editor.getOption(23
    /* dragAndDrop */
    )) {
      return;
    }

    if (hasTriggerModifier(e)) {
      this._modifierPressed = true;
    }

    if (this._mouseDown && hasTriggerModifier(e)) {
      this._editor.updateOptions({
        mouseStyle: 'copy'
      });
    }
  };

  DragAndDropController.prototype.onEditorKeyUp = function (e) {
    if (!this._editor.getOption(23
    /* dragAndDrop */
    )) {
      return;
    }

    if (hasTriggerModifier(e)) {
      this._modifierPressed = false;
    }

    if (this._mouseDown && e.keyCode === DragAndDropController.TRIGGER_KEY_VALUE) {
      this._editor.updateOptions({
        mouseStyle: 'default'
      });
    }
  };

  DragAndDropController.prototype._onEditorMouseDown = function (mouseEvent) {
    this._mouseDown = true;
  };

  DragAndDropController.prototype._onEditorMouseUp = function (mouseEvent) {
    this._mouseDown = false; // Whenever users release the mouse, the drag and drop operation should finish and the cursor should revert to text.

    this._editor.updateOptions({
      mouseStyle: 'text'
    });
  };

  DragAndDropController.prototype._onEditorMouseDrag = function (mouseEvent) {
    var target = mouseEvent.target;

    if (this._dragSelection === null) {
      var selections = this._editor.getSelections() || [];
      var possibleSelections = selections.filter(function (selection) {
        return target.position && selection.containsPosition(target.position);
      });

      if (possibleSelections.length === 1) {
        this._dragSelection = possibleSelections[0];
      } else {
        return;
      }
    }

    if (hasTriggerModifier(mouseEvent.event)) {
      this._editor.updateOptions({
        mouseStyle: 'copy'
      });
    } else {
      this._editor.updateOptions({
        mouseStyle: 'default'
      });
    }

    if (target.position) {
      if (this._dragSelection.containsPosition(target.position)) {
        this._removeDecoration();
      } else {
        this.showAt(target.position);
      }
    }
  };

  DragAndDropController.prototype._onEditorMouseDrop = function (mouseEvent) {
    if (mouseEvent.target && (this._hitContent(mouseEvent.target) || this._hitMargin(mouseEvent.target)) && mouseEvent.target.position) {
      var newCursorPosition_1 = new _position.Position(mouseEvent.target.position.lineNumber, mouseEvent.target.position.column);

      if (this._dragSelection === null) {
        var newSelections = null;

        if (mouseEvent.event.shiftKey) {
          var primarySelection = this._editor.getSelection();

          if (primarySelection) {
            var selectionStartLineNumber = primarySelection.selectionStartLineNumber,
                selectionStartColumn = primarySelection.selectionStartColumn;
            newSelections = [new _selection.Selection(selectionStartLineNumber, selectionStartColumn, newCursorPosition_1.lineNumber, newCursorPosition_1.column)];
          }
        } else {
          newSelections = (this._editor.getSelections() || []).map(function (selection) {
            if (selection.containsPosition(newCursorPosition_1)) {
              return new _selection.Selection(newCursorPosition_1.lineNumber, newCursorPosition_1.column, newCursorPosition_1.lineNumber, newCursorPosition_1.column);
            } else {
              return selection;
            }
          });
        } // Use `mouse` as the source instead of `api`.


        this._editor.setSelections(newSelections || [], 'mouse');
      } else if (!this._dragSelection.containsPosition(newCursorPosition_1) || (hasTriggerModifier(mouseEvent.event) || this._modifierPressed) && (this._dragSelection.getEndPosition().equals(newCursorPosition_1) || this._dragSelection.getStartPosition().equals(newCursorPosition_1)) // we allow users to paste content beside the selection
      ) {
        this._editor.pushUndoStop();

        this._editor.executeCommand(DragAndDropController.ID, new _dragAndDropCommand.DragAndDropCommand(this._dragSelection, newCursorPosition_1, hasTriggerModifier(mouseEvent.event) || this._modifierPressed));

        this._editor.pushUndoStop();
      }
    }

    this._editor.updateOptions({
      mouseStyle: 'text'
    });

    this._removeDecoration();

    this._dragSelection = null;
    this._mouseDown = false;
  };

  DragAndDropController.prototype.showAt = function (position) {
    var newDecorations = [{
      range: new _range.Range(position.lineNumber, position.column, position.lineNumber, position.column),
      options: DragAndDropController._DECORATION_OPTIONS
    }];
    this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, newDecorations);

    this._editor.revealPosition(position, 1
    /* Immediate */
    );
  };

  DragAndDropController.prototype._removeDecoration = function () {
    this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, []);
  };

  DragAndDropController.prototype._hitContent = function (target) {
    return target.type === 6
    /* CONTENT_TEXT */
    || target.type === 7
    /* CONTENT_EMPTY */
    ;
  };

  DragAndDropController.prototype._hitMargin = function (target) {
    return target.type === 2
    /* GUTTER_GLYPH_MARGIN */
    || target.type === 3
    /* GUTTER_LINE_NUMBERS */
    || target.type === 4
    /* GUTTER_LINE_DECORATIONS */
    ;
  };

  DragAndDropController.prototype.dispose = function () {
    this._removeDecoration();

    this._dragSelection = null;
    this._mouseDown = false;
    this._modifierPressed = false;

    _super.prototype.dispose.call(this);
  };

  DragAndDropController.ID = 'editor.contrib.dragAndDrop';
  DragAndDropController.TRIGGER_KEY_VALUE = _platform.isMacintosh ? 6
  /* Alt */
  : 5
  /* Ctrl */
  ;
  DragAndDropController._DECORATION_OPTIONS = _textModel.ModelDecorationOptions.register({
    className: 'dnd-target'
  });
  return DragAndDropController;
}(_lifecycle.Disposable);

exports.DragAndDropController = DragAndDropController;
(0, _editorExtensions.registerEditorContribution)(DragAndDropController.ID, DragAndDropController);
},{"./dnd.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/dnd/dnd.css","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","./dragAndDropCommand.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/dnd/dragAndDropCommand.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findDecorations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FindDecorations = void 0;

var _range = require("../../common/core/range.js");

var _model = require("../../common/model.js");

var _textModel = require("../../common/model/textModel.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var FindDecorations =
/** @class */
function () {
  function FindDecorations(editor) {
    this._editor = editor;
    this._decorations = [];
    this._overviewRulerApproximateDecorations = [];
    this._findScopeDecorationId = null;
    this._rangeHighlightDecorationId = null;
    this._highlightedDecorationId = null;
    this._startPosition = this._editor.getPosition();
  }

  FindDecorations.prototype.dispose = function () {
    this._editor.deltaDecorations(this._allDecorations(), []);

    this._decorations = [];
    this._overviewRulerApproximateDecorations = [];
    this._findScopeDecorationId = null;
    this._rangeHighlightDecorationId = null;
    this._highlightedDecorationId = null;
  };

  FindDecorations.prototype.reset = function () {
    this._decorations = [];
    this._overviewRulerApproximateDecorations = [];
    this._findScopeDecorationId = null;
    this._rangeHighlightDecorationId = null;
    this._highlightedDecorationId = null;
  };

  FindDecorations.prototype.getCount = function () {
    return this._decorations.length;
  };

  FindDecorations.prototype.getFindScope = function () {
    if (this._findScopeDecorationId) {
      return this._editor.getModel().getDecorationRange(this._findScopeDecorationId);
    }

    return null;
  };

  FindDecorations.prototype.getStartPosition = function () {
    return this._startPosition;
  };

  FindDecorations.prototype.setStartPosition = function (newStartPosition) {
    this._startPosition = newStartPosition;
    this.setCurrentFindMatch(null);
  };

  FindDecorations.prototype._getDecorationIndex = function (decorationId) {
    var index = this._decorations.indexOf(decorationId);

    if (index >= 0) {
      return index + 1;
    }

    return 1;
  };

  FindDecorations.prototype.getCurrentMatchesPosition = function (desiredRange) {
    var candidates = this._editor.getModel().getDecorationsInRange(desiredRange);

    for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {
      var candidate = candidates_1[_i];
      var candidateOpts = candidate.options;

      if (candidateOpts === FindDecorations._FIND_MATCH_DECORATION || candidateOpts === FindDecorations._CURRENT_FIND_MATCH_DECORATION) {
        return this._getDecorationIndex(candidate.id);
      }
    }

    return 1;
  };

  FindDecorations.prototype.setCurrentFindMatch = function (nextMatch) {
    var _this = this;

    var newCurrentDecorationId = null;
    var matchPosition = 0;

    if (nextMatch) {
      for (var i = 0, len = this._decorations.length; i < len; i++) {
        var range = this._editor.getModel().getDecorationRange(this._decorations[i]);

        if (nextMatch.equalsRange(range)) {
          newCurrentDecorationId = this._decorations[i];
          matchPosition = i + 1;
          break;
        }
      }
    }

    if (this._highlightedDecorationId !== null || newCurrentDecorationId !== null) {
      this._editor.changeDecorations(function (changeAccessor) {
        if (_this._highlightedDecorationId !== null) {
          changeAccessor.changeDecorationOptions(_this._highlightedDecorationId, FindDecorations._FIND_MATCH_DECORATION);
          _this._highlightedDecorationId = null;
        }

        if (newCurrentDecorationId !== null) {
          _this._highlightedDecorationId = newCurrentDecorationId;
          changeAccessor.changeDecorationOptions(_this._highlightedDecorationId, FindDecorations._CURRENT_FIND_MATCH_DECORATION);
        }

        if (_this._rangeHighlightDecorationId !== null) {
          changeAccessor.removeDecoration(_this._rangeHighlightDecorationId);
          _this._rangeHighlightDecorationId = null;
        }

        if (newCurrentDecorationId !== null) {
          var rng = _this._editor.getModel().getDecorationRange(newCurrentDecorationId);

          if (rng.startLineNumber !== rng.endLineNumber && rng.endColumn === 1) {
            var lineBeforeEnd = rng.endLineNumber - 1;

            var lineBeforeEndMaxColumn = _this._editor.getModel().getLineMaxColumn(lineBeforeEnd);

            rng = new _range.Range(rng.startLineNumber, rng.startColumn, lineBeforeEnd, lineBeforeEndMaxColumn);
          }

          _this._rangeHighlightDecorationId = changeAccessor.addDecoration(rng, FindDecorations._RANGE_HIGHLIGHT_DECORATION);
        }
      });
    }

    return matchPosition;
  };

  FindDecorations.prototype.set = function (findMatches, findScope) {
    var _this = this;

    this._editor.changeDecorations(function (accessor) {
      var findMatchesOptions = FindDecorations._FIND_MATCH_DECORATION;
      var newOverviewRulerApproximateDecorations = [];

      if (findMatches.length > 1000) {
        // we go into a mode where the overview ruler gets "approximate" decorations
        // the reason is that the overview ruler paints all the decorations in the file and we don't want to cause freezes
        findMatchesOptions = FindDecorations._FIND_MATCH_NO_OVERVIEW_DECORATION; // approximate a distance in lines where matches should be merged

        var lineCount = _this._editor.getModel().getLineCount();

        var height = _this._editor.getLayoutInfo().height;

        var approxPixelsPerLine = height / lineCount;
        var mergeLinesDelta = Math.max(2, Math.ceil(3 / approxPixelsPerLine)); // merge decorations as much as possible

        var prevStartLineNumber = findMatches[0].range.startLineNumber;
        var prevEndLineNumber = findMatches[0].range.endLineNumber;

        for (var i = 1, len = findMatches.length; i < len; i++) {
          var range = findMatches[i].range;

          if (prevEndLineNumber + mergeLinesDelta >= range.startLineNumber) {
            if (range.endLineNumber > prevEndLineNumber) {
              prevEndLineNumber = range.endLineNumber;
            }
          } else {
            newOverviewRulerApproximateDecorations.push({
              range: new _range.Range(prevStartLineNumber, 1, prevEndLineNumber, 1),
              options: FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION
            });
            prevStartLineNumber = range.startLineNumber;
            prevEndLineNumber = range.endLineNumber;
          }
        }

        newOverviewRulerApproximateDecorations.push({
          range: new _range.Range(prevStartLineNumber, 1, prevEndLineNumber, 1),
          options: FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION
        });
      } // Find matches


      var newFindMatchesDecorations = new Array(findMatches.length);

      for (var i = 0, len = findMatches.length; i < len; i++) {
        newFindMatchesDecorations[i] = {
          range: findMatches[i].range,
          options: findMatchesOptions
        };
      }

      _this._decorations = accessor.deltaDecorations(_this._decorations, newFindMatchesDecorations); // Overview ruler approximate decorations

      _this._overviewRulerApproximateDecorations = accessor.deltaDecorations(_this._overviewRulerApproximateDecorations, newOverviewRulerApproximateDecorations); // Range highlight

      if (_this._rangeHighlightDecorationId) {
        accessor.removeDecoration(_this._rangeHighlightDecorationId);
        _this._rangeHighlightDecorationId = null;
      } // Find scope


      if (_this._findScopeDecorationId) {
        accessor.removeDecoration(_this._findScopeDecorationId);
        _this._findScopeDecorationId = null;
      }

      if (findScope) {
        _this._findScopeDecorationId = accessor.addDecoration(findScope, FindDecorations._FIND_SCOPE_DECORATION);
      }
    });
  };

  FindDecorations.prototype.matchBeforePosition = function (position) {
    if (this._decorations.length === 0) {
      return null;
    }

    for (var i = this._decorations.length - 1; i >= 0; i--) {
      var decorationId = this._decorations[i];

      var r = this._editor.getModel().getDecorationRange(decorationId);

      if (!r || r.endLineNumber > position.lineNumber) {
        continue;
      }

      if (r.endLineNumber < position.lineNumber) {
        return r;
      }

      if (r.endColumn > position.column) {
        continue;
      }

      return r;
    }

    return this._editor.getModel().getDecorationRange(this._decorations[this._decorations.length - 1]);
  };

  FindDecorations.prototype.matchAfterPosition = function (position) {
    if (this._decorations.length === 0) {
      return null;
    }

    for (var i = 0, len = this._decorations.length; i < len; i++) {
      var decorationId = this._decorations[i];

      var r = this._editor.getModel().getDecorationRange(decorationId);

      if (!r || r.startLineNumber < position.lineNumber) {
        continue;
      }

      if (r.startLineNumber > position.lineNumber) {
        return r;
      }

      if (r.startColumn < position.column) {
        continue;
      }

      return r;
    }

    return this._editor.getModel().getDecorationRange(this._decorations[0]);
  };

  FindDecorations.prototype._allDecorations = function () {
    var result = [];
    result = result.concat(this._decorations);
    result = result.concat(this._overviewRulerApproximateDecorations);

    if (this._findScopeDecorationId) {
      result.push(this._findScopeDecorationId);
    }

    if (this._rangeHighlightDecorationId) {
      result.push(this._rangeHighlightDecorationId);
    }

    return result;
  };

  FindDecorations._CURRENT_FIND_MATCH_DECORATION = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    zIndex: 13,
    className: 'currentFindMatch',
    showIfCollapsed: true,
    overviewRuler: {
      color: (0, _themeService.themeColorFromId)(_colorRegistry.overviewRulerFindMatchForeground),
      position: _model.OverviewRulerLane.Center
    },
    minimap: {
      color: (0, _themeService.themeColorFromId)(_colorRegistry.minimapFindMatch),
      position: _model.MinimapPosition.Inline
    }
  });
  FindDecorations._FIND_MATCH_DECORATION = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    className: 'findMatch',
    showIfCollapsed: true,
    overviewRuler: {
      color: (0, _themeService.themeColorFromId)(_colorRegistry.overviewRulerFindMatchForeground),
      position: _model.OverviewRulerLane.Center
    },
    minimap: {
      color: (0, _themeService.themeColorFromId)(_colorRegistry.minimapFindMatch),
      position: _model.MinimapPosition.Inline
    }
  });
  FindDecorations._FIND_MATCH_NO_OVERVIEW_DECORATION = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    className: 'findMatch',
    showIfCollapsed: true
  });
  FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    overviewRuler: {
      color: (0, _themeService.themeColorFromId)(_colorRegistry.overviewRulerFindMatchForeground),
      position: _model.OverviewRulerLane.Center
    }
  });
  FindDecorations._RANGE_HIGHLIGHT_DECORATION = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    className: 'rangeHighlight',
    isWholeLine: true
  });
  FindDecorations._FIND_SCOPE_DECORATION = _textModel.ModelDecorationOptions.register({
    className: 'findScope',
    isWholeLine: true
  });
  return FindDecorations;
}();

exports.FindDecorations = FindDecorations;
},{"../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/model.js":"../node_modules/monaco-editor/esm/vs/editor/common/model.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/find/replaceAllCommand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReplaceAllCommand = void 0;

var _range = require("../../common/core/range.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var ReplaceAllCommand =
/** @class */
function () {
  function ReplaceAllCommand(editorSelection, ranges, replaceStrings) {
    this._editorSelection = editorSelection;
    this._ranges = ranges;
    this._replaceStrings = replaceStrings;
    this._trackedEditorSelectionId = null;
  }

  ReplaceAllCommand.prototype.getEditOperations = function (model, builder) {
    if (this._ranges.length > 0) {
      // Collect all edit operations
      var ops = [];

      for (var i = 0; i < this._ranges.length; i++) {
        ops.push({
          range: this._ranges[i],
          text: this._replaceStrings[i]
        });
      } // Sort them in ascending order by range starts


      ops.sort(function (o1, o2) {
        return _range.Range.compareRangesUsingStarts(o1.range, o2.range);
      }); // Merge operations that touch each other

      var resultOps = [];
      var previousOp = ops[0];

      for (var i = 1; i < ops.length; i++) {
        if (previousOp.range.endLineNumber === ops[i].range.startLineNumber && previousOp.range.endColumn === ops[i].range.startColumn) {
          // These operations are one after another and can be merged
          previousOp.range = previousOp.range.plusRange(ops[i].range);
          previousOp.text = previousOp.text + ops[i].text;
        } else {
          resultOps.push(previousOp);
          previousOp = ops[i];
        }
      }

      resultOps.push(previousOp);

      for (var _i = 0, resultOps_1 = resultOps; _i < resultOps_1.length; _i++) {
        var op = resultOps_1[_i];
        builder.addEditOperation(op.range, op.text);
      }
    }

    this._trackedEditorSelectionId = builder.trackSelection(this._editorSelection);
  };

  ReplaceAllCommand.prototype.computeCursorState = function (model, helper) {
    return helper.getTrackedSelection(this._trackedEditorSelectionId);
  };

  return ReplaceAllCommand;
}();

exports.ReplaceAllCommand = ReplaceAllCommand;
},{"../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js"}],"../node_modules/monaco-editor/esm/vs/base/common/search.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildReplaceStringWithCasePreserved = buildReplaceStringWithCasePreserved;

var strings = _interopRequireWildcard(require("./strings.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function buildReplaceStringWithCasePreserved(matches, pattern) {
  if (matches && matches[0] !== '') {
    var containsHyphens = validateSpecificSpecialCharacter(matches, pattern, '-');
    var containsUnderscores = validateSpecificSpecialCharacter(matches, pattern, '_');

    if (containsHyphens && !containsUnderscores) {
      return buildReplaceStringForSpecificSpecialCharacter(matches, pattern, '-');
    } else if (!containsHyphens && containsUnderscores) {
      return buildReplaceStringForSpecificSpecialCharacter(matches, pattern, '_');
    }

    if (matches[0].toUpperCase() === matches[0]) {
      return pattern.toUpperCase();
    } else if (matches[0].toLowerCase() === matches[0]) {
      return pattern.toLowerCase();
    } else if (strings.containsUppercaseCharacter(matches[0][0])) {
      return pattern[0].toUpperCase() + pattern.substr(1);
    } else {
      // we don't understand its pattern yet.
      return pattern;
    }
  } else {
    return pattern;
  }
}

function validateSpecificSpecialCharacter(matches, pattern, specialCharacter) {
  var doesContainSpecialCharacter = matches[0].indexOf(specialCharacter) !== -1 && pattern.indexOf(specialCharacter) !== -1;
  return doesContainSpecialCharacter && matches[0].split(specialCharacter).length === pattern.split(specialCharacter).length;
}

function buildReplaceStringForSpecificSpecialCharacter(matches, pattern, specialCharacter) {
  var splitPatternAtSpecialCharacter = pattern.split(specialCharacter);
  var splitMatchAtSpecialCharacter = matches[0].split(specialCharacter);
  var replaceString = '';
  splitPatternAtSpecialCharacter.forEach(function (splitValue, index) {
    replaceString += buildReplaceStringWithCasePreserved([splitMatchAtSpecialCharacter[index]], splitValue) + specialCharacter;
  });
  return replaceString.slice(0, -1);
}
},{"./strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/find/replacePattern.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseReplaceString = parseReplaceString;
exports.ReplacePiece = exports.ReplacePattern = void 0;

var _search = require("../../../base/common/search.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * Assigned when the replace pattern is entirely static.
 */
var StaticValueReplacePattern =
/** @class */
function () {
  function StaticValueReplacePattern(staticValue) {
    this.staticValue = staticValue;
    this.kind = 0
    /* StaticValue */
    ;
  }

  return StaticValueReplacePattern;
}();
/**
 * Assigned when the replace pattern has replacemend patterns.
 */


var DynamicPiecesReplacePattern =
/** @class */
function () {
  function DynamicPiecesReplacePattern(pieces) {
    this.pieces = pieces;
    this.kind = 1
    /* DynamicPieces */
    ;
  }

  return DynamicPiecesReplacePattern;
}();

var ReplacePattern =
/** @class */
function () {
  function ReplacePattern(pieces) {
    if (!pieces || pieces.length === 0) {
      this._state = new StaticValueReplacePattern('');
    } else if (pieces.length === 1 && pieces[0].staticValue !== null) {
      this._state = new StaticValueReplacePattern(pieces[0].staticValue);
    } else {
      this._state = new DynamicPiecesReplacePattern(pieces);
    }
  }

  ReplacePattern.fromStaticValue = function (value) {
    return new ReplacePattern([ReplacePiece.staticValue(value)]);
  };

  Object.defineProperty(ReplacePattern.prototype, "hasReplacementPatterns", {
    get: function () {
      return this._state.kind === 1
      /* DynamicPieces */
      ;
    },
    enumerable: true,
    configurable: true
  });

  ReplacePattern.prototype.buildReplaceString = function (matches, preserveCase) {
    if (this._state.kind === 0
    /* StaticValue */
    ) {
        if (preserveCase) {
          return (0, _search.buildReplaceStringWithCasePreserved)(matches, this._state.staticValue);
        } else {
          return this._state.staticValue;
        }
      }

    var result = '';

    for (var i = 0, len = this._state.pieces.length; i < len; i++) {
      var piece = this._state.pieces[i];

      if (piece.staticValue !== null) {
        // static value ReplacePiece
        result += piece.staticValue;
        continue;
      } // match index ReplacePiece


      result += ReplacePattern._substitute(piece.matchIndex, matches);
    }

    return result;
  };

  ReplacePattern._substitute = function (matchIndex, matches) {
    if (matches === null) {
      return '';
    }

    if (matchIndex === 0) {
      return matches[0];
    }

    var remainder = '';

    while (matchIndex > 0) {
      if (matchIndex < matches.length) {
        // A match can be undefined
        var match = matches[matchIndex] || '';
        return match + remainder;
      }

      remainder = String(matchIndex % 10) + remainder;
      matchIndex = Math.floor(matchIndex / 10);
    }

    return '$' + remainder;
  };

  return ReplacePattern;
}();

exports.ReplacePattern = ReplacePattern;

/**
 * A replace piece can either be a static string or an index to a specific match.
 */
var ReplacePiece =
/** @class */
function () {
  function ReplacePiece(staticValue, matchIndex) {
    this.staticValue = staticValue;
    this.matchIndex = matchIndex;
  }

  ReplacePiece.staticValue = function (value) {
    return new ReplacePiece(value, -1);
  };

  ReplacePiece.matchIndex = function (index) {
    return new ReplacePiece(null, index);
  };

  return ReplacePiece;
}();

exports.ReplacePiece = ReplacePiece;

var ReplacePieceBuilder =
/** @class */
function () {
  function ReplacePieceBuilder(source) {
    this._source = source;
    this._lastCharIndex = 0;
    this._result = [];
    this._resultLen = 0;
    this._currentStaticPiece = '';
  }

  ReplacePieceBuilder.prototype.emitUnchanged = function (toCharIndex) {
    this._emitStatic(this._source.substring(this._lastCharIndex, toCharIndex));

    this._lastCharIndex = toCharIndex;
  };

  ReplacePieceBuilder.prototype.emitStatic = function (value, toCharIndex) {
    this._emitStatic(value);

    this._lastCharIndex = toCharIndex;
  };

  ReplacePieceBuilder.prototype._emitStatic = function (value) {
    if (value.length === 0) {
      return;
    }

    this._currentStaticPiece += value;
  };

  ReplacePieceBuilder.prototype.emitMatchIndex = function (index, toCharIndex) {
    if (this._currentStaticPiece.length !== 0) {
      this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);
      this._currentStaticPiece = '';
    }

    this._result[this._resultLen++] = ReplacePiece.matchIndex(index);
    this._lastCharIndex = toCharIndex;
  };

  ReplacePieceBuilder.prototype.finalize = function () {
    this.emitUnchanged(this._source.length);

    if (this._currentStaticPiece.length !== 0) {
      this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);
      this._currentStaticPiece = '';
    }

    return new ReplacePattern(this._result);
  };

  return ReplacePieceBuilder;
}();
/**
 * \n			=> inserts a LF
 * \t			=> inserts a TAB
 * \\			=> inserts a "\".
 * $$			=> inserts a "$".
 * $& and $0	=> inserts the matched substring.
 * $n			=> Where n is a non-negative integer lesser than 100, inserts the nth parenthesized submatch string
 * everything else stays untouched
 *
 * Also see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter
 */


function parseReplaceString(replaceString) {
  if (!replaceString || replaceString.length === 0) {
    return new ReplacePattern(null);
  }

  var result = new ReplacePieceBuilder(replaceString);

  for (var i = 0, len = replaceString.length; i < len; i++) {
    var chCode = replaceString.charCodeAt(i);

    if (chCode === 92
    /* Backslash */
    ) {
        // move to next char
        i++;

        if (i >= len) {
          // string ends with a \
          break;
        }

        var nextChCode = replaceString.charCodeAt(i); // let replaceWithCharacter: string | null = null;

        switch (nextChCode) {
          case 92
          /* Backslash */
          :
            // \\ => inserts a "\"
            result.emitUnchanged(i - 1);
            result.emitStatic('\\', i + 1);
            break;

          case 110
          /* n */
          :
            // \n => inserts a LF
            result.emitUnchanged(i - 1);
            result.emitStatic('\n', i + 1);
            break;

          case 116
          /* t */
          :
            // \t => inserts a TAB
            result.emitUnchanged(i - 1);
            result.emitStatic('\t', i + 1);
            break;
        }

        continue;
      }

    if (chCode === 36
    /* DollarSign */
    ) {
        // move to next char
        i++;

        if (i >= len) {
          // string ends with a $
          break;
        }

        var nextChCode = replaceString.charCodeAt(i);

        if (nextChCode === 36
        /* DollarSign */
        ) {
            // $$ => inserts a "$"
            result.emitUnchanged(i - 1);
            result.emitStatic('$', i + 1);
            continue;
          }

        if (nextChCode === 48
        /* Digit0 */
        || nextChCode === 38
        /* Ampersand */
        ) {
            // $& and $0 => inserts the matched substring.
            result.emitUnchanged(i - 1);
            result.emitMatchIndex(0, i + 1);
            continue;
          }

        if (49
        /* Digit1 */
        <= nextChCode && nextChCode <= 57
        /* Digit9 */
        ) {
            // $n
            var matchIndex = nextChCode - 48
            /* Digit0 */
            ; // peek next char to probe for $nn

            if (i + 1 < len) {
              var nextNextChCode = replaceString.charCodeAt(i + 1);

              if (48
              /* Digit0 */
              <= nextNextChCode && nextNextChCode <= 57
              /* Digit9 */
              ) {
                  // $nn
                  // move to next char
                  i++;
                  matchIndex = matchIndex * 10 + (nextNextChCode - 48
                  /* Digit0 */
                  );
                  result.emitUnchanged(i - 2);
                  result.emitMatchIndex(matchIndex, i + 1);
                  continue;
                }
            }

            result.emitUnchanged(i - 1);
            result.emitMatchIndex(matchIndex, i + 1);
            continue;
          }
      }
  }

  return result.finalize();
}
},{"../../../base/common/search.js":"../node_modules/monaco-editor/esm/vs/base/common/search.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FindModelBoundToEditorModel = exports.MATCHES_LIMIT = exports.FIND_IDS = exports.ToggleSearchScopeKeybinding = exports.ToggleRegexKeybinding = exports.ToggleWholeWordKeybinding = exports.ToggleCaseSensitiveKeybinding = exports.CONTEXT_REPLACE_INPUT_FOCUSED = exports.CONTEXT_FIND_INPUT_FOCUSED = exports.CONTEXT_FIND_WIDGET_VISIBLE = void 0;

var _async = require("../../../base/common/async.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _replaceCommand = require("../../common/commands/replaceCommand.js");

var _position = require("../../common/core/position.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _textModelSearch = require("../../common/model/textModelSearch.js");

var _findDecorations = require("./findDecorations.js");

var _replaceAllCommand = require("./replaceAllCommand.js");

var _replacePattern = require("./replacePattern.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var CONTEXT_FIND_WIDGET_VISIBLE = new _contextkey.RawContextKey('findWidgetVisible', false); // Keep ContextKey use of 'Focussed' to not break when clauses

exports.CONTEXT_FIND_WIDGET_VISIBLE = CONTEXT_FIND_WIDGET_VISIBLE;
var CONTEXT_FIND_INPUT_FOCUSED = new _contextkey.RawContextKey('findInputFocussed', false);
exports.CONTEXT_FIND_INPUT_FOCUSED = CONTEXT_FIND_INPUT_FOCUSED;
var CONTEXT_REPLACE_INPUT_FOCUSED = new _contextkey.RawContextKey('replaceInputFocussed', false);
exports.CONTEXT_REPLACE_INPUT_FOCUSED = CONTEXT_REPLACE_INPUT_FOCUSED;
var ToggleCaseSensitiveKeybinding = {
  primary: 512
  /* Alt */
  | 33
  /* KEY_C */
  ,
  mac: {
    primary: 2048
    /* CtrlCmd */
    | 512
    /* Alt */
    | 33
    /* KEY_C */

  }
};
exports.ToggleCaseSensitiveKeybinding = ToggleCaseSensitiveKeybinding;
var ToggleWholeWordKeybinding = {
  primary: 512
  /* Alt */
  | 53
  /* KEY_W */
  ,
  mac: {
    primary: 2048
    /* CtrlCmd */
    | 512
    /* Alt */
    | 53
    /* KEY_W */

  }
};
exports.ToggleWholeWordKeybinding = ToggleWholeWordKeybinding;
var ToggleRegexKeybinding = {
  primary: 512
  /* Alt */
  | 48
  /* KEY_R */
  ,
  mac: {
    primary: 2048
    /* CtrlCmd */
    | 512
    /* Alt */
    | 48
    /* KEY_R */

  }
};
exports.ToggleRegexKeybinding = ToggleRegexKeybinding;
var ToggleSearchScopeKeybinding = {
  primary: 512
  /* Alt */
  | 42
  /* KEY_L */
  ,
  mac: {
    primary: 2048
    /* CtrlCmd */
    | 512
    /* Alt */
    | 42
    /* KEY_L */

  }
};
exports.ToggleSearchScopeKeybinding = ToggleSearchScopeKeybinding;
var FIND_IDS = {
  StartFindAction: 'actions.find',
  StartFindWithSelection: 'actions.findWithSelection',
  NextMatchFindAction: 'editor.action.nextMatchFindAction',
  PreviousMatchFindAction: 'editor.action.previousMatchFindAction',
  NextSelectionMatchFindAction: 'editor.action.nextSelectionMatchFindAction',
  PreviousSelectionMatchFindAction: 'editor.action.previousSelectionMatchFindAction',
  StartFindReplaceAction: 'editor.action.startFindReplaceAction',
  CloseFindWidgetCommand: 'closeFindWidget',
  ToggleCaseSensitiveCommand: 'toggleFindCaseSensitive',
  ToggleWholeWordCommand: 'toggleFindWholeWord',
  ToggleRegexCommand: 'toggleFindRegex',
  ToggleSearchScopeCommand: 'toggleFindInSelection',
  TogglePreserveCaseCommand: 'togglePreserveCase',
  ReplaceOneAction: 'editor.action.replaceOne',
  ReplaceAllAction: 'editor.action.replaceAll',
  SelectAllMatchesAction: 'editor.action.selectAllMatches'
};
exports.FIND_IDS = FIND_IDS;
var MATCHES_LIMIT = 19999;
exports.MATCHES_LIMIT = MATCHES_LIMIT;
var RESEARCH_DELAY = 240;

var FindModelBoundToEditorModel =
/** @class */
function () {
  function FindModelBoundToEditorModel(editor, state) {
    var _this = this;

    this._toDispose = new _lifecycle.DisposableStore();
    this._editor = editor;
    this._state = state;
    this._isDisposed = false;
    this._startSearchingTimer = new _async.TimeoutTimer();
    this._decorations = new _findDecorations.FindDecorations(editor);

    this._toDispose.add(this._decorations);

    this._updateDecorationsScheduler = new _async.RunOnceScheduler(function () {
      return _this.research(false);
    }, 100);

    this._toDispose.add(this._updateDecorationsScheduler);

    this._toDispose.add(this._editor.onDidChangeCursorPosition(function (e) {
      if (e.reason === 3
      /* Explicit */
      || e.reason === 5
      /* Undo */
      || e.reason === 6
      /* Redo */
      ) {
          _this._decorations.setStartPosition(_this._editor.getPosition());
        }
    }));

    this._ignoreModelContentChanged = false;

    this._toDispose.add(this._editor.onDidChangeModelContent(function (e) {
      if (_this._ignoreModelContentChanged) {
        return;
      }

      if (e.isFlush) {
        // a model.setValue() was called
        _this._decorations.reset();
      }

      _this._decorations.setStartPosition(_this._editor.getPosition());

      _this._updateDecorationsScheduler.schedule();
    }));

    this._toDispose.add(this._state.onFindReplaceStateChange(function (e) {
      return _this._onStateChanged(e);
    }));

    this.research(false, this._state.searchScope);
  }

  FindModelBoundToEditorModel.prototype.dispose = function () {
    this._isDisposed = true;
    (0, _lifecycle.dispose)(this._startSearchingTimer);

    this._toDispose.dispose();
  };

  FindModelBoundToEditorModel.prototype._onStateChanged = function (e) {
    var _this = this;

    if (this._isDisposed) {
      // The find model is disposed during a find state changed event
      return;
    }

    if (!this._editor.hasModel()) {
      // The find model will be disposed momentarily
      return;
    }

    if (e.searchString || e.isReplaceRevealed || e.isRegex || e.wholeWord || e.matchCase || e.searchScope) {
      var model = this._editor.getModel();

      if (model.isTooLargeForSyncing()) {
        this._startSearchingTimer.cancel();

        this._startSearchingTimer.setIfNotSet(function () {
          if (e.searchScope) {
            _this.research(e.moveCursor, _this._state.searchScope);
          } else {
            _this.research(e.moveCursor);
          }
        }, RESEARCH_DELAY);
      } else {
        if (e.searchScope) {
          this.research(e.moveCursor, this._state.searchScope);
        } else {
          this.research(e.moveCursor);
        }
      }
    }
  };

  FindModelBoundToEditorModel._getSearchRange = function (model, findScope) {
    // If we have set now or before a find scope, use it for computing the search range
    if (findScope) {
      return findScope;
    }

    return model.getFullModelRange();
  };

  FindModelBoundToEditorModel.prototype.research = function (moveCursor, newFindScope) {
    var findScope = null;

    if (typeof newFindScope !== 'undefined') {
      findScope = newFindScope;
    } else {
      findScope = this._decorations.getFindScope();
    }

    if (findScope !== null) {
      if (findScope.startLineNumber !== findScope.endLineNumber) {
        if (findScope.endColumn === 1) {
          findScope = new _range.Range(findScope.startLineNumber, 1, findScope.endLineNumber - 1, this._editor.getModel().getLineMaxColumn(findScope.endLineNumber - 1));
        } else {
          // multiline find scope => expand to line starts / ends
          findScope = new _range.Range(findScope.startLineNumber, 1, findScope.endLineNumber, this._editor.getModel().getLineMaxColumn(findScope.endLineNumber));
        }
      }
    }

    var findMatches = this._findMatches(findScope, false, MATCHES_LIMIT);

    this._decorations.set(findMatches, findScope);

    this._state.changeMatchInfo(this._decorations.getCurrentMatchesPosition(this._editor.getSelection()), this._decorations.getCount(), undefined);

    if (moveCursor) {
      this._moveToNextMatch(this._decorations.getStartPosition());
    }
  };

  FindModelBoundToEditorModel.prototype._hasMatches = function () {
    return this._state.matchesCount > 0;
  };

  FindModelBoundToEditorModel.prototype._cannotFind = function () {
    if (!this._hasMatches()) {
      var findScope = this._decorations.getFindScope();

      if (findScope) {
        // Reveal the selection so user is reminded that 'selection find' is on.
        this._editor.revealRangeInCenterIfOutsideViewport(findScope, 0
        /* Smooth */
        );
      }

      return true;
    }

    return false;
  };

  FindModelBoundToEditorModel.prototype._setCurrentFindMatch = function (match) {
    var matchesPosition = this._decorations.setCurrentFindMatch(match);

    this._state.changeMatchInfo(matchesPosition, this._decorations.getCount(), match);

    this._editor.setSelection(match);

    this._editor.revealRangeInCenterIfOutsideViewport(match, 0
    /* Smooth */
    );
  };

  FindModelBoundToEditorModel.prototype._prevSearchPosition = function (before) {
    var isUsingLineStops = this._state.isRegex && (this._state.searchString.indexOf('^') >= 0 || this._state.searchString.indexOf('$') >= 0);
    var lineNumber = before.lineNumber,
        column = before.column;

    var model = this._editor.getModel();

    if (isUsingLineStops || column === 1) {
      if (lineNumber === 1) {
        lineNumber = model.getLineCount();
      } else {
        lineNumber--;
      }

      column = model.getLineMaxColumn(lineNumber);
    } else {
      column--;
    }

    return new _position.Position(lineNumber, column);
  };

  FindModelBoundToEditorModel.prototype._moveToPrevMatch = function (before, isRecursed) {
    if (isRecursed === void 0) {
      isRecursed = false;
    }

    if (this._decorations.getCount() < MATCHES_LIMIT) {
      var prevMatchRange = this._decorations.matchBeforePosition(before);

      if (prevMatchRange && prevMatchRange.isEmpty() && prevMatchRange.getStartPosition().equals(before)) {
        before = this._prevSearchPosition(before);
        prevMatchRange = this._decorations.matchBeforePosition(before);
      }

      if (prevMatchRange) {
        this._setCurrentFindMatch(prevMatchRange);
      }

      return;
    }

    if (this._cannotFind()) {
      return;
    }

    var findScope = this._decorations.getFindScope();

    var searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope); // ...(----)...|...


    if (searchRange.getEndPosition().isBefore(before)) {
      before = searchRange.getEndPosition();
    } // ...|...(----)...


    if (before.isBefore(searchRange.getStartPosition())) {
      before = searchRange.getEndPosition();
    }

    var lineNumber = before.lineNumber,
        column = before.column;

    var model = this._editor.getModel();

    var position = new _position.Position(lineNumber, column);
    var prevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(92
    /* wordSeparators */
    ) : null, false);

    if (prevMatch && prevMatch.range.isEmpty() && prevMatch.range.getStartPosition().equals(position)) {
      // Looks like we're stuck at this position, unacceptable!
      position = this._prevSearchPosition(position);
      prevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(92
      /* wordSeparators */
      ) : null, false);
    }

    if (!prevMatch) {
      // there is precisely one match and selection is on top of it
      return;
    }

    if (!isRecursed && !searchRange.containsRange(prevMatch.range)) {
      return this._moveToPrevMatch(prevMatch.range.getStartPosition(), true);
    }

    this._setCurrentFindMatch(prevMatch.range);
  };

  FindModelBoundToEditorModel.prototype.moveToPrevMatch = function () {
    this._moveToPrevMatch(this._editor.getSelection().getStartPosition());
  };

  FindModelBoundToEditorModel.prototype._nextSearchPosition = function (after) {
    var isUsingLineStops = this._state.isRegex && (this._state.searchString.indexOf('^') >= 0 || this._state.searchString.indexOf('$') >= 0);
    var lineNumber = after.lineNumber,
        column = after.column;

    var model = this._editor.getModel();

    if (isUsingLineStops || column === model.getLineMaxColumn(lineNumber)) {
      if (lineNumber === model.getLineCount()) {
        lineNumber = 1;
      } else {
        lineNumber++;
      }

      column = 1;
    } else {
      column++;
    }

    return new _position.Position(lineNumber, column);
  };

  FindModelBoundToEditorModel.prototype._moveToNextMatch = function (after) {
    if (this._decorations.getCount() < MATCHES_LIMIT) {
      var nextMatchRange = this._decorations.matchAfterPosition(after);

      if (nextMatchRange && nextMatchRange.isEmpty() && nextMatchRange.getStartPosition().equals(after)) {
        // Looks like we're stuck at this position, unacceptable!
        after = this._nextSearchPosition(after);
        nextMatchRange = this._decorations.matchAfterPosition(after);
      }

      if (nextMatchRange) {
        this._setCurrentFindMatch(nextMatchRange);
      }

      return;
    }

    var nextMatch = this._getNextMatch(after, false, true);

    if (nextMatch) {
      this._setCurrentFindMatch(nextMatch.range);
    }
  };

  FindModelBoundToEditorModel.prototype._getNextMatch = function (after, captureMatches, forceMove, isRecursed) {
    if (isRecursed === void 0) {
      isRecursed = false;
    }

    if (this._cannotFind()) {
      return null;
    }

    var findScope = this._decorations.getFindScope();

    var searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope); // ...(----)...|...


    if (searchRange.getEndPosition().isBefore(after)) {
      after = searchRange.getStartPosition();
    } // ...|...(----)...


    if (after.isBefore(searchRange.getStartPosition())) {
      after = searchRange.getStartPosition();
    }

    var lineNumber = after.lineNumber,
        column = after.column;

    var model = this._editor.getModel();

    var position = new _position.Position(lineNumber, column);
    var nextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(92
    /* wordSeparators */
    ) : null, captureMatches);

    if (forceMove && nextMatch && nextMatch.range.isEmpty() && nextMatch.range.getStartPosition().equals(position)) {
      // Looks like we're stuck at this position, unacceptable!
      position = this._nextSearchPosition(position);
      nextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(92
      /* wordSeparators */
      ) : null, captureMatches);
    }

    if (!nextMatch) {
      // there is precisely one match and selection is on top of it
      return null;
    }

    if (!isRecursed && !searchRange.containsRange(nextMatch.range)) {
      return this._getNextMatch(nextMatch.range.getEndPosition(), captureMatches, forceMove, true);
    }

    return nextMatch;
  };

  FindModelBoundToEditorModel.prototype.moveToNextMatch = function () {
    this._moveToNextMatch(this._editor.getSelection().getEndPosition());
  };

  FindModelBoundToEditorModel.prototype._getReplacePattern = function () {
    if (this._state.isRegex) {
      return (0, _replacePattern.parseReplaceString)(this._state.replaceString);
    }

    return _replacePattern.ReplacePattern.fromStaticValue(this._state.replaceString);
  };

  FindModelBoundToEditorModel.prototype.replace = function () {
    if (!this._hasMatches()) {
      return;
    }

    var replacePattern = this._getReplacePattern();

    var selection = this._editor.getSelection();

    var nextMatch = this._getNextMatch(selection.getStartPosition(), true, false);

    if (nextMatch) {
      if (selection.equalsRange(nextMatch.range)) {
        // selection sits on a find match => replace it!
        var replaceString = replacePattern.buildReplaceString(nextMatch.matches, this._state.preserveCase);
        var command = new _replaceCommand.ReplaceCommand(selection, replaceString);

        this._executeEditorCommand('replace', command);

        this._decorations.setStartPosition(new _position.Position(selection.startLineNumber, selection.startColumn + replaceString.length));

        this.research(true);
      } else {
        this._decorations.setStartPosition(this._editor.getPosition());

        this._setCurrentFindMatch(nextMatch.range);
      }
    }
  };

  FindModelBoundToEditorModel.prototype._findMatches = function (findScope, captureMatches, limitResultCount) {
    var searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope);

    return this._editor.getModel().findMatches(this._state.searchString, searchRange, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(92
    /* wordSeparators */
    ) : null, captureMatches, limitResultCount);
  };

  FindModelBoundToEditorModel.prototype.replaceAll = function () {
    if (!this._hasMatches()) {
      return;
    }

    var findScope = this._decorations.getFindScope();

    if (findScope === null && this._state.matchesCount >= MATCHES_LIMIT) {
      // Doing a replace on the entire file that is over ${MATCHES_LIMIT} matches
      this._largeReplaceAll();
    } else {
      this._regularReplaceAll(findScope);
    }

    this.research(false);
  };

  FindModelBoundToEditorModel.prototype._largeReplaceAll = function () {
    var searchParams = new _textModelSearch.SearchParams(this._state.searchString, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(92
    /* wordSeparators */
    ) : null);
    var searchData = searchParams.parseSearchRequest();

    if (!searchData) {
      return;
    }

    var searchRegex = searchData.regex;

    if (!searchRegex.multiline) {
      var mod = 'mu';

      if (searchRegex.ignoreCase) {
        mod += 'i';
      }

      if (searchRegex.global) {
        mod += 'g';
      }

      searchRegex = new RegExp(searchRegex.source, mod);
    }

    var model = this._editor.getModel();

    var modelText = model.getValue(1
    /* LF */
    );
    var fullModelRange = model.getFullModelRange();

    var replacePattern = this._getReplacePattern();

    var resultText;
    var preserveCase = this._state.preserveCase;

    if (replacePattern.hasReplacementPatterns || preserveCase) {
      resultText = modelText.replace(searchRegex, function () {
        return replacePattern.buildReplaceString(arguments, preserveCase);
      });
    } else {
      resultText = modelText.replace(searchRegex, replacePattern.buildReplaceString(null, preserveCase));
    }

    var command = new _replaceCommand.ReplaceCommandThatPreservesSelection(fullModelRange, resultText, this._editor.getSelection());

    this._executeEditorCommand('replaceAll', command);
  };

  FindModelBoundToEditorModel.prototype._regularReplaceAll = function (findScope) {
    var replacePattern = this._getReplacePattern(); // Get all the ranges (even more than the highlighted ones)


    var matches = this._findMatches(findScope, replacePattern.hasReplacementPatterns || this._state.preserveCase, 1073741824
    /* MAX_SAFE_SMALL_INTEGER */
    );

    var replaceStrings = [];

    for (var i = 0, len = matches.length; i < len; i++) {
      replaceStrings[i] = replacePattern.buildReplaceString(matches[i].matches, this._state.preserveCase);
    }

    var command = new _replaceAllCommand.ReplaceAllCommand(this._editor.getSelection(), matches.map(function (m) {
      return m.range;
    }), replaceStrings);

    this._executeEditorCommand('replaceAll', command);
  };

  FindModelBoundToEditorModel.prototype.selectAllMatches = function () {
    if (!this._hasMatches()) {
      return;
    }

    var findScope = this._decorations.getFindScope(); // Get all the ranges (even more than the highlighted ones)


    var matches = this._findMatches(findScope, false, 1073741824
    /* MAX_SAFE_SMALL_INTEGER */
    );

    var selections = matches.map(function (m) {
      return new _selection.Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn);
    }); // If one of the ranges is the editor selection, then maintain it as primary

    var editorSelection = this._editor.getSelection();

    for (var i = 0, len = selections.length; i < len; i++) {
      var sel = selections[i];

      if (sel.equalsRange(editorSelection)) {
        selections = [editorSelection].concat(selections.slice(0, i)).concat(selections.slice(i + 1));
        break;
      }
    }

    this._editor.setSelections(selections);
  };

  FindModelBoundToEditorModel.prototype._executeEditorCommand = function (source, command) {
    try {
      this._ignoreModelContentChanged = true;

      this._editor.pushUndoStop();

      this._editor.executeCommand(source, command);

      this._editor.pushUndoStop();
    } finally {
      this._ignoreModelContentChanged = false;
    }
  };

  return FindModelBoundToEditorModel;
}();

exports.FindModelBoundToEditorModel = FindModelBoundToEditorModel;
},{"../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../common/commands/replaceCommand.js":"../node_modules/monaco-editor/esm/vs/editor/common/commands/replaceCommand.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/model/textModelSearch.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js","./findDecorations.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findDecorations.js","./replaceAllCommand.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/find/replaceAllCommand.js","./replacePattern.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/find/replacePattern.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/checkbox/checkbox.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/checkbox/checkbox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Checkbox = void 0;

require("./checkbox.css");

var DOM = _interopRequireWildcard(require("../../dom.js"));

var _widget = require("../widget.js");

var _color = require("../../../common/color.js");

var _event = require("../../../common/event.js");

var objects = _interopRequireWildcard(require("../../../common/objects.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var defaultOpts = {
  inputActiveOptionBorder: _color.Color.fromHex('#007ACC00'),
  inputActiveOptionBackground: _color.Color.fromHex('#0E639C50')
};

var Checkbox =
/** @class */
function (_super) {
  __extends(Checkbox, _super);

  function Checkbox(opts) {
    var _this = _super.call(this) || this;

    _this._onChange = _this._register(new _event.Emitter());
    _this.onChange = _this._onChange.event;
    _this._onKeyDown = _this._register(new _event.Emitter());
    _this.onKeyDown = _this._onKeyDown.event;
    _this._opts = objects.deepClone(opts);
    objects.mixin(_this._opts, defaultOpts, false);
    _this._checked = _this._opts.isChecked;
    _this.domNode = document.createElement('div');
    _this.domNode.title = _this._opts.title;
    _this.domNode.className = 'monaco-custom-checkbox codicon ' + (_this._opts.actionClassName || '') + ' ' + (_this._checked ? 'checked' : 'unchecked');
    _this.domNode.tabIndex = 0;

    _this.domNode.setAttribute('role', 'checkbox');

    _this.domNode.setAttribute('aria-checked', String(_this._checked));

    _this.domNode.setAttribute('aria-label', _this._opts.title);

    _this.applyStyles();

    _this.onclick(_this.domNode, function (ev) {
      _this.checked = !_this._checked;

      _this._onChange.fire(false);

      ev.preventDefault();
    });

    _this.ignoreGesture(_this.domNode);

    _this.onkeydown(_this.domNode, function (keyboardEvent) {
      if (keyboardEvent.keyCode === 10
      /* Space */
      || keyboardEvent.keyCode === 3
      /* Enter */
      ) {
          _this.checked = !_this._checked;

          _this._onChange.fire(true);

          keyboardEvent.preventDefault();
          return;
        }

      _this._onKeyDown.fire(keyboardEvent);
    });

    return _this;
  }

  Object.defineProperty(Checkbox.prototype, "enabled", {
    get: function () {
      return this.domNode.getAttribute('aria-disabled') !== 'true';
    },
    enumerable: true,
    configurable: true
  });

  Checkbox.prototype.focus = function () {
    this.domNode.focus();
  };

  Object.defineProperty(Checkbox.prototype, "checked", {
    get: function () {
      return this._checked;
    },
    set: function (newIsChecked) {
      this._checked = newIsChecked;
      this.domNode.setAttribute('aria-checked', String(this._checked));

      if (this._checked) {
        this.domNode.classList.add('checked');
      } else {
        this.domNode.classList.remove('checked');
      }

      this.applyStyles();
    },
    enumerable: true,
    configurable: true
  });

  Checkbox.prototype.width = function () {
    return 2
    /*marginleft*/
    + 2
    /*border*/
    + 2
    /*padding*/
    + 16
    /* icon width */
    ;
  };

  Checkbox.prototype.style = function (styles) {
    if (styles.inputActiveOptionBorder) {
      this._opts.inputActiveOptionBorder = styles.inputActiveOptionBorder;
    }

    if (styles.inputActiveOptionBackground) {
      this._opts.inputActiveOptionBackground = styles.inputActiveOptionBackground;
    }

    this.applyStyles();
  };

  Checkbox.prototype.applyStyles = function () {
    if (this.domNode) {
      this.domNode.style.borderColor = this._checked && this._opts.inputActiveOptionBorder ? this._opts.inputActiveOptionBorder.toString() : 'transparent';
      this.domNode.style.backgroundColor = this._checked && this._opts.inputActiveOptionBackground ? this._opts.inputActiveOptionBackground.toString() : 'transparent';
    }
  };

  Checkbox.prototype.enable = function () {
    this.domNode.tabIndex = 0;
    this.domNode.setAttribute('aria-disabled', String(false));
  };

  Checkbox.prototype.disable = function () {
    DOM.removeTabIndexAndUpdateFocus(this.domNode);
    this.domNode.setAttribute('aria-disabled', String(true));
  };

  return Checkbox;
}(_widget.Widget);

exports.Checkbox = Checkbox;
},{"./checkbox.css":"../node_modules/monaco-editor/esm/vs/base/browser/ui/checkbox/checkbox.css","../../dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../widget.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/widget.js","../../../common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/findinput/findInputCheckboxes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RegexCheckbox = exports.WholeWordsCheckbox = exports.CaseSensitiveCheckbox = void 0;

var _checkbox = require("../checkbox/checkbox.js");

var nls = _interopRequireWildcard(require("../../../../nls.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var NLS_CASE_SENSITIVE_CHECKBOX_LABEL = nls.localize('caseDescription', "Match Case");
var NLS_WHOLE_WORD_CHECKBOX_LABEL = nls.localize('wordsDescription', "Match Whole Word");
var NLS_REGEX_CHECKBOX_LABEL = nls.localize('regexDescription', "Use Regular Expression");

var CaseSensitiveCheckbox =
/** @class */
function (_super) {
  __extends(CaseSensitiveCheckbox, _super);

  function CaseSensitiveCheckbox(opts) {
    return _super.call(this, {
      actionClassName: 'codicon-case-sensitive',
      title: NLS_CASE_SENSITIVE_CHECKBOX_LABEL + opts.appendTitle,
      isChecked: opts.isChecked,
      inputActiveOptionBorder: opts.inputActiveOptionBorder,
      inputActiveOptionBackground: opts.inputActiveOptionBackground
    }) || this;
  }

  return CaseSensitiveCheckbox;
}(_checkbox.Checkbox);

exports.CaseSensitiveCheckbox = CaseSensitiveCheckbox;

var WholeWordsCheckbox =
/** @class */
function (_super) {
  __extends(WholeWordsCheckbox, _super);

  function WholeWordsCheckbox(opts) {
    return _super.call(this, {
      actionClassName: 'codicon-whole-word',
      title: NLS_WHOLE_WORD_CHECKBOX_LABEL + opts.appendTitle,
      isChecked: opts.isChecked,
      inputActiveOptionBorder: opts.inputActiveOptionBorder,
      inputActiveOptionBackground: opts.inputActiveOptionBackground
    }) || this;
  }

  return WholeWordsCheckbox;
}(_checkbox.Checkbox);

exports.WholeWordsCheckbox = WholeWordsCheckbox;

var RegexCheckbox =
/** @class */
function (_super) {
  __extends(RegexCheckbox, _super);

  function RegexCheckbox(opts) {
    return _super.call(this, {
      actionClassName: 'codicon-regex',
      title: NLS_REGEX_CHECKBOX_LABEL + opts.appendTitle,
      isChecked: opts.isChecked,
      inputActiveOptionBorder: opts.inputActiveOptionBorder,
      inputActiveOptionBackground: opts.inputActiveOptionBackground
    }) || this;
  }

  return RegexCheckbox;
}(_checkbox.Checkbox);

exports.RegexCheckbox = RegexCheckbox;
},{"../checkbox/checkbox.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/checkbox/checkbox.js","../../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findOptionsWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FindOptionsWidget = void 0;

var dom = _interopRequireWildcard(require("../../../base/browser/dom.js"));

var _findInputCheckboxes = require("../../../base/browser/ui/findinput/findInputCheckboxes.js");

var _widget = require("../../../base/browser/ui/widget.js");

var _async = require("../../../base/common/async.js");

var _findModel = require("./findModel.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var FindOptionsWidget =
/** @class */
function (_super) {
  __extends(FindOptionsWidget, _super);

  function FindOptionsWidget(editor, state, keybindingService, themeService) {
    var _this = _super.call(this) || this;

    _this._hideSoon = _this._register(new _async.RunOnceScheduler(function () {
      return _this._hide();
    }, 2000));
    _this._isVisible = false;
    _this._editor = editor;
    _this._state = state;
    _this._keybindingService = keybindingService;
    _this._domNode = document.createElement('div');
    _this._domNode.className = 'findOptionsWidget';
    _this._domNode.style.display = 'none';
    _this._domNode.style.top = '10px';

    _this._domNode.setAttribute('role', 'presentation');

    _this._domNode.setAttribute('aria-hidden', 'true');

    var inputActiveOptionBorderColor = themeService.getTheme().getColor(_colorRegistry.inputActiveOptionBorder);
    var inputActiveOptionBackgroundColor = themeService.getTheme().getColor(_colorRegistry.inputActiveOptionBackground);
    _this.caseSensitive = _this._register(new _findInputCheckboxes.CaseSensitiveCheckbox({
      appendTitle: _this._keybindingLabelFor(_findModel.FIND_IDS.ToggleCaseSensitiveCommand),
      isChecked: _this._state.matchCase,
      inputActiveOptionBorder: inputActiveOptionBorderColor,
      inputActiveOptionBackground: inputActiveOptionBackgroundColor
    }));

    _this._domNode.appendChild(_this.caseSensitive.domNode);

    _this._register(_this.caseSensitive.onChange(function () {
      _this._state.change({
        matchCase: _this.caseSensitive.checked
      }, false);
    }));

    _this.wholeWords = _this._register(new _findInputCheckboxes.WholeWordsCheckbox({
      appendTitle: _this._keybindingLabelFor(_findModel.FIND_IDS.ToggleWholeWordCommand),
      isChecked: _this._state.wholeWord,
      inputActiveOptionBorder: inputActiveOptionBorderColor,
      inputActiveOptionBackground: inputActiveOptionBackgroundColor
    }));

    _this._domNode.appendChild(_this.wholeWords.domNode);

    _this._register(_this.wholeWords.onChange(function () {
      _this._state.change({
        wholeWord: _this.wholeWords.checked
      }, false);
    }));

    _this.regex = _this._register(new _findInputCheckboxes.RegexCheckbox({
      appendTitle: _this._keybindingLabelFor(_findModel.FIND_IDS.ToggleRegexCommand),
      isChecked: _this._state.isRegex,
      inputActiveOptionBorder: inputActiveOptionBorderColor,
      inputActiveOptionBackground: inputActiveOptionBackgroundColor
    }));

    _this._domNode.appendChild(_this.regex.domNode);

    _this._register(_this.regex.onChange(function () {
      _this._state.change({
        isRegex: _this.regex.checked
      }, false);
    }));

    _this._editor.addOverlayWidget(_this);

    _this._register(_this._state.onFindReplaceStateChange(function (e) {
      var somethingChanged = false;

      if (e.isRegex) {
        _this.regex.checked = _this._state.isRegex;
        somethingChanged = true;
      }

      if (e.wholeWord) {
        _this.wholeWords.checked = _this._state.wholeWord;
        somethingChanged = true;
      }

      if (e.matchCase) {
        _this.caseSensitive.checked = _this._state.matchCase;
        somethingChanged = true;
      }

      if (!_this._state.isRevealed && somethingChanged) {
        _this._revealTemporarily();
      }
    }));

    _this._register(dom.addDisposableNonBubblingMouseOutListener(_this._domNode, function (e) {
      return _this._onMouseOut();
    }));

    _this._register(dom.addDisposableListener(_this._domNode, 'mouseover', function (e) {
      return _this._onMouseOver();
    }));

    _this._applyTheme(themeService.getTheme());

    _this._register(themeService.onThemeChange(_this._applyTheme.bind(_this)));

    return _this;
  }

  FindOptionsWidget.prototype._keybindingLabelFor = function (actionId) {
    var kb = this._keybindingService.lookupKeybinding(actionId);

    if (!kb) {
      return '';
    }

    return " (" + kb.getLabel() + ")";
  };

  FindOptionsWidget.prototype.dispose = function () {
    this._editor.removeOverlayWidget(this);

    _super.prototype.dispose.call(this);
  }; // ----- IOverlayWidget API


  FindOptionsWidget.prototype.getId = function () {
    return FindOptionsWidget.ID;
  };

  FindOptionsWidget.prototype.getDomNode = function () {
    return this._domNode;
  };

  FindOptionsWidget.prototype.getPosition = function () {
    return {
      preference: 0
      /* TOP_RIGHT_CORNER */

    };
  };

  FindOptionsWidget.prototype.highlightFindOptions = function () {
    this._revealTemporarily();
  };

  FindOptionsWidget.prototype._revealTemporarily = function () {
    this._show();

    this._hideSoon.schedule();
  };

  FindOptionsWidget.prototype._onMouseOut = function () {
    this._hideSoon.schedule();
  };

  FindOptionsWidget.prototype._onMouseOver = function () {
    this._hideSoon.cancel();
  };

  FindOptionsWidget.prototype._show = function () {
    if (this._isVisible) {
      return;
    }

    this._isVisible = true;
    this._domNode.style.display = 'block';
  };

  FindOptionsWidget.prototype._hide = function () {
    if (!this._isVisible) {
      return;
    }

    this._isVisible = false;
    this._domNode.style.display = 'none';
  };

  FindOptionsWidget.prototype._applyTheme = function (theme) {
    var inputStyles = {
      inputActiveOptionBorder: theme.getColor(_colorRegistry.inputActiveOptionBorder),
      inputActiveOptionBackground: theme.getColor(_colorRegistry.inputActiveOptionBackground)
    };
    this.caseSensitive.style(inputStyles);
    this.wholeWords.style(inputStyles);
    this.regex.style(inputStyles);
  };

  FindOptionsWidget.ID = 'editor.contrib.findOptionsWidget';
  return FindOptionsWidget;
}(_widget.Widget);

exports.FindOptionsWidget = FindOptionsWidget;
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var widgetBackground = theme.getColor(_colorRegistry.editorWidgetBackground);

  if (widgetBackground) {
    collector.addRule(".monaco-editor .findOptionsWidget { background-color: " + widgetBackground + "; }");
  }

  var widgetForeground = theme.getColor(_colorRegistry.editorWidgetForeground);

  if (widgetForeground) {
    collector.addRule(".monaco-editor .findOptionsWidget { color: " + widgetForeground + "; }");
  }

  var widgetShadowColor = theme.getColor(_colorRegistry.widgetShadow);

  if (widgetShadowColor) {
    collector.addRule(".monaco-editor .findOptionsWidget { box-shadow: 0 2px 8px " + widgetShadowColor + "; }");
  }

  var hcBorder = theme.getColor(_colorRegistry.contrastBorder);

  if (hcBorder) {
    collector.addRule(".monaco-editor .findOptionsWidget { border: 2px solid " + hcBorder + "; }");
  }
});
},{"../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/browser/ui/findinput/findInputCheckboxes.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/findinput/findInputCheckboxes.js","../../../base/browser/ui/widget.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/widget.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","./findModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findModel.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FindReplaceState = void 0;

var _event = require("../../../base/common/event.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _range = require("../../common/core/range.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

function effectiveOptionValue(override, value) {
  if (override === 1
  /* True */
  ) {
      return true;
    }

  if (override === 2
  /* False */
  ) {
      return false;
    }

  return value;
}

var FindReplaceState =
/** @class */
function (_super) {
  __extends(FindReplaceState, _super);

  function FindReplaceState() {
    var _this = _super.call(this) || this;

    _this._onFindReplaceStateChange = _this._register(new _event.Emitter());
    _this.onFindReplaceStateChange = _this._onFindReplaceStateChange.event;
    _this._searchString = '';
    _this._replaceString = '';
    _this._isRevealed = false;
    _this._isReplaceRevealed = false;
    _this._isRegex = false;
    _this._isRegexOverride = 0
    /* NotSet */
    ;
    _this._wholeWord = false;
    _this._wholeWordOverride = 0
    /* NotSet */
    ;
    _this._matchCase = false;
    _this._matchCaseOverride = 0
    /* NotSet */
    ;
    _this._preserveCase = false;
    _this._preserveCaseOverride = 0
    /* NotSet */
    ;
    _this._searchScope = null;
    _this._matchesPosition = 0;
    _this._matchesCount = 0;
    _this._currentMatch = null;
    return _this;
  }

  Object.defineProperty(FindReplaceState.prototype, "searchString", {
    get: function () {
      return this._searchString;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "replaceString", {
    get: function () {
      return this._replaceString;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "isRevealed", {
    get: function () {
      return this._isRevealed;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "isReplaceRevealed", {
    get: function () {
      return this._isReplaceRevealed;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "isRegex", {
    get: function () {
      return effectiveOptionValue(this._isRegexOverride, this._isRegex);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "wholeWord", {
    get: function () {
      return effectiveOptionValue(this._wholeWordOverride, this._wholeWord);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "matchCase", {
    get: function () {
      return effectiveOptionValue(this._matchCaseOverride, this._matchCase);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "preserveCase", {
    get: function () {
      return effectiveOptionValue(this._preserveCaseOverride, this._preserveCase);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "actualIsRegex", {
    get: function () {
      return this._isRegex;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "actualWholeWord", {
    get: function () {
      return this._wholeWord;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "actualMatchCase", {
    get: function () {
      return this._matchCase;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "actualPreserveCase", {
    get: function () {
      return this._preserveCase;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "searchScope", {
    get: function () {
      return this._searchScope;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "matchesPosition", {
    get: function () {
      return this._matchesPosition;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "matchesCount", {
    get: function () {
      return this._matchesCount;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FindReplaceState.prototype, "currentMatch", {
    get: function () {
      return this._currentMatch;
    },
    enumerable: true,
    configurable: true
  });

  FindReplaceState.prototype.changeMatchInfo = function (matchesPosition, matchesCount, currentMatch) {
    var changeEvent = {
      moveCursor: false,
      updateHistory: false,
      searchString: false,
      replaceString: false,
      isRevealed: false,
      isReplaceRevealed: false,
      isRegex: false,
      wholeWord: false,
      matchCase: false,
      preserveCase: false,
      searchScope: false,
      matchesPosition: false,
      matchesCount: false,
      currentMatch: false
    };
    var somethingChanged = false;

    if (matchesCount === 0) {
      matchesPosition = 0;
    }

    if (matchesPosition > matchesCount) {
      matchesPosition = matchesCount;
    }

    if (this._matchesPosition !== matchesPosition) {
      this._matchesPosition = matchesPosition;
      changeEvent.matchesPosition = true;
      somethingChanged = true;
    }

    if (this._matchesCount !== matchesCount) {
      this._matchesCount = matchesCount;
      changeEvent.matchesCount = true;
      somethingChanged = true;
    }

    if (typeof currentMatch !== 'undefined') {
      if (!_range.Range.equalsRange(this._currentMatch, currentMatch)) {
        this._currentMatch = currentMatch;
        changeEvent.currentMatch = true;
        somethingChanged = true;
      }
    }

    if (somethingChanged) {
      this._onFindReplaceStateChange.fire(changeEvent);
    }
  };

  FindReplaceState.prototype.change = function (newState, moveCursor, updateHistory) {
    if (updateHistory === void 0) {
      updateHistory = true;
    }

    var changeEvent = {
      moveCursor: moveCursor,
      updateHistory: updateHistory,
      searchString: false,
      replaceString: false,
      isRevealed: false,
      isReplaceRevealed: false,
      isRegex: false,
      wholeWord: false,
      matchCase: false,
      preserveCase: false,
      searchScope: false,
      matchesPosition: false,
      matchesCount: false,
      currentMatch: false
    };
    var somethingChanged = false;
    var oldEffectiveIsRegex = this.isRegex;
    var oldEffectiveWholeWords = this.wholeWord;
    var oldEffectiveMatchCase = this.matchCase;
    var oldEffectivePreserveCase = this.preserveCase;

    if (typeof newState.searchString !== 'undefined') {
      if (this._searchString !== newState.searchString) {
        this._searchString = newState.searchString;
        changeEvent.searchString = true;
        somethingChanged = true;
      }
    }

    if (typeof newState.replaceString !== 'undefined') {
      if (this._replaceString !== newState.replaceString) {
        this._replaceString = newState.replaceString;
        changeEvent.replaceString = true;
        somethingChanged = true;
      }
    }

    if (typeof newState.isRevealed !== 'undefined') {
      if (this._isRevealed !== newState.isRevealed) {
        this._isRevealed = newState.isRevealed;
        changeEvent.isRevealed = true;
        somethingChanged = true;
      }
    }

    if (typeof newState.isReplaceRevealed !== 'undefined') {
      if (this._isReplaceRevealed !== newState.isReplaceRevealed) {
        this._isReplaceRevealed = newState.isReplaceRevealed;
        changeEvent.isReplaceRevealed = true;
        somethingChanged = true;
      }
    }

    if (typeof newState.isRegex !== 'undefined') {
      this._isRegex = newState.isRegex;
    }

    if (typeof newState.wholeWord !== 'undefined') {
      this._wholeWord = newState.wholeWord;
    }

    if (typeof newState.matchCase !== 'undefined') {
      this._matchCase = newState.matchCase;
    }

    if (typeof newState.preserveCase !== 'undefined') {
      this._preserveCase = newState.preserveCase;
    }

    if (typeof newState.searchScope !== 'undefined') {
      if (!_range.Range.equalsRange(this._searchScope, newState.searchScope)) {
        this._searchScope = newState.searchScope;
        changeEvent.searchScope = true;
        somethingChanged = true;
      }
    } // Overrides get set when they explicitly come in and get reset anytime something else changes


    this._isRegexOverride = typeof newState.isRegexOverride !== 'undefined' ? newState.isRegexOverride : 0
    /* NotSet */
    ;
    this._wholeWordOverride = typeof newState.wholeWordOverride !== 'undefined' ? newState.wholeWordOverride : 0
    /* NotSet */
    ;
    this._matchCaseOverride = typeof newState.matchCaseOverride !== 'undefined' ? newState.matchCaseOverride : 0
    /* NotSet */
    ;
    this._preserveCaseOverride = typeof newState.preserveCaseOverride !== 'undefined' ? newState.preserveCaseOverride : 0
    /* NotSet */
    ;

    if (oldEffectiveIsRegex !== this.isRegex) {
      somethingChanged = true;
      changeEvent.isRegex = true;
    }

    if (oldEffectiveWholeWords !== this.wholeWord) {
      somethingChanged = true;
      changeEvent.wholeWord = true;
    }

    if (oldEffectiveMatchCase !== this.matchCase) {
      somethingChanged = true;
      changeEvent.matchCase = true;
    }

    if (oldEffectivePreserveCase !== this.preserveCase) {
      somethingChanged = true;
      changeEvent.preserveCase = true;
    }

    if (somethingChanged) {
      this._onFindReplaceStateChange.fire(changeEvent);
    }
  };

  return FindReplaceState;
}(_lifecycle.Disposable);

exports.FindReplaceState = FindReplaceState;
},{"../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findWidget.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/findinput/findInput.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/inputbox/inputBox.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/formattedTextRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderText = renderText;
exports.renderFormattedText = renderFormattedText;
exports.createElement = createElement;

var DOM = _interopRequireWildcard(require("./dom.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function renderText(text, options) {
  if (options === void 0) {
    options = {};
  }

  var element = createElement(options);
  element.textContent = text;
  return element;
}

function renderFormattedText(formattedText, options) {
  if (options === void 0) {
    options = {};
  }

  var element = createElement(options);

  _renderFormattedText(element, parseFormattedText(formattedText), options.actionHandler);

  return element;
}

function createElement(options) {
  var tagName = options.inline ? 'span' : 'div';
  var element = document.createElement(tagName);

  if (options.className) {
    element.className = options.className;
  }

  return element;
}

var StringStream =
/** @class */
function () {
  function StringStream(source) {
    this.source = source;
    this.index = 0;
  }

  StringStream.prototype.eos = function () {
    return this.index >= this.source.length;
  };

  StringStream.prototype.next = function () {
    var next = this.peek();
    this.advance();
    return next;
  };

  StringStream.prototype.peek = function () {
    return this.source[this.index];
  };

  StringStream.prototype.advance = function () {
    this.index++;
  };

  return StringStream;
}();

function _renderFormattedText(element, treeNode, actionHandler) {
  var child;

  if (treeNode.type === 2
  /* Text */
  ) {
      child = document.createTextNode(treeNode.content || '');
    } else if (treeNode.type === 3
  /* Bold */
  ) {
      child = document.createElement('b');
    } else if (treeNode.type === 4
  /* Italics */
  ) {
      child = document.createElement('i');
    } else if (treeNode.type === 5
  /* Action */
  && actionHandler) {
    var a = document.createElement('a');
    a.href = '#';
    actionHandler.disposeables.add(DOM.addStandardDisposableListener(a, 'click', function (event) {
      actionHandler.callback(String(treeNode.index), event);
    }));
    child = a;
  } else if (treeNode.type === 7
  /* NewLine */
  ) {
      child = document.createElement('br');
    } else if (treeNode.type === 1
  /* Root */
  ) {
      child = element;
    }

  if (child && element !== child) {
    element.appendChild(child);
  }

  if (child && Array.isArray(treeNode.children)) {
    treeNode.children.forEach(function (nodeChild) {
      _renderFormattedText(child, nodeChild, actionHandler);
    });
  }
}

function parseFormattedText(content) {
  var root = {
    type: 1
    /* Root */
    ,
    children: []
  };
  var actionViewItemIndex = 0;
  var current = root;
  var stack = [];
  var stream = new StringStream(content);

  while (!stream.eos()) {
    var next = stream.next();
    var isEscapedFormatType = next === '\\' && formatTagType(stream.peek()) !== 0
    /* Invalid */
    ;

    if (isEscapedFormatType) {
      next = stream.next(); // unread the backslash if it escapes a format tag type
    }

    if (!isEscapedFormatType && isFormatTag(next) && next === stream.peek()) {
      stream.advance();

      if (current.type === 2
      /* Text */
      ) {
          current = stack.pop();
        }

      var type = formatTagType(next);

      if (current.type === type || current.type === 5
      /* Action */
      && type === 6
      /* ActionClose */
      ) {
        current = stack.pop();
      } else {
        var newCurrent = {
          type: type,
          children: []
        };

        if (type === 5
        /* Action */
        ) {
            newCurrent.index = actionViewItemIndex;
            actionViewItemIndex++;
          }

        current.children.push(newCurrent);
        stack.push(current);
        current = newCurrent;
      }
    } else if (next === '\n') {
      if (current.type === 2
      /* Text */
      ) {
          current = stack.pop();
        }

      current.children.push({
        type: 7
        /* NewLine */

      });
    } else {
      if (current.type !== 2
      /* Text */
      ) {
          var textCurrent = {
            type: 2
            /* Text */
            ,
            content: next
          };
          current.children.push(textCurrent);
          stack.push(current);
          current = textCurrent;
        } else {
        current.content += next;
      }
    }
  }

  if (current.type === 2
  /* Text */
  ) {
      current = stack.pop();
    }

  if (stack.length) {// incorrectly formatted string literal
  }

  return root;
}

function isFormatTag(char) {
  return formatTagType(char) !== 0
  /* Invalid */
  ;
}

function formatTagType(char) {
  switch (char) {
    case '*':
      return 3
      /* Bold */
      ;

    case '_':
      return 4
      /* Italics */
      ;

    case '[':
      return 5
      /* Action */
      ;

    case ']':
      return 6
      /* ActionClose */
      ;

    default:
      return 0
      /* Invalid */
      ;
  }
}
},{"./dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js"}],"../node_modules/monaco-editor/esm/vs/base/common/history.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HistoryNavigator = void 0;

var _iterator = require("./iterator.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var HistoryNavigator =
/** @class */
function () {
  function HistoryNavigator(history, limit) {
    if (history === void 0) {
      history = [];
    }

    if (limit === void 0) {
      limit = 10;
    }

    this._initialize(history);

    this._limit = limit;

    this._onChange();
  }

  HistoryNavigator.prototype.add = function (t) {
    this._history.delete(t);

    this._history.add(t);

    this._onChange();
  };

  HistoryNavigator.prototype.next = function () {
    return this._navigator.next();
  };

  HistoryNavigator.prototype.previous = function () {
    return this._navigator.previous();
  };

  HistoryNavigator.prototype.current = function () {
    return this._navigator.current();
  };

  HistoryNavigator.prototype.parent = function () {
    return null;
  };

  HistoryNavigator.prototype.first = function () {
    return this._navigator.first();
  };

  HistoryNavigator.prototype.last = function () {
    return this._navigator.last();
  };

  HistoryNavigator.prototype.has = function (t) {
    return this._history.has(t);
  };

  HistoryNavigator.prototype._onChange = function () {
    this._reduceToLimit();

    var elements = this._elements;
    this._navigator = new _iterator.ArrayNavigator(elements, 0, elements.length, elements.length);
  };

  HistoryNavigator.prototype._reduceToLimit = function () {
    var data = this._elements;

    if (data.length > this._limit) {
      this._initialize(data.slice(data.length - this._limit));
    }
  };

  HistoryNavigator.prototype._initialize = function (history) {
    this._history = new Set();

    for (var _i = 0, history_1 = history; _i < history_1.length; _i++) {
      var entry = history_1[_i];

      this._history.add(entry);
    }
  };

  Object.defineProperty(HistoryNavigator.prototype, "_elements", {
    get: function () {
      var elements = [];

      this._history.forEach(function (e) {
        return elements.push(e);
      });

      return elements;
    },
    enumerable: true,
    configurable: true
  });
  return HistoryNavigator;
}();

exports.HistoryNavigator = HistoryNavigator;
},{"./iterator.js":"../node_modules/monaco-editor/esm/vs/base/common/iterator.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/inputbox/inputBox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HistoryInputBox = exports.InputBox = void 0;

require("./inputBox.css");

var nls = _interopRequireWildcard(require("../../../../nls.js"));

var Bal = _interopRequireWildcard(require("../../browser.js"));

var dom = _interopRequireWildcard(require("../../dom.js"));

var _formattedTextRenderer = require("../../formattedTextRenderer.js");

var aria = _interopRequireWildcard(require("../aria/aria.js"));

var _actionbar = require("../actionbar/actionbar.js");

var _event = require("../../../common/event.js");

var _widget = require("../widget.js");

var _color = require("../../../common/color.js");

var _objects = require("../../../common/objects.js");

var _history = require("../../../common/history.js");

var _scrollableElement = require("../scrollbar/scrollableElement.js");

var _event2 = require("../../event.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var $ = dom.$;
var defaultOpts = {
  inputBackground: _color.Color.fromHex('#3C3C3C'),
  inputForeground: _color.Color.fromHex('#CCCCCC'),
  inputValidationInfoBorder: _color.Color.fromHex('#55AAFF'),
  inputValidationInfoBackground: _color.Color.fromHex('#063B49'),
  inputValidationWarningBorder: _color.Color.fromHex('#B89500'),
  inputValidationWarningBackground: _color.Color.fromHex('#352A05'),
  inputValidationErrorBorder: _color.Color.fromHex('#BE1100'),
  inputValidationErrorBackground: _color.Color.fromHex('#5A1D1D')
};

var InputBox =
/** @class */
function (_super) {
  __extends(InputBox, _super);

  function InputBox(container, contextViewProvider, options) {
    var _this = _super.call(this) || this;

    _this.state = 'idle';
    _this.maxHeight = Number.POSITIVE_INFINITY;
    _this._onDidChange = _this._register(new _event.Emitter());
    _this.onDidChange = _this._onDidChange.event;
    _this._onDidHeightChange = _this._register(new _event.Emitter());
    _this.onDidHeightChange = _this._onDidHeightChange.event;
    _this.contextViewProvider = contextViewProvider;
    _this.options = options || Object.create(null);
    (0, _objects.mixin)(_this.options, defaultOpts, false);
    _this.message = null;
    _this.placeholder = _this.options.placeholder || '';
    _this.ariaLabel = _this.options.ariaLabel || '';
    _this.inputBackground = _this.options.inputBackground;
    _this.inputForeground = _this.options.inputForeground;
    _this.inputBorder = _this.options.inputBorder;
    _this.inputValidationInfoBorder = _this.options.inputValidationInfoBorder;
    _this.inputValidationInfoBackground = _this.options.inputValidationInfoBackground;
    _this.inputValidationInfoForeground = _this.options.inputValidationInfoForeground;
    _this.inputValidationWarningBorder = _this.options.inputValidationWarningBorder;
    _this.inputValidationWarningBackground = _this.options.inputValidationWarningBackground;
    _this.inputValidationWarningForeground = _this.options.inputValidationWarningForeground;
    _this.inputValidationErrorBorder = _this.options.inputValidationErrorBorder;
    _this.inputValidationErrorBackground = _this.options.inputValidationErrorBackground;
    _this.inputValidationErrorForeground = _this.options.inputValidationErrorForeground;

    if (_this.options.validationOptions) {
      _this.validation = _this.options.validationOptions.validation;
    }

    _this.element = dom.append(container, $('.monaco-inputbox.idle'));
    var tagName = _this.options.flexibleHeight ? 'textarea' : 'input';
    var wrapper = dom.append(_this.element, $('.wrapper'));
    _this.input = dom.append(wrapper, $(tagName + '.input.empty'));

    _this.input.setAttribute('autocorrect', 'off');

    _this.input.setAttribute('autocapitalize', 'off');

    _this.input.setAttribute('spellcheck', 'false');

    _this.onfocus(_this.input, function () {
      return dom.addClass(_this.element, 'synthetic-focus');
    });

    _this.onblur(_this.input, function () {
      return dom.removeClass(_this.element, 'synthetic-focus');
    });

    if (_this.options.flexibleHeight) {
      _this.maxHeight = typeof _this.options.flexibleMaxHeight === 'number' ? _this.options.flexibleMaxHeight : Number.POSITIVE_INFINITY;
      _this.mirror = dom.append(wrapper, $('div.mirror'));
      _this.mirror.innerHTML = '&#160;';
      _this.scrollableElement = new _scrollableElement.ScrollableElement(_this.element, {
        vertical: 1
        /* Auto */

      });

      if (_this.options.flexibleWidth) {
        _this.input.setAttribute('wrap', 'off');

        _this.mirror.style.whiteSpace = 'pre';
        _this.mirror.style.wordWrap = 'initial';
      }

      dom.append(container, _this.scrollableElement.getDomNode());

      _this._register(_this.scrollableElement); // from ScrollableElement to DOM


      _this._register(_this.scrollableElement.onScroll(function (e) {
        return _this.input.scrollTop = e.scrollTop;
      }));

      var onSelectionChange = _event.Event.filter((0, _event2.domEvent)(document, 'selectionchange'), function () {
        var _a;

        var selection = document.getSelection();
        return ((_a = selection) === null || _a === void 0 ? void 0 : _a.anchorNode) === wrapper;
      }); // from DOM to ScrollableElement


      _this._register(onSelectionChange(_this.updateScrollDimensions, _this));

      _this._register(_this.onDidHeightChange(_this.updateScrollDimensions, _this));
    } else {
      _this.input.type = _this.options.type || 'text';

      _this.input.setAttribute('wrap', 'off');
    }

    if (_this.ariaLabel) {
      _this.input.setAttribute('aria-label', _this.ariaLabel);
    }

    if (_this.placeholder) {
      _this.setPlaceHolder(_this.placeholder);
    }

    _this.oninput(_this.input, function () {
      return _this.onValueChange();
    });

    _this.onblur(_this.input, function () {
      return _this.onBlur();
    });

    _this.onfocus(_this.input, function () {
      return _this.onFocus();
    }); // Add placeholder shim for IE because IE decides to hide the placeholder on focus (we dont want that!)


    if (_this.placeholder && Bal.isIE) {
      _this.onclick(_this.input, function (e) {
        dom.EventHelper.stop(e, true);

        _this.input.focus();
      });
    }

    _this.ignoreGesture(_this.input);

    setTimeout(function () {
      return _this.updateMirror();
    }, 0); // Support actions

    if (_this.options.actions) {
      _this.actionbar = _this._register(new _actionbar.ActionBar(_this.element));

      _this.actionbar.push(_this.options.actions, {
        icon: true,
        label: false
      });
    }

    _this.applyStyles();

    return _this;
  }

  InputBox.prototype.onBlur = function () {
    this._hideMessage();
  };

  InputBox.prototype.onFocus = function () {
    this._showMessage();
  };

  InputBox.prototype.setPlaceHolder = function (placeHolder) {
    this.placeholder = placeHolder;
    this.input.setAttribute('placeholder', placeHolder);
    this.input.title = placeHolder;
  };

  InputBox.prototype.setAriaLabel = function (label) {
    this.ariaLabel = label;

    if (label) {
      this.input.setAttribute('aria-label', this.ariaLabel);
    } else {
      this.input.removeAttribute('aria-label');
    }
  };

  Object.defineProperty(InputBox.prototype, "inputElement", {
    get: function () {
      return this.input;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(InputBox.prototype, "value", {
    get: function () {
      return this.input.value;
    },
    set: function (newValue) {
      if (this.input.value !== newValue) {
        this.input.value = newValue;
        this.onValueChange();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(InputBox.prototype, "height", {
    get: function () {
      return typeof this.cachedHeight === 'number' ? this.cachedHeight : dom.getTotalHeight(this.element);
    },
    enumerable: true,
    configurable: true
  });

  InputBox.prototype.focus = function () {
    this.input.focus();
  };

  InputBox.prototype.blur = function () {
    this.input.blur();
  };

  InputBox.prototype.hasFocus = function () {
    return document.activeElement === this.input;
  };

  InputBox.prototype.select = function (range) {
    if (range === void 0) {
      range = null;
    }

    this.input.select();

    if (range) {
      this.input.setSelectionRange(range.start, range.end);
    }
  };

  InputBox.prototype.enable = function () {
    this.input.removeAttribute('disabled');
  };

  InputBox.prototype.disable = function () {
    this.blur();
    this.input.disabled = true;

    this._hideMessage();
  };

  Object.defineProperty(InputBox.prototype, "width", {
    get: function () {
      return dom.getTotalWidth(this.input);
    },
    set: function (width) {
      if (this.options.flexibleHeight && this.options.flexibleWidth) {
        // textarea with horizontal scrolling
        var horizontalPadding = 0;

        if (this.mirror) {
          var paddingLeft = parseFloat(this.mirror.style.paddingLeft || '') || 0;
          var paddingRight = parseFloat(this.mirror.style.paddingRight || '') || 0;
          horizontalPadding = paddingLeft + paddingRight;
        }

        this.input.style.width = width - horizontalPadding + 'px';
      } else {
        this.input.style.width = width + 'px';
      }

      if (this.mirror) {
        this.mirror.style.width = width + 'px';
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(InputBox.prototype, "paddingRight", {
    set: function (paddingRight) {
      if (this.options.flexibleHeight && this.options.flexibleWidth) {
        this.input.style.width = "calc(100% - " + paddingRight + "px)";
      } else {
        this.input.style.paddingRight = paddingRight + 'px';
      }

      if (this.mirror) {
        this.mirror.style.paddingRight = paddingRight + 'px';
      }
    },
    enumerable: true,
    configurable: true
  });

  InputBox.prototype.updateScrollDimensions = function () {
    if (typeof this.cachedContentHeight !== 'number' || typeof this.cachedHeight !== 'number' || !this.scrollableElement) {
      return;
    }

    var scrollHeight = this.cachedContentHeight;
    var height = this.cachedHeight;
    var scrollTop = this.input.scrollTop;
    this.scrollableElement.setScrollDimensions({
      scrollHeight: scrollHeight,
      height: height
    });
    this.scrollableElement.setScrollPosition({
      scrollTop: scrollTop
    });
  };

  InputBox.prototype.showMessage = function (message, force) {
    this.message = message;
    dom.removeClass(this.element, 'idle');
    dom.removeClass(this.element, 'info');
    dom.removeClass(this.element, 'warning');
    dom.removeClass(this.element, 'error');
    dom.addClass(this.element, this.classForType(message.type));
    var styles = this.stylesForType(this.message.type);
    this.element.style.border = styles.border ? "1px solid " + styles.border : ''; // ARIA Support

    var alertText;

    if (message.type === 3
    /* ERROR */
    ) {
        alertText = nls.localize('alertErrorMessage', "Error: {0}", message.content);
      } else if (message.type === 2
    /* WARNING */
    ) {
        alertText = nls.localize('alertWarningMessage', "Warning: {0}", message.content);
      } else {
      alertText = nls.localize('alertInfoMessage', "Info: {0}", message.content);
    }

    aria.alert(alertText);

    if (this.hasFocus() || force) {
      this._showMessage();
    }
  };

  InputBox.prototype.hideMessage = function () {
    this.message = null;
    dom.removeClass(this.element, 'info');
    dom.removeClass(this.element, 'warning');
    dom.removeClass(this.element, 'error');
    dom.addClass(this.element, 'idle');

    this._hideMessage();

    this.applyStyles();
  };

  InputBox.prototype.validate = function () {
    var errorMsg = null;

    if (this.validation) {
      errorMsg = this.validation(this.value);

      if (errorMsg) {
        this.inputElement.setAttribute('aria-invalid', 'true');
        this.showMessage(errorMsg);
      } else if (this.inputElement.hasAttribute('aria-invalid')) {
        this.inputElement.removeAttribute('aria-invalid');
        this.hideMessage();
      }
    }

    return !errorMsg;
  };

  InputBox.prototype.stylesForType = function (type) {
    switch (type) {
      case 1
      /* INFO */
      :
        return {
          border: this.inputValidationInfoBorder,
          background: this.inputValidationInfoBackground,
          foreground: this.inputValidationInfoForeground
        };

      case 2
      /* WARNING */
      :
        return {
          border: this.inputValidationWarningBorder,
          background: this.inputValidationWarningBackground,
          foreground: this.inputValidationWarningForeground
        };

      default:
        return {
          border: this.inputValidationErrorBorder,
          background: this.inputValidationErrorBackground,
          foreground: this.inputValidationErrorForeground
        };
    }
  };

  InputBox.prototype.classForType = function (type) {
    switch (type) {
      case 1
      /* INFO */
      :
        return 'info';

      case 2
      /* WARNING */
      :
        return 'warning';

      default:
        return 'error';
    }
  };

  InputBox.prototype._showMessage = function () {
    var _this = this;

    if (!this.contextViewProvider || !this.message) {
      return;
    }

    var div;

    var layout = function () {
      return div.style.width = dom.getTotalWidth(_this.element) + 'px';
    };

    this.contextViewProvider.showContextView({
      getAnchor: function () {
        return _this.element;
      },
      anchorAlignment: 1
      /* RIGHT */
      ,
      render: function (container) {
        if (!_this.message) {
          return null;
        }

        div = dom.append(container, $('.monaco-inputbox-container'));
        layout();
        var renderOptions = {
          inline: true,
          className: 'monaco-inputbox-message'
        };
        var spanElement = _this.message.formatContent ? (0, _formattedTextRenderer.renderFormattedText)(_this.message.content, renderOptions) : (0, _formattedTextRenderer.renderText)(_this.message.content, renderOptions);
        dom.addClass(spanElement, _this.classForType(_this.message.type));

        var styles = _this.stylesForType(_this.message.type);

        spanElement.style.backgroundColor = styles.background ? styles.background.toString() : '';
        spanElement.style.color = styles.foreground ? styles.foreground.toString() : null;
        spanElement.style.border = styles.border ? "1px solid " + styles.border : '';
        dom.append(div, spanElement);
        return null;
      },
      onHide: function () {
        _this.state = 'closed';
      },
      layout: layout
    });
    this.state = 'open';
  };

  InputBox.prototype._hideMessage = function () {
    if (!this.contextViewProvider) {
      return;
    }

    if (this.state === 'open') {
      this.contextViewProvider.hideContextView();
    }

    this.state = 'idle';
  };

  InputBox.prototype.onValueChange = function () {
    this._onDidChange.fire(this.value);

    this.validate();
    this.updateMirror();
    dom.toggleClass(this.input, 'empty', !this.value);

    if (this.state === 'open' && this.contextViewProvider) {
      this.contextViewProvider.layout();
    }
  };

  InputBox.prototype.updateMirror = function () {
    if (!this.mirror) {
      return;
    }

    var value = this.value;
    var lastCharCode = value.charCodeAt(value.length - 1);
    var suffix = lastCharCode === 10 ? ' ' : '';
    var mirrorTextContent = value + suffix;

    if (mirrorTextContent) {
      this.mirror.textContent = value + suffix;
    } else {
      this.mirror.innerHTML = '&#160;';
    }

    this.layout();
  };

  InputBox.prototype.style = function (styles) {
    this.inputBackground = styles.inputBackground;
    this.inputForeground = styles.inputForeground;
    this.inputBorder = styles.inputBorder;
    this.inputValidationInfoBackground = styles.inputValidationInfoBackground;
    this.inputValidationInfoForeground = styles.inputValidationInfoForeground;
    this.inputValidationInfoBorder = styles.inputValidationInfoBorder;
    this.inputValidationWarningBackground = styles.inputValidationWarningBackground;
    this.inputValidationWarningForeground = styles.inputValidationWarningForeground;
    this.inputValidationWarningBorder = styles.inputValidationWarningBorder;
    this.inputValidationErrorBackground = styles.inputValidationErrorBackground;
    this.inputValidationErrorForeground = styles.inputValidationErrorForeground;
    this.inputValidationErrorBorder = styles.inputValidationErrorBorder;
    this.applyStyles();
  };

  InputBox.prototype.applyStyles = function () {
    var background = this.inputBackground ? this.inputBackground.toString() : '';
    var foreground = this.inputForeground ? this.inputForeground.toString() : '';
    var border = this.inputBorder ? this.inputBorder.toString() : '';
    this.element.style.backgroundColor = background;
    this.element.style.color = foreground;
    this.input.style.backgroundColor = background;
    this.input.style.color = foreground;
    this.element.style.borderWidth = border ? '1px' : '';
    this.element.style.borderStyle = border ? 'solid' : '';
    this.element.style.borderColor = border;
  };

  InputBox.prototype.layout = function () {
    if (!this.mirror) {
      return;
    }

    var previousHeight = this.cachedContentHeight;
    this.cachedContentHeight = dom.getTotalHeight(this.mirror);

    if (previousHeight !== this.cachedContentHeight) {
      this.cachedHeight = Math.min(this.cachedContentHeight, this.maxHeight);
      this.input.style.height = this.cachedHeight + 'px';

      this._onDidHeightChange.fire(this.cachedContentHeight);
    }
  };

  InputBox.prototype.insertAtCursor = function (text) {
    var inputElement = this.inputElement;
    var start = inputElement.selectionStart;
    var end = inputElement.selectionEnd;
    var content = inputElement.value;

    if (start !== null && end !== null) {
      this.value = content.substr(0, start) + text + content.substr(end);
      inputElement.setSelectionRange(start + 1, start + 1);
      this.layout();
    }
  };

  InputBox.prototype.dispose = function () {
    this._hideMessage();

    this.message = null;

    if (this.actionbar) {
      this.actionbar.dispose();
    }

    _super.prototype.dispose.call(this);
  };

  return InputBox;
}(_widget.Widget);

exports.InputBox = InputBox;

var HistoryInputBox =
/** @class */
function (_super) {
  __extends(HistoryInputBox, _super);

  function HistoryInputBox(container, contextViewProvider, options) {
    var _this = _super.call(this, container, contextViewProvider, options) || this;

    _this.history = new _history.HistoryNavigator(options.history, 100);
    return _this;
  }

  HistoryInputBox.prototype.addToHistory = function () {
    if (this.value && this.value !== this.getCurrentValue()) {
      this.history.add(this.value);
    }
  };

  HistoryInputBox.prototype.showNextValue = function () {
    if (!this.history.has(this.value)) {
      this.addToHistory();
    }

    var next = this.getNextValue();

    if (next) {
      next = next === this.value ? this.getNextValue() : next;
    }

    if (next) {
      this.value = next;
      aria.status(this.value);
    }
  };

  HistoryInputBox.prototype.showPreviousValue = function () {
    if (!this.history.has(this.value)) {
      this.addToHistory();
    }

    var previous = this.getPreviousValue();

    if (previous) {
      previous = previous === this.value ? this.getPreviousValue() : previous;
    }

    if (previous) {
      this.value = previous;
      aria.status(this.value);
    }
  };

  HistoryInputBox.prototype.getCurrentValue = function () {
    var currentValue = this.history.current();

    if (!currentValue) {
      currentValue = this.history.last();
      this.history.next();
    }

    return currentValue;
  };

  HistoryInputBox.prototype.getPreviousValue = function () {
    return this.history.previous() || this.history.first();
  };

  HistoryInputBox.prototype.getNextValue = function () {
    return this.history.next() || this.history.last();
  };

  return HistoryInputBox;
}(InputBox);

exports.HistoryInputBox = HistoryInputBox;
},{"./inputBox.css":"../node_modules/monaco-editor/esm/vs/base/browser/ui/inputbox/inputBox.css","../../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../browser.js":"../node_modules/monaco-editor/esm/vs/base/browser/browser.js","../../dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../formattedTextRenderer.js":"../node_modules/monaco-editor/esm/vs/base/browser/formattedTextRenderer.js","../aria/aria.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria.js","../actionbar/actionbar.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js","../../../common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../widget.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/widget.js","../../../common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js","../../../common/history.js":"../node_modules/monaco-editor/esm/vs/base/common/history.js","../scrollbar/scrollableElement.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/scrollbar/scrollableElement.js","../../event.js":"../node_modules/monaco-editor/esm/vs/base/browser/event.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/findinput/findInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FindInput = void 0;

require("./findInput.css");

var nls = _interopRequireWildcard(require("../../../../nls.js"));

var dom = _interopRequireWildcard(require("../../dom.js"));

var _inputBox = require("../inputbox/inputBox.js");

var _widget = require("../widget.js");

var _event = require("../../../common/event.js");

var _findInputCheckboxes = require("./findInputCheckboxes.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var NLS_DEFAULT_LABEL = nls.localize('defaultLabel', "input");

var FindInput =
/** @class */
function (_super) {
  __extends(FindInput, _super);

  function FindInput(parent, contextViewProvider, _showOptionButtons, options) {
    var _this = _super.call(this) || this;

    _this._showOptionButtons = _showOptionButtons;
    _this.fixFocusOnOptionClickEnabled = true;
    _this._onDidOptionChange = _this._register(new _event.Emitter());
    _this.onDidOptionChange = _this._onDidOptionChange.event;
    _this._onKeyDown = _this._register(new _event.Emitter());
    _this.onKeyDown = _this._onKeyDown.event;
    _this._onMouseDown = _this._register(new _event.Emitter());
    _this.onMouseDown = _this._onMouseDown.event;
    _this._onInput = _this._register(new _event.Emitter());
    _this._onKeyUp = _this._register(new _event.Emitter());
    _this._onCaseSensitiveKeyDown = _this._register(new _event.Emitter());
    _this.onCaseSensitiveKeyDown = _this._onCaseSensitiveKeyDown.event;
    _this._onRegexKeyDown = _this._register(new _event.Emitter());
    _this.onRegexKeyDown = _this._onRegexKeyDown.event;
    _this._lastHighlightFindOptions = 0;
    _this.contextViewProvider = contextViewProvider;
    _this.placeholder = options.placeholder || '';
    _this.validation = options.validation;
    _this.label = options.label || NLS_DEFAULT_LABEL;
    _this.inputActiveOptionBorder = options.inputActiveOptionBorder;
    _this.inputActiveOptionBackground = options.inputActiveOptionBackground;
    _this.inputBackground = options.inputBackground;
    _this.inputForeground = options.inputForeground;
    _this.inputBorder = options.inputBorder;
    _this.inputValidationInfoBorder = options.inputValidationInfoBorder;
    _this.inputValidationInfoBackground = options.inputValidationInfoBackground;
    _this.inputValidationInfoForeground = options.inputValidationInfoForeground;
    _this.inputValidationWarningBorder = options.inputValidationWarningBorder;
    _this.inputValidationWarningBackground = options.inputValidationWarningBackground;
    _this.inputValidationWarningForeground = options.inputValidationWarningForeground;
    _this.inputValidationErrorBorder = options.inputValidationErrorBorder;
    _this.inputValidationErrorBackground = options.inputValidationErrorBackground;
    _this.inputValidationErrorForeground = options.inputValidationErrorForeground;
    var appendCaseSensitiveLabel = options.appendCaseSensitiveLabel || '';
    var appendWholeWordsLabel = options.appendWholeWordsLabel || '';
    var appendRegexLabel = options.appendRegexLabel || '';
    var history = options.history || [];
    var flexibleHeight = !!options.flexibleHeight;
    var flexibleWidth = !!options.flexibleWidth;
    var flexibleMaxHeight = options.flexibleMaxHeight;
    _this.domNode = document.createElement('div');
    dom.addClass(_this.domNode, 'monaco-findInput');
    _this.inputBox = _this._register(new _inputBox.HistoryInputBox(_this.domNode, _this.contextViewProvider, {
      placeholder: _this.placeholder || '',
      ariaLabel: _this.label || '',
      validationOptions: {
        validation: _this.validation
      },
      inputBackground: _this.inputBackground,
      inputForeground: _this.inputForeground,
      inputBorder: _this.inputBorder,
      inputValidationInfoBackground: _this.inputValidationInfoBackground,
      inputValidationInfoForeground: _this.inputValidationInfoForeground,
      inputValidationInfoBorder: _this.inputValidationInfoBorder,
      inputValidationWarningBackground: _this.inputValidationWarningBackground,
      inputValidationWarningForeground: _this.inputValidationWarningForeground,
      inputValidationWarningBorder: _this.inputValidationWarningBorder,
      inputValidationErrorBackground: _this.inputValidationErrorBackground,
      inputValidationErrorForeground: _this.inputValidationErrorForeground,
      inputValidationErrorBorder: _this.inputValidationErrorBorder,
      history: history,
      flexibleHeight: flexibleHeight,
      flexibleWidth: flexibleWidth,
      flexibleMaxHeight: flexibleMaxHeight
    }));
    _this.regex = _this._register(new _findInputCheckboxes.RegexCheckbox({
      appendTitle: appendRegexLabel,
      isChecked: false,
      inputActiveOptionBorder: _this.inputActiveOptionBorder,
      inputActiveOptionBackground: _this.inputActiveOptionBackground
    }));

    _this._register(_this.regex.onChange(function (viaKeyboard) {
      _this._onDidOptionChange.fire(viaKeyboard);

      if (!viaKeyboard && _this.fixFocusOnOptionClickEnabled) {
        _this.inputBox.focus();
      }

      _this.validate();
    }));

    _this._register(_this.regex.onKeyDown(function (e) {
      _this._onRegexKeyDown.fire(e);
    }));

    _this.wholeWords = _this._register(new _findInputCheckboxes.WholeWordsCheckbox({
      appendTitle: appendWholeWordsLabel,
      isChecked: false,
      inputActiveOptionBorder: _this.inputActiveOptionBorder,
      inputActiveOptionBackground: _this.inputActiveOptionBackground
    }));

    _this._register(_this.wholeWords.onChange(function (viaKeyboard) {
      _this._onDidOptionChange.fire(viaKeyboard);

      if (!viaKeyboard && _this.fixFocusOnOptionClickEnabled) {
        _this.inputBox.focus();
      }

      _this.validate();
    }));

    _this.caseSensitive = _this._register(new _findInputCheckboxes.CaseSensitiveCheckbox({
      appendTitle: appendCaseSensitiveLabel,
      isChecked: false,
      inputActiveOptionBorder: _this.inputActiveOptionBorder,
      inputActiveOptionBackground: _this.inputActiveOptionBackground
    }));

    _this._register(_this.caseSensitive.onChange(function (viaKeyboard) {
      _this._onDidOptionChange.fire(viaKeyboard);

      if (!viaKeyboard && _this.fixFocusOnOptionClickEnabled) {
        _this.inputBox.focus();
      }

      _this.validate();
    }));

    _this._register(_this.caseSensitive.onKeyDown(function (e) {
      _this._onCaseSensitiveKeyDown.fire(e);
    }));

    if (_this._showOptionButtons) {
      _this.inputBox.paddingRight = _this.caseSensitive.width() + _this.wholeWords.width() + _this.regex.width();
    } // Arrow-Key support to navigate between options


    var indexes = [_this.caseSensitive.domNode, _this.wholeWords.domNode, _this.regex.domNode];

    _this.onkeydown(_this.domNode, function (event) {
      if (event.equals(15
      /* LeftArrow */
      ) || event.equals(17
      /* RightArrow */
      ) || event.equals(9
      /* Escape */
      )) {
        var index = indexes.indexOf(document.activeElement);

        if (index >= 0) {
          var newIndex = -1;

          if (event.equals(17
          /* RightArrow */
          )) {
            newIndex = (index + 1) % indexes.length;
          } else if (event.equals(15
          /* LeftArrow */
          )) {
            if (index === 0) {
              newIndex = indexes.length - 1;
            } else {
              newIndex = index - 1;
            }
          }

          if (event.equals(9
          /* Escape */
          )) {
            indexes[index].blur();
          } else if (newIndex >= 0) {
            indexes[newIndex].focus();
          }

          dom.EventHelper.stop(event, true);
        }
      }
    });

    var controls = document.createElement('div');
    controls.className = 'controls';
    controls.style.display = _this._showOptionButtons ? 'block' : 'none';
    controls.appendChild(_this.caseSensitive.domNode);
    controls.appendChild(_this.wholeWords.domNode);
    controls.appendChild(_this.regex.domNode);

    _this.domNode.appendChild(controls);

    if (parent) {
      parent.appendChild(_this.domNode);
    }

    _this.onkeydown(_this.inputBox.inputElement, function (e) {
      return _this._onKeyDown.fire(e);
    });

    _this.onkeyup(_this.inputBox.inputElement, function (e) {
      return _this._onKeyUp.fire(e);
    });

    _this.oninput(_this.inputBox.inputElement, function (e) {
      return _this._onInput.fire();
    });

    _this.onmousedown(_this.inputBox.inputElement, function (e) {
      return _this._onMouseDown.fire(e);
    });

    return _this;
  }

  FindInput.prototype.enable = function () {
    dom.removeClass(this.domNode, 'disabled');
    this.inputBox.enable();
    this.regex.enable();
    this.wholeWords.enable();
    this.caseSensitive.enable();
  };

  FindInput.prototype.disable = function () {
    dom.addClass(this.domNode, 'disabled');
    this.inputBox.disable();
    this.regex.disable();
    this.wholeWords.disable();
    this.caseSensitive.disable();
  };

  FindInput.prototype.setFocusInputOnOptionClick = function (value) {
    this.fixFocusOnOptionClickEnabled = value;
  };

  FindInput.prototype.setEnabled = function (enabled) {
    if (enabled) {
      this.enable();
    } else {
      this.disable();
    }
  };

  FindInput.prototype.getValue = function () {
    return this.inputBox.value;
  };

  FindInput.prototype.setValue = function (value) {
    if (this.inputBox.value !== value) {
      this.inputBox.value = value;
    }
  };

  FindInput.prototype.style = function (styles) {
    this.inputActiveOptionBorder = styles.inputActiveOptionBorder;
    this.inputActiveOptionBackground = styles.inputActiveOptionBackground;
    this.inputBackground = styles.inputBackground;
    this.inputForeground = styles.inputForeground;
    this.inputBorder = styles.inputBorder;
    this.inputValidationInfoBackground = styles.inputValidationInfoBackground;
    this.inputValidationInfoForeground = styles.inputValidationInfoForeground;
    this.inputValidationInfoBorder = styles.inputValidationInfoBorder;
    this.inputValidationWarningBackground = styles.inputValidationWarningBackground;
    this.inputValidationWarningForeground = styles.inputValidationWarningForeground;
    this.inputValidationWarningBorder = styles.inputValidationWarningBorder;
    this.inputValidationErrorBackground = styles.inputValidationErrorBackground;
    this.inputValidationErrorForeground = styles.inputValidationErrorForeground;
    this.inputValidationErrorBorder = styles.inputValidationErrorBorder;
    this.applyStyles();
  };

  FindInput.prototype.applyStyles = function () {
    if (this.domNode) {
      var checkBoxStyles = {
        inputActiveOptionBorder: this.inputActiveOptionBorder,
        inputActiveOptionBackground: this.inputActiveOptionBackground
      };
      this.regex.style(checkBoxStyles);
      this.wholeWords.style(checkBoxStyles);
      this.caseSensitive.style(checkBoxStyles);
      var inputBoxStyles = {
        inputBackground: this.inputBackground,
        inputForeground: this.inputForeground,
        inputBorder: this.inputBorder,
        inputValidationInfoBackground: this.inputValidationInfoBackground,
        inputValidationInfoForeground: this.inputValidationInfoForeground,
        inputValidationInfoBorder: this.inputValidationInfoBorder,
        inputValidationWarningBackground: this.inputValidationWarningBackground,
        inputValidationWarningForeground: this.inputValidationWarningForeground,
        inputValidationWarningBorder: this.inputValidationWarningBorder,
        inputValidationErrorBackground: this.inputValidationErrorBackground,
        inputValidationErrorForeground: this.inputValidationErrorForeground,
        inputValidationErrorBorder: this.inputValidationErrorBorder
      };
      this.inputBox.style(inputBoxStyles);
    }
  };

  FindInput.prototype.select = function () {
    this.inputBox.select();
  };

  FindInput.prototype.focus = function () {
    this.inputBox.focus();
  };

  FindInput.prototype.getCaseSensitive = function () {
    return this.caseSensitive.checked;
  };

  FindInput.prototype.setCaseSensitive = function (value) {
    this.caseSensitive.checked = value;
  };

  FindInput.prototype.getWholeWords = function () {
    return this.wholeWords.checked;
  };

  FindInput.prototype.setWholeWords = function (value) {
    this.wholeWords.checked = value;
  };

  FindInput.prototype.getRegex = function () {
    return this.regex.checked;
  };

  FindInput.prototype.setRegex = function (value) {
    this.regex.checked = value;
    this.validate();
  };

  FindInput.prototype.focusOnCaseSensitive = function () {
    this.caseSensitive.focus();
  };

  FindInput.prototype.highlightFindOptions = function () {
    dom.removeClass(this.domNode, 'highlight-' + this._lastHighlightFindOptions);
    this._lastHighlightFindOptions = 1 - this._lastHighlightFindOptions;
    dom.addClass(this.domNode, 'highlight-' + this._lastHighlightFindOptions);
  };

  FindInput.prototype.validate = function () {
    this.inputBox.validate();
  };

  FindInput.prototype.clearMessage = function () {
    this.inputBox.hideMessage();
  };

  return FindInput;
}(_widget.Widget);

exports.FindInput = FindInput;
},{"./findInput.css":"../node_modules/monaco-editor/esm/vs/base/browser/ui/findinput/findInput.css","../../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../inputbox/inputBox.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/inputbox/inputBox.js","../widget.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/widget.js","../../../common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","./findInputCheckboxes.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/findinput/findInputCheckboxes.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/findinput/replaceInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReplaceInput = exports.PreserveCaseCheckbox = void 0;

require("./findInput.css");

var nls = _interopRequireWildcard(require("../../../../nls.js"));

var dom = _interopRequireWildcard(require("../../dom.js"));

var _inputBox = require("../inputbox/inputBox.js");

var _widget = require("../widget.js");

var _event = require("../../../common/event.js");

var _checkbox = require("../checkbox/checkbox.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var NLS_DEFAULT_LABEL = nls.localize('defaultLabel', "input");
var NLS_PRESERVE_CASE_LABEL = nls.localize('label.preserveCaseCheckbox', "Preserve Case");

var PreserveCaseCheckbox =
/** @class */
function (_super) {
  __extends(PreserveCaseCheckbox, _super);

  function PreserveCaseCheckbox(opts) {
    return _super.call(this, {
      // TODO: does this need its own icon?
      actionClassName: 'codicon-preserve-case',
      title: NLS_PRESERVE_CASE_LABEL + opts.appendTitle,
      isChecked: opts.isChecked,
      inputActiveOptionBorder: opts.inputActiveOptionBorder,
      inputActiveOptionBackground: opts.inputActiveOptionBackground
    }) || this;
  }

  return PreserveCaseCheckbox;
}(_checkbox.Checkbox);

exports.PreserveCaseCheckbox = PreserveCaseCheckbox;

var ReplaceInput =
/** @class */
function (_super) {
  __extends(ReplaceInput, _super);

  function ReplaceInput(parent, contextViewProvider, _showOptionButtons, options) {
    var _this = _super.call(this) || this;

    _this._showOptionButtons = _showOptionButtons;
    _this.fixFocusOnOptionClickEnabled = true;
    _this.cachedOptionsWidth = 0;
    _this._onDidOptionChange = _this._register(new _event.Emitter());
    _this.onDidOptionChange = _this._onDidOptionChange.event;
    _this._onKeyDown = _this._register(new _event.Emitter());
    _this.onKeyDown = _this._onKeyDown.event;
    _this._onMouseDown = _this._register(new _event.Emitter());
    _this._onInput = _this._register(new _event.Emitter());
    _this._onKeyUp = _this._register(new _event.Emitter());
    _this._onPreserveCaseKeyDown = _this._register(new _event.Emitter());
    _this.onPreserveCaseKeyDown = _this._onPreserveCaseKeyDown.event;
    _this.contextViewProvider = contextViewProvider;
    _this.placeholder = options.placeholder || '';
    _this.validation = options.validation;
    _this.label = options.label || NLS_DEFAULT_LABEL;
    _this.inputActiveOptionBorder = options.inputActiveOptionBorder;
    _this.inputActiveOptionBackground = options.inputActiveOptionBackground;
    _this.inputBackground = options.inputBackground;
    _this.inputForeground = options.inputForeground;
    _this.inputBorder = options.inputBorder;
    _this.inputValidationInfoBorder = options.inputValidationInfoBorder;
    _this.inputValidationInfoBackground = options.inputValidationInfoBackground;
    _this.inputValidationInfoForeground = options.inputValidationInfoForeground;
    _this.inputValidationWarningBorder = options.inputValidationWarningBorder;
    _this.inputValidationWarningBackground = options.inputValidationWarningBackground;
    _this.inputValidationWarningForeground = options.inputValidationWarningForeground;
    _this.inputValidationErrorBorder = options.inputValidationErrorBorder;
    _this.inputValidationErrorBackground = options.inputValidationErrorBackground;
    _this.inputValidationErrorForeground = options.inputValidationErrorForeground;
    var history = options.history || [];
    var flexibleHeight = !!options.flexibleHeight;
    var flexibleWidth = !!options.flexibleWidth;
    var flexibleMaxHeight = options.flexibleMaxHeight;
    _this.domNode = document.createElement('div');
    dom.addClass(_this.domNode, 'monaco-findInput');
    _this.inputBox = _this._register(new _inputBox.HistoryInputBox(_this.domNode, _this.contextViewProvider, {
      ariaLabel: _this.label || '',
      placeholder: _this.placeholder || '',
      validationOptions: {
        validation: _this.validation
      },
      inputBackground: _this.inputBackground,
      inputForeground: _this.inputForeground,
      inputBorder: _this.inputBorder,
      inputValidationInfoBackground: _this.inputValidationInfoBackground,
      inputValidationInfoForeground: _this.inputValidationInfoForeground,
      inputValidationInfoBorder: _this.inputValidationInfoBorder,
      inputValidationWarningBackground: _this.inputValidationWarningBackground,
      inputValidationWarningForeground: _this.inputValidationWarningForeground,
      inputValidationWarningBorder: _this.inputValidationWarningBorder,
      inputValidationErrorBackground: _this.inputValidationErrorBackground,
      inputValidationErrorForeground: _this.inputValidationErrorForeground,
      inputValidationErrorBorder: _this.inputValidationErrorBorder,
      history: history,
      flexibleHeight: flexibleHeight,
      flexibleWidth: flexibleWidth,
      flexibleMaxHeight: flexibleMaxHeight
    }));
    _this.preserveCase = _this._register(new PreserveCaseCheckbox({
      appendTitle: '',
      isChecked: false,
      inputActiveOptionBorder: _this.inputActiveOptionBorder,
      inputActiveOptionBackground: _this.inputActiveOptionBackground
    }));

    _this._register(_this.preserveCase.onChange(function (viaKeyboard) {
      _this._onDidOptionChange.fire(viaKeyboard);

      if (!viaKeyboard && _this.fixFocusOnOptionClickEnabled) {
        _this.inputBox.focus();
      }

      _this.validate();
    }));

    _this._register(_this.preserveCase.onKeyDown(function (e) {
      _this._onPreserveCaseKeyDown.fire(e);
    }));

    if (_this._showOptionButtons) {
      _this.cachedOptionsWidth = _this.preserveCase.width();
    } else {
      _this.cachedOptionsWidth = 0;
    } // Arrow-Key support to navigate between options


    var indexes = [_this.preserveCase.domNode];

    _this.onkeydown(_this.domNode, function (event) {
      if (event.equals(15
      /* LeftArrow */
      ) || event.equals(17
      /* RightArrow */
      ) || event.equals(9
      /* Escape */
      )) {
        var index = indexes.indexOf(document.activeElement);

        if (index >= 0) {
          var newIndex = -1;

          if (event.equals(17
          /* RightArrow */
          )) {
            newIndex = (index + 1) % indexes.length;
          } else if (event.equals(15
          /* LeftArrow */
          )) {
            if (index === 0) {
              newIndex = indexes.length - 1;
            } else {
              newIndex = index - 1;
            }
          }

          if (event.equals(9
          /* Escape */
          )) {
            indexes[index].blur();
          } else if (newIndex >= 0) {
            indexes[newIndex].focus();
          }

          dom.EventHelper.stop(event, true);
        }
      }
    });

    var controls = document.createElement('div');
    controls.className = 'controls';
    controls.style.display = _this._showOptionButtons ? 'block' : 'none';
    controls.appendChild(_this.preserveCase.domNode);

    _this.domNode.appendChild(controls);

    if (parent) {
      parent.appendChild(_this.domNode);
    }

    _this.onkeydown(_this.inputBox.inputElement, function (e) {
      return _this._onKeyDown.fire(e);
    });

    _this.onkeyup(_this.inputBox.inputElement, function (e) {
      return _this._onKeyUp.fire(e);
    });

    _this.oninput(_this.inputBox.inputElement, function (e) {
      return _this._onInput.fire();
    });

    _this.onmousedown(_this.inputBox.inputElement, function (e) {
      return _this._onMouseDown.fire(e);
    });

    return _this;
  }

  ReplaceInput.prototype.enable = function () {
    dom.removeClass(this.domNode, 'disabled');
    this.inputBox.enable();
    this.preserveCase.enable();
  };

  ReplaceInput.prototype.disable = function () {
    dom.addClass(this.domNode, 'disabled');
    this.inputBox.disable();
    this.preserveCase.disable();
  };

  ReplaceInput.prototype.setEnabled = function (enabled) {
    if (enabled) {
      this.enable();
    } else {
      this.disable();
    }
  };

  ReplaceInput.prototype.style = function (styles) {
    this.inputActiveOptionBorder = styles.inputActiveOptionBorder;
    this.inputActiveOptionBackground = styles.inputActiveOptionBackground;
    this.inputBackground = styles.inputBackground;
    this.inputForeground = styles.inputForeground;
    this.inputBorder = styles.inputBorder;
    this.inputValidationInfoBackground = styles.inputValidationInfoBackground;
    this.inputValidationInfoForeground = styles.inputValidationInfoForeground;
    this.inputValidationInfoBorder = styles.inputValidationInfoBorder;
    this.inputValidationWarningBackground = styles.inputValidationWarningBackground;
    this.inputValidationWarningForeground = styles.inputValidationWarningForeground;
    this.inputValidationWarningBorder = styles.inputValidationWarningBorder;
    this.inputValidationErrorBackground = styles.inputValidationErrorBackground;
    this.inputValidationErrorForeground = styles.inputValidationErrorForeground;
    this.inputValidationErrorBorder = styles.inputValidationErrorBorder;
    this.applyStyles();
  };

  ReplaceInput.prototype.applyStyles = function () {
    if (this.domNode) {
      var checkBoxStyles = {
        inputActiveOptionBorder: this.inputActiveOptionBorder,
        inputActiveOptionBackground: this.inputActiveOptionBackground
      };
      this.preserveCase.style(checkBoxStyles);
      var inputBoxStyles = {
        inputBackground: this.inputBackground,
        inputForeground: this.inputForeground,
        inputBorder: this.inputBorder,
        inputValidationInfoBackground: this.inputValidationInfoBackground,
        inputValidationInfoForeground: this.inputValidationInfoForeground,
        inputValidationInfoBorder: this.inputValidationInfoBorder,
        inputValidationWarningBackground: this.inputValidationWarningBackground,
        inputValidationWarningForeground: this.inputValidationWarningForeground,
        inputValidationWarningBorder: this.inputValidationWarningBorder,
        inputValidationErrorBackground: this.inputValidationErrorBackground,
        inputValidationErrorForeground: this.inputValidationErrorForeground,
        inputValidationErrorBorder: this.inputValidationErrorBorder
      };
      this.inputBox.style(inputBoxStyles);
    }
  };

  ReplaceInput.prototype.select = function () {
    this.inputBox.select();
  };

  ReplaceInput.prototype.focus = function () {
    this.inputBox.focus();
  };

  ReplaceInput.prototype.getPreserveCase = function () {
    return this.preserveCase.checked;
  };

  ReplaceInput.prototype.setPreserveCase = function (value) {
    this.preserveCase.checked = value;
  };

  ReplaceInput.prototype.focusOnPreserve = function () {
    this.preserveCase.focus();
  };

  ReplaceInput.prototype.validate = function () {
    if (this.inputBox) {
      this.inputBox.validate();
    }
  };

  Object.defineProperty(ReplaceInput.prototype, "width", {
    set: function (newWidth) {
      this.inputBox.paddingRight = this.cachedOptionsWidth;
      this.inputBox.width = newWidth;
      this.domNode.style.width = newWidth + 'px';
    },
    enumerable: true,
    configurable: true
  });

  ReplaceInput.prototype.dispose = function () {
    _super.prototype.dispose.call(this);
  };

  return ReplaceInput;
}(_widget.Widget);

exports.ReplaceInput = ReplaceInput;
},{"./findInput.css":"../node_modules/monaco-editor/esm/vs/base/browser/ui/findinput/findInput.css","../../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../inputbox/inputBox.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/inputbox/inputBox.js","../widget.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/widget.js","../../../common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../checkbox/checkbox.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/checkbox/checkbox.js"}],"../node_modules/monaco-editor/esm/vs/platform/browser/contextScopedHistoryWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAndBindHistoryNavigationWidgetScopedContextKeyService = createAndBindHistoryNavigationWidgetScopedContextKeyService;
exports.ContextScopedReplaceInput = exports.ContextScopedFindInput = exports.HistoryNavigationEnablementContext = exports.HistoryNavigationWidgetContext = void 0;

var _contextkey = require("../contextkey/common/contextkey.js");

var _findInput = require("../../base/browser/ui/findinput/findInput.js");

var _keybindingsRegistry = require("../keybinding/common/keybindingsRegistry.js");

var _replaceInput = require("../../base/browser/ui/findinput/replaceInput.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var HistoryNavigationWidgetContext = 'historyNavigationWidget';
exports.HistoryNavigationWidgetContext = HistoryNavigationWidgetContext;
var HistoryNavigationEnablementContext = 'historyNavigationEnabled';
exports.HistoryNavigationEnablementContext = HistoryNavigationEnablementContext;

function bindContextScopedWidget(contextKeyService, widget, contextKey) {
  new _contextkey.RawContextKey(contextKey, widget).bindTo(contextKeyService);
}

function createWidgetScopedContextKeyService(contextKeyService, widget) {
  return contextKeyService.createScoped(widget.target);
}

function getContextScopedWidget(contextKeyService, contextKey) {
  return contextKeyService.getContext(document.activeElement).getValue(contextKey);
}

function createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, widget) {
  var scopedContextKeyService = createWidgetScopedContextKeyService(contextKeyService, widget);
  bindContextScopedWidget(scopedContextKeyService, widget, HistoryNavigationWidgetContext);
  var historyNavigationEnablement = new _contextkey.RawContextKey(HistoryNavigationEnablementContext, true).bindTo(scopedContextKeyService);
  return {
    scopedContextKeyService: scopedContextKeyService,
    historyNavigationEnablement: historyNavigationEnablement
  };
}

var ContextScopedFindInput =
/** @class */
function (_super) {
  __extends(ContextScopedFindInput, _super);

  function ContextScopedFindInput(container, contextViewProvider, options, contextKeyService, showFindOptions) {
    if (showFindOptions === void 0) {
      showFindOptions = false;
    }

    var _this = _super.call(this, container, contextViewProvider, showFindOptions, options) || this;

    _this._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, {
      target: _this.inputBox.element,
      historyNavigator: _this.inputBox
    }).scopedContextKeyService);

    return _this;
  }

  ContextScopedFindInput = __decorate([__param(3, _contextkey.IContextKeyService)], ContextScopedFindInput);
  return ContextScopedFindInput;
}(_findInput.FindInput);

exports.ContextScopedFindInput = ContextScopedFindInput;

var ContextScopedReplaceInput =
/** @class */
function (_super) {
  __extends(ContextScopedReplaceInput, _super);

  function ContextScopedReplaceInput(container, contextViewProvider, options, contextKeyService, showReplaceOptions) {
    if (showReplaceOptions === void 0) {
      showReplaceOptions = false;
    }

    var _this = _super.call(this, container, contextViewProvider, showReplaceOptions, options) || this;

    _this._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, {
      target: _this.inputBox.element,
      historyNavigator: _this.inputBox
    }).scopedContextKeyService);

    return _this;
  }

  ContextScopedReplaceInput = __decorate([__param(3, _contextkey.IContextKeyService)], ContextScopedReplaceInput);
  return ContextScopedReplaceInput;
}(_replaceInput.ReplaceInput);

exports.ContextScopedReplaceInput = ContextScopedReplaceInput;

_keybindingsRegistry.KeybindingsRegistry.registerCommandAndKeybindingRule({
  id: 'history.showPrevious',
  weight: 200
  /* WorkbenchContrib */
  ,
  when: _contextkey.ContextKeyExpr.and(_contextkey.ContextKeyExpr.has(HistoryNavigationWidgetContext), _contextkey.ContextKeyExpr.equals(HistoryNavigationEnablementContext, true)),
  primary: 16
  /* UpArrow */
  ,
  secondary: [512
  /* Alt */
  | 16
  /* UpArrow */
  ],
  handler: function (accessor, arg2) {
    var widget = getContextScopedWidget(accessor.get(_contextkey.IContextKeyService), HistoryNavigationWidgetContext);

    if (widget) {
      var historyInputBox = widget.historyNavigator;
      historyInputBox.showPreviousValue();
    }
  }
});

_keybindingsRegistry.KeybindingsRegistry.registerCommandAndKeybindingRule({
  id: 'history.showNext',
  weight: 200
  /* WorkbenchContrib */
  ,
  when: _contextkey.ContextKeyExpr.and(_contextkey.ContextKeyExpr.has(HistoryNavigationWidgetContext), _contextkey.ContextKeyExpr.equals(HistoryNavigationEnablementContext, true)),
  primary: 18
  /* DownArrow */
  ,
  secondary: [512
  /* Alt */
  | 18
  /* DownArrow */
  ],
  handler: function (accessor, arg2) {
    var widget = getContextScopedWidget(accessor.get(_contextkey.IContextKeyService), HistoryNavigationWidgetContext);

    if (widget) {
      var historyInputBox = widget.historyNavigator;
      historyInputBox.showNextValue();
    }
  }
});
},{"../contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../base/browser/ui/findinput/findInput.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/findinput/findInput.js","../keybinding/common/keybindingsRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js","../../base/browser/ui/findinput/replaceInput.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/findinput/replaceInput.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleButton = exports.FindWidget = exports.FindWidgetViewZone = void 0;

require("./findWidget.css");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var dom = _interopRequireWildcard(require("../../../base/browser/dom.js"));

var _aria = require("../../../base/browser/ui/aria/aria.js");

var _checkbox = require("../../../base/browser/ui/checkbox/checkbox.js");

var _sash2 = require("../../../base/browser/ui/sash/sash.js");

var _widget = require("../../../base/browser/ui/widget.js");

var _async = require("../../../base/common/async.js");

var _errors = require("../../../base/common/errors.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var platform = _interopRequireWildcard(require("../../../base/common/platform.js"));

var strings = _interopRequireWildcard(require("../../../base/common/strings.js"));

var _range = require("../../common/core/range.js");

var _findModel = require("./findModel.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

var _contextScopedHistoryWidget = require("../../../platform/browser/contextScopedHistoryWidget.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var NLS_FIND_INPUT_LABEL = nls.localize('label.find', "Find");
var NLS_FIND_INPUT_PLACEHOLDER = nls.localize('placeholder.find', "Find");
var NLS_PREVIOUS_MATCH_BTN_LABEL = nls.localize('label.previousMatchButton', "Previous match");
var NLS_NEXT_MATCH_BTN_LABEL = nls.localize('label.nextMatchButton', "Next match");
var NLS_TOGGLE_SELECTION_FIND_TITLE = nls.localize('label.toggleSelectionFind', "Find in selection");
var NLS_CLOSE_BTN_LABEL = nls.localize('label.closeButton', "Close");
var NLS_REPLACE_INPUT_LABEL = nls.localize('label.replace', "Replace");
var NLS_REPLACE_INPUT_PLACEHOLDER = nls.localize('placeholder.replace', "Replace");
var NLS_REPLACE_BTN_LABEL = nls.localize('label.replaceButton', "Replace");
var NLS_REPLACE_ALL_BTN_LABEL = nls.localize('label.replaceAllButton', "Replace All");
var NLS_TOGGLE_REPLACE_MODE_BTN_LABEL = nls.localize('label.toggleReplaceButton', "Toggle Replace mode");
var NLS_MATCHES_COUNT_LIMIT_TITLE = nls.localize('title.matchesCountLimit', "Only the first {0} results are highlighted, but all find operations work on the entire text.", _findModel.MATCHES_LIMIT);
var NLS_MATCHES_LOCATION = nls.localize('label.matchesLocation', "{0} of {1}");
var NLS_NO_RESULTS = nls.localize('label.noResults', "No Results");
var FIND_WIDGET_INITIAL_WIDTH = 419;
var PART_WIDTH = 275;
var FIND_INPUT_AREA_WIDTH = PART_WIDTH - 54;
var MAX_MATCHES_COUNT_WIDTH = 69; // let FIND_ALL_CONTROLS_WIDTH = 17/** Find Input margin-left */ + (MAX_MATCHES_COUNT_WIDTH + 3 + 1) /** Match Results */ + 23 /** Button */ * 4 + 2/** sash */;

var FIND_INPUT_AREA_HEIGHT = 33; // The height of Find Widget when Replace Input is not visible.

var ctrlEnterReplaceAllWarningPromptedKey = 'ctrlEnterReplaceAll.windows.donotask';
var ctrlKeyMod = platform.isMacintosh ? 256
/* WinCtrl */
: 2048
/* CtrlCmd */
;

var FindWidgetViewZone =
/** @class */
function () {
  function FindWidgetViewZone(afterLineNumber) {
    this.afterLineNumber = afterLineNumber;
    this.heightInPx = FIND_INPUT_AREA_HEIGHT;
    this.suppressMouseDown = false;
    this.domNode = document.createElement('div');
    this.domNode.className = 'dock-find-viewzone';
  }

  return FindWidgetViewZone;
}();

exports.FindWidgetViewZone = FindWidgetViewZone;

function stopPropagationForMultiLineUpwards(event, value, textarea) {
  var isMultiline = !!value.match(/\n/);

  if (textarea && isMultiline && textarea.selectionStart > 0) {
    event.stopPropagation();
    return;
  }
}

function stopPropagationForMultiLineDownwards(event, value, textarea) {
  var isMultiline = !!value.match(/\n/);

  if (textarea && isMultiline && textarea.selectionEnd < textarea.value.length) {
    event.stopPropagation();
    return;
  }
}

var FindWidget =
/** @class */
function (_super) {
  __extends(FindWidget, _super);

  function FindWidget(codeEditor, controller, state, contextViewProvider, keybindingService, contextKeyService, themeService, storageService, notificationService) {
    var _this = _super.call(this) || this;

    _this._cachedHeight = null;
    _this._codeEditor = codeEditor;
    _this._controller = controller;
    _this._state = state;
    _this._contextViewProvider = contextViewProvider;
    _this._keybindingService = keybindingService;
    _this._contextKeyService = contextKeyService;
    _this._storageService = storageService;
    _this._notificationService = notificationService;
    _this._ctrlEnterReplaceAllWarningPrompted = !!storageService.getBoolean(ctrlEnterReplaceAllWarningPromptedKey, 0
    /* GLOBAL */
    );
    _this._isVisible = false;
    _this._isReplaceVisible = false;
    _this._ignoreChangeEvent = false;
    _this._updateHistoryDelayer = new _async.Delayer(500);

    _this._register((0, _lifecycle.toDisposable)(function () {
      return _this._updateHistoryDelayer.cancel();
    }));

    _this._register(_this._state.onFindReplaceStateChange(function (e) {
      return _this._onStateChanged(e);
    }));

    _this._buildDomNode();

    _this._updateButtons();

    _this._tryUpdateWidgetWidth();

    _this._findInput.inputBox.layout();

    _this._register(_this._codeEditor.onDidChangeConfiguration(function (e) {
      if (e.hasChanged(65
      /* readOnly */
      )) {
        if (_this._codeEditor.getOption(65
        /* readOnly */
        )) {
          // Hide replace part if editor becomes read only
          _this._state.change({
            isReplaceRevealed: false
          }, false);
        }

        _this._updateButtons();
      }

      if (e.hasChanged(103
      /* layoutInfo */
      )) {
        _this._tryUpdateWidgetWidth();
      }

      if (e.hasChanged(2
      /* accessibilitySupport */
      )) {
        _this.updateAccessibilitySupport();
      }

      if (e.hasChanged(27
      /* find */
      )) {
        var addExtraSpaceOnTop = _this._codeEditor.getOption(27
        /* find */
        ).addExtraSpaceOnTop;

        if (addExtraSpaceOnTop && !_this._viewZone) {
          _this._viewZone = new FindWidgetViewZone(0);

          _this._showViewZone();
        }

        if (!addExtraSpaceOnTop && _this._viewZone) {
          _this._removeViewZone();
        }
      }
    }));

    _this.updateAccessibilitySupport();

    _this._register(_this._codeEditor.onDidChangeCursorSelection(function () {
      if (_this._isVisible) {
        _this._updateToggleSelectionFindButton();
      }
    }));

    _this._register(_this._codeEditor.onDidFocusEditorWidget(function () {
      if (_this._isVisible) {
        var globalBufferTerm = _this._controller.getGlobalBufferTerm();

        if (globalBufferTerm && globalBufferTerm !== _this._state.searchString) {
          _this._state.change({
            searchString: globalBufferTerm
          }, true);

          _this._findInput.select();
        }
      }
    }));

    _this._findInputFocused = _findModel.CONTEXT_FIND_INPUT_FOCUSED.bindTo(contextKeyService);
    _this._findFocusTracker = _this._register(dom.trackFocus(_this._findInput.inputBox.inputElement));

    _this._register(_this._findFocusTracker.onDidFocus(function () {
      _this._findInputFocused.set(true);

      _this._updateSearchScope();
    }));

    _this._register(_this._findFocusTracker.onDidBlur(function () {
      _this._findInputFocused.set(false);
    }));

    _this._replaceInputFocused = _findModel.CONTEXT_REPLACE_INPUT_FOCUSED.bindTo(contextKeyService);
    _this._replaceFocusTracker = _this._register(dom.trackFocus(_this._replaceInput.inputBox.inputElement));

    _this._register(_this._replaceFocusTracker.onDidFocus(function () {
      _this._replaceInputFocused.set(true);

      _this._updateSearchScope();
    }));

    _this._register(_this._replaceFocusTracker.onDidBlur(function () {
      _this._replaceInputFocused.set(false);
    }));

    _this._codeEditor.addOverlayWidget(_this);

    if (_this._codeEditor.getOption(27
    /* find */
    ).addExtraSpaceOnTop) {
      _this._viewZone = new FindWidgetViewZone(0); // Put it before the first line then users can scroll beyond the first line.
    }

    _this._applyTheme(themeService.getTheme());

    _this._register(themeService.onThemeChange(_this._applyTheme.bind(_this)));

    _this._register(_this._codeEditor.onDidChangeModel(function () {
      if (!_this._isVisible) {
        return;
      }

      _this._viewZoneId = undefined;
    }));

    _this._register(_this._codeEditor.onDidScrollChange(function (e) {
      if (e.scrollTopChanged) {
        _this._layoutViewZone();

        return;
      } // for other scroll changes, layout the viewzone in next tick to avoid ruining current rendering.


      setTimeout(function () {
        _this._layoutViewZone();
      }, 0);
    }));

    return _this;
  } // ----- IOverlayWidget API


  FindWidget.prototype.getId = function () {
    return FindWidget.ID;
  };

  FindWidget.prototype.getDomNode = function () {
    return this._domNode;
  };

  FindWidget.prototype.getPosition = function () {
    if (this._isVisible) {
      return {
        preference: 0
        /* TOP_RIGHT_CORNER */

      };
    }

    return null;
  }; // ----- React to state changes


  FindWidget.prototype._onStateChanged = function (e) {
    if (e.searchString) {
      try {
        this._ignoreChangeEvent = true;

        this._findInput.setValue(this._state.searchString);
      } finally {
        this._ignoreChangeEvent = false;
      }

      this._updateButtons();
    }

    if (e.replaceString) {
      this._replaceInput.inputBox.value = this._state.replaceString;
    }

    if (e.isRevealed) {
      if (this._state.isRevealed) {
        this._reveal();
      } else {
        this._hide(true);
      }
    }

    if (e.isReplaceRevealed) {
      if (this._state.isReplaceRevealed) {
        if (!this._codeEditor.getOption(65
        /* readOnly */
        ) && !this._isReplaceVisible) {
          this._isReplaceVisible = true;
          this._replaceInput.width = dom.getTotalWidth(this._findInput.domNode);

          this._updateButtons();

          this._replaceInput.inputBox.layout();
        }
      } else {
        if (this._isReplaceVisible) {
          this._isReplaceVisible = false;

          this._updateButtons();
        }
      }
    }

    if ((e.isRevealed || e.isReplaceRevealed) && (this._state.isRevealed || this._state.isReplaceRevealed)) {
      if (this._tryUpdateHeight()) {
        this._showViewZone();
      }
    }

    if (e.isRegex) {
      this._findInput.setRegex(this._state.isRegex);
    }

    if (e.wholeWord) {
      this._findInput.setWholeWords(this._state.wholeWord);
    }

    if (e.matchCase) {
      this._findInput.setCaseSensitive(this._state.matchCase);
    }

    if (e.searchScope) {
      if (this._state.searchScope) {
        this._toggleSelectionFind.checked = true;
      } else {
        this._toggleSelectionFind.checked = false;
      }

      this._updateToggleSelectionFindButton();
    }

    if (e.searchString || e.matchesCount || e.matchesPosition) {
      var showRedOutline = this._state.searchString.length > 0 && this._state.matchesCount === 0;
      dom.toggleClass(this._domNode, 'no-results', showRedOutline);

      this._updateMatchesCount();

      this._updateButtons();
    }

    if (e.searchString || e.currentMatch) {
      this._layoutViewZone();
    }

    if (e.updateHistory) {
      this._delayedUpdateHistory();
    }
  };

  FindWidget.prototype._delayedUpdateHistory = function () {
    this._updateHistoryDelayer.trigger(this._updateHistory.bind(this));
  };

  FindWidget.prototype._updateHistory = function () {
    if (this._state.searchString) {
      this._findInput.inputBox.addToHistory();
    }

    if (this._state.replaceString) {
      this._replaceInput.inputBox.addToHistory();
    }
  };

  FindWidget.prototype._updateMatchesCount = function () {
    this._matchesCount.style.minWidth = MAX_MATCHES_COUNT_WIDTH + 'px';

    if (this._state.matchesCount >= _findModel.MATCHES_LIMIT) {
      this._matchesCount.title = NLS_MATCHES_COUNT_LIMIT_TITLE;
    } else {
      this._matchesCount.title = '';
    } // remove previous content


    if (this._matchesCount.firstChild) {
      this._matchesCount.removeChild(this._matchesCount.firstChild);
    }

    var label;

    if (this._state.matchesCount > 0) {
      var matchesCount = String(this._state.matchesCount);

      if (this._state.matchesCount >= _findModel.MATCHES_LIMIT) {
        matchesCount += '+';
      }

      var matchesPosition = String(this._state.matchesPosition);

      if (matchesPosition === '0') {
        matchesPosition = '?';
      }

      label = strings.format(NLS_MATCHES_LOCATION, matchesPosition, matchesCount);
    } else {
      label = NLS_NO_RESULTS;
    }

    this._matchesCount.appendChild(document.createTextNode(label));

    (0, _aria.alert)(this._getAriaLabel(label, this._state.currentMatch, this._state.searchString), true);
    MAX_MATCHES_COUNT_WIDTH = Math.max(MAX_MATCHES_COUNT_WIDTH, this._matchesCount.clientWidth);
  }; // ----- actions


  FindWidget.prototype._getAriaLabel = function (label, currentMatch, searchString) {
    if (label === NLS_NO_RESULTS) {
      return searchString === '' ? nls.localize('ariaSearchNoResultEmpty', "{0} found", label) : nls.localize('ariaSearchNoResult', "{0} found for {1}", label, searchString);
    }

    return currentMatch ? nls.localize('ariaSearchNoResultWithLineNum', "{0} found for {1} at {2}", label, searchString, currentMatch.startLineNumber + ':' + currentMatch.startColumn) : nls.localize('ariaSearchNoResultWithLineNumNoCurrentMatch', "{0} found for {1}", label, searchString);
  };
  /**
   * If 'selection find' is ON we should not disable the button (its function is to cancel 'selection find').
   * If 'selection find' is OFF we enable the button only if there is a selection.
   */


  FindWidget.prototype._updateToggleSelectionFindButton = function () {
    var selection = this._codeEditor.getSelection();

    var isSelection = selection ? selection.startLineNumber !== selection.endLineNumber || selection.startColumn !== selection.endColumn : false;
    var isChecked = this._toggleSelectionFind.checked;

    if (this._isVisible && (isChecked || isSelection)) {
      this._toggleSelectionFind.enable();
    } else {
      this._toggleSelectionFind.disable();
    }
  };

  FindWidget.prototype._updateButtons = function () {
    this._findInput.setEnabled(this._isVisible);

    this._replaceInput.setEnabled(this._isVisible && this._isReplaceVisible);

    this._updateToggleSelectionFindButton();

    this._closeBtn.setEnabled(this._isVisible);

    var findInputIsNonEmpty = this._state.searchString.length > 0;
    var matchesCount = this._state.matchesCount ? true : false;

    this._prevBtn.setEnabled(this._isVisible && findInputIsNonEmpty && matchesCount);

    this._nextBtn.setEnabled(this._isVisible && findInputIsNonEmpty && matchesCount);

    this._replaceBtn.setEnabled(this._isVisible && this._isReplaceVisible && findInputIsNonEmpty);

    this._replaceAllBtn.setEnabled(this._isVisible && this._isReplaceVisible && findInputIsNonEmpty);

    dom.toggleClass(this._domNode, 'replaceToggled', this._isReplaceVisible);

    this._toggleReplaceBtn.toggleClass('codicon-chevron-right', !this._isReplaceVisible);

    this._toggleReplaceBtn.toggleClass('codicon-chevron-down', this._isReplaceVisible);

    this._toggleReplaceBtn.setExpanded(this._isReplaceVisible);

    var canReplace = !this._codeEditor.getOption(65
    /* readOnly */
    );

    this._toggleReplaceBtn.setEnabled(this._isVisible && canReplace);
  };

  FindWidget.prototype._reveal = function () {
    var _this = this;

    if (!this._isVisible) {
      this._isVisible = true;

      var selection = this._codeEditor.getSelection();

      switch (this._codeEditor.getOption(27
      /* find */
      ).autoFindInSelection) {
        case 'always':
          this._toggleSelectionFind.checked = true;
          break;

        case 'never':
          this._toggleSelectionFind.checked = false;
          break;

        case 'multiline':
          var isSelectionMultipleLine = !!selection && selection.startLineNumber !== selection.endLineNumber;
          this._toggleSelectionFind.checked = isSelectionMultipleLine;
          break;

        default:
          break;
      }

      this._tryUpdateWidgetWidth();

      this._updateButtons();

      setTimeout(function () {
        dom.addClass(_this._domNode, 'visible');

        _this._domNode.setAttribute('aria-hidden', 'false');
      }, 0); // validate query again as it's being dismissed when we hide the find widget.

      setTimeout(function () {
        _this._findInput.validate();
      }, 200);

      this._codeEditor.layoutOverlayWidget(this);

      var adjustEditorScrollTop = true;

      if (this._codeEditor.getOption(27
      /* find */
      ).seedSearchStringFromSelection && selection) {
        var domNode = this._codeEditor.getDomNode();

        if (domNode) {
          var editorCoords = dom.getDomNodePagePosition(domNode);

          var startCoords = this._codeEditor.getScrolledVisiblePosition(selection.getStartPosition());

          var startLeft = editorCoords.left + (startCoords ? startCoords.left : 0);
          var startTop = startCoords ? startCoords.top : 0;

          if (this._viewZone && startTop < this._viewZone.heightInPx) {
            if (selection.endLineNumber > selection.startLineNumber) {
              adjustEditorScrollTop = false;
            }

            var leftOfFindWidget = dom.getTopLeftOffset(this._domNode).left;

            if (startLeft > leftOfFindWidget) {
              adjustEditorScrollTop = false;
            }

            var endCoords = this._codeEditor.getScrolledVisiblePosition(selection.getEndPosition());

            var endLeft = editorCoords.left + (endCoords ? endCoords.left : 0);

            if (endLeft > leftOfFindWidget) {
              adjustEditorScrollTop = false;
            }
          }
        }
      }

      this._showViewZone(adjustEditorScrollTop);
    }
  };

  FindWidget.prototype._hide = function (focusTheEditor) {
    if (this._isVisible) {
      this._isVisible = false;

      this._updateButtons();

      dom.removeClass(this._domNode, 'visible');

      this._domNode.setAttribute('aria-hidden', 'true');

      this._findInput.clearMessage();

      if (focusTheEditor) {
        this._codeEditor.focus();
      }

      this._codeEditor.layoutOverlayWidget(this);

      this._removeViewZone();
    }
  };

  FindWidget.prototype._layoutViewZone = function () {
    var _this = this;

    var addExtraSpaceOnTop = this._codeEditor.getOption(27
    /* find */
    ).addExtraSpaceOnTop;

    if (!addExtraSpaceOnTop) {
      this._removeViewZone();

      return;
    }

    if (!this._isVisible) {
      return;
    }

    var viewZone = this._viewZone;

    if (this._viewZoneId !== undefined || !viewZone) {
      return;
    }

    this._codeEditor.changeViewZones(function (accessor) {
      viewZone.heightInPx = _this._getHeight();
      _this._viewZoneId = accessor.addZone(viewZone); // scroll top adjust to make sure the editor doesn't scroll when adding viewzone at the beginning.

      _this._codeEditor.setScrollTop(_this._codeEditor.getScrollTop() + viewZone.heightInPx);
    });
  };

  FindWidget.prototype._showViewZone = function (adjustScroll) {
    var _this = this;

    if (adjustScroll === void 0) {
      adjustScroll = true;
    }

    if (!this._isVisible) {
      return;
    }

    var addExtraSpaceOnTop = this._codeEditor.getOption(27
    /* find */
    ).addExtraSpaceOnTop;

    if (!addExtraSpaceOnTop) {
      return;
    }

    if (this._viewZone === undefined) {
      this._viewZone = new FindWidgetViewZone(0);
    }

    var viewZone = this._viewZone;

    this._codeEditor.changeViewZones(function (accessor) {
      if (_this._viewZoneId !== undefined) {
        // the view zone already exists, we need to update the height
        var newHeight = _this._getHeight();

        if (newHeight === viewZone.heightInPx) {
          return;
        }

        var scrollAdjustment = newHeight - viewZone.heightInPx;
        viewZone.heightInPx = newHeight;
        accessor.layoutZone(_this._viewZoneId);

        if (adjustScroll) {
          _this._codeEditor.setScrollTop(_this._codeEditor.getScrollTop() + scrollAdjustment);
        }

        return;
      } else {
        var scrollAdjustment = _this._getHeight();

        viewZone.heightInPx = scrollAdjustment;
        _this._viewZoneId = accessor.addZone(viewZone);

        if (adjustScroll) {
          _this._codeEditor.setScrollTop(_this._codeEditor.getScrollTop() + scrollAdjustment);
        }
      }
    });
  };

  FindWidget.prototype._removeViewZone = function () {
    var _this = this;

    this._codeEditor.changeViewZones(function (accessor) {
      if (_this._viewZoneId !== undefined) {
        accessor.removeZone(_this._viewZoneId);
        _this._viewZoneId = undefined;

        if (_this._viewZone) {
          _this._codeEditor.setScrollTop(_this._codeEditor.getScrollTop() - _this._viewZone.heightInPx);

          _this._viewZone = undefined;
        }
      }
    });
  };

  FindWidget.prototype._applyTheme = function (theme) {
    var inputStyles = {
      inputActiveOptionBorder: theme.getColor(_colorRegistry.inputActiveOptionBorder),
      inputActiveOptionBackground: theme.getColor(_colorRegistry.inputActiveOptionBackground),
      inputBackground: theme.getColor(_colorRegistry.inputBackground),
      inputForeground: theme.getColor(_colorRegistry.inputForeground),
      inputBorder: theme.getColor(_colorRegistry.inputBorder),
      inputValidationInfoBackground: theme.getColor(_colorRegistry.inputValidationInfoBackground),
      inputValidationInfoForeground: theme.getColor(_colorRegistry.inputValidationInfoForeground),
      inputValidationInfoBorder: theme.getColor(_colorRegistry.inputValidationInfoBorder),
      inputValidationWarningBackground: theme.getColor(_colorRegistry.inputValidationWarningBackground),
      inputValidationWarningForeground: theme.getColor(_colorRegistry.inputValidationWarningForeground),
      inputValidationWarningBorder: theme.getColor(_colorRegistry.inputValidationWarningBorder),
      inputValidationErrorBackground: theme.getColor(_colorRegistry.inputValidationErrorBackground),
      inputValidationErrorForeground: theme.getColor(_colorRegistry.inputValidationErrorForeground),
      inputValidationErrorBorder: theme.getColor(_colorRegistry.inputValidationErrorBorder)
    };

    this._findInput.style(inputStyles);

    this._replaceInput.style(inputStyles);

    this._toggleSelectionFind.style(inputStyles);
  };

  FindWidget.prototype._tryUpdateWidgetWidth = function () {
    if (!this._isVisible) {
      return;
    }

    if (!dom.isInDOM(this._domNode)) {
      // the widget is not in the DOM
      return;
    }

    var layoutInfo = this._codeEditor.getLayoutInfo();

    var editorContentWidth = layoutInfo.contentWidth;

    if (editorContentWidth <= 0) {
      // for example, diff view original editor
      dom.addClass(this._domNode, 'hiddenEditor');
      return;
    } else if (dom.hasClass(this._domNode, 'hiddenEditor')) {
      dom.removeClass(this._domNode, 'hiddenEditor');
    }

    var editorWidth = layoutInfo.width;
    var minimapWidth = layoutInfo.minimapWidth;
    var collapsedFindWidget = false;
    var reducedFindWidget = false;
    var narrowFindWidget = false;

    if (this._resized) {
      var widgetWidth = dom.getTotalWidth(this._domNode);

      if (widgetWidth > FIND_WIDGET_INITIAL_WIDTH) {
        // as the widget is resized by users, we may need to change the max width of the widget as the editor width changes.
        this._domNode.style.maxWidth = editorWidth - 28 - minimapWidth - 15 + "px";
        this._replaceInput.width = dom.getTotalWidth(this._findInput.domNode);
        return;
      }
    }

    if (FIND_WIDGET_INITIAL_WIDTH + 28 + minimapWidth >= editorWidth) {
      reducedFindWidget = true;
    }

    if (FIND_WIDGET_INITIAL_WIDTH + 28 + minimapWidth - MAX_MATCHES_COUNT_WIDTH >= editorWidth) {
      narrowFindWidget = true;
    }

    if (FIND_WIDGET_INITIAL_WIDTH + 28 + minimapWidth - MAX_MATCHES_COUNT_WIDTH >= editorWidth + 50) {
      collapsedFindWidget = true;
    }

    dom.toggleClass(this._domNode, 'collapsed-find-widget', collapsedFindWidget);
    dom.toggleClass(this._domNode, 'narrow-find-widget', narrowFindWidget);
    dom.toggleClass(this._domNode, 'reduced-find-widget', reducedFindWidget);

    if (!narrowFindWidget && !collapsedFindWidget) {
      // the minimal left offset of findwidget is 15px.
      this._domNode.style.maxWidth = editorWidth - 28 - minimapWidth - 15 + "px";
    }

    if (this._resized) {
      this._findInput.inputBox.layout();

      var findInputWidth = this._findInput.inputBox.element.clientWidth;

      if (findInputWidth > 0) {
        this._replaceInput.width = findInputWidth;
      }
    } else if (this._isReplaceVisible) {
      this._replaceInput.width = dom.getTotalWidth(this._findInput.domNode);
    }
  };

  FindWidget.prototype._getHeight = function () {
    var totalheight = 0; // find input margin top

    totalheight += 4; // find input height

    totalheight += this._findInput.inputBox.height + 2
    /** input box border */
    ;

    if (this._isReplaceVisible) {
      // replace input margin
      totalheight += 4;
      totalheight += this._replaceInput.inputBox.height + 2
      /** input box border */
      ;
    } // margin bottom


    totalheight += 4;
    return totalheight;
  };

  FindWidget.prototype._tryUpdateHeight = function () {
    var totalHeight = this._getHeight();

    if (this._cachedHeight !== null && this._cachedHeight === totalHeight) {
      return false;
    }

    this._cachedHeight = totalHeight;
    this._domNode.style.height = totalHeight + "px";
    return true;
  }; // ----- Public


  FindWidget.prototype.focusFindInput = function () {
    this._findInput.select(); // Edge browser requires focus() in addition to select()


    this._findInput.focus();
  };

  FindWidget.prototype.focusReplaceInput = function () {
    this._replaceInput.select(); // Edge browser requires focus() in addition to select()


    this._replaceInput.focus();
  };

  FindWidget.prototype.highlightFindOptions = function () {
    this._findInput.highlightFindOptions();
  };

  FindWidget.prototype._updateSearchScope = function () {
    if (!this._codeEditor.hasModel()) {
      return;
    }

    if (this._toggleSelectionFind.checked) {
      var selection = this._codeEditor.getSelection();

      if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) {
        selection = selection.setEndPosition(selection.endLineNumber - 1, this._codeEditor.getModel().getLineMaxColumn(selection.endLineNumber - 1));
      }

      var currentMatch = this._state.currentMatch;

      if (selection.startLineNumber !== selection.endLineNumber) {
        if (!_range.Range.equalsRange(selection, currentMatch)) {
          // Reseed find scope
          this._state.change({
            searchScope: selection
          }, true);
        }
      }
    }
  };

  FindWidget.prototype._onFindInputMouseDown = function (e) {
    // on linux, middle key does pasting.
    if (e.middleButton) {
      e.stopPropagation();
    }
  };

  FindWidget.prototype._onFindInputKeyDown = function (e) {
    if (e.equals(ctrlKeyMod | 3
    /* Enter */
    )) {
      this._findInput.inputBox.insertAtCursor('\n');

      e.preventDefault();
      return;
    }

    if (e.equals(2
    /* Tab */
    )) {
      if (this._isReplaceVisible) {
        this._replaceInput.focus();
      } else {
        this._findInput.focusOnCaseSensitive();
      }

      e.preventDefault();
      return;
    }

    if (e.equals(2048
    /* CtrlCmd */
    | 18
    /* DownArrow */
    )) {
      this._codeEditor.focus();

      e.preventDefault();
      return;
    }

    if (e.equals(16
    /* UpArrow */
    )) {
      return stopPropagationForMultiLineUpwards(e, this._findInput.getValue(), this._findInput.domNode.querySelector('textarea'));
    }

    if (e.equals(18
    /* DownArrow */
    )) {
      return stopPropagationForMultiLineDownwards(e, this._findInput.getValue(), this._findInput.domNode.querySelector('textarea'));
    }
  };

  FindWidget.prototype._onReplaceInputKeyDown = function (e) {
    if (e.equals(ctrlKeyMod | 3
    /* Enter */
    )) {
      if (platform.isWindows && platform.isNative && !this._ctrlEnterReplaceAllWarningPrompted) {
        // this is the first time when users press Ctrl + Enter to replace all
        this._notificationService.info(nls.localize('ctrlEnter.keybindingChanged', 'Ctrl+Enter now inserts line break instead of replacing all. You can modify the keybinding for editor.action.replaceAll to override this behavior.'));

        this._ctrlEnterReplaceAllWarningPrompted = true;

        this._storageService.store(ctrlEnterReplaceAllWarningPromptedKey, true, 0
        /* GLOBAL */
        );
      }

      this._replaceInput.inputBox.insertAtCursor('\n');

      e.preventDefault();
      return;
    }

    if (e.equals(2
    /* Tab */
    )) {
      this._findInput.focusOnCaseSensitive();

      e.preventDefault();
      return;
    }

    if (e.equals(1024
    /* Shift */
    | 2
    /* Tab */
    )) {
      this._findInput.focus();

      e.preventDefault();
      return;
    }

    if (e.equals(2048
    /* CtrlCmd */
    | 18
    /* DownArrow */
    )) {
      this._codeEditor.focus();

      e.preventDefault();
      return;
    }

    if (e.equals(16
    /* UpArrow */
    )) {
      return stopPropagationForMultiLineUpwards(e, this._replaceInput.inputBox.value, this._replaceInput.inputBox.element.querySelector('textarea'));
    }

    if (e.equals(18
    /* DownArrow */
    )) {
      return stopPropagationForMultiLineDownwards(e, this._replaceInput.inputBox.value, this._replaceInput.inputBox.element.querySelector('textarea'));
    }
  }; // ----- sash


  FindWidget.prototype.getHorizontalSashTop = function (_sash) {
    return 0;
  };

  FindWidget.prototype.getHorizontalSashLeft = function (_sash) {
    return 0;
  };

  FindWidget.prototype.getHorizontalSashWidth = function (_sash) {
    return 500;
  }; // ----- initialization


  FindWidget.prototype._keybindingLabelFor = function (actionId) {
    var kb = this._keybindingService.lookupKeybinding(actionId);

    if (!kb) {
      return '';
    }

    return " (" + kb.getLabel() + ")";
  };

  FindWidget.prototype._buildDomNode = function () {
    var _this = this;

    var flexibleHeight = true;
    var flexibleWidth = true; // Find input

    this._findInput = this._register(new _contextScopedHistoryWidget.ContextScopedFindInput(null, this._contextViewProvider, {
      width: FIND_INPUT_AREA_WIDTH,
      label: NLS_FIND_INPUT_LABEL,
      placeholder: NLS_FIND_INPUT_PLACEHOLDER,
      appendCaseSensitiveLabel: this._keybindingLabelFor(_findModel.FIND_IDS.ToggleCaseSensitiveCommand),
      appendWholeWordsLabel: this._keybindingLabelFor(_findModel.FIND_IDS.ToggleWholeWordCommand),
      appendRegexLabel: this._keybindingLabelFor(_findModel.FIND_IDS.ToggleRegexCommand),
      validation: function (value) {
        if (value.length === 0 || !_this._findInput.getRegex()) {
          return null;
        }

        try {
          /* tslint:disable-next-line:no-unused-expression */
          new RegExp(value);
          return null;
        } catch (e) {
          return {
            content: e.message
          };
        }
      },
      flexibleHeight: flexibleHeight,
      flexibleWidth: flexibleWidth,
      flexibleMaxHeight: 118
    }, this._contextKeyService, true));

    this._findInput.setRegex(!!this._state.isRegex);

    this._findInput.setCaseSensitive(!!this._state.matchCase);

    this._findInput.setWholeWords(!!this._state.wholeWord);

    this._register(this._findInput.onKeyDown(function (e) {
      return _this._onFindInputKeyDown(e);
    }));

    this._register(this._findInput.inputBox.onDidChange(function () {
      if (_this._ignoreChangeEvent) {
        return;
      }

      _this._state.change({
        searchString: _this._findInput.getValue()
      }, true);
    }));

    this._register(this._findInput.onDidOptionChange(function () {
      _this._state.change({
        isRegex: _this._findInput.getRegex(),
        wholeWord: _this._findInput.getWholeWords(),
        matchCase: _this._findInput.getCaseSensitive()
      }, true);
    }));

    this._register(this._findInput.onCaseSensitiveKeyDown(function (e) {
      if (e.equals(1024
      /* Shift */
      | 2
      /* Tab */
      )) {
        if (_this._isReplaceVisible) {
          _this._replaceInput.focus();

          e.preventDefault();
        }
      }
    }));

    this._register(this._findInput.onRegexKeyDown(function (e) {
      if (e.equals(2
      /* Tab */
      )) {
        if (_this._isReplaceVisible) {
          _this._replaceInput.focusOnPreserve();

          e.preventDefault();
        }
      }
    }));

    this._register(this._findInput.inputBox.onDidHeightChange(function (e) {
      if (_this._tryUpdateHeight()) {
        _this._showViewZone();
      }
    }));

    if (platform.isLinux) {
      this._register(this._findInput.onMouseDown(function (e) {
        return _this._onFindInputMouseDown(e);
      }));
    }

    this._matchesCount = document.createElement('div');
    this._matchesCount.className = 'matchesCount';

    this._updateMatchesCount(); // Previous button


    this._prevBtn = this._register(new SimpleButton({
      label: NLS_PREVIOUS_MATCH_BTN_LABEL + this._keybindingLabelFor(_findModel.FIND_IDS.PreviousMatchFindAction),
      className: 'codicon codicon-arrow-up',
      onTrigger: function () {
        _this._codeEditor.getAction(_findModel.FIND_IDS.PreviousMatchFindAction).run().then(undefined, _errors.onUnexpectedError);
      }
    })); // Next button

    this._nextBtn = this._register(new SimpleButton({
      label: NLS_NEXT_MATCH_BTN_LABEL + this._keybindingLabelFor(_findModel.FIND_IDS.NextMatchFindAction),
      className: 'codicon codicon-arrow-down',
      onTrigger: function () {
        _this._codeEditor.getAction(_findModel.FIND_IDS.NextMatchFindAction).run().then(undefined, _errors.onUnexpectedError);
      }
    }));
    var findPart = document.createElement('div');
    findPart.className = 'find-part';
    findPart.appendChild(this._findInput.domNode);
    var actionsContainer = document.createElement('div');
    actionsContainer.className = 'find-actions';
    findPart.appendChild(actionsContainer);
    actionsContainer.appendChild(this._matchesCount);
    actionsContainer.appendChild(this._prevBtn.domNode);
    actionsContainer.appendChild(this._nextBtn.domNode); // Toggle selection button

    this._toggleSelectionFind = this._register(new _checkbox.Checkbox({
      actionClassName: 'codicon codicon-selection',
      title: NLS_TOGGLE_SELECTION_FIND_TITLE + this._keybindingLabelFor(_findModel.FIND_IDS.ToggleSearchScopeCommand),
      isChecked: false
    }));

    this._register(this._toggleSelectionFind.onChange(function () {
      if (_this._toggleSelectionFind.checked) {
        if (_this._codeEditor.hasModel()) {
          var selection = _this._codeEditor.getSelection();

          if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) {
            selection = selection.setEndPosition(selection.endLineNumber - 1, _this._codeEditor.getModel().getLineMaxColumn(selection.endLineNumber - 1));
          }

          if (!selection.isEmpty()) {
            _this._state.change({
              searchScope: selection
            }, true);
          }
        }
      } else {
        _this._state.change({
          searchScope: null
        }, true);
      }
    }));

    actionsContainer.appendChild(this._toggleSelectionFind.domNode); // Close button

    this._closeBtn = this._register(new SimpleButton({
      label: NLS_CLOSE_BTN_LABEL + this._keybindingLabelFor(_findModel.FIND_IDS.CloseFindWidgetCommand),
      className: 'codicon codicon-close',
      onTrigger: function () {
        _this._state.change({
          isRevealed: false,
          searchScope: null
        }, false);
      },
      onKeyDown: function (e) {
        if (e.equals(2
        /* Tab */
        )) {
          if (_this._isReplaceVisible) {
            if (_this._replaceBtn.isEnabled()) {
              _this._replaceBtn.focus();
            } else {
              _this._codeEditor.focus();
            }

            e.preventDefault();
          }
        }
      }
    }));
    actionsContainer.appendChild(this._closeBtn.domNode); // Replace input

    this._replaceInput = this._register(new _contextScopedHistoryWidget.ContextScopedReplaceInput(null, undefined, {
      label: NLS_REPLACE_INPUT_LABEL,
      placeholder: NLS_REPLACE_INPUT_PLACEHOLDER,
      history: [],
      flexibleHeight: flexibleHeight,
      flexibleWidth: flexibleWidth,
      flexibleMaxHeight: 118
    }, this._contextKeyService, true));

    this._replaceInput.setPreserveCase(!!this._state.preserveCase);

    this._register(this._replaceInput.onKeyDown(function (e) {
      return _this._onReplaceInputKeyDown(e);
    }));

    this._register(this._replaceInput.inputBox.onDidChange(function () {
      _this._state.change({
        replaceString: _this._replaceInput.inputBox.value
      }, false);
    }));

    this._register(this._replaceInput.inputBox.onDidHeightChange(function (e) {
      if (_this._isReplaceVisible && _this._tryUpdateHeight()) {
        _this._showViewZone();
      }
    }));

    this._register(this._replaceInput.onDidOptionChange(function () {
      _this._state.change({
        preserveCase: _this._replaceInput.getPreserveCase()
      }, true);
    }));

    this._register(this._replaceInput.onPreserveCaseKeyDown(function (e) {
      if (e.equals(2
      /* Tab */
      )) {
        if (_this._prevBtn.isEnabled()) {
          _this._prevBtn.focus();
        } else if (_this._nextBtn.isEnabled()) {
          _this._nextBtn.focus();
        } else if (_this._toggleSelectionFind.enabled) {
          _this._toggleSelectionFind.focus();
        } else if (_this._closeBtn.isEnabled()) {
          _this._closeBtn.focus();
        }

        e.preventDefault();
      }
    })); // Replace one button


    this._replaceBtn = this._register(new SimpleButton({
      label: NLS_REPLACE_BTN_LABEL + this._keybindingLabelFor(_findModel.FIND_IDS.ReplaceOneAction),
      className: 'codicon codicon-replace',
      onTrigger: function () {
        _this._controller.replace();
      },
      onKeyDown: function (e) {
        if (e.equals(1024
        /* Shift */
        | 2
        /* Tab */
        )) {
          _this._closeBtn.focus();

          e.preventDefault();
        }
      }
    })); // Replace all button

    this._replaceAllBtn = this._register(new SimpleButton({
      label: NLS_REPLACE_ALL_BTN_LABEL + this._keybindingLabelFor(_findModel.FIND_IDS.ReplaceAllAction),
      className: 'codicon codicon-replace-all',
      onTrigger: function () {
        _this._controller.replaceAll();
      }
    }));
    var replacePart = document.createElement('div');
    replacePart.className = 'replace-part';
    replacePart.appendChild(this._replaceInput.domNode);
    var replaceActionsContainer = document.createElement('div');
    replaceActionsContainer.className = 'replace-actions';
    replacePart.appendChild(replaceActionsContainer);
    replaceActionsContainer.appendChild(this._replaceBtn.domNode);
    replaceActionsContainer.appendChild(this._replaceAllBtn.domNode); // Toggle replace button

    this._toggleReplaceBtn = this._register(new SimpleButton({
      label: NLS_TOGGLE_REPLACE_MODE_BTN_LABEL,
      className: 'codicon toggle left',
      onTrigger: function () {
        _this._state.change({
          isReplaceRevealed: !_this._isReplaceVisible
        }, false);

        if (_this._isReplaceVisible) {
          _this._replaceInput.width = dom.getTotalWidth(_this._findInput.domNode);

          _this._replaceInput.inputBox.layout();
        }

        _this._showViewZone();
      }
    }));

    this._toggleReplaceBtn.toggleClass('codicon-chevron-down', this._isReplaceVisible);

    this._toggleReplaceBtn.toggleClass('codicon-chevron-right', !this._isReplaceVisible);

    this._toggleReplaceBtn.setExpanded(this._isReplaceVisible); // Widget


    this._domNode = document.createElement('div');
    this._domNode.className = 'editor-widget find-widget';

    this._domNode.setAttribute('aria-hidden', 'true'); // We need to set this explicitly, otherwise on IE11, the width inheritence of flex doesn't work.


    this._domNode.style.width = FIND_WIDGET_INITIAL_WIDTH + "px";

    this._domNode.appendChild(this._toggleReplaceBtn.domNode);

    this._domNode.appendChild(findPart);

    this._domNode.appendChild(replacePart);

    this._resizeSash = new _sash2.Sash(this._domNode, this, {
      orientation: 0
      /* VERTICAL */

    });
    this._resized = false;
    var originalWidth = FIND_WIDGET_INITIAL_WIDTH;

    this._register(this._resizeSash.onDidStart(function () {
      originalWidth = dom.getTotalWidth(_this._domNode);
    }));

    this._register(this._resizeSash.onDidChange(function (evt) {
      _this._resized = true;
      var width = originalWidth + evt.startX - evt.currentX;

      if (width < FIND_WIDGET_INITIAL_WIDTH) {
        // narrow down the find widget should be handled by CSS.
        return;
      }

      var maxWidth = parseFloat(dom.getComputedStyle(_this._domNode).maxWidth) || 0;

      if (width > maxWidth) {
        return;
      }

      _this._domNode.style.width = width + "px";

      if (_this._isReplaceVisible) {
        _this._replaceInput.width = dom.getTotalWidth(_this._findInput.domNode);
      }

      _this._findInput.inputBox.layout();

      _this._tryUpdateHeight();
    }));

    this._register(this._resizeSash.onDidReset(function () {
      // users double click on the sash
      var currentWidth = dom.getTotalWidth(_this._domNode);

      if (currentWidth < FIND_WIDGET_INITIAL_WIDTH) {
        // The editor is narrow and the width of the find widget is controlled fully by CSS.
        return;
      }

      var width = FIND_WIDGET_INITIAL_WIDTH;

      if (!_this._resized || currentWidth === FIND_WIDGET_INITIAL_WIDTH) {
        // 1. never resized before, double click should maximizes it
        // 2. users resized it already but its width is the same as default
        var layoutInfo = _this._codeEditor.getLayoutInfo();

        width = layoutInfo.width - 28 - layoutInfo.minimapWidth - 15;
        _this._resized = true;
      } else {
        /**
         * no op, the find widget should be shrinked to its default size.
         */
      }

      _this._domNode.style.width = width + "px";

      if (_this._isReplaceVisible) {
        _this._replaceInput.width = dom.getTotalWidth(_this._findInput.domNode);
      }

      _this._findInput.inputBox.layout();
    }));
  };

  FindWidget.prototype.updateAccessibilitySupport = function () {
    var value = this._codeEditor.getOption(2
    /* accessibilitySupport */
    );

    this._findInput.setFocusInputOnOptionClick(value !== 2
    /* Enabled */
    );
  };

  FindWidget.ID = 'editor.contrib.findWidget';
  return FindWidget;
}(_widget.Widget);

exports.FindWidget = FindWidget;

var SimpleButton =
/** @class */
function (_super) {
  __extends(SimpleButton, _super);

  function SimpleButton(opts) {
    var _this = _super.call(this) || this;

    _this._opts = opts;
    _this._domNode = document.createElement('div');
    _this._domNode.title = _this._opts.label;
    _this._domNode.tabIndex = 0;
    _this._domNode.className = 'button ' + _this._opts.className;

    _this._domNode.setAttribute('role', 'button');

    _this._domNode.setAttribute('aria-label', _this._opts.label);

    _this.onclick(_this._domNode, function (e) {
      _this._opts.onTrigger();

      e.preventDefault();
    });

    _this.onkeydown(_this._domNode, function (e) {
      if (e.equals(10
      /* Space */
      ) || e.equals(3
      /* Enter */
      )) {
        _this._opts.onTrigger();

        e.preventDefault();
        return;
      }

      if (_this._opts.onKeyDown) {
        _this._opts.onKeyDown(e);
      }
    });

    return _this;
  }

  Object.defineProperty(SimpleButton.prototype, "domNode", {
    get: function () {
      return this._domNode;
    },
    enumerable: true,
    configurable: true
  });

  SimpleButton.prototype.isEnabled = function () {
    return this._domNode.tabIndex >= 0;
  };

  SimpleButton.prototype.focus = function () {
    this._domNode.focus();
  };

  SimpleButton.prototype.setEnabled = function (enabled) {
    dom.toggleClass(this._domNode, 'disabled', !enabled);

    this._domNode.setAttribute('aria-disabled', String(!enabled));

    this._domNode.tabIndex = enabled ? 0 : -1;
  };

  SimpleButton.prototype.setExpanded = function (expanded) {
    this._domNode.setAttribute('aria-expanded', String(!!expanded));
  };

  SimpleButton.prototype.toggleClass = function (className, shouldHaveIt) {
    dom.toggleClass(this._domNode, className, shouldHaveIt);
  };

  return SimpleButton;
}(_widget.Widget);

exports.SimpleButton = SimpleButton;
// theming
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var addBackgroundColorRule = function (selector, color) {
    if (color) {
      collector.addRule(".monaco-editor " + selector + " { background-color: " + color + "; }");
    }
  };

  addBackgroundColorRule('.findMatch', theme.getColor(_colorRegistry.editorFindMatchHighlight));
  addBackgroundColorRule('.currentFindMatch', theme.getColor(_colorRegistry.editorFindMatch));
  addBackgroundColorRule('.findScope', theme.getColor(_colorRegistry.editorFindRangeHighlight));
  var widgetBackground = theme.getColor(_colorRegistry.editorWidgetBackground);
  addBackgroundColorRule('.find-widget', widgetBackground);
  var widgetShadowColor = theme.getColor(_colorRegistry.widgetShadow);

  if (widgetShadowColor) {
    collector.addRule(".monaco-editor .find-widget { box-shadow: 0 2px 8px " + widgetShadowColor + "; }");
  }

  var findMatchHighlightBorder = theme.getColor(_colorRegistry.editorFindMatchHighlightBorder);

  if (findMatchHighlightBorder) {
    collector.addRule(".monaco-editor .findMatch { border: 1px " + (theme.type === 'hc' ? 'dotted' : 'solid') + " " + findMatchHighlightBorder + "; box-sizing: border-box; }");
  }

  var findMatchBorder = theme.getColor(_colorRegistry.editorFindMatchBorder);

  if (findMatchBorder) {
    collector.addRule(".monaco-editor .currentFindMatch { border: 2px solid " + findMatchBorder + "; padding: 1px; box-sizing: border-box; }");
  }

  var findRangeHighlightBorder = theme.getColor(_colorRegistry.editorFindRangeHighlightBorder);

  if (findRangeHighlightBorder) {
    collector.addRule(".monaco-editor .findScope { border: 1px " + (theme.type === 'hc' ? 'dashed' : 'solid') + " " + findRangeHighlightBorder + "; }");
  }

  var hcBorder = theme.getColor(_colorRegistry.contrastBorder);

  if (hcBorder) {
    collector.addRule(".monaco-editor .find-widget { border: 1px solid " + hcBorder + "; }");
  }

  var foreground = theme.getColor(_colorRegistry.editorWidgetForeground);

  if (foreground) {
    collector.addRule(".monaco-editor .find-widget { color: " + foreground + "; }");
  }

  var error = theme.getColor(_colorRegistry.errorForeground);

  if (error) {
    collector.addRule(".monaco-editor .find-widget.no-results .matchesCount { color: " + error + "; }");
  }

  var resizeBorderBackground = theme.getColor(_colorRegistry.editorWidgetResizeBorder);

  if (resizeBorderBackground) {
    collector.addRule(".monaco-editor .find-widget .monaco-sash { background-color: " + resizeBorderBackground + "; width: 3px !important; margin-left: -4px;}");
  } else {
    var border = theme.getColor(_colorRegistry.editorWidgetBorder);

    if (border) {
      collector.addRule(".monaco-editor .find-widget .monaco-sash { background-color: " + border + "; width: 3px !important; margin-left: -4px;}");
    }
  } // This rule is used to override the outline color for synthetic-focus find input.


  var focusOutline = theme.getColor(_colorRegistry.focusBorder);

  if (focusOutline) {
    collector.addRule(".monaco-workbench .monaco-editor .find-widget .monaco-inputbox.synthetic-focus { outline-color: " + focusOutline + "; }");
  }
});
},{"./findWidget.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findWidget.css","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/browser/ui/aria/aria.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria.js","../../../base/browser/ui/checkbox/checkbox.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/checkbox/checkbox.js","../../../base/browser/ui/sash/sash.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/sash/sash.js","../../../base/browser/ui/widget.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/widget.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","./findModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findModel.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../platform/browser/contextScopedHistoryWidget.js":"../node_modules/monaco-editor/esm/vs/platform/browser/contextScopedHistoryWidget.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findController.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSelectionSearchString = getSelectionSearchString;
exports.StartFindReplaceAction = exports.PreviousSelectionMatchFindAction = exports.NextSelectionMatchFindAction = exports.SelectionMatchFindAction = exports.PreviousMatchFindAction2 = exports.PreviousMatchFindAction = exports.NextMatchFindAction2 = exports.NextMatchFindAction = exports.MatchFindAction = exports.StartFindWithSelectionAction = exports.StartFindAction = exports.FindController = exports.CommonFindController = void 0;

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _async = require("../../../base/common/async.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var strings = _interopRequireWildcard(require("../../../base/common/strings.js"));

var _editorExtensions = require("../../browser/editorExtensions.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _findModel = require("./findModel.js");

var _findOptionsWidget = require("./findOptionsWidget.js");

var _findState = require("./findState.js");

var _findWidget = require("./findWidget.js");

var _clipboardService = require("../../../platform/clipboard/common/clipboardService.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _contextView = require("../../../platform/contextview/browser/contextView.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _keybinding = require("../../../platform/keybinding/common/keybinding.js");

var _storage = require("../../../platform/storage/common/storage.js");

var _themeService2 = require("../../../platform/theme/common/themeService.js");

var _notification = require("../../../platform/notification/common/notification.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var SEARCH_STRING_MAX_LENGTH = 524288;

function getSelectionSearchString(editor) {
  if (!editor.hasModel()) {
    return null;
  }

  var selection = editor.getSelection(); // if selection spans multiple lines, default search string to empty

  if (selection.startLineNumber === selection.endLineNumber) {
    if (selection.isEmpty()) {
      var wordAtPosition = editor.getModel().getWordAtPosition(selection.getStartPosition());

      if (wordAtPosition) {
        return wordAtPosition.word;
      }
    } else {
      if (editor.getModel().getValueLengthInRange(selection) < SEARCH_STRING_MAX_LENGTH) {
        return editor.getModel().getValueInRange(selection);
      }
    }
  }

  return null;
}

var CommonFindController =
/** @class */
function (_super) {
  __extends(CommonFindController, _super);

  function CommonFindController(editor, contextKeyService, storageService, clipboardService) {
    var _this = _super.call(this) || this;

    _this._editor = editor;
    _this._findWidgetVisible = _findModel.CONTEXT_FIND_WIDGET_VISIBLE.bindTo(contextKeyService);
    _this._contextKeyService = contextKeyService;
    _this._storageService = storageService;
    _this._clipboardService = clipboardService;
    _this._updateHistoryDelayer = new _async.Delayer(500);
    _this._state = _this._register(new _findState.FindReplaceState());

    _this.loadQueryState();

    _this._register(_this._state.onFindReplaceStateChange(function (e) {
      return _this._onStateChanged(e);
    }));

    _this._model = null;

    _this._register(_this._editor.onDidChangeModel(function () {
      var shouldRestartFind = _this._editor.getModel() && _this._state.isRevealed;

      _this.disposeModel();

      _this._state.change({
        searchScope: null,
        matchCase: _this._storageService.getBoolean('editor.matchCase', 1
        /* WORKSPACE */
        , false),
        wholeWord: _this._storageService.getBoolean('editor.wholeWord', 1
        /* WORKSPACE */
        , false),
        isRegex: _this._storageService.getBoolean('editor.isRegex', 1
        /* WORKSPACE */
        , false),
        preserveCase: _this._storageService.getBoolean('editor.preserveCase', 1
        /* WORKSPACE */
        , false)
      }, false);

      if (shouldRestartFind) {
        _this._start({
          forceRevealReplace: false,
          seedSearchStringFromSelection: false && _this._editor.getOption(27
          /* find */
          ).seedSearchStringFromSelection,
          seedSearchStringFromGlobalClipboard: false,
          shouldFocus: 0
          /* NoFocusChange */
          ,
          shouldAnimate: false,
          updateSearchScope: false
        });
      }
    }));

    return _this;
  }

  CommonFindController.get = function (editor) {
    return editor.getContribution(CommonFindController.ID);
  };

  CommonFindController.prototype.dispose = function () {
    this.disposeModel();

    _super.prototype.dispose.call(this);
  };

  CommonFindController.prototype.disposeModel = function () {
    if (this._model) {
      this._model.dispose();

      this._model = null;
    }
  };

  CommonFindController.prototype._onStateChanged = function (e) {
    this.saveQueryState(e);

    if (e.isRevealed) {
      if (this._state.isRevealed) {
        this._findWidgetVisible.set(true);
      } else {
        this._findWidgetVisible.reset();

        this.disposeModel();
      }
    }

    if (e.searchString) {
      this.setGlobalBufferTerm(this._state.searchString);
    }
  };

  CommonFindController.prototype.saveQueryState = function (e) {
    if (e.isRegex) {
      this._storageService.store('editor.isRegex', this._state.actualIsRegex, 1
      /* WORKSPACE */
      );
    }

    if (e.wholeWord) {
      this._storageService.store('editor.wholeWord', this._state.actualWholeWord, 1
      /* WORKSPACE */
      );
    }

    if (e.matchCase) {
      this._storageService.store('editor.matchCase', this._state.actualMatchCase, 1
      /* WORKSPACE */
      );
    }

    if (e.preserveCase) {
      this._storageService.store('editor.preserveCase', this._state.actualPreserveCase, 1
      /* WORKSPACE */
      );
    }
  };

  CommonFindController.prototype.loadQueryState = function () {
    this._state.change({
      matchCase: this._storageService.getBoolean('editor.matchCase', 1
      /* WORKSPACE */
      , this._state.matchCase),
      wholeWord: this._storageService.getBoolean('editor.wholeWord', 1
      /* WORKSPACE */
      , this._state.wholeWord),
      isRegex: this._storageService.getBoolean('editor.isRegex', 1
      /* WORKSPACE */
      , this._state.isRegex),
      preserveCase: this._storageService.getBoolean('editor.preserveCase', 1
      /* WORKSPACE */
      , this._state.preserveCase)
    }, false);
  };

  CommonFindController.prototype.isFindInputFocused = function () {
    return !!_findModel.CONTEXT_FIND_INPUT_FOCUSED.getValue(this._contextKeyService);
  };

  CommonFindController.prototype.getState = function () {
    return this._state;
  };

  CommonFindController.prototype.closeFindWidget = function () {
    this._state.change({
      isRevealed: false,
      searchScope: null
    }, false);

    this._editor.focus();
  };

  CommonFindController.prototype.toggleCaseSensitive = function () {
    this._state.change({
      matchCase: !this._state.matchCase
    }, false);

    if (!this._state.isRevealed) {
      this.highlightFindOptions();
    }
  };

  CommonFindController.prototype.toggleWholeWords = function () {
    this._state.change({
      wholeWord: !this._state.wholeWord
    }, false);

    if (!this._state.isRevealed) {
      this.highlightFindOptions();
    }
  };

  CommonFindController.prototype.toggleRegex = function () {
    this._state.change({
      isRegex: !this._state.isRegex
    }, false);

    if (!this._state.isRevealed) {
      this.highlightFindOptions();
    }
  };

  CommonFindController.prototype.toggleSearchScope = function () {
    if (this._state.searchScope) {
      this._state.change({
        searchScope: null
      }, true);
    } else {
      if (this._editor.hasModel()) {
        var selection = this._editor.getSelection();

        if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) {
          selection = selection.setEndPosition(selection.endLineNumber - 1, this._editor.getModel().getLineMaxColumn(selection.endLineNumber - 1));
        }

        if (!selection.isEmpty()) {
          this._state.change({
            searchScope: selection
          }, true);
        }
      }
    }
  };

  CommonFindController.prototype.setSearchString = function (searchString) {
    if (this._state.isRegex) {
      searchString = strings.escapeRegExpCharacters(searchString);
    }

    this._state.change({
      searchString: searchString
    }, false);
  };

  CommonFindController.prototype.highlightFindOptions = function () {// overwritten in subclass
  };

  CommonFindController.prototype._start = function (opts) {
    this.disposeModel();

    if (!this._editor.hasModel()) {
      // cannot do anything with an editor that doesn't have a model...
      return;
    }

    var stateChanges = {
      isRevealed: true
    };

    if (opts.seedSearchStringFromSelection) {
      var selectionSearchString = getSelectionSearchString(this._editor);

      if (selectionSearchString) {
        if (this._state.isRegex) {
          stateChanges.searchString = strings.escapeRegExpCharacters(selectionSearchString);
        } else {
          stateChanges.searchString = selectionSearchString;
        }
      }
    }

    if (!stateChanges.searchString && opts.seedSearchStringFromGlobalClipboard) {
      var selectionSearchString = this.getGlobalBufferTerm();

      if (selectionSearchString) {
        stateChanges.searchString = selectionSearchString;
      }
    } // Overwrite isReplaceRevealed


    if (opts.forceRevealReplace) {
      stateChanges.isReplaceRevealed = true;
    } else if (!this._findWidgetVisible.get()) {
      stateChanges.isReplaceRevealed = false;
    }

    if (opts.updateSearchScope) {
      var currentSelection = this._editor.getSelection();

      if (!currentSelection.isEmpty()) {
        stateChanges.searchScope = currentSelection;
      }
    }

    this._state.change(stateChanges, false);

    if (!this._model) {
      this._model = new _findModel.FindModelBoundToEditorModel(this._editor, this._state);
    }
  };

  CommonFindController.prototype.start = function (opts) {
    this._start(opts);
  };

  CommonFindController.prototype.moveToNextMatch = function () {
    if (this._model) {
      this._model.moveToNextMatch();

      return true;
    }

    return false;
  };

  CommonFindController.prototype.moveToPrevMatch = function () {
    if (this._model) {
      this._model.moveToPrevMatch();

      return true;
    }

    return false;
  };

  CommonFindController.prototype.replace = function () {
    if (this._model) {
      this._model.replace();

      return true;
    }

    return false;
  };

  CommonFindController.prototype.replaceAll = function () {
    if (this._model) {
      this._model.replaceAll();

      return true;
    }

    return false;
  };

  CommonFindController.prototype.selectAllMatches = function () {
    if (this._model) {
      this._model.selectAllMatches();

      this._editor.focus();

      return true;
    }

    return false;
  };

  CommonFindController.prototype.getGlobalBufferTerm = function () {
    if (this._editor.getOption(27
    /* find */
    ).globalFindClipboard && this._clipboardService && this._editor.hasModel() && !this._editor.getModel().isTooLargeForSyncing()) {
      return this._clipboardService.readFindText();
    }

    return '';
  };

  CommonFindController.prototype.setGlobalBufferTerm = function (text) {
    if (this._editor.getOption(27
    /* find */
    ).globalFindClipboard && this._clipboardService && this._editor.hasModel() && !this._editor.getModel().isTooLargeForSyncing()) {
      this._clipboardService.writeFindText(text);
    }
  };

  CommonFindController.ID = 'editor.contrib.findController';
  CommonFindController = __decorate([__param(1, _contextkey.IContextKeyService), __param(2, _storage.IStorageService), __param(3, _clipboardService.IClipboardService)], CommonFindController);
  return CommonFindController;
}(_lifecycle.Disposable);

exports.CommonFindController = CommonFindController;

var FindController =
/** @class */
function (_super) {
  __extends(FindController, _super);

  function FindController(editor, _contextViewService, _contextKeyService, _keybindingService, _themeService, _notificationService, _storageService, clipboardService) {
    var _this = _super.call(this, editor, _contextKeyService, _storageService, clipboardService) || this;

    _this._contextViewService = _contextViewService;
    _this._keybindingService = _keybindingService;
    _this._themeService = _themeService;
    _this._notificationService = _notificationService;
    _this._widget = null;
    _this._findOptionsWidget = null;
    return _this;
  }

  FindController.prototype._start = function (opts) {
    if (!this._widget) {
      this._createFindWidget();
    }

    var selection = this._editor.getSelection();

    var updateSearchScope = false;

    switch (this._editor.getOption(27
    /* find */
    ).autoFindInSelection) {
      case 'always':
        updateSearchScope = true;
        break;

      case 'never':
        updateSearchScope = false;
        break;

      case 'multiline':
        var isSelectionMultipleLine = !!selection && selection.startLineNumber !== selection.endLineNumber;
        updateSearchScope = isSelectionMultipleLine;
        break;

      default:
        break;
    }

    opts.updateSearchScope = updateSearchScope;

    _super.prototype._start.call(this, opts);

    if (opts.shouldFocus === 2
    /* FocusReplaceInput */
    ) {
        this._widget.focusReplaceInput();
      } else if (opts.shouldFocus === 1
    /* FocusFindInput */
    ) {
        this._widget.focusFindInput();
      }
  };

  FindController.prototype.highlightFindOptions = function () {
    if (!this._widget) {
      this._createFindWidget();
    }

    if (this._state.isRevealed) {
      this._widget.highlightFindOptions();
    } else {
      this._findOptionsWidget.highlightFindOptions();
    }
  };

  FindController.prototype._createFindWidget = function () {
    this._widget = this._register(new _findWidget.FindWidget(this._editor, this, this._state, this._contextViewService, this._keybindingService, this._contextKeyService, this._themeService, this._storageService, this._notificationService));
    this._findOptionsWidget = this._register(new _findOptionsWidget.FindOptionsWidget(this._editor, this._state, this._keybindingService, this._themeService));
  };

  FindController = __decorate([__param(1, _contextView.IContextViewService), __param(2, _contextkey.IContextKeyService), __param(3, _keybinding.IKeybindingService), __param(4, _themeService2.IThemeService), __param(5, _notification.INotificationService), __param(6, _storage.IStorageService), __param(7, (0, _instantiation.optional)(_clipboardService.IClipboardService))], FindController);
  return FindController;
}(CommonFindController);

exports.FindController = FindController;

var StartFindAction =
/** @class */
function (_super) {
  __extends(StartFindAction, _super);

  function StartFindAction() {
    return _super.call(this, {
      id: _findModel.FIND_IDS.StartFindAction,
      label: nls.localize('startFindAction', "Find"),
      alias: 'Find',
      precondition: undefined,
      kbOpts: {
        kbExpr: null,
        primary: 2048
        /* CtrlCmd */
        | 36
        /* KEY_F */
        ,
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 15
        /* MenubarEditMenu */
        ,
        group: '3_find',
        title: nls.localize({
          key: 'miFind',
          comment: ['&& denotes a mnemonic']
        }, "&&Find"),
        order: 1
      }
    }) || this;
  }

  StartFindAction.prototype.run = function (accessor, editor) {
    var controller = CommonFindController.get(editor);

    if (controller) {
      controller.start({
        forceRevealReplace: false,
        seedSearchStringFromSelection: editor.getOption(27
        /* find */
        ).seedSearchStringFromSelection,
        seedSearchStringFromGlobalClipboard: editor.getOption(27
        /* find */
        ).globalFindClipboard,
        shouldFocus: 1
        /* FocusFindInput */
        ,
        shouldAnimate: true,
        updateSearchScope: false
      });
    }
  };

  return StartFindAction;
}(_editorExtensions.EditorAction);

exports.StartFindAction = StartFindAction;

var StartFindWithSelectionAction =
/** @class */
function (_super) {
  __extends(StartFindWithSelectionAction, _super);

  function StartFindWithSelectionAction() {
    return _super.call(this, {
      id: _findModel.FIND_IDS.StartFindWithSelection,
      label: nls.localize('startFindWithSelectionAction', "Find With Selection"),
      alias: 'Find With Selection',
      precondition: undefined,
      kbOpts: {
        kbExpr: null,
        primary: 0,
        mac: {
          primary: 2048
          /* CtrlCmd */
          | 35
          /* KEY_E */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  StartFindWithSelectionAction.prototype.run = function (accessor, editor) {
    var controller = CommonFindController.get(editor);

    if (controller) {
      controller.start({
        forceRevealReplace: false,
        seedSearchStringFromSelection: true,
        seedSearchStringFromGlobalClipboard: false,
        shouldFocus: 0
        /* NoFocusChange */
        ,
        shouldAnimate: true,
        updateSearchScope: false
      });
      controller.setGlobalBufferTerm(controller.getState().searchString);
    }
  };

  return StartFindWithSelectionAction;
}(_editorExtensions.EditorAction);

exports.StartFindWithSelectionAction = StartFindWithSelectionAction;

var MatchFindAction =
/** @class */
function (_super) {
  __extends(MatchFindAction, _super);

  function MatchFindAction() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MatchFindAction.prototype.run = function (accessor, editor) {
    var controller = CommonFindController.get(editor);

    if (controller && !this._run(controller)) {
      controller.start({
        forceRevealReplace: false,
        seedSearchStringFromSelection: controller.getState().searchString.length === 0 && editor.getOption(27
        /* find */
        ).seedSearchStringFromSelection,
        seedSearchStringFromGlobalClipboard: true,
        shouldFocus: 0
        /* NoFocusChange */
        ,
        shouldAnimate: true,
        updateSearchScope: false
      });

      this._run(controller);
    }
  };

  return MatchFindAction;
}(_editorExtensions.EditorAction);

exports.MatchFindAction = MatchFindAction;

var NextMatchFindAction =
/** @class */
function (_super) {
  __extends(NextMatchFindAction, _super);

  function NextMatchFindAction() {
    return _super.call(this, {
      id: _findModel.FIND_IDS.NextMatchFindAction,
      label: nls.localize('findNextMatchAction', "Find Next"),
      alias: 'Find Next',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: 61
        /* F3 */
        ,
        mac: {
          primary: 2048
          /* CtrlCmd */
          | 37
          /* KEY_G */
          ,
          secondary: [61
          /* F3 */
          ]
        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  NextMatchFindAction.prototype._run = function (controller) {
    return controller.moveToNextMatch();
  };

  return NextMatchFindAction;
}(MatchFindAction);

exports.NextMatchFindAction = NextMatchFindAction;

var NextMatchFindAction2 =
/** @class */
function (_super) {
  __extends(NextMatchFindAction2, _super);

  function NextMatchFindAction2() {
    return _super.call(this, {
      id: _findModel.FIND_IDS.NextMatchFindAction,
      label: nls.localize('findNextMatchAction', "Find Next"),
      alias: 'Find Next',
      precondition: undefined,
      kbOpts: {
        kbExpr: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.focus, _findModel.CONTEXT_FIND_INPUT_FOCUSED),
        primary: 3
        /* Enter */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  NextMatchFindAction2.prototype._run = function (controller) {
    return controller.moveToNextMatch();
  };

  return NextMatchFindAction2;
}(MatchFindAction);

exports.NextMatchFindAction2 = NextMatchFindAction2;

var PreviousMatchFindAction =
/** @class */
function (_super) {
  __extends(PreviousMatchFindAction, _super);

  function PreviousMatchFindAction() {
    return _super.call(this, {
      id: _findModel.FIND_IDS.PreviousMatchFindAction,
      label: nls.localize('findPreviousMatchAction', "Find Previous"),
      alias: 'Find Previous',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: 1024
        /* Shift */
        | 61
        /* F3 */
        ,
        mac: {
          primary: 2048
          /* CtrlCmd */
          | 1024
          /* Shift */
          | 37
          /* KEY_G */
          ,
          secondary: [1024
          /* Shift */
          | 61
          /* F3 */
          ]
        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  PreviousMatchFindAction.prototype._run = function (controller) {
    return controller.moveToPrevMatch();
  };

  return PreviousMatchFindAction;
}(MatchFindAction);

exports.PreviousMatchFindAction = PreviousMatchFindAction;

var PreviousMatchFindAction2 =
/** @class */
function (_super) {
  __extends(PreviousMatchFindAction2, _super);

  function PreviousMatchFindAction2() {
    return _super.call(this, {
      id: _findModel.FIND_IDS.PreviousMatchFindAction,
      label: nls.localize('findPreviousMatchAction', "Find Previous"),
      alias: 'Find Previous',
      precondition: undefined,
      kbOpts: {
        kbExpr: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.focus, _findModel.CONTEXT_FIND_INPUT_FOCUSED),
        primary: 1024
        /* Shift */
        | 3
        /* Enter */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  PreviousMatchFindAction2.prototype._run = function (controller) {
    return controller.moveToPrevMatch();
  };

  return PreviousMatchFindAction2;
}(MatchFindAction);

exports.PreviousMatchFindAction2 = PreviousMatchFindAction2;

var SelectionMatchFindAction =
/** @class */
function (_super) {
  __extends(SelectionMatchFindAction, _super);

  function SelectionMatchFindAction() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SelectionMatchFindAction.prototype.run = function (accessor, editor) {
    var controller = CommonFindController.get(editor);

    if (!controller) {
      return;
    }

    var selectionSearchString = getSelectionSearchString(editor);

    if (selectionSearchString) {
      controller.setSearchString(selectionSearchString);
    }

    if (!this._run(controller)) {
      controller.start({
        forceRevealReplace: false,
        seedSearchStringFromSelection: editor.getOption(27
        /* find */
        ).seedSearchStringFromSelection,
        seedSearchStringFromGlobalClipboard: false,
        shouldFocus: 0
        /* NoFocusChange */
        ,
        shouldAnimate: true,
        updateSearchScope: false
      });

      this._run(controller);
    }
  };

  return SelectionMatchFindAction;
}(_editorExtensions.EditorAction);

exports.SelectionMatchFindAction = SelectionMatchFindAction;

var NextSelectionMatchFindAction =
/** @class */
function (_super) {
  __extends(NextSelectionMatchFindAction, _super);

  function NextSelectionMatchFindAction() {
    return _super.call(this, {
      id: _findModel.FIND_IDS.NextSelectionMatchFindAction,
      label: nls.localize('nextSelectionMatchFindAction', "Find Next Selection"),
      alias: 'Find Next Selection',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: 2048
        /* CtrlCmd */
        | 61
        /* F3 */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  NextSelectionMatchFindAction.prototype._run = function (controller) {
    return controller.moveToNextMatch();
  };

  return NextSelectionMatchFindAction;
}(SelectionMatchFindAction);

exports.NextSelectionMatchFindAction = NextSelectionMatchFindAction;

var PreviousSelectionMatchFindAction =
/** @class */
function (_super) {
  __extends(PreviousSelectionMatchFindAction, _super);

  function PreviousSelectionMatchFindAction() {
    return _super.call(this, {
      id: _findModel.FIND_IDS.PreviousSelectionMatchFindAction,
      label: nls.localize('previousSelectionMatchFindAction', "Find Previous Selection"),
      alias: 'Find Previous Selection',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 61
        /* F3 */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  PreviousSelectionMatchFindAction.prototype._run = function (controller) {
    return controller.moveToPrevMatch();
  };

  return PreviousSelectionMatchFindAction;
}(SelectionMatchFindAction);

exports.PreviousSelectionMatchFindAction = PreviousSelectionMatchFindAction;

var StartFindReplaceAction =
/** @class */
function (_super) {
  __extends(StartFindReplaceAction, _super);

  function StartFindReplaceAction() {
    return _super.call(this, {
      id: _findModel.FIND_IDS.StartFindReplaceAction,
      label: nls.localize('startReplace', "Replace"),
      alias: 'Replace',
      precondition: undefined,
      kbOpts: {
        kbExpr: null,
        primary: 2048
        /* CtrlCmd */
        | 38
        /* KEY_H */
        ,
        mac: {
          primary: 2048
          /* CtrlCmd */
          | 512
          /* Alt */
          | 36
          /* KEY_F */

        },
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 15
        /* MenubarEditMenu */
        ,
        group: '3_find',
        title: nls.localize({
          key: 'miReplace',
          comment: ['&& denotes a mnemonic']
        }, "&&Replace"),
        order: 2
      }
    }) || this;
  }

  StartFindReplaceAction.prototype.run = function (accessor, editor) {
    if (!editor.hasModel() || editor.getOption(65
    /* readOnly */
    )) {
      return;
    }

    var controller = CommonFindController.get(editor);
    var currentSelection = editor.getSelection();
    var findInputFocused = controller.isFindInputFocused(); // we only seed search string from selection when the current selection is single line and not empty,
    // + the find input is not focused

    var seedSearchStringFromSelection = !currentSelection.isEmpty() && currentSelection.startLineNumber === currentSelection.endLineNumber && editor.getOption(27
    /* find */
    ).seedSearchStringFromSelection && !findInputFocused;
    /*
     * if the existing search string in find widget is empty and we don't seed search string from selection, it means the Find Input is still empty, so we should focus the Find Input instead of Replace Input.
       * findInputFocused true -> seedSearchStringFromSelection false, FocusReplaceInput
     * findInputFocused false, seedSearchStringFromSelection true FocusReplaceInput
     * findInputFocused false seedSearchStringFromSelection false FocusFindInput
     */

    var shouldFocus = findInputFocused || seedSearchStringFromSelection ? 2
    /* FocusReplaceInput */
    : 1
    /* FocusFindInput */
    ;

    if (controller) {
      controller.start({
        forceRevealReplace: true,
        seedSearchStringFromSelection: seedSearchStringFromSelection,
        seedSearchStringFromGlobalClipboard: editor.getOption(27
        /* find */
        ).seedSearchStringFromSelection,
        shouldFocus: shouldFocus,
        shouldAnimate: true,
        updateSearchScope: false
      });
    }
  };

  return StartFindReplaceAction;
}(_editorExtensions.EditorAction);

exports.StartFindReplaceAction = StartFindReplaceAction;
(0, _editorExtensions.registerEditorContribution)(CommonFindController.ID, FindController);
(0, _editorExtensions.registerEditorAction)(StartFindAction);
(0, _editorExtensions.registerEditorAction)(StartFindWithSelectionAction);
(0, _editorExtensions.registerEditorAction)(NextMatchFindAction);
(0, _editorExtensions.registerEditorAction)(NextMatchFindAction2);
(0, _editorExtensions.registerEditorAction)(PreviousMatchFindAction);
(0, _editorExtensions.registerEditorAction)(PreviousMatchFindAction2);
(0, _editorExtensions.registerEditorAction)(NextSelectionMatchFindAction);
(0, _editorExtensions.registerEditorAction)(PreviousSelectionMatchFindAction);
(0, _editorExtensions.registerEditorAction)(StartFindReplaceAction);

var FindCommand = _editorExtensions.EditorCommand.bindToContribution(CommonFindController.get);

(0, _editorExtensions.registerEditorCommand)(new FindCommand({
  id: _findModel.FIND_IDS.CloseFindWidgetCommand,
  precondition: _findModel.CONTEXT_FIND_WIDGET_VISIBLE,
  handler: function (x) {
    return x.closeFindWidget();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 5,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: 9
    /* Escape */
    ,
    secondary: [1024
    /* Shift */
    | 9
    /* Escape */
    ]
  }
}));
(0, _editorExtensions.registerEditorCommand)(new FindCommand({
  id: _findModel.FIND_IDS.ToggleCaseSensitiveCommand,
  precondition: undefined,
  handler: function (x) {
    return x.toggleCaseSensitive();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 5,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: _findModel.ToggleCaseSensitiveKeybinding.primary,
    mac: _findModel.ToggleCaseSensitiveKeybinding.mac,
    win: _findModel.ToggleCaseSensitiveKeybinding.win,
    linux: _findModel.ToggleCaseSensitiveKeybinding.linux
  }
}));
(0, _editorExtensions.registerEditorCommand)(new FindCommand({
  id: _findModel.FIND_IDS.ToggleWholeWordCommand,
  precondition: undefined,
  handler: function (x) {
    return x.toggleWholeWords();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 5,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: _findModel.ToggleWholeWordKeybinding.primary,
    mac: _findModel.ToggleWholeWordKeybinding.mac,
    win: _findModel.ToggleWholeWordKeybinding.win,
    linux: _findModel.ToggleWholeWordKeybinding.linux
  }
}));
(0, _editorExtensions.registerEditorCommand)(new FindCommand({
  id: _findModel.FIND_IDS.ToggleRegexCommand,
  precondition: undefined,
  handler: function (x) {
    return x.toggleRegex();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 5,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: _findModel.ToggleRegexKeybinding.primary,
    mac: _findModel.ToggleRegexKeybinding.mac,
    win: _findModel.ToggleRegexKeybinding.win,
    linux: _findModel.ToggleRegexKeybinding.linux
  }
}));
(0, _editorExtensions.registerEditorCommand)(new FindCommand({
  id: _findModel.FIND_IDS.ToggleSearchScopeCommand,
  precondition: undefined,
  handler: function (x) {
    return x.toggleSearchScope();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 5,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: _findModel.ToggleSearchScopeKeybinding.primary,
    mac: _findModel.ToggleSearchScopeKeybinding.mac,
    win: _findModel.ToggleSearchScopeKeybinding.win,
    linux: _findModel.ToggleSearchScopeKeybinding.linux
  }
}));
(0, _editorExtensions.registerEditorCommand)(new FindCommand({
  id: _findModel.FIND_IDS.ReplaceOneAction,
  precondition: _findModel.CONTEXT_FIND_WIDGET_VISIBLE,
  handler: function (x) {
    return x.replace();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 5,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: 2048
    /* CtrlCmd */
    | 1024
    /* Shift */
    | 22
    /* KEY_1 */

  }
}));
(0, _editorExtensions.registerEditorCommand)(new FindCommand({
  id: _findModel.FIND_IDS.ReplaceOneAction,
  precondition: _findModel.CONTEXT_FIND_WIDGET_VISIBLE,
  handler: function (x) {
    return x.replace();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 5,
    kbExpr: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.focus, _findModel.CONTEXT_REPLACE_INPUT_FOCUSED),
    primary: 3
    /* Enter */

  }
}));
(0, _editorExtensions.registerEditorCommand)(new FindCommand({
  id: _findModel.FIND_IDS.ReplaceAllAction,
  precondition: _findModel.CONTEXT_FIND_WIDGET_VISIBLE,
  handler: function (x) {
    return x.replaceAll();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 5,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: 2048
    /* CtrlCmd */
    | 512
    /* Alt */
    | 3
    /* Enter */

  }
}));
(0, _editorExtensions.registerEditorCommand)(new FindCommand({
  id: _findModel.FIND_IDS.ReplaceAllAction,
  precondition: _findModel.CONTEXT_FIND_WIDGET_VISIBLE,
  handler: function (x) {
    return x.replaceAll();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 5,
    kbExpr: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.focus, _findModel.CONTEXT_REPLACE_INPUT_FOCUSED),
    primary: undefined,
    mac: {
      primary: 2048
      /* CtrlCmd */
      | 3
      /* Enter */

    }
  }
}));
(0, _editorExtensions.registerEditorCommand)(new FindCommand({
  id: _findModel.FIND_IDS.SelectAllMatchesAction,
  precondition: _findModel.CONTEXT_FIND_WIDGET_VISIBLE,
  handler: function (x) {
    return x.selectAllMatches();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 5,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: 512
    /* Alt */
    | 3
    /* Enter */

  }
}));
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","./findModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findModel.js","./findOptionsWidget.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findOptionsWidget.js","./findState.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findState.js","./findWidget.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findWidget.js","../../../platform/clipboard/common/clipboardService.js":"../node_modules/monaco-editor/esm/vs/platform/clipboard/common/clipboardService.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/contextview/browser/contextView.js":"../node_modules/monaco-editor/esm/vs/platform/contextview/browser/contextView.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../platform/keybinding/common/keybinding.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding.js","../../../platform/storage/common/storage.js":"../node_modules/monaco-editor/esm/vs/platform/storage/common/storage.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../platform/notification/common/notification.js":"../node_modules/monaco-editor/esm/vs/platform/notification/common/notification.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/folding.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/foldingRanges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FoldingRegion = exports.FoldingRegions = exports.MAX_LINE_NUMBER = exports.MAX_FOLDING_REGIONS = void 0;

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var MAX_FOLDING_REGIONS = 0xFFFF;
exports.MAX_FOLDING_REGIONS = MAX_FOLDING_REGIONS;
var MAX_LINE_NUMBER = 0xFFFFFF;
exports.MAX_LINE_NUMBER = MAX_LINE_NUMBER;
var MASK_INDENT = 0xFF000000;

var FoldingRegions =
/** @class */
function () {
  function FoldingRegions(startIndexes, endIndexes, types) {
    if (startIndexes.length !== endIndexes.length || startIndexes.length > MAX_FOLDING_REGIONS) {
      throw new Error('invalid startIndexes or endIndexes size');
    }

    this._startIndexes = startIndexes;
    this._endIndexes = endIndexes;
    this._collapseStates = new Uint32Array(Math.ceil(startIndexes.length / 32));
    this._types = types;
    this._parentsComputed = false;
  }

  FoldingRegions.prototype.ensureParentIndices = function () {
    var _this = this;

    if (!this._parentsComputed) {
      this._parentsComputed = true;
      var parentIndexes_1 = [];

      var isInsideLast = function (startLineNumber, endLineNumber) {
        var index = parentIndexes_1[parentIndexes_1.length - 1];
        return _this.getStartLineNumber(index) <= startLineNumber && _this.getEndLineNumber(index) >= endLineNumber;
      };

      for (var i = 0, len = this._startIndexes.length; i < len; i++) {
        var startLineNumber = this._startIndexes[i];
        var endLineNumber = this._endIndexes[i];

        if (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {
          throw new Error('startLineNumber or endLineNumber must not exceed ' + MAX_LINE_NUMBER);
        }

        while (parentIndexes_1.length > 0 && !isInsideLast(startLineNumber, endLineNumber)) {
          parentIndexes_1.pop();
        }

        var parentIndex = parentIndexes_1.length > 0 ? parentIndexes_1[parentIndexes_1.length - 1] : -1;
        parentIndexes_1.push(i);
        this._startIndexes[i] = startLineNumber + ((parentIndex & 0xFF) << 24);
        this._endIndexes[i] = endLineNumber + ((parentIndex & 0xFF00) << 16);
      }
    }
  };

  Object.defineProperty(FoldingRegions.prototype, "length", {
    get: function () {
      return this._startIndexes.length;
    },
    enumerable: true,
    configurable: true
  });

  FoldingRegions.prototype.getStartLineNumber = function (index) {
    return this._startIndexes[index] & MAX_LINE_NUMBER;
  };

  FoldingRegions.prototype.getEndLineNumber = function (index) {
    return this._endIndexes[index] & MAX_LINE_NUMBER;
  };

  FoldingRegions.prototype.getType = function (index) {
    return this._types ? this._types[index] : undefined;
  };

  FoldingRegions.prototype.hasTypes = function () {
    return !!this._types;
  };

  FoldingRegions.prototype.isCollapsed = function (index) {
    var arrayIndex = index / 32 | 0;
    var bit = index % 32;
    return (this._collapseStates[arrayIndex] & 1 << bit) !== 0;
  };

  FoldingRegions.prototype.setCollapsed = function (index, newState) {
    var arrayIndex = index / 32 | 0;
    var bit = index % 32;
    var value = this._collapseStates[arrayIndex];

    if (newState) {
      this._collapseStates[arrayIndex] = value | 1 << bit;
    } else {
      this._collapseStates[arrayIndex] = value & ~(1 << bit);
    }
  };

  FoldingRegions.prototype.toRegion = function (index) {
    return new FoldingRegion(this, index);
  };

  FoldingRegions.prototype.getParentIndex = function (index) {
    this.ensureParentIndices();
    var parent = ((this._startIndexes[index] & MASK_INDENT) >>> 24) + ((this._endIndexes[index] & MASK_INDENT) >>> 16);

    if (parent === MAX_FOLDING_REGIONS) {
      return -1;
    }

    return parent;
  };

  FoldingRegions.prototype.contains = function (index, line) {
    return this.getStartLineNumber(index) <= line && this.getEndLineNumber(index) >= line;
  };

  FoldingRegions.prototype.findIndex = function (line) {
    var low = 0,
        high = this._startIndexes.length;

    if (high === 0) {
      return -1; // no children
    }

    while (low < high) {
      var mid = Math.floor((low + high) / 2);

      if (line < this.getStartLineNumber(mid)) {
        high = mid;
      } else {
        low = mid + 1;
      }
    }

    return low - 1;
  };

  FoldingRegions.prototype.findRange = function (line) {
    var index = this.findIndex(line);

    if (index >= 0) {
      var endLineNumber = this.getEndLineNumber(index);

      if (endLineNumber >= line) {
        return index;
      }

      index = this.getParentIndex(index);

      while (index !== -1) {
        if (this.contains(index, line)) {
          return index;
        }

        index = this.getParentIndex(index);
      }
    }

    return -1;
  };

  FoldingRegions.prototype.toString = function () {
    var res = [];

    for (var i = 0; i < this.length; i++) {
      res[i] = "[" + (this.isCollapsed(i) ? '+' : '-') + "] " + this.getStartLineNumber(i) + "/" + this.getEndLineNumber(i);
    }

    return res.join(', ');
  };

  return FoldingRegions;
}();

exports.FoldingRegions = FoldingRegions;

var FoldingRegion =
/** @class */
function () {
  function FoldingRegion(ranges, index) {
    this.ranges = ranges;
    this.index = index;
  }

  Object.defineProperty(FoldingRegion.prototype, "startLineNumber", {
    get: function () {
      return this.ranges.getStartLineNumber(this.index);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FoldingRegion.prototype, "endLineNumber", {
    get: function () {
      return this.ranges.getEndLineNumber(this.index);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FoldingRegion.prototype, "regionIndex", {
    get: function () {
      return this.index;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FoldingRegion.prototype, "parentIndex", {
    get: function () {
      return this.ranges.getParentIndex(this.index);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FoldingRegion.prototype, "isCollapsed", {
    get: function () {
      return this.ranges.isCollapsed(this.index);
    },
    enumerable: true,
    configurable: true
  });

  FoldingRegion.prototype.containedBy = function (range) {
    return range.startLineNumber <= this.startLineNumber && range.endLineNumber >= this.endLineNumber;
  };

  FoldingRegion.prototype.containsLine = function (lineNumber) {
    return this.startLineNumber <= lineNumber && lineNumber <= this.endLineNumber;
  };

  return FoldingRegion;
}();

exports.FoldingRegion = FoldingRegion;
},{}],"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/foldingModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toggleCollapseState = toggleCollapseState;
exports.setCollapseStateLevelsDown = setCollapseStateLevelsDown;
exports.setCollapseStateLevelsUp = setCollapseStateLevelsUp;
exports.setCollapseStateAtLevel = setCollapseStateAtLevel;
exports.setCollapseStateForMatchingLines = setCollapseStateForMatchingLines;
exports.setCollapseStateForType = setCollapseStateForType;
exports.FoldingModel = void 0;

var _event = require("../../../base/common/event.js");

var _foldingRanges = require("./foldingRanges.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var FoldingModel =
/** @class */
function () {
  function FoldingModel(textModel, decorationProvider) {
    this._updateEventEmitter = new _event.Emitter();
    this.onDidChange = this._updateEventEmitter.event;
    this._textModel = textModel;
    this._decorationProvider = decorationProvider;
    this._regions = new _foldingRanges.FoldingRegions(new Uint32Array(0), new Uint32Array(0));
    this._editorDecorationIds = [];
    this._isInitialized = false;
  }

  Object.defineProperty(FoldingModel.prototype, "regions", {
    get: function () {
      return this._regions;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FoldingModel.prototype, "textModel", {
    get: function () {
      return this._textModel;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FoldingModel.prototype, "isInitialized", {
    get: function () {
      return this._isInitialized;
    },
    enumerable: true,
    configurable: true
  });

  FoldingModel.prototype.toggleCollapseState = function (regions) {
    var _this = this;

    if (!regions.length) {
      return;
    }

    var processed = {};

    this._decorationProvider.changeDecorations(function (accessor) {
      for (var _i = 0, regions_1 = regions; _i < regions_1.length; _i++) {
        var region = regions_1[_i];
        var index = region.regionIndex;
        var editorDecorationId = _this._editorDecorationIds[index];

        if (editorDecorationId && !processed[editorDecorationId]) {
          processed[editorDecorationId] = true;
          var newCollapseState = !_this._regions.isCollapsed(index);

          _this._regions.setCollapsed(index, newCollapseState);

          accessor.changeDecorationOptions(editorDecorationId, _this._decorationProvider.getDecorationOption(newCollapseState));
        }
      }
    });

    this._updateEventEmitter.fire({
      model: this,
      collapseStateChanged: regions
    });
  };

  FoldingModel.prototype.update = function (newRegions, blockedLineNumers) {
    var _this = this;

    if (blockedLineNumers === void 0) {
      blockedLineNumers = [];
    }

    var newEditorDecorations = [];

    var isBlocked = function (startLineNumber, endLineNumber) {
      for (var _i = 0, blockedLineNumers_1 = blockedLineNumers; _i < blockedLineNumers_1.length; _i++) {
        var blockedLineNumber = blockedLineNumers_1[_i];

        if (startLineNumber < blockedLineNumber && blockedLineNumber <= endLineNumber) {
          // first line is visible
          return true;
        }
      }

      return false;
    };

    var initRange = function (index, isCollapsed) {
      var startLineNumber = newRegions.getStartLineNumber(index);

      if (isCollapsed && isBlocked(startLineNumber, newRegions.getEndLineNumber(index))) {
        isCollapsed = false;
      }

      newRegions.setCollapsed(index, isCollapsed);

      var maxColumn = _this._textModel.getLineMaxColumn(startLineNumber);

      var decorationRange = {
        startLineNumber: startLineNumber,
        startColumn: maxColumn,
        endLineNumber: startLineNumber,
        endColumn: maxColumn
      };
      newEditorDecorations.push({
        range: decorationRange,
        options: _this._decorationProvider.getDecorationOption(isCollapsed)
      });
    };

    var i = 0;

    var nextCollapsed = function () {
      while (i < _this._regions.length) {
        var isCollapsed = _this._regions.isCollapsed(i);

        i++;

        if (isCollapsed) {
          return i - 1;
        }
      }

      return -1;
    };

    var k = 0;
    var collapsedIndex = nextCollapsed();

    while (collapsedIndex !== -1 && k < newRegions.length) {
      // get the latest range
      var decRange = this._textModel.getDecorationRange(this._editorDecorationIds[collapsedIndex]);

      if (decRange) {
        var collapsedStartLineNumber = decRange.startLineNumber;

        if (this._textModel.getLineMaxColumn(collapsedStartLineNumber) === decRange.startColumn) {
          // test that the decoration is still at the end otherwise it got deleted
          while (k < newRegions.length) {
            var startLineNumber = newRegions.getStartLineNumber(k);

            if (collapsedStartLineNumber >= startLineNumber) {
              initRange(k, collapsedStartLineNumber === startLineNumber);
              k++;
            } else {
              break;
            }
          }
        }
      }

      collapsedIndex = nextCollapsed();
    }

    while (k < newRegions.length) {
      initRange(k, false);
      k++;
    }

    this._editorDecorationIds = this._decorationProvider.deltaDecorations(this._editorDecorationIds, newEditorDecorations);
    this._regions = newRegions;
    this._isInitialized = true;

    this._updateEventEmitter.fire({
      model: this
    });
  };
  /**
   * Collapse state memento, for persistence only
   */


  FoldingModel.prototype.getMemento = function () {
    var collapsedRanges = [];

    for (var i = 0; i < this._regions.length; i++) {
      if (this._regions.isCollapsed(i)) {
        var range = this._textModel.getDecorationRange(this._editorDecorationIds[i]);

        if (range) {
          var startLineNumber = range.startLineNumber;

          var endLineNumber = range.endLineNumber + this._regions.getEndLineNumber(i) - this._regions.getStartLineNumber(i);

          collapsedRanges.push({
            startLineNumber: startLineNumber,
            endLineNumber: endLineNumber
          });
        }
      }
    }

    if (collapsedRanges.length > 0) {
      return collapsedRanges;
    }

    return undefined;
  };
  /**
   * Apply persisted state, for persistence only
   */


  FoldingModel.prototype.applyMemento = function (state) {
    if (!Array.isArray(state)) {
      return;
    }

    var toToogle = [];

    for (var _i = 0, state_1 = state; _i < state_1.length; _i++) {
      var range = state_1[_i];
      var region = this.getRegionAtLine(range.startLineNumber);

      if (region && !region.isCollapsed) {
        toToogle.push(region);
      }
    }

    this.toggleCollapseState(toToogle);
  };

  FoldingModel.prototype.dispose = function () {
    this._decorationProvider.deltaDecorations(this._editorDecorationIds, []);
  };

  FoldingModel.prototype.getAllRegionsAtLine = function (lineNumber, filter) {
    var result = [];

    if (this._regions) {
      var index = this._regions.findRange(lineNumber);

      var level = 1;

      while (index >= 0) {
        var current = this._regions.toRegion(index);

        if (!filter || filter(current, level)) {
          result.push(current);
        }

        level++;
        index = current.parentIndex;
      }
    }

    return result;
  };

  FoldingModel.prototype.getRegionAtLine = function (lineNumber) {
    if (this._regions) {
      var index = this._regions.findRange(lineNumber);

      if (index >= 0) {
        return this._regions.toRegion(index);
      }
    }

    return null;
  };

  FoldingModel.prototype.getRegionsInside = function (region, filter) {
    var result = [];
    var index = region ? region.regionIndex + 1 : 0;
    var endLineNumber = region ? region.endLineNumber : Number.MAX_VALUE;

    if (filter && filter.length === 2) {
      var levelStack = [];

      for (var i = index, len = this._regions.length; i < len; i++) {
        var current = this._regions.toRegion(i);

        if (this._regions.getStartLineNumber(i) < endLineNumber) {
          while (levelStack.length > 0 && !current.containedBy(levelStack[levelStack.length - 1])) {
            levelStack.pop();
          }

          levelStack.push(current);

          if (filter(current, levelStack.length)) {
            result.push(current);
          }
        } else {
          break;
        }
      }
    } else {
      for (var i = index, len = this._regions.length; i < len; i++) {
        var current = this._regions.toRegion(i);

        if (this._regions.getStartLineNumber(i) < endLineNumber) {
          if (!filter || filter(current)) {
            result.push(current);
          }
        } else {
          break;
        }
      }
    }

    return result;
  };

  return FoldingModel;
}();

exports.FoldingModel = FoldingModel;

/**
 * Collapse or expand the regions at the given locations
 * @param levels The number of levels. Use 1 to only impact the regions at the location, use Number.MAX_VALUE for all levels.
 * @param lineNumbers the location of the regions to collapse or expand, or if not set, all regions in the model.
 */
function toggleCollapseState(foldingModel, levels, lineNumbers) {
  var toToggle = [];

  var _loop_1 = function (lineNumber) {
    var region = foldingModel.getRegionAtLine(lineNumber);

    if (region) {
      var doCollapse_1 = !region.isCollapsed;
      toToggle.push(region);

      if (levels > 1) {
        var regionsInside = foldingModel.getRegionsInside(region, function (r, level) {
          return r.isCollapsed !== doCollapse_1 && level < levels;
        });
        toToggle.push.apply(toToggle, regionsInside);
      }
    }
  };

  for (var _i = 0, lineNumbers_1 = lineNumbers; _i < lineNumbers_1.length; _i++) {
    var lineNumber = lineNumbers_1[_i];

    _loop_1(lineNumber);
  }

  foldingModel.toggleCollapseState(toToggle);
}
/**
 * Collapse or expand the regions at the given locations including all children.
 * @param doCollapse Wheter to collase or expand
 * @param levels The number of levels. Use 1 to only impact the regions at the location, use Number.MAX_VALUE for all levels.
 * @param lineNumbers the location of the regions to collapse or expand, or if not set, all regions in the model.
 */


function setCollapseStateLevelsDown(foldingModel, doCollapse, levels, lineNumbers) {
  if (levels === void 0) {
    levels = Number.MAX_VALUE;
  }

  var toToggle = [];

  if (lineNumbers && lineNumbers.length > 0) {
    for (var _i = 0, lineNumbers_2 = lineNumbers; _i < lineNumbers_2.length; _i++) {
      var lineNumber = lineNumbers_2[_i];
      var region = foldingModel.getRegionAtLine(lineNumber);

      if (region) {
        if (region.isCollapsed !== doCollapse) {
          toToggle.push(region);
        }

        if (levels > 1) {
          var regionsInside = foldingModel.getRegionsInside(region, function (r, level) {
            return r.isCollapsed !== doCollapse && level < levels;
          });
          toToggle.push.apply(toToggle, regionsInside);
        }
      }
    }
  } else {
    var regionsInside = foldingModel.getRegionsInside(null, function (r, level) {
      return r.isCollapsed !== doCollapse && level < levels;
    });
    toToggle.push.apply(toToggle, regionsInside);
  }

  foldingModel.toggleCollapseState(toToggle);
}
/**
 * Collapse or expand the regions at the given locations including all parents.
 * @param doCollapse Wheter to collase or expand
 * @param levels The number of levels. Use 1 to only impact the regions at the location, use Number.MAX_VALUE for all levels.
 * @param lineNumbers the location of the regions to collapse or expand, or if not set, all regions in the model.
 */


function setCollapseStateLevelsUp(foldingModel, doCollapse, levels, lineNumbers) {
  var toToggle = [];

  for (var _i = 0, lineNumbers_3 = lineNumbers; _i < lineNumbers_3.length; _i++) {
    var lineNumber = lineNumbers_3[_i];
    var regions = foldingModel.getAllRegionsAtLine(lineNumber, function (region, level) {
      return region.isCollapsed !== doCollapse && level <= levels;
    });
    toToggle.push.apply(toToggle, regions);
  }

  foldingModel.toggleCollapseState(toToggle);
}
/**
 * Folds or unfolds all regions that have a given level, except if they contain one of the blocked lines.
 * @param foldLevel level. Level == 1 is the top level
 * @param doCollapse Wheter to collase or expand
*/


function setCollapseStateAtLevel(foldingModel, foldLevel, doCollapse, blockedLineNumbers) {
  var filter = function (region, level) {
    return level === foldLevel && region.isCollapsed !== doCollapse && !blockedLineNumbers.some(function (line) {
      return region.containsLine(line);
    });
  };

  var toToggle = foldingModel.getRegionsInside(null, filter);
  foldingModel.toggleCollapseState(toToggle);
}
/**
 * Folds all regions for which the lines start with a given regex
 * @param foldingModel the folding model
 */


function setCollapseStateForMatchingLines(foldingModel, regExp, doCollapse) {
  var editorModel = foldingModel.textModel;
  var regions = foldingModel.regions;
  var toToggle = [];

  for (var i = regions.length - 1; i >= 0; i--) {
    if (doCollapse !== regions.isCollapsed(i)) {
      var startLineNumber = regions.getStartLineNumber(i);

      if (regExp.test(editorModel.getLineContent(startLineNumber))) {
        toToggle.push(regions.toRegion(i));
      }
    }
  }

  foldingModel.toggleCollapseState(toToggle);
}
/**
 * Folds all regions of the given type
 * @param foldingModel the folding model
 */


function setCollapseStateForType(foldingModel, type, doCollapse) {
  var regions = foldingModel.regions;
  var toToggle = [];

  for (var i = regions.length - 1; i >= 0; i--) {
    if (doCollapse !== regions.isCollapsed(i) && type === regions.getType(i)) {
      toToggle.push(regions.toRegion(i));
    }
  }

  foldingModel.toggleCollapseState(toToggle);
}
},{"../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","./foldingRanges.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/foldingRanges.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/foldingDecorations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FoldingDecorationProvider = void 0;

var _textModel = require("../../common/model/textModel.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var FoldingDecorationProvider =
/** @class */
function () {
  function FoldingDecorationProvider(editor) {
    this.editor = editor;
    this.autoHideFoldingControls = true;
  }

  FoldingDecorationProvider.prototype.getDecorationOption = function (isCollapsed) {
    if (isCollapsed) {
      return FoldingDecorationProvider.COLLAPSED_VISUAL_DECORATION;
    } else if (this.autoHideFoldingControls) {
      return FoldingDecorationProvider.EXPANDED_AUTO_HIDE_VISUAL_DECORATION;
    } else {
      return FoldingDecorationProvider.EXPANDED_VISUAL_DECORATION;
    }
  };

  FoldingDecorationProvider.prototype.deltaDecorations = function (oldDecorations, newDecorations) {
    return this.editor.deltaDecorations(oldDecorations, newDecorations);
  };

  FoldingDecorationProvider.prototype.changeDecorations = function (callback) {
    return this.editor.changeDecorations(callback);
  };

  FoldingDecorationProvider.COLLAPSED_VISUAL_DECORATION = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    afterContentClassName: 'inline-folded',
    linesDecorationsClassName: 'codicon codicon-chevron-right'
  });
  FoldingDecorationProvider.EXPANDED_AUTO_HIDE_VISUAL_DECORATION = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    linesDecorationsClassName: 'codicon codicon-chevron-down'
  });
  FoldingDecorationProvider.EXPANDED_VISUAL_DECORATION = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    linesDecorationsClassName: 'codicon codicon-chevron-down alwaysShowFoldIcons'
  });
  return FoldingDecorationProvider;
}();

exports.FoldingDecorationProvider = FoldingDecorationProvider;
},{"../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/hiddenRangeModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HiddenRangeModel = void 0;

var _event = require("../../../base/common/event.js");

var _range = require("../../common/core/range.js");

var _arrays = require("../../../base/common/arrays.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var HiddenRangeModel =
/** @class */
function () {
  function HiddenRangeModel(model) {
    var _this = this;

    this._updateEventEmitter = new _event.Emitter();
    this._foldingModel = model;
    this._foldingModelListener = model.onDidChange(function (_) {
      return _this.updateHiddenRanges();
    });
    this._hiddenRanges = [];

    if (model.regions.length) {
      this.updateHiddenRanges();
    }
  }

  Object.defineProperty(HiddenRangeModel.prototype, "onDidChange", {
    get: function () {
      return this._updateEventEmitter.event;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HiddenRangeModel.prototype, "hiddenRanges", {
    get: function () {
      return this._hiddenRanges;
    },
    enumerable: true,
    configurable: true
  });

  HiddenRangeModel.prototype.updateHiddenRanges = function () {
    var updateHiddenAreas = false;
    var newHiddenAreas = [];
    var i = 0; // index into hidden

    var k = 0;
    var lastCollapsedStart = Number.MAX_VALUE;
    var lastCollapsedEnd = -1;
    var ranges = this._foldingModel.regions;

    for (; i < ranges.length; i++) {
      if (!ranges.isCollapsed(i)) {
        continue;
      }

      var startLineNumber = ranges.getStartLineNumber(i) + 1; // the first line is not hidden

      var endLineNumber = ranges.getEndLineNumber(i);

      if (lastCollapsedStart <= startLineNumber && endLineNumber <= lastCollapsedEnd) {
        // ignore ranges contained in collapsed regions
        continue;
      }

      if (!updateHiddenAreas && k < this._hiddenRanges.length && this._hiddenRanges[k].startLineNumber === startLineNumber && this._hiddenRanges[k].endLineNumber === endLineNumber) {
        // reuse the old ranges
        newHiddenAreas.push(this._hiddenRanges[k]);
        k++;
      } else {
        updateHiddenAreas = true;
        newHiddenAreas.push(new _range.Range(startLineNumber, 1, endLineNumber, 1));
      }

      lastCollapsedStart = startLineNumber;
      lastCollapsedEnd = endLineNumber;
    }

    if (updateHiddenAreas || k < this._hiddenRanges.length) {
      this.applyHiddenRanges(newHiddenAreas);
    }
  };

  HiddenRangeModel.prototype.applyMemento = function (state) {
    if (!Array.isArray(state) || state.length === 0) {
      return false;
    }

    var hiddenRanges = [];

    for (var _i = 0, state_1 = state; _i < state_1.length; _i++) {
      var r = state_1[_i];

      if (!r.startLineNumber || !r.endLineNumber) {
        return false;
      }

      hiddenRanges.push(new _range.Range(r.startLineNumber + 1, 1, r.endLineNumber, 1));
    }

    this.applyHiddenRanges(hiddenRanges);
    return true;
  };
  /**
   * Collapse state memento, for persistence only, only used if folding model is not yet initialized
   */


  HiddenRangeModel.prototype.getMemento = function () {
    return this._hiddenRanges.map(function (r) {
      return {
        startLineNumber: r.startLineNumber - 1,
        endLineNumber: r.endLineNumber
      };
    });
  };

  HiddenRangeModel.prototype.applyHiddenRanges = function (newHiddenAreas) {
    this._hiddenRanges = newHiddenAreas;

    this._updateEventEmitter.fire(newHiddenAreas);
  };

  HiddenRangeModel.prototype.hasRanges = function () {
    return this._hiddenRanges.length > 0;
  };

  HiddenRangeModel.prototype.isHidden = function (line) {
    return findRange(this._hiddenRanges, line) !== null;
  };

  HiddenRangeModel.prototype.adjustSelections = function (selections) {
    var _this = this;

    var hasChanges = false;
    var editorModel = this._foldingModel.textModel;
    var lastRange = null;

    var adjustLine = function (line) {
      if (!lastRange || !isInside(line, lastRange)) {
        lastRange = findRange(_this._hiddenRanges, line);
      }

      if (lastRange) {
        return lastRange.startLineNumber - 1;
      }

      return null;
    };

    for (var i = 0, len = selections.length; i < len; i++) {
      var selection = selections[i];
      var adjustedStartLine = adjustLine(selection.startLineNumber);

      if (adjustedStartLine) {
        selection = selection.setStartPosition(adjustedStartLine, editorModel.getLineMaxColumn(adjustedStartLine));
        hasChanges = true;
      }

      var adjustedEndLine = adjustLine(selection.endLineNumber);

      if (adjustedEndLine) {
        selection = selection.setEndPosition(adjustedEndLine, editorModel.getLineMaxColumn(adjustedEndLine));
        hasChanges = true;
      }

      selections[i] = selection;
    }

    return hasChanges;
  };

  HiddenRangeModel.prototype.dispose = function () {
    if (this.hiddenRanges.length > 0) {
      this._hiddenRanges = [];

      this._updateEventEmitter.fire(this._hiddenRanges);
    }

    if (this._foldingModelListener) {
      this._foldingModelListener.dispose();

      this._foldingModelListener = null;
    }
  };

  return HiddenRangeModel;
}();

exports.HiddenRangeModel = HiddenRangeModel;

function isInside(line, range) {
  return line >= range.startLineNumber && line <= range.endLineNumber;
}

function findRange(ranges, line) {
  var i = (0, _arrays.findFirstInSorted)(ranges, function (r) {
    return line < r.startLineNumber;
  }) - 1;

  if (i >= 0 && ranges[i].endLineNumber >= line) {
    return ranges[i];
  }

  return null;
}
},{"../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/indentRangeProvider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeRanges = computeRanges;
exports.RangesCollector = exports.IndentRangeProvider = exports.ID_INDENT_PROVIDER = void 0;

var _foldingRanges = require("./foldingRanges.js");

var _textModel = require("../../common/model/textModel.js");

var _languageConfigurationRegistry = require("../../common/modes/languageConfigurationRegistry.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT = 5000;
var ID_INDENT_PROVIDER = 'indent';
exports.ID_INDENT_PROVIDER = ID_INDENT_PROVIDER;

var IndentRangeProvider =
/** @class */
function () {
  function IndentRangeProvider(editorModel) {
    this.editorModel = editorModel;
    this.id = ID_INDENT_PROVIDER;
  }

  IndentRangeProvider.prototype.dispose = function () {};

  IndentRangeProvider.prototype.compute = function (cancelationToken) {
    var foldingRules = _languageConfigurationRegistry.LanguageConfigurationRegistry.getFoldingRules(this.editorModel.getLanguageIdentifier().id);

    var offSide = foldingRules && !!foldingRules.offSide;
    var markers = foldingRules && foldingRules.markers;
    return Promise.resolve(computeRanges(this.editorModel, offSide, markers));
  };

  return IndentRangeProvider;
}();

exports.IndentRangeProvider = IndentRangeProvider;

// public only for testing
var RangesCollector =
/** @class */
function () {
  function RangesCollector(foldingRangesLimit) {
    this._startIndexes = [];
    this._endIndexes = [];
    this._indentOccurrences = [];
    this._length = 0;
    this._foldingRangesLimit = foldingRangesLimit;
  }

  RangesCollector.prototype.insertFirst = function (startLineNumber, endLineNumber, indent) {
    if (startLineNumber > _foldingRanges.MAX_LINE_NUMBER || endLineNumber > _foldingRanges.MAX_LINE_NUMBER) {
      return;
    }

    var index = this._length;
    this._startIndexes[index] = startLineNumber;
    this._endIndexes[index] = endLineNumber;
    this._length++;

    if (indent < 1000) {
      this._indentOccurrences[indent] = (this._indentOccurrences[indent] || 0) + 1;
    }
  };

  RangesCollector.prototype.toIndentRanges = function (model) {
    if (this._length <= this._foldingRangesLimit) {
      // reverse and create arrays of the exact length
      var startIndexes = new Uint32Array(this._length);
      var endIndexes = new Uint32Array(this._length);

      for (var i = this._length - 1, k = 0; i >= 0; i--, k++) {
        startIndexes[k] = this._startIndexes[i];
        endIndexes[k] = this._endIndexes[i];
      }

      return new _foldingRanges.FoldingRegions(startIndexes, endIndexes);
    } else {
      var entries = 0;
      var maxIndent = this._indentOccurrences.length;

      for (var i = 0; i < this._indentOccurrences.length; i++) {
        var n = this._indentOccurrences[i];

        if (n) {
          if (n + entries > this._foldingRangesLimit) {
            maxIndent = i;
            break;
          }

          entries += n;
        }
      }

      var tabSize = model.getOptions().tabSize; // reverse and create arrays of the exact length

      var startIndexes = new Uint32Array(this._foldingRangesLimit);
      var endIndexes = new Uint32Array(this._foldingRangesLimit);

      for (var i = this._length - 1, k = 0; i >= 0; i--) {
        var startIndex = this._startIndexes[i];
        var lineContent = model.getLineContent(startIndex);

        var indent = _textModel.TextModel.computeIndentLevel(lineContent, tabSize);

        if (indent < maxIndent || indent === maxIndent && entries++ < this._foldingRangesLimit) {
          startIndexes[k] = startIndex;
          endIndexes[k] = this._endIndexes[i];
          k++;
        }
      }

      return new _foldingRanges.FoldingRegions(startIndexes, endIndexes);
    }
  };

  return RangesCollector;
}();

exports.RangesCollector = RangesCollector;

function computeRanges(model, offSide, markers, foldingRangesLimit) {
  if (foldingRangesLimit === void 0) {
    foldingRangesLimit = MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT;
  }

  var tabSize = model.getOptions().tabSize;
  var result = new RangesCollector(foldingRangesLimit);
  var pattern = undefined;

  if (markers) {
    pattern = new RegExp("(" + markers.start.source + ")|(?:" + markers.end.source + ")");
  }

  var previousRegions = [];
  var line = model.getLineCount() + 1;
  previousRegions.push({
    indent: -1,
    endAbove: line,
    line: line
  }); // sentinel, to make sure there's at least one entry

  for (var line_1 = model.getLineCount(); line_1 > 0; line_1--) {
    var lineContent = model.getLineContent(line_1);

    var indent = _textModel.TextModel.computeIndentLevel(lineContent, tabSize);

    var previous = previousRegions[previousRegions.length - 1];

    if (indent === -1) {
      if (offSide) {
        // for offSide languages, empty lines are associated to the previous block
        // note: the next block is already written to the results, so this only
        // impacts the end position of the block before
        previous.endAbove = line_1;
      }

      continue; // only whitespace
    }

    var m = void 0;

    if (pattern && (m = lineContent.match(pattern))) {
      // folding pattern match
      if (m[1]) {
        // start pattern match
        // discard all regions until the folding pattern
        var i = previousRegions.length - 1;

        while (i > 0 && previousRegions[i].indent !== -2) {
          i--;
        }

        if (i > 0) {
          previousRegions.length = i + 1;
          previous = previousRegions[i]; // new folding range from pattern, includes the end line

          result.insertFirst(line_1, previous.line, indent);
          previous.line = line_1;
          previous.indent = indent;
          previous.endAbove = line_1;
          continue;
        } else {// no end marker found, treat line as a regular line
        }
      } else {
        // end pattern match
        previousRegions.push({
          indent: -2,
          endAbove: line_1,
          line: line_1
        });
        continue;
      }
    }

    if (previous.indent > indent) {
      // discard all regions with larger indent
      do {
        previousRegions.pop();
        previous = previousRegions[previousRegions.length - 1];
      } while (previous.indent > indent); // new folding range


      var endLineNumber = previous.endAbove - 1;

      if (endLineNumber - line_1 >= 1) {
        // needs at east size 1
        result.insertFirst(line_1, endLineNumber, indent);
      }
    }

    if (previous.indent === indent) {
      previous.endAbove = line_1;
    } else {
      // previous.indent < indent
      // new region with a bigger indent
      previousRegions.push({
        indent: indent,
        endAbove: line_1,
        line: line_1
      });
    }
  }

  return result.toIndentRanges(model);
}
},{"./foldingRanges.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/foldingRanges.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../common/modes/languageConfigurationRegistry.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes/languageConfigurationRegistry.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/syntaxRangeProvider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeRanges = sanitizeRanges;
exports.RangesCollector = exports.SyntaxRangeProvider = exports.ID_SYNTAX_PROVIDER = void 0;

var _errors = require("../../../base/common/errors.js");

var _foldingRanges = require("./foldingRanges.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var MAX_FOLDING_REGIONS = 5000;
var foldingContext = {};
var ID_SYNTAX_PROVIDER = 'syntax';
exports.ID_SYNTAX_PROVIDER = ID_SYNTAX_PROVIDER;

var SyntaxRangeProvider =
/** @class */
function () {
  function SyntaxRangeProvider(editorModel, providers, limit) {
    if (limit === void 0) {
      limit = MAX_FOLDING_REGIONS;
    }

    this.editorModel = editorModel;
    this.providers = providers;
    this.limit = limit;
    this.id = ID_SYNTAX_PROVIDER;
  }

  SyntaxRangeProvider.prototype.compute = function (cancellationToken) {
    var _this = this;

    return collectSyntaxRanges(this.providers, this.editorModel, cancellationToken).then(function (ranges) {
      if (ranges) {
        var res = sanitizeRanges(ranges, _this.limit);
        return res;
      }

      return null;
    });
  };

  SyntaxRangeProvider.prototype.dispose = function () {};

  return SyntaxRangeProvider;
}();

exports.SyntaxRangeProvider = SyntaxRangeProvider;

function collectSyntaxRanges(providers, model, cancellationToken) {
  var rangeData = null;
  var promises = providers.map(function (provider, i) {
    return Promise.resolve(provider.provideFoldingRanges(model, foldingContext, cancellationToken)).then(function (ranges) {
      if (cancellationToken.isCancellationRequested) {
        return;
      }

      if (Array.isArray(ranges)) {
        if (!Array.isArray(rangeData)) {
          rangeData = [];
        }

        var nLines = model.getLineCount();

        for (var _i = 0, ranges_1 = ranges; _i < ranges_1.length; _i++) {
          var r = ranges_1[_i];

          if (r.start > 0 && r.end > r.start && r.end <= nLines) {
            rangeData.push({
              start: r.start,
              end: r.end,
              rank: i,
              kind: r.kind
            });
          }
        }
      }
    }, _errors.onUnexpectedExternalError);
  });
  return Promise.all(promises).then(function (_) {
    return rangeData;
  });
}

var RangesCollector =
/** @class */
function () {
  function RangesCollector(foldingRangesLimit) {
    this._startIndexes = [];
    this._endIndexes = [];
    this._nestingLevels = [];
    this._nestingLevelCounts = [];
    this._types = [];
    this._length = 0;
    this._foldingRangesLimit = foldingRangesLimit;
  }

  RangesCollector.prototype.add = function (startLineNumber, endLineNumber, type, nestingLevel) {
    if (startLineNumber > _foldingRanges.MAX_LINE_NUMBER || endLineNumber > _foldingRanges.MAX_LINE_NUMBER) {
      return;
    }

    var index = this._length;
    this._startIndexes[index] = startLineNumber;
    this._endIndexes[index] = endLineNumber;
    this._nestingLevels[index] = nestingLevel;
    this._types[index] = type;
    this._length++;

    if (nestingLevel < 30) {
      this._nestingLevelCounts[nestingLevel] = (this._nestingLevelCounts[nestingLevel] || 0) + 1;
    }
  };

  RangesCollector.prototype.toIndentRanges = function () {
    if (this._length <= this._foldingRangesLimit) {
      var startIndexes = new Uint32Array(this._length);
      var endIndexes = new Uint32Array(this._length);

      for (var i = 0; i < this._length; i++) {
        startIndexes[i] = this._startIndexes[i];
        endIndexes[i] = this._endIndexes[i];
      }

      return new _foldingRanges.FoldingRegions(startIndexes, endIndexes, this._types);
    } else {
      var entries = 0;
      var maxLevel = this._nestingLevelCounts.length;

      for (var i = 0; i < this._nestingLevelCounts.length; i++) {
        var n = this._nestingLevelCounts[i];

        if (n) {
          if (n + entries > this._foldingRangesLimit) {
            maxLevel = i;
            break;
          }

          entries += n;
        }
      }

      var startIndexes = new Uint32Array(this._foldingRangesLimit);
      var endIndexes = new Uint32Array(this._foldingRangesLimit);
      var types = [];

      for (var i = 0, k = 0; i < this._length; i++) {
        var level = this._nestingLevels[i];

        if (level < maxLevel || level === maxLevel && entries++ < this._foldingRangesLimit) {
          startIndexes[k] = this._startIndexes[i];
          endIndexes[k] = this._endIndexes[i];
          types[k] = this._types[i];
          k++;
        }
      }

      return new _foldingRanges.FoldingRegions(startIndexes, endIndexes, types);
    }
  };

  return RangesCollector;
}();

exports.RangesCollector = RangesCollector;

function sanitizeRanges(rangeData, limit) {
  var sorted = rangeData.sort(function (d1, d2) {
    var diff = d1.start - d2.start;

    if (diff === 0) {
      diff = d1.rank - d2.rank;
    }

    return diff;
  });
  var collector = new RangesCollector(limit);
  var top = undefined;
  var previous = [];

  for (var _i = 0, sorted_1 = sorted; _i < sorted_1.length; _i++) {
    var entry = sorted_1[_i];

    if (!top) {
      top = entry;
      collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);
    } else {
      if (entry.start > top.start) {
        if (entry.end <= top.end) {
          previous.push(top);
          top = entry;
          collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);
        } else {
          if (entry.start > top.end) {
            do {
              top = previous.pop();
            } while (top && entry.start > top.end);

            if (top) {
              previous.push(top);
            }

            top = entry;
          }

          collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);
        }
      }
    }
  }

  return collector.toIndentRanges();
}
},{"../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","./foldingRanges.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/foldingRanges.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/intializingRangeProvider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InitializingRangeProvider = exports.ID_INIT_PROVIDER = void 0;

var _syntaxRangeProvider = require("./syntaxRangeProvider.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var ID_INIT_PROVIDER = 'init';
exports.ID_INIT_PROVIDER = ID_INIT_PROVIDER;

var InitializingRangeProvider =
/** @class */
function () {
  function InitializingRangeProvider(editorModel, initialRanges, onTimeout, timeoutTime) {
    this.editorModel = editorModel;
    this.id = ID_INIT_PROVIDER;

    if (initialRanges.length) {
      var toDecorationRange = function (range) {
        return {
          range: {
            startLineNumber: range.startLineNumber,
            startColumn: 0,
            endLineNumber: range.endLineNumber,
            endColumn: editorModel.getLineLength(range.endLineNumber)
          },
          options: {
            stickiness: 1
            /* NeverGrowsWhenTypingAtEdges */

          }
        };
      };

      this.decorationIds = editorModel.deltaDecorations([], initialRanges.map(toDecorationRange));
      this.timeout = setTimeout(onTimeout, timeoutTime);
    }
  }

  InitializingRangeProvider.prototype.dispose = function () {
    if (this.decorationIds) {
      this.editorModel.deltaDecorations(this.decorationIds, []);
      this.decorationIds = undefined;
    }

    if (typeof this.timeout === 'number') {
      clearTimeout(this.timeout);
      this.timeout = undefined;
    }
  };

  InitializingRangeProvider.prototype.compute = function (cancelationToken) {
    var foldingRangeData = [];

    if (this.decorationIds) {
      for (var _i = 0, _a = this.decorationIds; _i < _a.length; _i++) {
        var id = _a[_i];
        var range = this.editorModel.getDecorationRange(id);

        if (range) {
          foldingRangeData.push({
            start: range.startLineNumber,
            end: range.endLineNumber,
            rank: 1
          });
        }
      }
    }

    return Promise.resolve((0, _syntaxRangeProvider.sanitizeRanges)(foldingRangeData, Number.MAX_VALUE));
  };

  return InitializingRangeProvider;
}();

exports.InitializingRangeProvider = InitializingRangeProvider;
},{"./syntaxRangeProvider.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/syntaxRangeProvider.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/folding.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FoldingController = void 0;

require("./folding.css");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var types = _interopRequireWildcard(require("../../../base/common/types.js"));

var _strings = require("../../../base/common/strings.js");

var _async = require("../../../base/common/async.js");

var _keyCodes = require("../../../base/common/keyCodes.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _foldingModel = require("./foldingModel.js");

var _foldingDecorations = require("./foldingDecorations.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _hiddenRangeModel = require("./hiddenRangeModel.js");

var _languageConfigurationRegistry = require("../../common/modes/languageConfigurationRegistry.js");

var _indentRangeProvider = require("./indentRangeProvider.js");

var _modes = require("../../common/modes.js");

var _syntaxRangeProvider = require("./syntaxRangeProvider.js");

var _intializingRangeProvider = require("./intializingRangeProvider.js");

var _errors = require("../../../base/common/errors.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var CONTEXT_FOLDING_ENABLED = new _contextkey.RawContextKey('foldingEnabled', false);

var FoldingController =
/** @class */
function (_super) {
  __extends(FoldingController, _super);

  function FoldingController(editor, contextKeyService) {
    var _this = _super.call(this) || this;

    _this.contextKeyService = contextKeyService;
    _this.localToDispose = _this._register(new _lifecycle.DisposableStore());
    _this.editor = editor;

    var options = _this.editor.getOptions();

    _this._isEnabled = options.get(29
    /* folding */
    );
    _this._autoHideFoldingControls = options.get(80
    /* showFoldingControls */
    ) === 'mouseover';
    _this._useFoldingProviders = options.get(30
    /* foldingStrategy */
    ) !== 'indentation';
    _this.foldingModel = null;
    _this.hiddenRangeModel = null;
    _this.rangeProvider = null;
    _this.foldingRegionPromise = null;
    _this.foldingStateMemento = null;
    _this.foldingModelPromise = null;
    _this.updateScheduler = null;
    _this.cursorChangedScheduler = null;
    _this.mouseDownInfo = null;
    _this.foldingDecorationProvider = new _foldingDecorations.FoldingDecorationProvider(editor);
    _this.foldingDecorationProvider.autoHideFoldingControls = _this._autoHideFoldingControls;
    _this.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(_this.contextKeyService);

    _this.foldingEnabled.set(_this._isEnabled);

    _this._register(_this.editor.onDidChangeModel(function () {
      return _this.onModelChanged();
    }));

    _this._register(_this.editor.onDidChangeConfiguration(function (e) {
      if (e.hasChanged(29
      /* folding */
      ) || e.hasChanged(80
      /* showFoldingControls */
      ) || e.hasChanged(30
      /* foldingStrategy */
      )) {
        var oldIsEnabled = _this._isEnabled;

        var options_1 = _this.editor.getOptions();

        _this._isEnabled = options_1.get(29
        /* folding */
        );

        _this.foldingEnabled.set(_this._isEnabled);

        if (oldIsEnabled !== _this._isEnabled) {
          _this.onModelChanged();
        }

        var oldShowFoldingControls = _this._autoHideFoldingControls;
        _this._autoHideFoldingControls = options_1.get(80
        /* showFoldingControls */
        ) === 'mouseover';

        if (oldShowFoldingControls !== _this._autoHideFoldingControls) {
          _this.foldingDecorationProvider.autoHideFoldingControls = _this._autoHideFoldingControls;

          _this.onModelContentChanged();
        }

        var oldUseFoldingProviders = _this._useFoldingProviders;
        _this._useFoldingProviders = options_1.get(30
        /* foldingStrategy */
        ) !== 'indentation';

        if (oldUseFoldingProviders !== _this._useFoldingProviders) {
          _this.onFoldingStrategyChanged();
        }
      }
    }));

    _this.onModelChanged();

    return _this;
  }

  FoldingController.get = function (editor) {
    return editor.getContribution(FoldingController.ID);
  };
  /**
   * Store view state.
   */


  FoldingController.prototype.saveViewState = function () {
    var model = this.editor.getModel();

    if (!model || !this._isEnabled || model.isTooLargeForTokenization()) {
      return {};
    }

    if (this.foldingModel) {
      // disposed ?
      var collapsedRegions = this.foldingModel.isInitialized ? this.foldingModel.getMemento() : this.hiddenRangeModel.getMemento();
      var provider = this.rangeProvider ? this.rangeProvider.id : undefined;
      return {
        collapsedRegions: collapsedRegions,
        lineCount: model.getLineCount(),
        provider: provider
      };
    }

    return undefined;
  };
  /**
   * Restore view state.
   */


  FoldingController.prototype.restoreViewState = function (state) {
    var model = this.editor.getModel();

    if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {
      return;
    }

    if (!state || !state.collapsedRegions || state.lineCount !== model.getLineCount()) {
      return;
    }

    if (state.provider === _syntaxRangeProvider.ID_SYNTAX_PROVIDER || state.provider === _intializingRangeProvider.ID_INIT_PROVIDER) {
      this.foldingStateMemento = state;
    }

    var collapsedRegions = state.collapsedRegions; // set the hidden ranges right away, before waiting for the folding model.

    if (this.hiddenRangeModel.applyMemento(collapsedRegions)) {
      var foldingModel = this.getFoldingModel();

      if (foldingModel) {
        foldingModel.then(function (foldingModel) {
          if (foldingModel) {
            foldingModel.applyMemento(collapsedRegions);
          }
        }).then(undefined, _errors.onUnexpectedError);
      }
    }
  };

  FoldingController.prototype.onModelChanged = function () {
    var _this = this;

    this.localToDispose.clear();
    var model = this.editor.getModel();

    if (!this._isEnabled || !model || model.isTooLargeForTokenization()) {
      // huge files get no view model, so they cannot support hidden areas
      return;
    }

    this.foldingModel = new _foldingModel.FoldingModel(model, this.foldingDecorationProvider);
    this.localToDispose.add(this.foldingModel);
    this.hiddenRangeModel = new _hiddenRangeModel.HiddenRangeModel(this.foldingModel);
    this.localToDispose.add(this.hiddenRangeModel);
    this.localToDispose.add(this.hiddenRangeModel.onDidChange(function (hr) {
      return _this.onHiddenRangesChanges(hr);
    }));
    this.updateScheduler = new _async.Delayer(200);
    this.cursorChangedScheduler = new _async.RunOnceScheduler(function () {
      return _this.revealCursor();
    }, 200);
    this.localToDispose.add(this.cursorChangedScheduler);
    this.localToDispose.add(_modes.FoldingRangeProviderRegistry.onDidChange(function () {
      return _this.onFoldingStrategyChanged();
    }));
    this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(function () {
      return _this.onFoldingStrategyChanged();
    })); // covers model language changes as well

    this.localToDispose.add(this.editor.onDidChangeModelContent(function () {
      return _this.onModelContentChanged();
    }));
    this.localToDispose.add(this.editor.onDidChangeCursorPosition(function () {
      return _this.onCursorPositionChanged();
    }));
    this.localToDispose.add(this.editor.onMouseDown(function (e) {
      return _this.onEditorMouseDown(e);
    }));
    this.localToDispose.add(this.editor.onMouseUp(function (e) {
      return _this.onEditorMouseUp(e);
    }));
    this.localToDispose.add({
      dispose: function () {
        if (_this.foldingRegionPromise) {
          _this.foldingRegionPromise.cancel();

          _this.foldingRegionPromise = null;
        }

        if (_this.updateScheduler) {
          _this.updateScheduler.cancel();
        }

        _this.updateScheduler = null;
        _this.foldingModel = null;
        _this.foldingModelPromise = null;
        _this.hiddenRangeModel = null;
        _this.cursorChangedScheduler = null;
        _this.foldingStateMemento = null;

        if (_this.rangeProvider) {
          _this.rangeProvider.dispose();
        }

        _this.rangeProvider = null;
      }
    });
    this.onModelContentChanged();
  };

  FoldingController.prototype.onFoldingStrategyChanged = function () {
    if (this.rangeProvider) {
      this.rangeProvider.dispose();
    }

    this.rangeProvider = null;
    this.onModelContentChanged();
  };

  FoldingController.prototype.getRangeProvider = function (editorModel) {
    var _this = this;

    if (this.rangeProvider) {
      return this.rangeProvider;
    }

    this.rangeProvider = new _indentRangeProvider.IndentRangeProvider(editorModel); // fallback

    if (this._useFoldingProviders && this.foldingModel) {
      var foldingProviders = _modes.FoldingRangeProviderRegistry.ordered(this.foldingModel.textModel);

      if (foldingProviders.length === 0 && this.foldingStateMemento && this.foldingStateMemento.collapsedRegions) {
        var rangeProvider = this.rangeProvider = new _intializingRangeProvider.InitializingRangeProvider(editorModel, this.foldingStateMemento.collapsedRegions, function () {
          // if after 30 the InitializingRangeProvider is still not replaced, force a refresh
          _this.foldingStateMemento = null;

          _this.onFoldingStrategyChanged();
        }, 30000);
        return rangeProvider; // keep memento in case there are still no foldingProviders on the next request.
      } else if (foldingProviders.length > 0) {
        this.rangeProvider = new _syntaxRangeProvider.SyntaxRangeProvider(editorModel, foldingProviders);
      }
    }

    this.foldingStateMemento = null;
    return this.rangeProvider;
  };

  FoldingController.prototype.getFoldingModel = function () {
    return this.foldingModelPromise;
  };

  FoldingController.prototype.onModelContentChanged = function () {
    var _this = this;

    if (this.updateScheduler) {
      if (this.foldingRegionPromise) {
        this.foldingRegionPromise.cancel();
        this.foldingRegionPromise = null;
      }

      this.foldingModelPromise = this.updateScheduler.trigger(function () {
        var foldingModel = _this.foldingModel;

        if (!foldingModel) {
          // null if editor has been disposed, or folding turned off
          return null;
        }

        var foldingRegionPromise = _this.foldingRegionPromise = (0, _async.createCancelablePromise)(function (token) {
          return _this.getRangeProvider(foldingModel.textModel).compute(token);
        });
        return foldingRegionPromise.then(function (foldingRanges) {
          if (foldingRanges && foldingRegionPromise === _this.foldingRegionPromise) {
            // new request or cancelled in the meantime?
            // some cursors might have moved into hidden regions, make sure they are in expanded regions
            var selections = _this.editor.getSelections();

            var selectionLineNumbers = selections ? selections.map(function (s) {
              return s.startLineNumber;
            }) : [];
            foldingModel.update(foldingRanges, selectionLineNumbers);
          }

          return foldingModel;
        });
      }).then(undefined, function (err) {
        (0, _errors.onUnexpectedError)(err);
        return null;
      });
    }
  };

  FoldingController.prototype.onHiddenRangesChanges = function (hiddenRanges) {
    if (this.hiddenRangeModel && hiddenRanges.length) {
      var selections = this.editor.getSelections();

      if (selections) {
        if (this.hiddenRangeModel.adjustSelections(selections)) {
          this.editor.setSelections(selections);
        }
      }
    }

    this.editor.setHiddenAreas(hiddenRanges);
  };

  FoldingController.prototype.onCursorPositionChanged = function () {
    if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {
      this.cursorChangedScheduler.schedule();
    }
  };

  FoldingController.prototype.revealCursor = function () {
    var _this = this;

    var foldingModel = this.getFoldingModel();

    if (!foldingModel) {
      return;
    }

    foldingModel.then(function (foldingModel) {
      if (foldingModel) {
        var selections = _this.editor.getSelections();

        if (selections && selections.length > 0) {
          var toToggle = [];

          var _loop_1 = function (selection) {
            var lineNumber = selection.selectionStartLineNumber;

            if (_this.hiddenRangeModel && _this.hiddenRangeModel.isHidden(lineNumber)) {
              toToggle.push.apply(toToggle, foldingModel.getAllRegionsAtLine(lineNumber, function (r) {
                return r.isCollapsed && lineNumber > r.startLineNumber;
              }));
            }
          };

          for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {
            var selection = selections_1[_i];

            _loop_1(selection);
          }

          if (toToggle.length) {
            foldingModel.toggleCollapseState(toToggle);

            _this.reveal(selections[0].getPosition());
          }
        }
      }
    }).then(undefined, _errors.onUnexpectedError);
  };

  FoldingController.prototype.onEditorMouseDown = function (e) {
    this.mouseDownInfo = null;

    if (!this.hiddenRangeModel || !e.target || !e.target.range) {
      return;
    }

    if (!e.event.leftButton && !e.event.middleButton) {
      return;
    }

    var range = e.target.range;
    var iconClicked = false;

    switch (e.target.type) {
      case 4
      /* GUTTER_LINE_DECORATIONS */
      :
        var data = e.target.detail;
        var offsetLeftInGutter = e.target.element.offsetLeft;
        var gutterOffsetX = data.offsetX - offsetLeftInGutter; // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;
        // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff

        if (gutterOffsetX < 5) {
          // the whitespace between the border and the real folding icon border is 5px
          return;
        }

        iconClicked = true;
        break;

      case 7
      /* CONTENT_EMPTY */
      :
        {
          if (this.hiddenRangeModel.hasRanges()) {
            var data_1 = e.target.detail;

            if (!data_1.isAfterLines) {
              break;
            }
          }

          return;
        }

      case 6
      /* CONTENT_TEXT */
      :
        {
          if (this.hiddenRangeModel.hasRanges()) {
            var model = this.editor.getModel();

            if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {
              break;
            }
          }

          return;
        }

      default:
        return;
    }

    this.mouseDownInfo = {
      lineNumber: range.startLineNumber,
      iconClicked: iconClicked
    };
  };

  FoldingController.prototype.onEditorMouseUp = function (e) {
    var _this = this;

    var foldingModel = this.getFoldingModel();

    if (!foldingModel || !this.mouseDownInfo || !e.target) {
      return;
    }

    var lineNumber = this.mouseDownInfo.lineNumber;
    var iconClicked = this.mouseDownInfo.iconClicked;
    var range = e.target.range;

    if (!range || range.startLineNumber !== lineNumber) {
      return;
    }

    if (iconClicked) {
      if (e.target.type !== 4
      /* GUTTER_LINE_DECORATIONS */
      ) {
          return;
        }
    } else {
      var model = this.editor.getModel();

      if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {
        return;
      }
    }

    foldingModel.then(function (foldingModel) {
      if (foldingModel) {
        var region = foldingModel.getRegionAtLine(lineNumber);

        if (region && region.startLineNumber === lineNumber) {
          var isCollapsed_1 = region.isCollapsed;

          if (iconClicked || isCollapsed_1) {
            var toToggle = [region];

            if (e.event.middleButton || e.event.shiftKey) {
              toToggle.push.apply(toToggle, foldingModel.getRegionsInside(region, function (r) {
                return r.isCollapsed === isCollapsed_1;
              }));
            }

            foldingModel.toggleCollapseState(toToggle);

            _this.reveal({
              lineNumber: lineNumber,
              column: 1
            });
          }
        }
      }
    }).then(undefined, _errors.onUnexpectedError);
  };

  FoldingController.prototype.reveal = function (position) {
    this.editor.revealPositionInCenterIfOutsideViewport(position, 0
    /* Smooth */
    );
  };

  FoldingController.ID = 'editor.contrib.folding';
  FoldingController = __decorate([__param(1, _contextkey.IContextKeyService)], FoldingController);
  return FoldingController;
}(_lifecycle.Disposable);

exports.FoldingController = FoldingController;

var FoldingAction =
/** @class */
function (_super) {
  __extends(FoldingAction, _super);

  function FoldingAction() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  FoldingAction.prototype.runEditorCommand = function (accessor, editor, args) {
    var _this = this;

    var foldingController = FoldingController.get(editor);

    if (!foldingController) {
      return;
    }

    var foldingModelPromise = foldingController.getFoldingModel();

    if (foldingModelPromise) {
      this.reportTelemetry(accessor, editor);
      return foldingModelPromise.then(function (foldingModel) {
        if (foldingModel) {
          _this.invoke(foldingController, foldingModel, editor, args);

          var selection = editor.getSelection();

          if (selection) {
            foldingController.reveal(selection.getStartPosition());
          }
        }
      });
    }
  };

  FoldingAction.prototype.getSelectedLines = function (editor) {
    var selections = editor.getSelections();
    return selections ? selections.map(function (s) {
      return s.startLineNumber;
    }) : [];
  };

  FoldingAction.prototype.getLineNumbers = function (args, editor) {
    if (args && args.selectionLines) {
      return args.selectionLines.map(function (l) {
        return l + 1;
      }); // to 0-bases line numbers
    }

    return this.getSelectedLines(editor);
  };

  FoldingAction.prototype.run = function (_accessor, _editor) {};

  return FoldingAction;
}(_editorExtensions.EditorAction);

function foldingArgumentsConstraint(args) {
  if (!types.isUndefined(args)) {
    if (!types.isObject(args)) {
      return false;
    }

    var foldingArgs = args;

    if (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {
      return false;
    }

    if (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {
      return false;
    }

    if (!types.isUndefined(foldingArgs.selectionLines) && (!types.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {
      return false;
    }
  }

  return true;
}

var UnfoldAction =
/** @class */
function (_super) {
  __extends(UnfoldAction, _super);

  function UnfoldAction() {
    return _super.call(this, {
      id: 'editor.unfold',
      label: nls.localize('unfoldAction.label', "Unfold"),
      alias: 'Unfold',
      precondition: CONTEXT_FOLDING_ENABLED,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 89
        /* US_CLOSE_SQUARE_BRACKET */
        ,
        mac: {
          primary: 2048
          /* CtrlCmd */
          | 512
          /* Alt */
          | 89
          /* US_CLOSE_SQUARE_BRACKET */

        },
        weight: 100
        /* EditorContrib */

      },
      description: {
        description: 'Unfold the content in the editor',
        args: [{
          name: 'Unfold editor argument',
          description: "Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\n\t\t\t\t\t\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\n\t\t\t\t\t\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t",
          constraint: foldingArgumentsConstraint,
          schema: {
            'type': 'object',
            'properties': {
              'levels': {
                'type': 'number',
                'default': 1
              },
              'direction': {
                'type': 'string',
                'enum': ['up', 'down'],
                'default': 'down'
              },
              'selectionLines': {
                'type': 'array',
                'items': {
                  'type': 'number'
                }
              }
            }
          }
        }]
      }
    }) || this;
  }

  UnfoldAction.prototype.invoke = function (_foldingController, foldingModel, editor, args) {
    var levels = args && args.levels || 1;
    var lineNumbers = this.getLineNumbers(args, editor);

    if (args && args.direction === 'up') {
      (0, _foldingModel.setCollapseStateLevelsUp)(foldingModel, false, levels, lineNumbers);
    } else {
      (0, _foldingModel.setCollapseStateLevelsDown)(foldingModel, false, levels, lineNumbers);
    }
  };

  return UnfoldAction;
}(FoldingAction);

var UnFoldRecursivelyAction =
/** @class */
function (_super) {
  __extends(UnFoldRecursivelyAction, _super);

  function UnFoldRecursivelyAction() {
    return _super.call(this, {
      id: 'editor.unfoldRecursively',
      label: nls.localize('unFoldRecursivelyAction.label', "Unfold Recursively"),
      alias: 'Unfold Recursively',
      precondition: CONTEXT_FOLDING_ENABLED,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 89
        /* US_CLOSE_SQUARE_BRACKET */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  UnFoldRecursivelyAction.prototype.invoke = function (_foldingController, foldingModel, editor, _args) {
    (0, _foldingModel.setCollapseStateLevelsDown)(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));
  };

  return UnFoldRecursivelyAction;
}(FoldingAction);

var FoldAction =
/** @class */
function (_super) {
  __extends(FoldAction, _super);

  function FoldAction() {
    return _super.call(this, {
      id: 'editor.fold',
      label: nls.localize('foldAction.label', "Fold"),
      alias: 'Fold',
      precondition: CONTEXT_FOLDING_ENABLED,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 87
        /* US_OPEN_SQUARE_BRACKET */
        ,
        mac: {
          primary: 2048
          /* CtrlCmd */
          | 512
          /* Alt */
          | 87
          /* US_OPEN_SQUARE_BRACKET */

        },
        weight: 100
        /* EditorContrib */

      },
      description: {
        description: 'Fold the content in the editor',
        args: [{
          name: 'Fold editor argument',
          description: "Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t\t* 'levels': Number of levels to fold. Defaults to 1.\n\t\t\t\t\t\t\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\n\t\t\t\t\t\t\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t",
          constraint: foldingArgumentsConstraint,
          schema: {
            'type': 'object',
            'properties': {
              'levels': {
                'type': 'number',
                'default': 1
              },
              'direction': {
                'type': 'string',
                'enum': ['up', 'down'],
                'default': 'down'
              },
              'selectionLines': {
                'type': 'array',
                'items': {
                  'type': 'number'
                }
              }
            }
          }
        }]
      }
    }) || this;
  }

  FoldAction.prototype.invoke = function (_foldingController, foldingModel, editor, args) {
    var levels = args && args.levels || 1;
    var lineNumbers = this.getLineNumbers(args, editor);

    if (args && args.direction === 'up') {
      (0, _foldingModel.setCollapseStateLevelsUp)(foldingModel, true, levels, lineNumbers);
    } else {
      (0, _foldingModel.setCollapseStateLevelsDown)(foldingModel, true, levels, lineNumbers);
    }
  };

  return FoldAction;
}(FoldingAction);

var ToggleFoldAction =
/** @class */
function (_super) {
  __extends(ToggleFoldAction, _super);

  function ToggleFoldAction() {
    return _super.call(this, {
      id: 'editor.toggleFold',
      label: nls.localize('toggleFoldAction.label', "Toggle Fold"),
      alias: 'Toggle Fold',
      precondition: CONTEXT_FOLDING_ENABLED,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 42
        /* KEY_L */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  ToggleFoldAction.prototype.invoke = function (_foldingController, foldingModel, editor) {
    var selectedLines = this.getSelectedLines(editor);
    (0, _foldingModel.toggleCollapseState)(foldingModel, 1, selectedLines);
  };

  return ToggleFoldAction;
}(FoldingAction);

var FoldRecursivelyAction =
/** @class */
function (_super) {
  __extends(FoldRecursivelyAction, _super);

  function FoldRecursivelyAction() {
    return _super.call(this, {
      id: 'editor.foldRecursively',
      label: nls.localize('foldRecursivelyAction.label', "Fold Recursively"),
      alias: 'Fold Recursively',
      precondition: CONTEXT_FOLDING_ENABLED,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 87
        /* US_OPEN_SQUARE_BRACKET */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  FoldRecursivelyAction.prototype.invoke = function (_foldingController, foldingModel, editor) {
    var selectedLines = this.getSelectedLines(editor);
    (0, _foldingModel.setCollapseStateLevelsDown)(foldingModel, true, Number.MAX_VALUE, selectedLines);
  };

  return FoldRecursivelyAction;
}(FoldingAction);

var FoldAllBlockCommentsAction =
/** @class */
function (_super) {
  __extends(FoldAllBlockCommentsAction, _super);

  function FoldAllBlockCommentsAction() {
    return _super.call(this, {
      id: 'editor.foldAllBlockComments',
      label: nls.localize('foldAllBlockComments.label', "Fold All Block Comments"),
      alias: 'Fold All Block Comments',
      precondition: CONTEXT_FOLDING_ENABLED,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 85
        /* US_SLASH */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  FoldAllBlockCommentsAction.prototype.invoke = function (_foldingController, foldingModel, editor) {
    if (foldingModel.regions.hasTypes()) {
      (0, _foldingModel.setCollapseStateForType)(foldingModel, _modes.FoldingRangeKind.Comment.value, true);
    } else {
      var editorModel = editor.getModel();

      if (!editorModel) {
        return;
      }

      var comments = _languageConfigurationRegistry.LanguageConfigurationRegistry.getComments(editorModel.getLanguageIdentifier().id);

      if (comments && comments.blockCommentStartToken) {
        var regExp = new RegExp('^\\s*' + (0, _strings.escapeRegExpCharacters)(comments.blockCommentStartToken));
        (0, _foldingModel.setCollapseStateForMatchingLines)(foldingModel, regExp, true);
      }
    }
  };

  return FoldAllBlockCommentsAction;
}(FoldingAction);

var FoldAllRegionsAction =
/** @class */
function (_super) {
  __extends(FoldAllRegionsAction, _super);

  function FoldAllRegionsAction() {
    return _super.call(this, {
      id: 'editor.foldAllMarkerRegions',
      label: nls.localize('foldAllMarkerRegions.label', "Fold All Regions"),
      alias: 'Fold All Regions',
      precondition: CONTEXT_FOLDING_ENABLED,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 29
        /* KEY_8 */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  FoldAllRegionsAction.prototype.invoke = function (_foldingController, foldingModel, editor) {
    if (foldingModel.regions.hasTypes()) {
      (0, _foldingModel.setCollapseStateForType)(foldingModel, _modes.FoldingRangeKind.Region.value, true);
    } else {
      var editorModel = editor.getModel();

      if (!editorModel) {
        return;
      }

      var foldingRules = _languageConfigurationRegistry.LanguageConfigurationRegistry.getFoldingRules(editorModel.getLanguageIdentifier().id);

      if (foldingRules && foldingRules.markers && foldingRules.markers.start) {
        var regExp = new RegExp(foldingRules.markers.start);
        (0, _foldingModel.setCollapseStateForMatchingLines)(foldingModel, regExp, true);
      }
    }
  };

  return FoldAllRegionsAction;
}(FoldingAction);

var UnfoldAllRegionsAction =
/** @class */
function (_super) {
  __extends(UnfoldAllRegionsAction, _super);

  function UnfoldAllRegionsAction() {
    return _super.call(this, {
      id: 'editor.unfoldAllMarkerRegions',
      label: nls.localize('unfoldAllMarkerRegions.label', "Unfold All Regions"),
      alias: 'Unfold All Regions',
      precondition: CONTEXT_FOLDING_ENABLED,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 30
        /* KEY_9 */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  UnfoldAllRegionsAction.prototype.invoke = function (_foldingController, foldingModel, editor) {
    if (foldingModel.regions.hasTypes()) {
      (0, _foldingModel.setCollapseStateForType)(foldingModel, _modes.FoldingRangeKind.Region.value, false);
    } else {
      var editorModel = editor.getModel();

      if (!editorModel) {
        return;
      }

      var foldingRules = _languageConfigurationRegistry.LanguageConfigurationRegistry.getFoldingRules(editorModel.getLanguageIdentifier().id);

      if (foldingRules && foldingRules.markers && foldingRules.markers.start) {
        var regExp = new RegExp(foldingRules.markers.start);
        (0, _foldingModel.setCollapseStateForMatchingLines)(foldingModel, regExp, false);
      }
    }
  };

  return UnfoldAllRegionsAction;
}(FoldingAction);

var FoldAllAction =
/** @class */
function (_super) {
  __extends(FoldAllAction, _super);

  function FoldAllAction() {
    return _super.call(this, {
      id: 'editor.foldAll',
      label: nls.localize('foldAllAction.label', "Fold All"),
      alias: 'Fold All',
      precondition: CONTEXT_FOLDING_ENABLED,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 21
        /* KEY_0 */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  FoldAllAction.prototype.invoke = function (_foldingController, foldingModel, _editor) {
    (0, _foldingModel.setCollapseStateLevelsDown)(foldingModel, true);
  };

  return FoldAllAction;
}(FoldingAction);

var UnfoldAllAction =
/** @class */
function (_super) {
  __extends(UnfoldAllAction, _super);

  function UnfoldAllAction() {
    return _super.call(this, {
      id: 'editor.unfoldAll',
      label: nls.localize('unfoldAllAction.label', "Unfold All"),
      alias: 'Unfold All',
      precondition: CONTEXT_FOLDING_ENABLED,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 40
        /* KEY_J */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  UnfoldAllAction.prototype.invoke = function (_foldingController, foldingModel, _editor) {
    (0, _foldingModel.setCollapseStateLevelsDown)(foldingModel, false);
  };

  return UnfoldAllAction;
}(FoldingAction);

var FoldLevelAction =
/** @class */
function (_super) {
  __extends(FoldLevelAction, _super);

  function FoldLevelAction() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  FoldLevelAction.prototype.getFoldingLevel = function () {
    return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));
  };

  FoldLevelAction.prototype.invoke = function (_foldingController, foldingModel, editor) {
    (0, _foldingModel.setCollapseStateAtLevel)(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));
  };

  FoldLevelAction.ID_PREFIX = 'editor.foldLevel';

  FoldLevelAction.ID = function (level) {
    return FoldLevelAction.ID_PREFIX + level;
  };

  return FoldLevelAction;
}(FoldingAction);

(0, _editorExtensions.registerEditorContribution)(FoldingController.ID, FoldingController);
(0, _editorExtensions.registerEditorAction)(UnfoldAction);
(0, _editorExtensions.registerEditorAction)(UnFoldRecursivelyAction);
(0, _editorExtensions.registerEditorAction)(FoldAction);
(0, _editorExtensions.registerEditorAction)(FoldRecursivelyAction);
(0, _editorExtensions.registerEditorAction)(FoldAllAction);
(0, _editorExtensions.registerEditorAction)(UnfoldAllAction);
(0, _editorExtensions.registerEditorAction)(FoldAllBlockCommentsAction);
(0, _editorExtensions.registerEditorAction)(FoldAllRegionsAction);
(0, _editorExtensions.registerEditorAction)(UnfoldAllRegionsAction);
(0, _editorExtensions.registerEditorAction)(ToggleFoldAction);

for (var i = 1; i <= 7; i++) {
  (0, _editorExtensions.registerInstantiatedEditorAction)(new FoldLevelAction({
    id: FoldLevelAction.ID(i),
    label: nls.localize('foldLevelAction.label', "Fold Level {0}", i),
    alias: "Fold Level " + i,
    precondition: CONTEXT_FOLDING_ENABLED,
    kbOpts: {
      kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
      primary: (0, _keyCodes.KeyChord)(2048
      /* CtrlCmd */
      | 41
      /* KEY_K */
      , 2048
      /* CtrlCmd */
      | 21
      /* KEY_0 */
      + i),
      weight: 100
      /* EditorContrib */

    }
  }));
}
},{"./folding.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/folding.css","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/types.js":"../node_modules/monaco-editor/esm/vs/base/common/types.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/keyCodes.js":"../node_modules/monaco-editor/esm/vs/base/common/keyCodes.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","./foldingModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/foldingModel.js","./foldingDecorations.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/foldingDecorations.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","./hiddenRangeModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/hiddenRangeModel.js","../../common/modes/languageConfigurationRegistry.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes/languageConfigurationRegistry.js","./indentRangeProvider.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/indentRangeProvider.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","./syntaxRangeProvider.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/syntaxRangeProvider.js","./intializingRangeProvider.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/intializingRangeProvider.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/fontZoom/fontZoom.js":[function(require,module,exports) {
"use strict";

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _editorExtensions = require("../../browser/editorExtensions.js");

var _editorZoom = require("../../common/config/editorZoom.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var EditorFontZoomIn =
/** @class */
function (_super) {
  __extends(EditorFontZoomIn, _super);

  function EditorFontZoomIn() {
    return _super.call(this, {
      id: 'editor.action.fontZoomIn',
      label: nls.localize('EditorFontZoomIn.label', "Editor Font Zoom In"),
      alias: 'Editor Font Zoom In',
      precondition: undefined
    }) || this;
  }

  EditorFontZoomIn.prototype.run = function (accessor, editor) {
    _editorZoom.EditorZoom.setZoomLevel(_editorZoom.EditorZoom.getZoomLevel() + 1);
  };

  return EditorFontZoomIn;
}(_editorExtensions.EditorAction);

var EditorFontZoomOut =
/** @class */
function (_super) {
  __extends(EditorFontZoomOut, _super);

  function EditorFontZoomOut() {
    return _super.call(this, {
      id: 'editor.action.fontZoomOut',
      label: nls.localize('EditorFontZoomOut.label', "Editor Font Zoom Out"),
      alias: 'Editor Font Zoom Out',
      precondition: undefined
    }) || this;
  }

  EditorFontZoomOut.prototype.run = function (accessor, editor) {
    _editorZoom.EditorZoom.setZoomLevel(_editorZoom.EditorZoom.getZoomLevel() - 1);
  };

  return EditorFontZoomOut;
}(_editorExtensions.EditorAction);

var EditorFontZoomReset =
/** @class */
function (_super) {
  __extends(EditorFontZoomReset, _super);

  function EditorFontZoomReset() {
    return _super.call(this, {
      id: 'editor.action.fontZoomReset',
      label: nls.localize('EditorFontZoomReset.label', "Editor Font Zoom Reset"),
      alias: 'Editor Font Zoom Reset',
      precondition: undefined
    }) || this;
  }

  EditorFontZoomReset.prototype.run = function (accessor, editor) {
    _editorZoom.EditorZoom.setZoomLevel(0);
  };

  return EditorFontZoomReset;
}(_editorExtensions.EditorAction);

(0, _editorExtensions.registerEditorAction)(EditorFontZoomIn);
(0, _editorExtensions.registerEditorAction)(EditorFontZoomOut);
(0, _editorExtensions.registerEditorAction)(EditorFontZoomReset);
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/config/editorZoom.js":"../node_modules/monaco-editor/esm/vs/editor/common/config/editorZoom.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/format/formattingEdit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormattingEdit = void 0;

var _editOperation = require("../../common/core/editOperation.js");

var _range = require("../../common/core/range.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var FormattingEdit =
/** @class */
function () {
  function FormattingEdit() {}

  FormattingEdit._handleEolEdits = function (editor, edits) {
    var newEol = undefined;
    var singleEdits = [];

    for (var _i = 0, edits_1 = edits; _i < edits_1.length; _i++) {
      var edit = edits_1[_i];

      if (typeof edit.eol === 'number') {
        newEol = edit.eol;
      }

      if (edit.range && typeof edit.text === 'string') {
        singleEdits.push(edit);
      }
    }

    if (typeof newEol === 'number') {
      if (editor.hasModel()) {
        editor.getModel().pushEOL(newEol);
      }
    }

    return singleEdits;
  };

  FormattingEdit._isFullModelReplaceEdit = function (editor, edit) {
    if (!editor.hasModel()) {
      return false;
    }

    var model = editor.getModel();
    var editRange = model.validateRange(edit.range);
    var fullModelRange = model.getFullModelRange();
    return fullModelRange.equalsRange(editRange);
  };

  FormattingEdit.execute = function (editor, _edits) {
    editor.pushUndoStop();

    var edits = FormattingEdit._handleEolEdits(editor, _edits);

    if (edits.length === 1 && FormattingEdit._isFullModelReplaceEdit(editor, edits[0])) {
      // We use replace semantics and hope that markers stay put...
      editor.executeEdits('formatEditsCommand', edits.map(function (edit) {
        return _editOperation.EditOperation.replace(_range.Range.lift(edit.range), edit.text);
      }));
    } else {
      editor.executeEdits('formatEditsCommand', edits.map(function (edit) {
        return _editOperation.EditOperation.replaceMove(_range.Range.lift(edit.range), edit.text);
      }));
    }

    editor.pushUndoStop();
  };

  return FormattingEdit;
}();

exports.FormattingEdit = FormattingEdit;
},{"../../common/core/editOperation.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/editOperation.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js"}],"../node_modules/monaco-editor/esm/vs/platform/extensions/common/extensions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExtensionIdentifier = void 0;

/**
 * **!Do not construct directly!**
 *
 * **!Only static methods because it gets serialized!**
 *
 * This represents the "canonical" version for an extension identifier. Extension ids
 * have to be case-insensitive (due to the marketplace), but we must ensure case
 * preservation because the extension API is already public at this time.
 *
 * For example, given an extension with the publisher `"Hello"` and the name `"World"`,
 * its canonical extension identifier is `"Hello.World"`. This extension could be
 * referenced in some other extension's dependencies using the string `"hello.world"`.
 *
 * To make matters more complicated, an extension can optionally have an UUID. When two
 * extensions have the same UUID, they are considered equal even if their identifier is different.
 */
var ExtensionIdentifier =
/** @class */
function () {
  function ExtensionIdentifier(value) {
    this.value = value;
    this._lower = value.toLowerCase();
  }
  /**
   * Gives the value by which to index (for equality).
   */


  ExtensionIdentifier.toKey = function (id) {
    if (typeof id === 'string') {
      return id.toLowerCase();
    }

    return id._lower;
  };

  return ExtensionIdentifier;
}();

exports.ExtensionIdentifier = ExtensionIdentifier;
},{}],"../node_modules/monaco-editor/esm/vs/editor/contrib/format/format.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.alertFormattingEdits = alertFormattingEdits;
exports.getRealAndSyntheticDocumentFormattersOrdered = getRealAndSyntheticDocumentFormattersOrdered;
exports.formatDocumentRangeWithSelectedProvider = formatDocumentRangeWithSelectedProvider;
exports.formatDocumentRangeWithProvider = formatDocumentRangeWithProvider;
exports.formatDocumentWithSelectedProvider = formatDocumentWithSelectedProvider;
exports.formatDocumentWithProvider = formatDocumentWithProvider;
exports.getDocumentRangeFormattingEditsUntilResult = getDocumentRangeFormattingEditsUntilResult;
exports.getDocumentFormattingEditsUntilResult = getDocumentFormattingEditsUntilResult;
exports.getOnTypeFormattingEdits = getOnTypeFormattingEdits;
exports.FormattingConflicts = void 0;

var _aria = require("../../../base/browser/ui/aria/aria.js");

var _arrays = require("../../../base/common/arrays.js");

var _cancellation = require("../../../base/common/cancellation.js");

var _errors = require("../../../base/common/errors.js");

var _uri = require("../../../base/common/uri.js");

var _editorState = require("../../browser/core/editorState.js");

var _editorBrowser = require("../../browser/editorBrowser.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _position = require("../../common/core/position.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _modes = require("../../common/modes.js");

var _editorWorkerService = require("../../common/services/editorWorkerService.js");

var _modelService = require("../../common/services/modelService.js");

var _formattingEdit = require("./formattingEdit.js");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _extensions = require("../../../platform/extensions/common/extensions.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _linkedList = require("../../../base/common/linkedList.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

function alertFormattingEdits(edits) {
  edits = edits.filter(function (edit) {
    return edit.range;
  });

  if (!edits.length) {
    return;
  }

  var range = edits[0].range;

  for (var i = 1; i < edits.length; i++) {
    range = _range.Range.plusRange(range, edits[i].range);
  }

  var startLineNumber = range.startLineNumber,
      endLineNumber = range.endLineNumber;

  if (startLineNumber === endLineNumber) {
    if (edits.length === 1) {
      (0, _aria.alert)(nls.localize('hint11', "Made 1 formatting edit on line {0}", startLineNumber));
    } else {
      (0, _aria.alert)(nls.localize('hintn1', "Made {0} formatting edits on line {1}", edits.length, startLineNumber));
    }
  } else {
    if (edits.length === 1) {
      (0, _aria.alert)(nls.localize('hint1n', "Made 1 formatting edit between lines {0} and {1}", startLineNumber, endLineNumber));
    } else {
      (0, _aria.alert)(nls.localize('hintnn', "Made {0} formatting edits between lines {1} and {2}", edits.length, startLineNumber, endLineNumber));
    }
  }
}

function getRealAndSyntheticDocumentFormattersOrdered(model) {
  var result = [];
  var seen = new Set(); // (1) add all document formatter

  var docFormatter = _modes.DocumentFormattingEditProviderRegistry.ordered(model);

  for (var _i = 0, docFormatter_1 = docFormatter; _i < docFormatter_1.length; _i++) {
    var formatter = docFormatter_1[_i];
    result.push(formatter);

    if (formatter.extensionId) {
      seen.add(_extensions.ExtensionIdentifier.toKey(formatter.extensionId));
    }
  } // (2) add all range formatter as document formatter (unless the same extension already did that)


  var rangeFormatter = _modes.DocumentRangeFormattingEditProviderRegistry.ordered(model);

  var _loop_1 = function (formatter) {
    if (formatter.extensionId) {
      if (seen.has(_extensions.ExtensionIdentifier.toKey(formatter.extensionId))) {
        return "continue";
      }

      seen.add(_extensions.ExtensionIdentifier.toKey(formatter.extensionId));
    }

    result.push({
      displayName: formatter.displayName,
      extensionId: formatter.extensionId,
      provideDocumentFormattingEdits: function (model, options, token) {
        return formatter.provideDocumentRangeFormattingEdits(model, model.getFullModelRange(), options, token);
      }
    });
  };

  for (var _a = 0, rangeFormatter_1 = rangeFormatter; _a < rangeFormatter_1.length; _a++) {
    var formatter = rangeFormatter_1[_a];

    _loop_1(formatter);
  }

  return result;
}

var FormattingConflicts =
/** @class */
function () {
  function FormattingConflicts() {}

  FormattingConflicts.select = function (formatter, document, mode) {
    return __awaiter(this, void 0, void 0, function () {
      var selector;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (formatter.length === 0) {
              return [2
              /*return*/
              , undefined];
            }

            selector = FormattingConflicts._selectors.iterator().next().value;
            if (!selector) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , selector(formatter, document, mode)];

          case 1:
            return [2
            /*return*/
            , _a.sent()];

          case 2:
            return [2
            /*return*/
            , formatter[0]];
        }
      });
    });
  };

  FormattingConflicts._selectors = new _linkedList.LinkedList();
  return FormattingConflicts;
}();

exports.FormattingConflicts = FormattingConflicts;

function formatDocumentRangeWithSelectedProvider(accessor, editorOrModel, range, mode, token) {
  return __awaiter(this, void 0, void 0, function () {
    var instaService, model, provider, selected;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          instaService = accessor.get(_instantiation.IInstantiationService);
          model = (0, _editorBrowser.isCodeEditor)(editorOrModel) ? editorOrModel.getModel() : editorOrModel;
          provider = _modes.DocumentRangeFormattingEditProviderRegistry.ordered(model);
          return [4
          /*yield*/
          , FormattingConflicts.select(provider, model, mode)];

        case 1:
          selected = _a.sent();
          if (!selected) return [3
          /*break*/
          , 3];
          return [4
          /*yield*/
          , instaService.invokeFunction(formatDocumentRangeWithProvider, selected, editorOrModel, range, token)];

        case 2:
          _a.sent();

          _a.label = 3;

        case 3:
          return [2
          /*return*/
          ];
      }
    });
  });
}

function formatDocumentRangeWithProvider(accessor, provider, editorOrModel, range, token) {
  return __awaiter(this, void 0, void 0, function () {
    var workerService, model, cts, edits, rawEdits, range_1, initialSelection_1;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          workerService = accessor.get(_editorWorkerService.IEditorWorkerService);

          if ((0, _editorBrowser.isCodeEditor)(editorOrModel)) {
            model = editorOrModel.getModel();
            cts = new _editorState.EditorStateCancellationTokenSource(editorOrModel, 1
            /* Value */
            | 4
            /* Position */
            , token);
          } else {
            model = editorOrModel;
            cts = new _editorState.TextModelCancellationTokenSource(editorOrModel, token);
          }

          _a.label = 1;

        case 1:
          _a.trys.push([1,, 4, 5]);

          return [4
          /*yield*/
          , provider.provideDocumentRangeFormattingEdits(model, range, model.getFormattingOptions(), cts.token)];

        case 2:
          rawEdits = _a.sent();
          return [4
          /*yield*/
          , workerService.computeMoreMinimalEdits(model.uri, rawEdits)];

        case 3:
          edits = _a.sent();

          if (cts.token.isCancellationRequested) {
            return [2
            /*return*/
            , true];
          }

          return [3
          /*break*/
          , 5];

        case 4:
          cts.dispose();
          return [7
          /*endfinally*/
          ];

        case 5:
          if (!edits || edits.length === 0) {
            return [2
            /*return*/
            , false];
          }

          if ((0, _editorBrowser.isCodeEditor)(editorOrModel)) {
            // use editor to apply edits
            _formattingEdit.FormattingEdit.execute(editorOrModel, edits);

            alertFormattingEdits(edits);
            editorOrModel.pushUndoStop();
            editorOrModel.focus();
            editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1
            /* Immediate */
            );
          } else {
            range_1 = edits[0].range;
            initialSelection_1 = new _selection.Selection(range_1.startLineNumber, range_1.startColumn, range_1.endLineNumber, range_1.endColumn);
            model.pushEditOperations([initialSelection_1], edits.map(function (edit) {
              return {
                text: edit.text,
                range: _range.Range.lift(edit.range),
                forceMoveMarkers: true
              };
            }), function (undoEdits) {
              for (var _i = 0, undoEdits_1 = undoEdits; _i < undoEdits_1.length; _i++) {
                var range_2 = undoEdits_1[_i].range;

                if (_range.Range.areIntersectingOrTouching(range_2, initialSelection_1)) {
                  return [new _selection.Selection(range_2.startLineNumber, range_2.startColumn, range_2.endLineNumber, range_2.endColumn)];
                }
              }

              return null;
            });
          }

          return [2
          /*return*/
          , true];
      }
    });
  });
}

function formatDocumentWithSelectedProvider(accessor, editorOrModel, mode, token) {
  return __awaiter(this, void 0, void 0, function () {
    var instaService, model, provider, selected;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          instaService = accessor.get(_instantiation.IInstantiationService);
          model = (0, _editorBrowser.isCodeEditor)(editorOrModel) ? editorOrModel.getModel() : editorOrModel;
          provider = getRealAndSyntheticDocumentFormattersOrdered(model);
          return [4
          /*yield*/
          , FormattingConflicts.select(provider, model, mode)];

        case 1:
          selected = _a.sent();
          if (!selected) return [3
          /*break*/
          , 3];
          return [4
          /*yield*/
          , instaService.invokeFunction(formatDocumentWithProvider, selected, editorOrModel, mode, token)];

        case 2:
          _a.sent();

          _a.label = 3;

        case 3:
          return [2
          /*return*/
          ];
      }
    });
  });
}

function formatDocumentWithProvider(accessor, provider, editorOrModel, mode, token) {
  return __awaiter(this, void 0, void 0, function () {
    var workerService, model, cts, edits, rawEdits, range, initialSelection_2;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          workerService = accessor.get(_editorWorkerService.IEditorWorkerService);

          if ((0, _editorBrowser.isCodeEditor)(editorOrModel)) {
            model = editorOrModel.getModel();
            cts = new _editorState.EditorStateCancellationTokenSource(editorOrModel, 1
            /* Value */
            | 4
            /* Position */
            , token);
          } else {
            model = editorOrModel;
            cts = new _editorState.TextModelCancellationTokenSource(editorOrModel, token);
          }

          _a.label = 1;

        case 1:
          _a.trys.push([1,, 4, 5]);

          return [4
          /*yield*/
          , provider.provideDocumentFormattingEdits(model, model.getFormattingOptions(), cts.token)];

        case 2:
          rawEdits = _a.sent();
          return [4
          /*yield*/
          , workerService.computeMoreMinimalEdits(model.uri, rawEdits)];

        case 3:
          edits = _a.sent();

          if (cts.token.isCancellationRequested) {
            return [2
            /*return*/
            , true];
          }

          return [3
          /*break*/
          , 5];

        case 4:
          cts.dispose();
          return [7
          /*endfinally*/
          ];

        case 5:
          if (!edits || edits.length === 0) {
            return [2
            /*return*/
            , false];
          }

          if ((0, _editorBrowser.isCodeEditor)(editorOrModel)) {
            // use editor to apply edits
            _formattingEdit.FormattingEdit.execute(editorOrModel, edits);

            if (mode !== 2
            /* Silent */
            ) {
                alertFormattingEdits(edits);
                editorOrModel.pushUndoStop();
                editorOrModel.focus();
                editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1
                /* Immediate */
                );
              }
          } else {
            range = edits[0].range;
            initialSelection_2 = new _selection.Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);
            model.pushEditOperations([initialSelection_2], edits.map(function (edit) {
              return {
                text: edit.text,
                range: _range.Range.lift(edit.range),
                forceMoveMarkers: true
              };
            }), function (undoEdits) {
              for (var _i = 0, undoEdits_2 = undoEdits; _i < undoEdits_2.length; _i++) {
                var range_3 = undoEdits_2[_i].range;

                if (_range.Range.areIntersectingOrTouching(range_3, initialSelection_2)) {
                  return [new _selection.Selection(range_3.startLineNumber, range_3.startColumn, range_3.endLineNumber, range_3.endColumn)];
                }
              }

              return null;
            });
          }

          return [2
          /*return*/
          , true];
      }
    });
  });
}

function getDocumentRangeFormattingEditsUntilResult(workerService, model, range, options, token) {
  return __awaiter(this, void 0, void 0, function () {
    var providers, _i, providers_1, provider, rawEdits;

    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          providers = _modes.DocumentRangeFormattingEditProviderRegistry.ordered(model);
          _i = 0, providers_1 = providers;
          _a.label = 1;

        case 1:
          if (!(_i < providers_1.length)) return [3
          /*break*/
          , 5];
          provider = providers_1[_i];
          return [4
          /*yield*/
          , Promise.resolve(provider.provideDocumentRangeFormattingEdits(model, range, options, token)).catch(_errors.onUnexpectedExternalError)];

        case 2:
          rawEdits = _a.sent();
          if (!(0, _arrays.isNonEmptyArray)(rawEdits)) return [3
          /*break*/
          , 4];
          return [4
          /*yield*/
          , workerService.computeMoreMinimalEdits(model.uri, rawEdits)];

        case 3:
          return [2
          /*return*/
          , _a.sent()];

        case 4:
          _i++;
          return [3
          /*break*/
          , 1];

        case 5:
          return [2
          /*return*/
          , undefined];
      }
    });
  });
}

function getDocumentFormattingEditsUntilResult(workerService, model, options, token) {
  return __awaiter(this, void 0, void 0, function () {
    var providers, _i, providers_2, provider, rawEdits;

    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          providers = getRealAndSyntheticDocumentFormattersOrdered(model);
          _i = 0, providers_2 = providers;
          _a.label = 1;

        case 1:
          if (!(_i < providers_2.length)) return [3
          /*break*/
          , 5];
          provider = providers_2[_i];
          return [4
          /*yield*/
          , Promise.resolve(provider.provideDocumentFormattingEdits(model, options, token)).catch(_errors.onUnexpectedExternalError)];

        case 2:
          rawEdits = _a.sent();
          if (!(0, _arrays.isNonEmptyArray)(rawEdits)) return [3
          /*break*/
          , 4];
          return [4
          /*yield*/
          , workerService.computeMoreMinimalEdits(model.uri, rawEdits)];

        case 3:
          return [2
          /*return*/
          , _a.sent()];

        case 4:
          _i++;
          return [3
          /*break*/
          , 1];

        case 5:
          return [2
          /*return*/
          , undefined];
      }
    });
  });
}

function getOnTypeFormattingEdits(workerService, model, position, ch, options) {
  var providers = _modes.OnTypeFormattingEditProviderRegistry.ordered(model);

  if (providers.length === 0) {
    return Promise.resolve(undefined);
  }

  if (providers[0].autoFormatTriggerCharacters.indexOf(ch) < 0) {
    return Promise.resolve(undefined);
  }

  return Promise.resolve(providers[0].provideOnTypeFormattingEdits(model, position, ch, options, _cancellation.CancellationToken.None)).catch(_errors.onUnexpectedExternalError).then(function (edits) {
    return workerService.computeMoreMinimalEdits(model.uri, edits);
  });
}

(0, _editorExtensions.registerLanguageCommand)('_executeFormatRangeProvider', function (accessor, args) {
  var resource = args.resource,
      range = args.range,
      options = args.options;

  if (!(resource instanceof _uri.URI) || !_range.Range.isIRange(range)) {
    throw (0, _errors.illegalArgument)();
  }

  var model = accessor.get(_modelService.IModelService).getModel(resource);

  if (!model) {
    throw (0, _errors.illegalArgument)('resource');
  }

  return getDocumentRangeFormattingEditsUntilResult(accessor.get(_editorWorkerService.IEditorWorkerService), model, _range.Range.lift(range), options, _cancellation.CancellationToken.None);
});
(0, _editorExtensions.registerLanguageCommand)('_executeFormatDocumentProvider', function (accessor, args) {
  var resource = args.resource,
      options = args.options;

  if (!(resource instanceof _uri.URI)) {
    throw (0, _errors.illegalArgument)('resource');
  }

  var model = accessor.get(_modelService.IModelService).getModel(resource);

  if (!model) {
    throw (0, _errors.illegalArgument)('resource');
  }

  return getDocumentFormattingEditsUntilResult(accessor.get(_editorWorkerService.IEditorWorkerService), model, options, _cancellation.CancellationToken.None);
});
(0, _editorExtensions.registerLanguageCommand)('_executeFormatOnTypeProvider', function (accessor, args) {
  var resource = args.resource,
      position = args.position,
      ch = args.ch,
      options = args.options;

  if (!(resource instanceof _uri.URI) || !_position.Position.isIPosition(position) || typeof ch !== 'string') {
    throw (0, _errors.illegalArgument)();
  }

  var model = accessor.get(_modelService.IModelService).getModel(resource);

  if (!model) {
    throw (0, _errors.illegalArgument)('resource');
  }

  return getOnTypeFormattingEdits(accessor.get(_editorWorkerService.IEditorWorkerService), model, _position.Position.lift(position), ch, options);
});
},{"../../../base/browser/ui/aria/aria.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria.js","../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js","../../browser/core/editorState.js":"../node_modules/monaco-editor/esm/vs/editor/browser/core/editorState.js","../../browser/editorBrowser.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorBrowser.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../common/services/editorWorkerService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/editorWorkerService.js","../../common/services/modelService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js","./formattingEdit.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/format/formattingEdit.js","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../platform/extensions/common/extensions.js":"../node_modules/monaco-editor/esm/vs/platform/extensions/common/extensions.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../base/common/linkedList.js":"../node_modules/monaco-editor/esm/vs/base/common/linkedList.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/format/formatActions.js":[function(require,module,exports) {
"use strict";

var _arrays = require("../../../base/common/arrays.js");

var _cancellation = require("../../../base/common/cancellation.js");

var _keyCodes = require("../../../base/common/keyCodes.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _codeEditorService = require("../../browser/services/codeEditorService.js");

var _characterClassifier = require("../../common/core/characterClassifier.js");

var _range = require("../../common/core/range.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _modes = require("../../common/modes.js");

var _editorWorkerService = require("../../common/services/editorWorkerService.js");

var _format = require("./format.js");

var _formattingEdit = require("./formattingEdit.js");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _commands = require("../../../platform/commands/common/commands.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _errors = require("../../../base/common/errors.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var FormatOnType =
/** @class */
function () {
  function FormatOnType(editor, _workerService) {
    var _this = this;

    this._workerService = _workerService;
    this._callOnDispose = new _lifecycle.DisposableStore();
    this._callOnModel = new _lifecycle.DisposableStore();
    this._editor = editor;

    this._callOnDispose.add(editor.onDidChangeConfiguration(function () {
      return _this._update();
    }));

    this._callOnDispose.add(editor.onDidChangeModel(function () {
      return _this._update();
    }));

    this._callOnDispose.add(editor.onDidChangeModelLanguage(function () {
      return _this._update();
    }));

    this._callOnDispose.add(_modes.OnTypeFormattingEditProviderRegistry.onDidChange(this._update, this));
  }

  FormatOnType.prototype.dispose = function () {
    this._callOnDispose.dispose();

    this._callOnModel.dispose();
  };

  FormatOnType.prototype._update = function () {
    var _this = this; // clean up


    this._callOnModel.clear(); // we are disabled


    if (!this._editor.getOption(37
    /* formatOnType */
    )) {
      return;
    } // no model


    if (!this._editor.hasModel()) {
      return;
    }

    var model = this._editor.getModel(); // no support


    var support = _modes.OnTypeFormattingEditProviderRegistry.ordered(model)[0];

    if (!support || !support.autoFormatTriggerCharacters) {
      return;
    } // register typing listeners that will trigger the format


    var triggerChars = new _characterClassifier.CharacterSet();

    for (var _i = 0, _a = support.autoFormatTriggerCharacters; _i < _a.length; _i++) {
      var ch = _a[_i];
      triggerChars.add(ch.charCodeAt(0));
    }

    this._callOnModel.add(this._editor.onDidType(function (text) {
      var lastCharCode = text.charCodeAt(text.length - 1);

      if (triggerChars.has(lastCharCode)) {
        _this._trigger(String.fromCharCode(lastCharCode));
      }
    }));
  };

  FormatOnType.prototype._trigger = function (ch) {
    var _this = this;

    if (!this._editor.hasModel()) {
      return;
    }

    if (this._editor.getSelections().length > 1) {
      return;
    }

    var model = this._editor.getModel();

    var position = this._editor.getPosition();

    var canceled = false; // install a listener that checks if edits happens before the
    // position on which we format right now. If so, we won't
    // apply the format edits

    var unbind = this._editor.onDidChangeModelContent(function (e) {
      if (e.isFlush) {
        // a model.setValue() was called
        // cancel only once
        canceled = true;
        unbind.dispose();
        return;
      }

      for (var i = 0, len = e.changes.length; i < len; i++) {
        var change = e.changes[i];

        if (change.range.endLineNumber <= position.lineNumber) {
          // cancel only once
          canceled = true;
          unbind.dispose();
          return;
        }
      }
    });

    (0, _format.getOnTypeFormattingEdits)(this._workerService, model, position, ch, model.getFormattingOptions()).then(function (edits) {
      unbind.dispose();

      if (canceled) {
        return;
      }

      if ((0, _arrays.isNonEmptyArray)(edits)) {
        _formattingEdit.FormattingEdit.execute(_this._editor, edits);

        (0, _format.alertFormattingEdits)(edits);
      }
    }, function (err) {
      unbind.dispose();
      throw err;
    });
  };

  FormatOnType.ID = 'editor.contrib.autoFormat';
  FormatOnType = __decorate([__param(1, _editorWorkerService.IEditorWorkerService)], FormatOnType);
  return FormatOnType;
}();

var FormatOnPaste =
/** @class */
function () {
  function FormatOnPaste(editor, _instantiationService) {
    var _this = this;

    this.editor = editor;
    this._instantiationService = _instantiationService;
    this._callOnDispose = new _lifecycle.DisposableStore();
    this._callOnModel = new _lifecycle.DisposableStore();

    this._callOnDispose.add(editor.onDidChangeConfiguration(function () {
      return _this._update();
    }));

    this._callOnDispose.add(editor.onDidChangeModel(function () {
      return _this._update();
    }));

    this._callOnDispose.add(editor.onDidChangeModelLanguage(function () {
      return _this._update();
    }));

    this._callOnDispose.add(_modes.DocumentRangeFormattingEditProviderRegistry.onDidChange(this._update, this));
  }

  FormatOnPaste.prototype.dispose = function () {
    this._callOnDispose.dispose();

    this._callOnModel.dispose();
  };

  FormatOnPaste.prototype._update = function () {
    var _this = this; // clean up


    this._callOnModel.clear(); // we are disabled


    if (!this.editor.getOption(36
    /* formatOnPaste */
    )) {
      return;
    } // no model


    if (!this.editor.hasModel()) {
      return;
    } // no formatter


    if (!_modes.DocumentRangeFormattingEditProviderRegistry.has(this.editor.getModel())) {
      return;
    }

    this._callOnModel.add(this.editor.onDidPaste(function (range) {
      return _this._trigger(range);
    }));
  };

  FormatOnPaste.prototype._trigger = function (range) {
    if (!this.editor.hasModel()) {
      return;
    }

    if (this.editor.getSelections().length > 1) {
      return;
    }

    this._instantiationService.invokeFunction(_format.formatDocumentRangeWithSelectedProvider, this.editor, range, 2
    /* Silent */
    , _cancellation.CancellationToken.None).catch(_errors.onUnexpectedError);
  };

  FormatOnPaste.ID = 'editor.contrib.formatOnPaste';
  FormatOnPaste = __decorate([__param(1, _instantiation.IInstantiationService)], FormatOnPaste);
  return FormatOnPaste;
}();

var FormatDocumentAction =
/** @class */
function (_super) {
  __extends(FormatDocumentAction, _super);

  function FormatDocumentAction() {
    return _super.call(this, {
      id: 'editor.action.formatDocument',
      label: nls.localize('formatDocument.label', "Format Document"),
      alias: 'Format Document',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, _editorContextKeys.EditorContextKeys.hasDocumentFormattingProvider),
      kbOpts: {
        kbExpr: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.editorTextFocus, _editorContextKeys.EditorContextKeys.hasDocumentFormattingProvider),
        primary: 1024
        /* Shift */
        | 512
        /* Alt */
        | 36
        /* KEY_F */
        ,
        linux: {
          primary: 2048
          /* CtrlCmd */
          | 1024
          /* Shift */
          | 39
          /* KEY_I */

        },
        weight: 100
        /* EditorContrib */

      },
      contextMenuOpts: {
        when: _editorContextKeys.EditorContextKeys.hasDocumentFormattingProvider,
        group: '1_modification',
        order: 1.3
      }
    }) || this;
  }

  FormatDocumentAction.prototype.run = function (accessor, editor) {
    return __awaiter(this, void 0, void 0, function () {
      var instaService;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!editor.hasModel()) return [3
            /*break*/
            , 2];
            instaService = accessor.get(_instantiation.IInstantiationService);
            return [4
            /*yield*/
            , instaService.invokeFunction(_format.formatDocumentWithSelectedProvider, editor, 1
            /* Explicit */
            , _cancellation.CancellationToken.None)];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return FormatDocumentAction;
}(_editorExtensions.EditorAction);

var FormatSelectionAction =
/** @class */
function (_super) {
  __extends(FormatSelectionAction, _super);

  function FormatSelectionAction() {
    return _super.call(this, {
      id: 'editor.action.formatSelection',
      label: nls.localize('formatSelection.label', "Format Selection"),
      alias: 'Format Selection',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, _editorContextKeys.EditorContextKeys.hasDocumentSelectionFormattingProvider),
      kbOpts: {
        kbExpr: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.editorTextFocus, _editorContextKeys.EditorContextKeys.hasDocumentSelectionFormattingProvider),
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 36
        /* KEY_F */
        ),
        weight: 100
        /* EditorContrib */

      },
      contextMenuOpts: {
        when: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.hasDocumentSelectionFormattingProvider, _editorContextKeys.EditorContextKeys.hasNonEmptySelection),
        group: '1_modification',
        order: 1.31
      }
    }) || this;
  }

  FormatSelectionAction.prototype.run = function (accessor, editor) {
    return __awaiter(this, void 0, void 0, function () {
      var instaService, model, range;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!editor.hasModel()) {
              return [2
              /*return*/
              ];
            }

            instaService = accessor.get(_instantiation.IInstantiationService);
            model = editor.getModel();
            range = editor.getSelection();

            if (range.isEmpty()) {
              range = new _range.Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber));
            }

            return [4
            /*yield*/
            , instaService.invokeFunction(_format.formatDocumentRangeWithSelectedProvider, editor, range, 1
            /* Explicit */
            , _cancellation.CancellationToken.None)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return FormatSelectionAction;
}(_editorExtensions.EditorAction);

(0, _editorExtensions.registerEditorContribution)(FormatOnType.ID, FormatOnType);
(0, _editorExtensions.registerEditorContribution)(FormatOnPaste.ID, FormatOnPaste);
(0, _editorExtensions.registerEditorAction)(FormatDocumentAction);
(0, _editorExtensions.registerEditorAction)(FormatSelectionAction); // this is the old format action that does both (format document OR format selection)
// and we keep it here such that existing keybinding configurations etc will still work

_commands.CommandsRegistry.registerCommand('editor.action.format', function (accessor) {
  return __awaiter(void 0, void 0, void 0, function () {
    var editor, commandService;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          editor = accessor.get(_codeEditorService.ICodeEditorService).getFocusedCodeEditor();

          if (!editor || !editor.hasModel()) {
            return [2
            /*return*/
            ];
          }

          commandService = accessor.get(_commands.ICommandService);
          if (!editor.getSelection().isEmpty()) return [3
          /*break*/
          , 2];
          return [4
          /*yield*/
          , commandService.executeCommand('editor.action.formatDocument')];

        case 1:
          _a.sent();

          return [3
          /*break*/
          , 4];

        case 2:
          return [4
          /*yield*/
          , commandService.executeCommand('editor.action.formatSelection')];

        case 3:
          _a.sent();

          _a.label = 4;

        case 4:
          return [2
          /*return*/
          ];
      }
    });
  });
});
},{"../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/keyCodes.js":"../node_modules/monaco-editor/esm/vs/base/common/keyCodes.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../browser/services/codeEditorService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService.js","../../common/core/characterClassifier.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../common/services/editorWorkerService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/editorWorkerService.js","./format.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/format/format.js","./formattingEdit.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/format/formattingEdit.js","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../platform/commands/common/commands.js":"../node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/peekView/media/peekViewWidget.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/browser/widget/embeddedCodeEditorWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EmbeddedCodeEditorWidget = void 0;

var objects = _interopRequireWildcard(require("../../../base/common/objects.js"));

var _codeEditorService = require("../services/codeEditorService.js");

var _codeEditorWidget = require("./codeEditorWidget.js");

var _commands = require("../../../platform/commands/common/commands.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _notification = require("../../../platform/notification/common/notification.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

var _accessibility = require("../../../platform/accessibility/common/accessibility.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var EmbeddedCodeEditorWidget =
/** @class */
function (_super) {
  __extends(EmbeddedCodeEditorWidget, _super);

  function EmbeddedCodeEditorWidget(domElement, options, parentEditor, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService) {
    var _this = _super.call(this, domElement, parentEditor.getRawOptions(), {}, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService) || this;

    _this._parentEditor = parentEditor;
    _this._overwriteOptions = options; // Overwrite parent's options

    _super.prototype.updateOptions.call(_this, _this._overwriteOptions);

    _this._register(parentEditor.onDidChangeConfiguration(function (e) {
      return _this._onParentConfigurationChanged(e);
    }));

    return _this;
  }

  EmbeddedCodeEditorWidget.prototype.getParentEditor = function () {
    return this._parentEditor;
  };

  EmbeddedCodeEditorWidget.prototype._onParentConfigurationChanged = function (e) {
    _super.prototype.updateOptions.call(this, this._parentEditor.getRawOptions());

    _super.prototype.updateOptions.call(this, this._overwriteOptions);
  };

  EmbeddedCodeEditorWidget.prototype.updateOptions = function (newOptions) {
    objects.mixin(this._overwriteOptions, newOptions, true);

    _super.prototype.updateOptions.call(this, this._overwriteOptions);
  };

  EmbeddedCodeEditorWidget = __decorate([__param(3, _instantiation.IInstantiationService), __param(4, _codeEditorService.ICodeEditorService), __param(5, _commands.ICommandService), __param(6, _contextkey.IContextKeyService), __param(7, _themeService.IThemeService), __param(8, _notification.INotificationService), __param(9, _accessibility.IAccessibilityService)], EmbeddedCodeEditorWidget);
  return EmbeddedCodeEditorWidget;
}(_codeEditorWidget.CodeEditorWidget);

exports.EmbeddedCodeEditorWidget = EmbeddedCodeEditorWidget;
},{"../../../base/common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js","../services/codeEditorService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService.js","./codeEditorWidget.js":"../node_modules/monaco-editor/esm/vs/editor/browser/widget/codeEditorWidget.js","../../../platform/commands/common/commands.js":"../node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../platform/notification/common/notification.js":"../node_modules/monaco-editor/esm/vs/platform/notification/common/notification.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../platform/accessibility/common/accessibility.js":"../node_modules/monaco-editor/esm/vs/platform/accessibility/common/accessibility.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/zoneWidget/zoneWidget.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/common/idGenerator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultGenerator = exports.IdGenerator = void 0;

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var IdGenerator =
/** @class */
function () {
  function IdGenerator(prefix) {
    this._prefix = prefix;
    this._lastId = 0;
  }

  IdGenerator.prototype.nextId = function () {
    return this._prefix + ++this._lastId;
  };

  return IdGenerator;
}();

exports.IdGenerator = IdGenerator;
var defaultGenerator = new IdGenerator('id#');
exports.defaultGenerator = defaultGenerator;
},{}],"../node_modules/monaco-editor/esm/vs/editor/contrib/zoneWidget/zoneWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ZoneWidget = exports.OverlayWidgetDelegate = exports.ViewZoneDelegate = void 0;

require("./zoneWidget.css");

var dom = _interopRequireWildcard(require("../../../base/browser/dom.js"));

var _sash = require("../../../base/browser/ui/sash/sash.js");

var _color = require("../../../base/common/color.js");

var _idGenerator = require("../../../base/common/idGenerator.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var objects = _interopRequireWildcard(require("../../../base/common/objects.js"));

var _range = require("../../common/core/range.js");

var _textModel = require("../../common/model/textModel.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var defaultColor = new _color.Color(new _color.RGBA(0, 122, 204));
var defaultOptions = {
  showArrow: true,
  showFrame: true,
  className: '',
  frameColor: defaultColor,
  arrowColor: defaultColor,
  keepEditorSelection: false
};
var WIDGET_ID = 'vs.editor.contrib.zoneWidget';

var ViewZoneDelegate =
/** @class */
function () {
  function ViewZoneDelegate(domNode, afterLineNumber, afterColumn, heightInLines, onDomNodeTop, onComputedHeight) {
    this.id = ''; // A valid zone id should be greater than 0

    this.domNode = domNode;
    this.afterLineNumber = afterLineNumber;
    this.afterColumn = afterColumn;
    this.heightInLines = heightInLines;
    this._onDomNodeTop = onDomNodeTop;
    this._onComputedHeight = onComputedHeight;
  }

  ViewZoneDelegate.prototype.onDomNodeTop = function (top) {
    this._onDomNodeTop(top);
  };

  ViewZoneDelegate.prototype.onComputedHeight = function (height) {
    this._onComputedHeight(height);
  };

  return ViewZoneDelegate;
}();

exports.ViewZoneDelegate = ViewZoneDelegate;

var OverlayWidgetDelegate =
/** @class */
function () {
  function OverlayWidgetDelegate(id, domNode) {
    this._id = id;
    this._domNode = domNode;
  }

  OverlayWidgetDelegate.prototype.getId = function () {
    return this._id;
  };

  OverlayWidgetDelegate.prototype.getDomNode = function () {
    return this._domNode;
  };

  OverlayWidgetDelegate.prototype.getPosition = function () {
    return null;
  };

  return OverlayWidgetDelegate;
}();

exports.OverlayWidgetDelegate = OverlayWidgetDelegate;

var Arrow =
/** @class */
function () {
  function Arrow(_editor) {
    this._editor = _editor;
    this._ruleName = Arrow._IdGenerator.nextId();
    this._decorations = [];
    this._color = null;
    this._height = -1; //
  }

  Arrow.prototype.dispose = function () {
    this.hide();
    dom.removeCSSRulesContainingSelector(this._ruleName);
  };

  Object.defineProperty(Arrow.prototype, "color", {
    set: function (value) {
      if (this._color !== value) {
        this._color = value;

        this._updateStyle();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Arrow.prototype, "height", {
    set: function (value) {
      if (this._height !== value) {
        this._height = value;

        this._updateStyle();
      }
    },
    enumerable: true,
    configurable: true
  });

  Arrow.prototype._updateStyle = function () {
    dom.removeCSSRulesContainingSelector(this._ruleName);
    dom.createCSSRule(".monaco-editor " + this._ruleName, "border-style: solid; border-color: transparent; border-bottom-color: " + this._color + "; border-width: " + this._height + "px; bottom: -" + this._height + "px; margin-left: -" + this._height + "px; ");
  };

  Arrow.prototype.show = function (where) {
    this._decorations = this._editor.deltaDecorations(this._decorations, [{
      range: _range.Range.fromPositions(where),
      options: {
        className: this._ruleName,
        stickiness: 1
        /* NeverGrowsWhenTypingAtEdges */

      }
    }]);
  };

  Arrow.prototype.hide = function () {
    this._editor.deltaDecorations(this._decorations, []);
  };

  Arrow._IdGenerator = new _idGenerator.IdGenerator('.arrow-decoration-');
  return Arrow;
}();

var ZoneWidget =
/** @class */
function () {
  function ZoneWidget(editor, options) {
    var _this = this;

    if (options === void 0) {
      options = {};
    }

    this._arrow = null;
    this._overlayWidget = null;
    this._resizeSash = null;
    this._positionMarkerId = [];
    this._viewZone = null;
    this._disposables = new _lifecycle.DisposableStore();
    this.container = null;
    this._isShowing = false;
    this.editor = editor;
    this.options = objects.deepClone(options);
    objects.mixin(this.options, defaultOptions, false);
    this.domNode = document.createElement('div');

    if (!this.options.isAccessible) {
      this.domNode.setAttribute('aria-hidden', 'true');
      this.domNode.setAttribute('role', 'presentation');
    }

    this._disposables.add(this.editor.onDidLayoutChange(function (info) {
      var width = _this._getWidth(info);

      _this.domNode.style.width = width + 'px';
      _this.domNode.style.left = _this._getLeft(info) + 'px';

      _this._onWidth(width);
    }));
  }

  ZoneWidget.prototype.dispose = function () {
    var _this = this;

    if (this._overlayWidget) {
      this.editor.removeOverlayWidget(this._overlayWidget);
      this._overlayWidget = null;
    }

    if (this._viewZone) {
      this.editor.changeViewZones(function (accessor) {
        if (_this._viewZone) {
          accessor.removeZone(_this._viewZone.id);
        }

        _this._viewZone = null;
      });
    }

    this.editor.deltaDecorations(this._positionMarkerId, []);
    this._positionMarkerId = [];

    this._disposables.dispose();
  };

  ZoneWidget.prototype.create = function () {
    dom.addClass(this.domNode, 'zone-widget');

    if (this.options.className) {
      dom.addClass(this.domNode, this.options.className);
    }

    this.container = document.createElement('div');
    dom.addClass(this.container, 'zone-widget-container');
    this.domNode.appendChild(this.container);

    if (this.options.showArrow) {
      this._arrow = new Arrow(this.editor);

      this._disposables.add(this._arrow);
    }

    this._fillContainer(this.container);

    this._initSash();

    this._applyStyles();
  };

  ZoneWidget.prototype.style = function (styles) {
    if (styles.frameColor) {
      this.options.frameColor = styles.frameColor;
    }

    if (styles.arrowColor) {
      this.options.arrowColor = styles.arrowColor;
    }

    this._applyStyles();
  };

  ZoneWidget.prototype._applyStyles = function () {
    if (this.container && this.options.frameColor) {
      var frameColor = this.options.frameColor.toString();
      this.container.style.borderTopColor = frameColor;
      this.container.style.borderBottomColor = frameColor;
    }

    if (this._arrow && this.options.arrowColor) {
      var arrowColor = this.options.arrowColor.toString();
      this._arrow.color = arrowColor;
    }
  };

  ZoneWidget.prototype._getWidth = function (info) {
    return info.width - info.minimapWidth - info.verticalScrollbarWidth;
  };

  ZoneWidget.prototype._getLeft = function (info) {
    // If minimap is to the left, we move beyond it
    if (info.minimapWidth > 0 && info.minimapLeft === 0) {
      return info.minimapWidth;
    }

    return 0;
  };

  ZoneWidget.prototype._onViewZoneTop = function (top) {
    this.domNode.style.top = top + 'px';
  };

  ZoneWidget.prototype._onViewZoneHeight = function (height) {
    this.domNode.style.height = height + "px";

    if (this.container) {
      var containerHeight = height - this._decoratingElementsHeight();

      this.container.style.height = containerHeight + "px";
      var layoutInfo = this.editor.getLayoutInfo();

      this._doLayout(containerHeight, this._getWidth(layoutInfo));
    }

    if (this._resizeSash) {
      this._resizeSash.layout();
    }
  };

  Object.defineProperty(ZoneWidget.prototype, "position", {
    get: function () {
      var id = this._positionMarkerId[0];

      if (!id) {
        return undefined;
      }

      var model = this.editor.getModel();

      if (!model) {
        return undefined;
      }

      var range = model.getDecorationRange(id);

      if (!range) {
        return undefined;
      }

      return range.getStartPosition();
    },
    enumerable: true,
    configurable: true
  });

  ZoneWidget.prototype.show = function (rangeOrPos, heightInLines) {
    var range = _range.Range.isIRange(rangeOrPos) ? _range.Range.lift(rangeOrPos) : _range.Range.fromPositions(rangeOrPos);
    this._isShowing = true;

    this._showImpl(range, heightInLines);

    this._isShowing = false;
    this._positionMarkerId = this.editor.deltaDecorations(this._positionMarkerId, [{
      range: range,
      options: _textModel.ModelDecorationOptions.EMPTY
    }]);
  };

  ZoneWidget.prototype.hide = function () {
    var _this = this;

    if (this._viewZone) {
      this.editor.changeViewZones(function (accessor) {
        if (_this._viewZone) {
          accessor.removeZone(_this._viewZone.id);
        }
      });
      this._viewZone = null;
    }

    if (this._overlayWidget) {
      this.editor.removeOverlayWidget(this._overlayWidget);
      this._overlayWidget = null;
    }

    if (this._arrow) {
      this._arrow.hide();
    }
  };

  ZoneWidget.prototype._decoratingElementsHeight = function () {
    var lineHeight = this.editor.getOption(47
    /* lineHeight */
    );
    var result = 0;

    if (this.options.showArrow) {
      var arrowHeight = Math.round(lineHeight / 3);
      result += 2 * arrowHeight;
    }

    if (this.options.showFrame) {
      var frameThickness = Math.round(lineHeight / 9);
      result += 2 * frameThickness;
    }

    return result;
  };

  ZoneWidget.prototype._showImpl = function (where, heightInLines) {
    var _this = this;

    var position = where.getStartPosition();
    var layoutInfo = this.editor.getLayoutInfo();

    var width = this._getWidth(layoutInfo);

    this.domNode.style.width = width + "px";
    this.domNode.style.left = this._getLeft(layoutInfo) + 'px'; // Render the widget as zone (rendering) and widget (lifecycle)

    var viewZoneDomNode = document.createElement('div');
    viewZoneDomNode.style.overflow = 'hidden';
    var lineHeight = this.editor.getOption(47
    /* lineHeight */
    ); // adjust heightInLines to viewport

    var maxHeightInLines = this.editor.getLayoutInfo().height / lineHeight * 0.8;

    if (heightInLines >= maxHeightInLines) {
      heightInLines = maxHeightInLines;
    }

    var arrowHeight = 0;
    var frameThickness = 0; // Render the arrow one 1/3 of an editor line height

    if (this._arrow && this.options.showArrow) {
      arrowHeight = Math.round(lineHeight / 3);
      this._arrow.height = arrowHeight;

      this._arrow.show(position);
    } // Render the frame as 1/9 of an editor line height


    if (this.options.showFrame) {
      frameThickness = Math.round(lineHeight / 9);
    } // insert zone widget


    this.editor.changeViewZones(function (accessor) {
      if (_this._viewZone) {
        accessor.removeZone(_this._viewZone.id);
      }

      if (_this._overlayWidget) {
        _this.editor.removeOverlayWidget(_this._overlayWidget);

        _this._overlayWidget = null;
      }

      _this.domNode.style.top = '-1000px';
      _this._viewZone = new ViewZoneDelegate(viewZoneDomNode, position.lineNumber, position.column, heightInLines, function (top) {
        return _this._onViewZoneTop(top);
      }, function (height) {
        return _this._onViewZoneHeight(height);
      });
      _this._viewZone.id = accessor.addZone(_this._viewZone);
      _this._overlayWidget = new OverlayWidgetDelegate(WIDGET_ID + _this._viewZone.id, _this.domNode);

      _this.editor.addOverlayWidget(_this._overlayWidget);
    });

    if (this.container && this.options.showFrame) {
      var width_1 = this.options.frameWidth ? this.options.frameWidth : frameThickness;
      this.container.style.borderTopWidth = width_1 + 'px';
      this.container.style.borderBottomWidth = width_1 + 'px';
    }

    var containerHeight = heightInLines * lineHeight - this._decoratingElementsHeight();

    if (this.container) {
      this.container.style.top = arrowHeight + 'px';
      this.container.style.height = containerHeight + 'px';
      this.container.style.overflow = 'hidden';
    }

    this._doLayout(containerHeight, width);

    if (!this.options.keepEditorSelection) {
      this.editor.setSelection(where);
    }

    var model = this.editor.getModel();

    if (model) {
      var revealLine = where.endLineNumber + 1;

      if (revealLine <= model.getLineCount()) {
        // reveal line below the zone widget
        this.revealLine(revealLine, false);
      } else {
        // reveal last line atop
        this.revealLine(model.getLineCount(), true);
      }
    }
  };

  ZoneWidget.prototype.revealLine = function (lineNumber, isLastLine) {
    if (isLastLine) {
      this.editor.revealLineInCenter(lineNumber, 0
      /* Smooth */
      );
    } else {
      this.editor.revealLine(lineNumber, 0
      /* Smooth */
      );
    }
  };

  ZoneWidget.prototype.setCssClass = function (className, classToReplace) {
    if (!this.container) {
      return;
    }

    if (classToReplace) {
      this.container.classList.remove(classToReplace);
    }

    dom.addClass(this.container, className);
  };

  ZoneWidget.prototype._onWidth = function (widthInPixel) {// implement in subclass
  };

  ZoneWidget.prototype._doLayout = function (heightInPixel, widthInPixel) {// implement in subclass
  };

  ZoneWidget.prototype._relayout = function (newHeightInLines) {
    var _this = this;

    if (this._viewZone && this._viewZone.heightInLines !== newHeightInLines) {
      this.editor.changeViewZones(function (accessor) {
        if (_this._viewZone) {
          _this._viewZone.heightInLines = newHeightInLines;
          accessor.layoutZone(_this._viewZone.id);
        }
      });
    }
  }; // --- sash


  ZoneWidget.prototype._initSash = function () {
    var _this = this;

    if (this._resizeSash) {
      return;
    }

    this._resizeSash = this._disposables.add(new _sash.Sash(this.domNode, this, {
      orientation: 1
      /* HORIZONTAL */

    }));

    if (!this.options.isResizeable) {
      this._resizeSash.hide();

      this._resizeSash.state = 0
      /* Disabled */
      ;
    }

    var data;

    this._disposables.add(this._resizeSash.onDidStart(function (e) {
      if (_this._viewZone) {
        data = {
          startY: e.startY,
          heightInLines: _this._viewZone.heightInLines
        };
      }
    }));

    this._disposables.add(this._resizeSash.onDidEnd(function () {
      data = undefined;
    }));

    this._disposables.add(this._resizeSash.onDidChange(function (evt) {
      if (data) {
        var lineDelta = (evt.currentY - data.startY) / _this.editor.getOption(47
        /* lineHeight */
        );

        var roundedLineDelta = lineDelta < 0 ? Math.ceil(lineDelta) : Math.floor(lineDelta);
        var newHeightInLines = data.heightInLines + roundedLineDelta;

        if (newHeightInLines > 5 && newHeightInLines < 35) {
          _this._relayout(newHeightInLines);
        }
      }
    }));
  };

  ZoneWidget.prototype.getHorizontalSashLeft = function () {
    return 0;
  };

  ZoneWidget.prototype.getHorizontalSashTop = function () {
    return (this.domNode.style.height === null ? 0 : parseInt(this.domNode.style.height)) - this._decoratingElementsHeight() / 2;
  };

  ZoneWidget.prototype.getHorizontalSashWidth = function () {
    var layoutInfo = this.editor.getLayoutInfo();
    return layoutInfo.width - layoutInfo.minimapWidth;
  };

  return ZoneWidget;
}();

exports.ZoneWidget = ZoneWidget;
},{"./zoneWidget.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/zoneWidget/zoneWidget.css","../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/browser/ui/sash/sash.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/sash/sash.js","../../../base/common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../base/common/idGenerator.js":"../node_modules/monaco-editor/esm/vs/base/common/idGenerator.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/peekView/peekView.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOuterEditor = getOuterEditor;
exports.peekViewEditorMatchHighlightBorder = exports.peekViewEditorMatchHighlight = exports.peekViewResultsMatchHighlight = exports.peekViewEditorGutterBackground = exports.peekViewEditorBackground = exports.peekViewResultsSelectionForeground = exports.peekViewResultsSelectionBackground = exports.peekViewResultsFileForeground = exports.peekViewResultsMatchForeground = exports.peekViewResultsBackground = exports.peekViewBorder = exports.peekViewTitleInfoForeground = exports.peekViewTitleForeground = exports.peekViewTitleBackground = exports.PeekViewWidget = exports.PeekContext = exports.IPeekViewService = void 0;

require("./media/peekViewWidget.css");

var dom = _interopRequireWildcard(require("../../../base/browser/dom.js"));

var _actionbar = require("../../../base/browser/ui/actionbar/actionbar.js");

var _actions = require("../../../base/common/actions.js");

var _color = require("../../../base/common/color.js");

var _event = require("../../../base/common/event.js");

var objects = _interopRequireWildcard(require("../../../base/common/objects.js"));

var strings = _interopRequireWildcard(require("../../../base/common/strings.js"));

var _codeEditorService = require("../../browser/services/codeEditorService.js");

var _embeddedCodeEditorWidget = require("../../browser/widget/embeddedCodeEditorWidget.js");

var _zoneWidget = require("../zoneWidget/zoneWidget.js");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _extensions = require("../../../platform/instantiation/common/extensions.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var IPeekViewService = (0, _instantiation.createDecorator)('IPeekViewService');
exports.IPeekViewService = IPeekViewService;
(0, _extensions.registerSingleton)(IPeekViewService,
/** @class */
function () {
  function class_1() {
    this._widgets = new Map();
  }

  class_1.prototype.addExclusiveWidget = function (editor, widget) {
    var _this = this;

    var existing = this._widgets.get(editor);

    if (existing) {
      existing.listener.dispose();
      existing.widget.dispose();
    }

    var remove = function () {
      var data = _this._widgets.get(editor);

      if (data && data.widget === widget) {
        data.listener.dispose();

        _this._widgets.delete(editor);
      }
    };

    this._widgets.set(editor, {
      widget: widget,
      listener: widget.onDidClose(remove)
    });
  };

  return class_1;
}());
var PeekContext;
exports.PeekContext = PeekContext;

(function (PeekContext) {
  PeekContext.inPeekEditor = new _contextkey.RawContextKey('inReferenceSearchEditor', true);
  PeekContext.notInPeekEditor = PeekContext.inPeekEditor.toNegated();
})(PeekContext || (exports.PeekContext = PeekContext = {}));

var PeekContextController =
/** @class */
function () {
  function PeekContextController(editor, contextKeyService) {
    if (editor instanceof _embeddedCodeEditorWidget.EmbeddedCodeEditorWidget) {
      PeekContext.inPeekEditor.bindTo(contextKeyService);
    }
  }

  PeekContextController.prototype.dispose = function () {};

  PeekContextController.ID = 'editor.contrib.referenceController';
  PeekContextController = __decorate([__param(1, _contextkey.IContextKeyService)], PeekContextController);
  return PeekContextController;
}();

(0, _editorExtensions.registerEditorContribution)(PeekContextController.ID, PeekContextController);

function getOuterEditor(accessor) {
  var editor = accessor.get(_codeEditorService.ICodeEditorService).getFocusedCodeEditor();

  if (editor instanceof _embeddedCodeEditorWidget.EmbeddedCodeEditorWidget) {
    return editor.getParentEditor();
  }

  return editor;
}

var defaultOptions = {
  headerBackgroundColor: _color.Color.white,
  primaryHeadingColor: _color.Color.fromHex('#333333'),
  secondaryHeadingColor: _color.Color.fromHex('#6c6c6cb3')
};

var PeekViewWidget =
/** @class */
function (_super) {
  __extends(PeekViewWidget, _super);

  function PeekViewWidget(editor, options) {
    if (options === void 0) {
      options = {};
    }

    var _this = _super.call(this, editor, options) || this;

    _this._onDidClose = new _event.Emitter();
    _this.onDidClose = _this._onDidClose.event;
    objects.mixin(_this.options, defaultOptions, false);
    return _this;
  }

  PeekViewWidget.prototype.dispose = function () {
    _super.prototype.dispose.call(this);

    this._onDidClose.fire(this);
  };

  PeekViewWidget.prototype.style = function (styles) {
    var options = this.options;

    if (styles.headerBackgroundColor) {
      options.headerBackgroundColor = styles.headerBackgroundColor;
    }

    if (styles.primaryHeadingColor) {
      options.primaryHeadingColor = styles.primaryHeadingColor;
    }

    if (styles.secondaryHeadingColor) {
      options.secondaryHeadingColor = styles.secondaryHeadingColor;
    }

    _super.prototype.style.call(this, styles);
  };

  PeekViewWidget.prototype._applyStyles = function () {
    _super.prototype._applyStyles.call(this);

    var options = this.options;

    if (this._headElement && options.headerBackgroundColor) {
      this._headElement.style.backgroundColor = options.headerBackgroundColor.toString();
    }

    if (this._primaryHeading && options.primaryHeadingColor) {
      this._primaryHeading.style.color = options.primaryHeadingColor.toString();
    }

    if (this._secondaryHeading && options.secondaryHeadingColor) {
      this._secondaryHeading.style.color = options.secondaryHeadingColor.toString();
    }

    if (this._bodyElement && options.frameColor) {
      this._bodyElement.style.borderColor = options.frameColor.toString();
    }
  };

  PeekViewWidget.prototype._fillContainer = function (container) {
    this.setCssClass('peekview-widget');
    this._headElement = dom.$('.head');
    this._bodyElement = dom.$('.body');

    this._fillHead(this._headElement);

    this._fillBody(this._bodyElement);

    container.appendChild(this._headElement);
    container.appendChild(this._bodyElement);
  };

  PeekViewWidget.prototype._fillHead = function (container) {
    var _this = this;

    var titleElement = dom.$('.peekview-title');
    dom.append(this._headElement, titleElement);
    dom.addStandardDisposableListener(titleElement, 'click', function (event) {
      return _this._onTitleClick(event);
    });

    this._fillTitleIcon(titleElement);

    this._primaryHeading = dom.$('span.filename');
    this._secondaryHeading = dom.$('span.dirname');
    this._metaHeading = dom.$('span.meta');
    dom.append(titleElement, this._primaryHeading, this._secondaryHeading, this._metaHeading);
    var actionsContainer = dom.$('.peekview-actions');
    dom.append(this._headElement, actionsContainer);

    var actionBarOptions = this._getActionBarOptions();

    this._actionbarWidget = new _actionbar.ActionBar(actionsContainer, actionBarOptions);

    this._disposables.add(this._actionbarWidget);

    this._actionbarWidget.push(new _actions.Action('peekview.close', nls.localize('label.close', "Close"), 'codicon-close', true, function () {
      _this.dispose();

      return Promise.resolve();
    }), {
      label: false,
      icon: true
    });
  };

  PeekViewWidget.prototype._fillTitleIcon = function (container) {};

  PeekViewWidget.prototype._getActionBarOptions = function () {
    return {};
  };

  PeekViewWidget.prototype._onTitleClick = function (event) {// implement me
  };

  PeekViewWidget.prototype.setTitle = function (primaryHeading, secondaryHeading) {
    if (this._primaryHeading && this._secondaryHeading) {
      this._primaryHeading.innerHTML = strings.escape(primaryHeading);

      this._primaryHeading.setAttribute('aria-label', primaryHeading);

      if (secondaryHeading) {
        this._secondaryHeading.innerHTML = strings.escape(secondaryHeading);
      } else {
        dom.clearNode(this._secondaryHeading);
      }
    }
  };

  PeekViewWidget.prototype.setMetaTitle = function (value) {
    if (this._metaHeading) {
      if (value) {
        this._metaHeading.innerHTML = strings.escape(value);
        dom.show(this._metaHeading);
      } else {
        dom.hide(this._metaHeading);
      }
    }
  };

  PeekViewWidget.prototype._doLayout = function (heightInPixel, widthInPixel) {
    if (!this._isShowing && heightInPixel < 0) {
      // Looks like the view zone got folded away!
      this.dispose();
      return;
    }

    var headHeight = Math.ceil(this.editor.getOption(47
    /* lineHeight */
    ) * 1.2);
    var bodyHeight = Math.round(heightInPixel - (headHeight + 2
    /* the border-top/bottom width*/
    ));

    this._doLayoutHead(headHeight, widthInPixel);

    this._doLayoutBody(bodyHeight, widthInPixel);
  };

  PeekViewWidget.prototype._doLayoutHead = function (heightInPixel, widthInPixel) {
    if (this._headElement) {
      this._headElement.style.height = heightInPixel + "px";
      this._headElement.style.lineHeight = this._headElement.style.height;
    }
  };

  PeekViewWidget.prototype._doLayoutBody = function (heightInPixel, widthInPixel) {
    if (this._bodyElement) {
      this._bodyElement.style.height = heightInPixel + "px";
    }
  };

  return PeekViewWidget;
}(_zoneWidget.ZoneWidget);

exports.PeekViewWidget = PeekViewWidget;
var peekViewTitleBackground = (0, _colorRegistry.registerColor)('peekViewTitle.background', {
  dark: '#1E1E1E',
  light: '#FFFFFF',
  hc: '#0C141F'
}, nls.localize('peekViewTitleBackground', 'Background color of the peek view title area.'));
exports.peekViewTitleBackground = peekViewTitleBackground;
var peekViewTitleForeground = (0, _colorRegistry.registerColor)('peekViewTitleLabel.foreground', {
  dark: '#FFFFFF',
  light: '#333333',
  hc: '#FFFFFF'
}, nls.localize('peekViewTitleForeground', 'Color of the peek view title.'));
exports.peekViewTitleForeground = peekViewTitleForeground;
var peekViewTitleInfoForeground = (0, _colorRegistry.registerColor)('peekViewTitleDescription.foreground', {
  dark: '#ccccccb3',
  light: '#6c6c6cb3',
  hc: '#FFFFFF99'
}, nls.localize('peekViewTitleInfoForeground', 'Color of the peek view title info.'));
exports.peekViewTitleInfoForeground = peekViewTitleInfoForeground;
var peekViewBorder = (0, _colorRegistry.registerColor)('peekView.border', {
  dark: '#007acc',
  light: '#007acc',
  hc: _colorRegistry.contrastBorder
}, nls.localize('peekViewBorder', 'Color of the peek view borders and arrow.'));
exports.peekViewBorder = peekViewBorder;
var peekViewResultsBackground = (0, _colorRegistry.registerColor)('peekViewResult.background', {
  dark: '#252526',
  light: '#F3F3F3',
  hc: _color.Color.black
}, nls.localize('peekViewResultsBackground', 'Background color of the peek view result list.'));
exports.peekViewResultsBackground = peekViewResultsBackground;
var peekViewResultsMatchForeground = (0, _colorRegistry.registerColor)('peekViewResult.lineForeground', {
  dark: '#bbbbbb',
  light: '#646465',
  hc: _color.Color.white
}, nls.localize('peekViewResultsMatchForeground', 'Foreground color for line nodes in the peek view result list.'));
exports.peekViewResultsMatchForeground = peekViewResultsMatchForeground;
var peekViewResultsFileForeground = (0, _colorRegistry.registerColor)('peekViewResult.fileForeground', {
  dark: _color.Color.white,
  light: '#1E1E1E',
  hc: _color.Color.white
}, nls.localize('peekViewResultsFileForeground', 'Foreground color for file nodes in the peek view result list.'));
exports.peekViewResultsFileForeground = peekViewResultsFileForeground;
var peekViewResultsSelectionBackground = (0, _colorRegistry.registerColor)('peekViewResult.selectionBackground', {
  dark: '#3399ff33',
  light: '#3399ff33',
  hc: null
}, nls.localize('peekViewResultsSelectionBackground', 'Background color of the selected entry in the peek view result list.'));
exports.peekViewResultsSelectionBackground = peekViewResultsSelectionBackground;
var peekViewResultsSelectionForeground = (0, _colorRegistry.registerColor)('peekViewResult.selectionForeground', {
  dark: _color.Color.white,
  light: '#6C6C6C',
  hc: _color.Color.white
}, nls.localize('peekViewResultsSelectionForeground', 'Foreground color of the selected entry in the peek view result list.'));
exports.peekViewResultsSelectionForeground = peekViewResultsSelectionForeground;
var peekViewEditorBackground = (0, _colorRegistry.registerColor)('peekViewEditor.background', {
  dark: '#001F33',
  light: '#F2F8FC',
  hc: _color.Color.black
}, nls.localize('peekViewEditorBackground', 'Background color of the peek view editor.'));
exports.peekViewEditorBackground = peekViewEditorBackground;
var peekViewEditorGutterBackground = (0, _colorRegistry.registerColor)('peekViewEditorGutter.background', {
  dark: peekViewEditorBackground,
  light: peekViewEditorBackground,
  hc: peekViewEditorBackground
}, nls.localize('peekViewEditorGutterBackground', 'Background color of the gutter in the peek view editor.'));
exports.peekViewEditorGutterBackground = peekViewEditorGutterBackground;
var peekViewResultsMatchHighlight = (0, _colorRegistry.registerColor)('peekViewResult.matchHighlightBackground', {
  dark: '#ea5c004d',
  light: '#ea5c004d',
  hc: null
}, nls.localize('peekViewResultsMatchHighlight', 'Match highlight color in the peek view result list.'));
exports.peekViewResultsMatchHighlight = peekViewResultsMatchHighlight;
var peekViewEditorMatchHighlight = (0, _colorRegistry.registerColor)('peekViewEditor.matchHighlightBackground', {
  dark: '#ff8f0099',
  light: '#f5d802de',
  hc: null
}, nls.localize('peekViewEditorMatchHighlight', 'Match highlight color in the peek view editor.'));
exports.peekViewEditorMatchHighlight = peekViewEditorMatchHighlight;
var peekViewEditorMatchHighlightBorder = (0, _colorRegistry.registerColor)('peekViewEditor.matchHighlightBorder', {
  dark: null,
  light: null,
  hc: _colorRegistry.activeContrastBorder
}, nls.localize('peekViewEditorMatchHighlightBorder', 'Match highlight border in the peek view editor.'));
exports.peekViewEditorMatchHighlightBorder = peekViewEditorMatchHighlightBorder;
},{"./media/peekViewWidget.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/peekView/media/peekViewWidget.css","../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/browser/ui/actionbar/actionbar.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js","../../../base/common/actions.js":"../node_modules/monaco-editor/esm/vs/base/common/actions.js","../../../base/common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../browser/services/codeEditorService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService.js","../../browser/widget/embeddedCodeEditorWidget.js":"../node_modules/monaco-editor/esm/vs/editor/browser/widget/embeddedCodeEditorWidget.js","../zoneWidget/zoneWidget.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/zoneWidget/zoneWidget.js","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../platform/instantiation/common/extensions.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/extensions.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/referencesModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReferencesModel = exports.FileReferences = exports.FilePreview = exports.OneReference = void 0;

var _nls = require("../../../nls.js");

var _event = require("../../../base/common/event.js");

var _resources = require("../../../base/common/resources.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var strings = _interopRequireWildcard(require("../../../base/common/strings.js"));

var _idGenerator = require("../../../base/common/idGenerator.js");

var _range2 = require("../../common/core/range.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var OneReference =
/** @class */
function () {
  function OneReference(isProviderFirst, parent, _range, _rangeCallback) {
    this.isProviderFirst = isProviderFirst;
    this.parent = parent;
    this._range = _range;
    this._rangeCallback = _rangeCallback;
    this.id = _idGenerator.defaultGenerator.nextId();
  }

  Object.defineProperty(OneReference.prototype, "uri", {
    get: function () {
      return this.parent.uri;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(OneReference.prototype, "range", {
    get: function () {
      return this._range;
    },
    set: function (value) {
      this._range = value;

      this._rangeCallback(this);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(OneReference.prototype, "ariaMessage", {
    get: function () {
      return (0, _nls.localize)('aria.oneReference', "symbol in {0} on line {1} at column {2}", (0, _resources.basename)(this.uri), this.range.startLineNumber, this.range.startColumn);
    },
    enumerable: true,
    configurable: true
  });
  return OneReference;
}();

exports.OneReference = OneReference;

var FilePreview =
/** @class */
function () {
  function FilePreview(_modelReference) {
    this._modelReference = _modelReference;
  }

  FilePreview.prototype.dispose = function () {
    this._modelReference.dispose();
  };

  FilePreview.prototype.preview = function (range, n) {
    if (n === void 0) {
      n = 8;
    }

    var model = this._modelReference.object.textEditorModel;

    if (!model) {
      return undefined;
    }

    var startLineNumber = range.startLineNumber,
        startColumn = range.startColumn,
        endLineNumber = range.endLineNumber,
        endColumn = range.endColumn;
    var word = model.getWordUntilPosition({
      lineNumber: startLineNumber,
      column: startColumn - n
    });
    var beforeRange = new _range2.Range(startLineNumber, word.startColumn, startLineNumber, startColumn);
    var afterRange = new _range2.Range(endLineNumber, endColumn, endLineNumber, 1073741824
    /* MAX_SAFE_SMALL_INTEGER */
    );
    var before = model.getValueInRange(beforeRange).replace(/^\s+/, '');
    var inside = model.getValueInRange(range);
    var after = model.getValueInRange(afterRange).replace(/\s+$/, '');
    return {
      value: before + inside + after,
      highlight: {
        start: before.length,
        end: before.length + inside.length
      }
    };
  };

  return FilePreview;
}();

exports.FilePreview = FilePreview;

var FileReferences =
/** @class */
function () {
  function FileReferences(parent, uri) {
    this.parent = parent;
    this.uri = uri;
    this.children = [];
  }

  FileReferences.prototype.dispose = function () {
    (0, _lifecycle.dispose)(this._preview);
    this._preview = undefined;
  };

  Object.defineProperty(FileReferences.prototype, "preview", {
    get: function () {
      return this._preview;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FileReferences.prototype, "failure", {
    get: function () {
      return this._loadFailure;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FileReferences.prototype, "ariaMessage", {
    get: function () {
      var len = this.children.length;

      if (len === 1) {
        return (0, _nls.localize)('aria.fileReferences.1', "1 symbol in {0}, full path {1}", (0, _resources.basename)(this.uri), this.uri.fsPath);
      } else {
        return (0, _nls.localize)('aria.fileReferences.N', "{0} symbols in {1}, full path {2}", len, (0, _resources.basename)(this.uri), this.uri.fsPath);
      }
    },
    enumerable: true,
    configurable: true
  });

  FileReferences.prototype.resolve = function (textModelResolverService) {
    var _this = this;

    if (this._resolved) {
      return Promise.resolve(this);
    }

    return Promise.resolve(textModelResolverService.createModelReference(this.uri).then(function (modelReference) {
      var model = modelReference.object;

      if (!model) {
        modelReference.dispose();
        throw new Error();
      }

      _this._preview = new FilePreview(modelReference);
      _this._resolved = true;
      return _this;
    }, function (err) {
      // something wrong here
      _this.children.length = 0;
      _this._resolved = true;
      _this._loadFailure = err;
      return _this;
    }));
  };

  return FileReferences;
}();

exports.FileReferences = FileReferences;

var ReferencesModel =
/** @class */
function () {
  function ReferencesModel(links, title) {
    var _this = this;

    this._disposables = new _lifecycle.DisposableStore();
    this.groups = [];
    this.references = [];
    this._onDidChangeReferenceRange = new _event.Emitter();
    this.onDidChangeReferenceRange = this._onDidChangeReferenceRange.event;
    this._links = links;
    this._title = title; // grouping and sorting

    var providersFirst = links[0];
    links.sort(ReferencesModel._compareReferences);
    var current;

    for (var _i = 0, links_1 = links; _i < links_1.length; _i++) {
      var link = links_1[_i];

      if (!current || current.uri.toString() !== link.uri.toString()) {
        // new group
        current = new FileReferences(this, link.uri);
        this.groups.push(current);
      } // append, check for equality first!


      if (current.children.length === 0 || !_range2.Range.equalsRange(link.range, current.children[current.children.length - 1].range)) {
        var oneRef = new OneReference(providersFirst === link, current, link.targetSelectionRange || link.range, function (ref) {
          return _this._onDidChangeReferenceRange.fire(ref);
        });
        this.references.push(oneRef);
        current.children.push(oneRef);
      }
    }
  }

  ReferencesModel.prototype.dispose = function () {
    (0, _lifecycle.dispose)(this.groups);

    this._disposables.dispose();

    this._onDidChangeReferenceRange.dispose();

    this.groups.length = 0;
  };

  ReferencesModel.prototype.clone = function () {
    return new ReferencesModel(this._links, this._title);
  };

  Object.defineProperty(ReferencesModel.prototype, "title", {
    get: function () {
      return this._title;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReferencesModel.prototype, "isEmpty", {
    get: function () {
      return this.groups.length === 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReferencesModel.prototype, "ariaMessage", {
    get: function () {
      if (this.isEmpty) {
        return (0, _nls.localize)('aria.result.0', "No results found");
      } else if (this.references.length === 1) {
        return (0, _nls.localize)('aria.result.1', "Found 1 symbol in {0}", this.references[0].uri.fsPath);
      } else if (this.groups.length === 1) {
        return (0, _nls.localize)('aria.result.n1', "Found {0} symbols in {1}", this.references.length, this.groups[0].uri.fsPath);
      } else {
        return (0, _nls.localize)('aria.result.nm', "Found {0} symbols in {1} files", this.references.length, this.groups.length);
      }
    },
    enumerable: true,
    configurable: true
  });

  ReferencesModel.prototype.nextOrPreviousReference = function (reference, next) {
    var parent = reference.parent;
    var idx = parent.children.indexOf(reference);
    var childCount = parent.children.length;
    var groupCount = parent.parent.groups.length;

    if (groupCount === 1 || next && idx + 1 < childCount || !next && idx > 0) {
      // cycling within one file
      if (next) {
        idx = (idx + 1) % childCount;
      } else {
        idx = (idx + childCount - 1) % childCount;
      }

      return parent.children[idx];
    }

    idx = parent.parent.groups.indexOf(parent);

    if (next) {
      idx = (idx + 1) % groupCount;
      return parent.parent.groups[idx].children[0];
    } else {
      idx = (idx + groupCount - 1) % groupCount;
      return parent.parent.groups[idx].children[parent.parent.groups[idx].children.length - 1];
    }
  };

  ReferencesModel.prototype.nearestReference = function (resource, position) {
    var nearest = this.references.map(function (ref, idx) {
      return {
        idx: idx,
        prefixLen: strings.commonPrefixLength(ref.uri.toString(), resource.toString()),
        offsetDist: Math.abs(ref.range.startLineNumber - position.lineNumber) * 100 + Math.abs(ref.range.startColumn - position.column)
      };
    }).sort(function (a, b) {
      if (a.prefixLen > b.prefixLen) {
        return -1;
      } else if (a.prefixLen < b.prefixLen) {
        return 1;
      } else if (a.offsetDist < b.offsetDist) {
        return -1;
      } else if (a.offsetDist > b.offsetDist) {
        return 1;
      } else {
        return 0;
      }
    })[0];

    if (nearest) {
      return this.references[nearest.idx];
    }

    return undefined;
  };

  ReferencesModel.prototype.referenceAt = function (resource, position) {
    for (var _i = 0, _a = this.references; _i < _a.length; _i++) {
      var ref = _a[_i];

      if (ref.uri.toString() === resource.toString()) {
        if (_range2.Range.containsPosition(ref.range, position)) {
          return ref;
        }
      }
    }

    return undefined;
  };

  ReferencesModel.prototype.firstReference = function () {
    for (var _i = 0, _a = this.references; _i < _a.length; _i++) {
      var ref = _a[_i];

      if (ref.isProviderFirst) {
        return ref;
      }
    }

    return this.references[0];
  };

  ReferencesModel._compareReferences = function (a, b) {
    return strings.compare(a.uri.toString(), b.uri.toString()) || _range2.Range.compareRangesUsingStarts(a.range, b.range);
  };

  return ReferencesModel;
}();

exports.ReferencesModel = ReferencesModel;
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/common/resources.js":"../node_modules/monaco-editor/esm/vs/base/common/resources.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../../base/common/idGenerator.js":"../node_modules/monaco-editor/esm/vs/base/common/idGenerator.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/peek/referencesWidget.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/iconLabel/iconlabel.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/highlightedlabel/highlightedLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HighlightedLabel = void 0;

var objects = _interopRequireWildcard(require("../../../common/objects.js"));

var _codiconLabel = require("../codiconLabel/codiconLabel.js");

var _strings = require("../../../common/strings.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var HighlightedLabel =
/** @class */
function () {
  function HighlightedLabel(container, supportCodicons) {
    this.supportCodicons = supportCodicons;
    this.text = '';
    this.title = '';
    this.highlights = [];
    this.didEverRender = false;
    this.domNode = document.createElement('span');
    this.domNode.className = 'monaco-highlighted-label';
    container.appendChild(this.domNode);
  }

  Object.defineProperty(HighlightedLabel.prototype, "element", {
    get: function () {
      return this.domNode;
    },
    enumerable: true,
    configurable: true
  });

  HighlightedLabel.prototype.set = function (text, highlights, title, escapeNewLines) {
    if (highlights === void 0) {
      highlights = [];
    }

    if (title === void 0) {
      title = '';
    }

    if (!text) {
      text = '';
    }

    if (escapeNewLines) {
      // adjusts highlights inplace
      text = HighlightedLabel.escapeNewLines(text, highlights);
    }

    if (this.didEverRender && this.text === text && this.title === title && objects.equals(this.highlights, highlights)) {
      return;
    }

    if (!Array.isArray(highlights)) {
      highlights = [];
    }

    this.text = text;
    this.title = title;
    this.highlights = highlights;
    this.render();
  };

  HighlightedLabel.prototype.render = function () {
    var htmlContent = '';
    var pos = 0;

    for (var _i = 0, _a = this.highlights; _i < _a.length; _i++) {
      var highlight = _a[_i];

      if (highlight.end === highlight.start) {
        continue;
      }

      if (pos < highlight.start) {
        htmlContent += '<span>';
        var substring_1 = this.text.substring(pos, highlight.start);
        htmlContent += this.supportCodicons ? (0, _codiconLabel.renderCodicons)(substring_1) : (0, _strings.escape)(substring_1);
        htmlContent += '</span>';
        pos = highlight.end;
      }

      htmlContent += '<span class="highlight">';
      var substring = this.text.substring(highlight.start, highlight.end);
      htmlContent += this.supportCodicons ? (0, _codiconLabel.renderCodicons)(substring) : (0, _strings.escape)(substring);
      htmlContent += '</span>';
      pos = highlight.end;
    }

    if (pos < this.text.length) {
      htmlContent += '<span>';
      var substring = this.text.substring(pos);
      htmlContent += this.supportCodicons ? (0, _codiconLabel.renderCodicons)(substring) : (0, _strings.escape)(substring);
      htmlContent += '</span>';
    }

    this.domNode.innerHTML = htmlContent;

    if (this.title) {
      this.domNode.title = this.title;
    } else {
      this.domNode.removeAttribute('title');
    }

    this.didEverRender = true;
  };

  HighlightedLabel.escapeNewLines = function (text, highlights) {
    var total = 0;
    var extra = 0;
    return text.replace(/\r\n|\r|\n/g, function (match, offset) {
      extra = match === '\r\n' ? -1 : 0;
      offset += total;

      for (var _i = 0, highlights_1 = highlights; _i < highlights_1.length; _i++) {
        var highlight = highlights_1[_i];

        if (highlight.end <= offset) {
          continue;
        }

        if (highlight.start >= offset) {
          highlight.start += extra;
        }

        if (highlight.end >= offset) {
          highlight.end += extra;
        }
      }

      total += extra;
      return '\u23CE';
    });
  };

  return HighlightedLabel;
}();

exports.HighlightedLabel = HighlightedLabel;
},{"../../../common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js","../codiconLabel/codiconLabel.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/codiconLabel/codiconLabel.js","../../../common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/iconLabel/iconLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconLabel = void 0;

require("./iconlabel.css");

var dom = _interopRequireWildcard(require("../../dom.js"));

var _highlightedLabel = require("../highlightedlabel/highlightedLabel.js");

var _lifecycle = require("../../../common/lifecycle.js");

var _range = require("../../../common/range.js");

var _objects = require("../../../common/objects.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var FastLabelNode =
/** @class */
function () {
  function FastLabelNode(_element) {
    this._element = _element;
  }

  Object.defineProperty(FastLabelNode.prototype, "element", {
    get: function () {
      return this._element;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FastLabelNode.prototype, "textContent", {
    set: function (content) {
      if (this.disposed || content === this._textContent) {
        return;
      }

      this._textContent = content;
      this._element.textContent = content;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FastLabelNode.prototype, "className", {
    set: function (className) {
      if (this.disposed || className === this._className) {
        return;
      }

      this._className = className;
      this._element.className = className;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FastLabelNode.prototype, "title", {
    set: function (title) {
      if (this.disposed || title === this._title) {
        return;
      }

      this._title = title;

      if (this._title) {
        this._element.title = title;
      } else {
        this._element.removeAttribute('title');
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FastLabelNode.prototype, "empty", {
    set: function (empty) {
      if (this.disposed || empty === this._empty) {
        return;
      }

      this._empty = empty;
      this._element.style.marginLeft = empty ? '0' : '';
    },
    enumerable: true,
    configurable: true
  });

  FastLabelNode.prototype.dispose = function () {
    this.disposed = true;
  };

  return FastLabelNode;
}();

var IconLabel =
/** @class */
function (_super) {
  __extends(IconLabel, _super);

  function IconLabel(container, options) {
    var _a, _b;

    var _this = _super.call(this) || this;

    _this.domNode = _this._register(new FastLabelNode(dom.append(container, dom.$('.monaco-icon-label'))));
    var labelContainer = dom.append(_this.domNode.element, dom.$('.monaco-icon-label-container'));
    var nameContainer = dom.append(labelContainer, dom.$('span.monaco-icon-name-container'));
    _this.descriptionContainer = _this._register(new FastLabelNode(dom.append(labelContainer, dom.$('span.monaco-icon-description-container'))));

    if ((_a = options) === null || _a === void 0 ? void 0 : _a.supportHighlights) {
      _this.nameNode = new LabelWithHighlights(nameContainer, !!options.supportCodicons);
    } else {
      _this.nameNode = new Label(nameContainer);
    }

    if ((_b = options) === null || _b === void 0 ? void 0 : _b.supportDescriptionHighlights) {
      _this.descriptionNodeFactory = function () {
        return new _highlightedLabel.HighlightedLabel(dom.append(_this.descriptionContainer.element, dom.$('span.label-description')), !!options.supportCodicons);
      };
    } else {
      _this.descriptionNodeFactory = function () {
        return _this._register(new FastLabelNode(dom.append(_this.descriptionContainer.element, dom.$('span.label-description'))));
      };
    }

    return _this;
  }

  IconLabel.prototype.setLabel = function (label, description, options) {
    var _a, _b, _c;

    var classes = ['monaco-icon-label'];

    if (options) {
      if (options.extraClasses) {
        classes.push.apply(classes, options.extraClasses);
      }

      if (options.italic) {
        classes.push('italic');
      }
    }

    this.domNode.className = classes.join(' ');
    this.domNode.title = ((_a = options) === null || _a === void 0 ? void 0 : _a.title) || '';
    this.nameNode.setLabel(label, options);

    if (description || this.descriptionNode) {
      if (!this.descriptionNode) {
        this.descriptionNode = this.descriptionNodeFactory(); // description node is created lazily on demand
      }

      if (this.descriptionNode instanceof _highlightedLabel.HighlightedLabel) {
        this.descriptionNode.set(description || '', options ? options.descriptionMatches : undefined);

        if ((_b = options) === null || _b === void 0 ? void 0 : _b.descriptionTitle) {
          this.descriptionNode.element.title = options.descriptionTitle;
        } else {
          this.descriptionNode.element.removeAttribute('title');
        }
      } else {
        this.descriptionNode.textContent = description || '';
        this.descriptionNode.title = ((_c = options) === null || _c === void 0 ? void 0 : _c.descriptionTitle) || '';
        this.descriptionNode.empty = !description;
      }
    }
  };

  return IconLabel;
}(_lifecycle.Disposable);

exports.IconLabel = IconLabel;

var Label =
/** @class */
function () {
  function Label(container) {
    this.container = container;
    this.label = undefined;
    this.singleLabel = undefined;
  }

  Label.prototype.setLabel = function (label, options) {
    var _a, _b, _c, _d;

    if (this.label === label && (0, _objects.equals)(this.options, options)) {
      return;
    }

    this.label = label;
    this.options = options;

    if (typeof label === 'string') {
      if (!this.singleLabel) {
        this.container.innerHTML = '';
        dom.removeClass(this.container, 'multiple');
        this.singleLabel = dom.append(this.container, dom.$('a.label-name', {
          id: (_a = options) === null || _a === void 0 ? void 0 : _a.domId
        }));
      }

      this.singleLabel.textContent = label;
    } else {
      this.container.innerHTML = '';
      dom.addClass(this.container, 'multiple');
      this.singleLabel = undefined;

      for (var i = 0; i < label.length; i++) {
        var l = label[i];
        var id = ((_b = options) === null || _b === void 0 ? void 0 : _b.domId) && ((_c = options) === null || _c === void 0 ? void 0 : _c.domId) + "_" + i;
        dom.append(this.container, dom.$('a.label-name', {
          id: id,
          'data-icon-label-count': label.length,
          'data-icon-label-index': i
        }, l));

        if (i < label.length - 1) {
          dom.append(this.container, dom.$('span.label-separator', undefined, ((_d = options) === null || _d === void 0 ? void 0 : _d.separator) || '/'));
        }
      }
    }
  };

  return Label;
}();

function splitMatches(labels, separator, matches) {
  if (!matches) {
    return undefined;
  }

  var labelStart = 0;
  return labels.map(function (label) {
    var labelRange = {
      start: labelStart,
      end: labelStart + label.length
    };
    var result = matches.map(function (match) {
      return _range.Range.intersect(labelRange, match);
    }).filter(function (range) {
      return !_range.Range.isEmpty(range);
    }).map(function (_a) {
      var start = _a.start,
          end = _a.end;
      return {
        start: start - labelStart,
        end: end - labelStart
      };
    });
    labelStart = labelRange.end + separator.length;
    return result;
  });
}

var LabelWithHighlights =
/** @class */
function () {
  function LabelWithHighlights(container, supportCodicons) {
    this.container = container;
    this.supportCodicons = supportCodicons;
    this.label = undefined;
    this.singleLabel = undefined;
  }

  LabelWithHighlights.prototype.setLabel = function (label, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

    if (this.label === label && (0, _objects.equals)(this.options, options)) {
      return;
    }

    this.label = label;
    this.options = options;

    if (typeof label === 'string') {
      if (!this.singleLabel) {
        this.container.innerHTML = '';
        dom.removeClass(this.container, 'multiple');
        this.singleLabel = new _highlightedLabel.HighlightedLabel(dom.append(this.container, dom.$('a.label-name', {
          id: (_a = options) === null || _a === void 0 ? void 0 : _a.domId
        })), this.supportCodicons);
      }

      this.singleLabel.set(label, (_b = options) === null || _b === void 0 ? void 0 : _b.matches, (_c = options) === null || _c === void 0 ? void 0 : _c.title, (_d = options) === null || _d === void 0 ? void 0 : _d.labelEscapeNewLines);
    } else {
      this.container.innerHTML = '';
      dom.addClass(this.container, 'multiple');
      this.singleLabel = undefined;
      var separator = ((_e = options) === null || _e === void 0 ? void 0 : _e.separator) || '/';
      var matches = splitMatches(label, separator, (_f = options) === null || _f === void 0 ? void 0 : _f.matches);

      for (var i = 0; i < label.length; i++) {
        var l = label[i];
        var m = matches ? matches[i] : undefined;
        var id = ((_g = options) === null || _g === void 0 ? void 0 : _g.domId) && ((_h = options) === null || _h === void 0 ? void 0 : _h.domId) + "_" + i;
        var name_1 = dom.$('a.label-name', {
          id: id,
          'data-icon-label-count': label.length,
          'data-icon-label-index': i
        });
        var highlightedLabel = new _highlightedLabel.HighlightedLabel(dom.append(this.container, name_1), this.supportCodicons);
        highlightedLabel.set(l, m, (_j = options) === null || _j === void 0 ? void 0 : _j.title, (_k = options) === null || _k === void 0 ? void 0 : _k.labelEscapeNewLines);

        if (i < label.length - 1) {
          dom.append(name_1, dom.$('span.label-separator', undefined, separator));
        }
      }
    }
  };

  return LabelWithHighlights;
}();
},{"./iconlabel.css":"../node_modules/monaco-editor/esm/vs/base/browser/ui/iconLabel/iconlabel.css","../../dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../highlightedlabel/highlightedLabel.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/highlightedlabel/highlightedLabel.js","../../../common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../common/range.js":"../node_modules/monaco-editor/esm/vs/base/common/range.js","../../../common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/countBadge/countBadge.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/countBadge/countBadge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CountBadge = void 0;

require("./countBadge.css");

var _dom = require("../../dom.js");

var _strings = require("../../../common/strings.js");

var _color = require("../../../common/color.js");

var _objects = require("../../../common/objects.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var defaultOpts = {
  badgeBackground: _color.Color.fromHex('#4D4D4D'),
  badgeForeground: _color.Color.fromHex('#FFFFFF')
};

var CountBadge =
/** @class */
function () {
  function CountBadge(container, options) {
    this.count = 0;
    this.options = options || Object.create(null);
    (0, _objects.mixin)(this.options, defaultOpts, false);
    this.badgeBackground = this.options.badgeBackground;
    this.badgeForeground = this.options.badgeForeground;
    this.badgeBorder = this.options.badgeBorder;
    this.element = (0, _dom.append)(container, (0, _dom.$)('.monaco-count-badge'));
    this.countFormat = this.options.countFormat || '{0}';
    this.titleFormat = this.options.titleFormat || '';
    this.setCount(this.options.count || 0);
  }

  CountBadge.prototype.setCount = function (count) {
    this.count = count;
    this.render();
  };

  CountBadge.prototype.setTitleFormat = function (titleFormat) {
    this.titleFormat = titleFormat;
    this.render();
  };

  CountBadge.prototype.render = function () {
    this.element.textContent = (0, _strings.format)(this.countFormat, this.count);
    this.element.title = (0, _strings.format)(this.titleFormat, this.count);
    this.applyStyles();
  };

  CountBadge.prototype.style = function (styles) {
    this.badgeBackground = styles.badgeBackground;
    this.badgeForeground = styles.badgeForeground;
    this.badgeBorder = styles.badgeBorder;
    this.applyStyles();
  };

  CountBadge.prototype.applyStyles = function () {
    if (this.element) {
      var background = this.badgeBackground ? this.badgeBackground.toString() : '';
      var foreground = this.badgeForeground ? this.badgeForeground.toString() : '';
      var border = this.badgeBorder ? this.badgeBorder.toString() : '';
      this.element.style.backgroundColor = background;
      this.element.style.color = foreground;
      this.element.style.borderWidth = border ? '1px' : '';
      this.element.style.borderStyle = border ? 'solid' : '';
      this.element.style.borderColor = border;
    }
  };

  return CountBadge;
}();

exports.CountBadge = CountBadge;
},{"./countBadge.css":"../node_modules/monaco-editor/esm/vs/base/browser/ui/countBadge/countBadge.css","../../dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../../common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js"}],"../node_modules/monaco-editor/esm/vs/base/common/labels.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPathLabel = getPathLabel;
exports.getBaseLabel = getBaseLabel;
exports.normalizeDriveLetter = normalizeDriveLetter;
exports.tildify = tildify;

var _uri = require("./uri.js");

var _path = require("./path.js");

var _strings = require("./strings.js");

var _network = require("./network.js");

var _platform = require("./platform.js");

var _resources = require("./resources.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * @deprecated use LabelService instead
 */
function getPathLabel(resource, userHomeProvider, rootProvider) {
  if (typeof resource === 'string') {
    resource = _uri.URI.file(resource);
  } // return early if we can resolve a relative path label from the root


  if (rootProvider) {
    var baseResource = rootProvider.getWorkspaceFolder(resource);

    if (baseResource) {
      var hasMultipleRoots = rootProvider.getWorkspace().folders.length > 1;
      var pathLabel = void 0;

      if ((0, _resources.isEqual)(baseResource.uri, resource)) {
        pathLabel = ''; // no label if paths are identical
      } else {
        pathLabel = (0, _resources.relativePath)(baseResource.uri, resource);
      }

      if (hasMultipleRoots) {
        var rootName = baseResource.name ? baseResource.name : (0, _resources.basename)(baseResource.uri);
        pathLabel = pathLabel ? rootName + ' • ' + pathLabel : rootName; // always show root basename if there are multiple
      }

      return pathLabel;
    }
  } // return if the resource is neither file:// nor untitled:// and no baseResource was provided


  if (resource.scheme !== _network.Schemas.file && resource.scheme !== _network.Schemas.untitled) {
    return resource.with({
      query: null,
      fragment: null
    }).toString(true);
  } // convert c:\something => C:\something


  if (hasDriveLetter(resource.fsPath)) {
    return (0, _path.normalize)(normalizeDriveLetter(resource.fsPath));
  } // normalize and tildify (macOS, Linux only)


  var res = (0, _path.normalize)(resource.fsPath);

  if (!_platform.isWindows && userHomeProvider) {
    res = tildify(res, userHomeProvider.userHome);
  }

  return res;
}

function getBaseLabel(resource) {
  if (!resource) {
    return undefined;
  }

  if (typeof resource === 'string') {
    resource = _uri.URI.file(resource);
  }

  var base = (0, _resources.basename)(resource) || (resource.scheme === _network.Schemas.file ? resource.fsPath : resource.path)
  /* can be empty string if '/' is passed in */
  ; // convert c: => C:

  if (hasDriveLetter(base)) {
    return normalizeDriveLetter(base);
  }

  return base;
}

function hasDriveLetter(path) {
  return !!(_platform.isWindows && path && path[1] === ':');
}

function normalizeDriveLetter(path) {
  if (hasDriveLetter(path)) {
    return path.charAt(0).toUpperCase() + path.slice(1);
  }

  return path;
}

var normalizedUserHomeCached = Object.create(null);

function tildify(path, userHome) {
  if (_platform.isWindows || !path || !userHome) {
    return path; // unsupported
  } // Keep a normalized user home path as cache to prevent accumulated string creation


  var normalizedUserHome = normalizedUserHomeCached.original === userHome ? normalizedUserHomeCached.normalized : undefined;

  if (!normalizedUserHome) {
    normalizedUserHome = "" + (0, _strings.rtrim)(userHome, _path.posix.sep) + _path.posix.sep;
    normalizedUserHomeCached = {
      original: userHome,
      normalized: normalizedUserHome
    };
  } // Linux: case sensitive, macOS: case insensitive


  if (_platform.isLinux ? (0, _strings.startsWith)(path, normalizedUserHome) : (0, _strings.startsWithIgnoreCase)(path, normalizedUserHome)) {
    path = "~/" + path.substr(normalizedUserHome.length);
  }

  return path;
}
},{"./uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js","./path.js":"../node_modules/monaco-editor/esm/vs/base/common/path.js","./strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","./network.js":"../node_modules/monaco-editor/esm/vs/base/common/network.js","./platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js","./resources.js":"../node_modules/monaco-editor/esm/vs/base/common/resources.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/peek/referencesTree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AriaProvider = exports.OneReferenceRenderer = exports.FileReferencesRenderer = exports.IdentityProvider = exports.StringRepresentationProvider = exports.Delegate = exports.DataSource = void 0;

var _referencesModel = require("../referencesModel.js");

var _resolverService2 = require("../../../common/services/resolverService.js");

var _iconLabel = require("../../../../base/browser/ui/iconLabel/iconLabel.js");

var _countBadge = require("../../../../base/browser/ui/countBadge/countBadge.js");

var _label = require("../../../../platform/label/common/label.js");

var _themeService = require("../../../../platform/theme/common/themeService.js");

var _styler = require("../../../../platform/theme/common/styler.js");

var dom = _interopRequireWildcard(require("../../../../base/browser/dom.js"));

var _nls = require("../../../../nls.js");

var _labels = require("../../../../base/common/labels.js");

var _resources = require("../../../../base/common/resources.js");

var _lifecycle = require("../../../../base/common/lifecycle.js");

var _instantiation = require("../../../../platform/instantiation/common/instantiation.js");

var _keybinding = require("../../../../platform/keybinding/common/keybinding.js");

var _filters = require("../../../../base/common/filters.js");

var _highlightedLabel = require("../../../../base/browser/ui/highlightedlabel/highlightedLabel.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var DataSource =
/** @class */
function () {
  function DataSource(_resolverService) {
    this._resolverService = _resolverService;
  }

  DataSource.prototype.hasChildren = function (element) {
    if (element instanceof _referencesModel.ReferencesModel) {
      return true;
    }

    if (element instanceof _referencesModel.FileReferences && !element.failure) {
      return true;
    }

    return false;
  };

  DataSource.prototype.getChildren = function (element) {
    if (element instanceof _referencesModel.ReferencesModel) {
      return element.groups;
    }

    if (element instanceof _referencesModel.FileReferences) {
      return element.resolve(this._resolverService).then(function (val) {
        // if (element.failure) {
        // 	// refresh the element on failure so that
        // 	// we can update its rendering
        // 	return tree.refresh(element).then(() => val.children);
        // }
        return val.children;
      });
    }

    throw new Error('bad tree');
  };

  DataSource = __decorate([__param(0, _resolverService2.ITextModelService)], DataSource);
  return DataSource;
}();

exports.DataSource = DataSource;

//#endregion
var Delegate =
/** @class */
function () {
  function Delegate() {}

  Delegate.prototype.getHeight = function () {
    return 23;
  };

  Delegate.prototype.getTemplateId = function (element) {
    if (element instanceof _referencesModel.FileReferences) {
      return FileReferencesRenderer.id;
    } else {
      return OneReferenceRenderer.id;
    }
  };

  return Delegate;
}();

exports.Delegate = Delegate;

var StringRepresentationProvider =
/** @class */
function () {
  function StringRepresentationProvider(_keybindingService) {
    this._keybindingService = _keybindingService;
  }

  StringRepresentationProvider.prototype.getKeyboardNavigationLabel = function (element) {
    if (element instanceof _referencesModel.OneReference) {
      var preview = element.parent.preview;
      var parts = preview && preview.preview(element.range);

      if (parts) {
        return parts.value;
      }
    } // FileReferences or unresolved OneReference


    return (0, _resources.basename)(element.uri);
  };

  StringRepresentationProvider = __decorate([__param(0, _keybinding.IKeybindingService)], StringRepresentationProvider);
  return StringRepresentationProvider;
}();

exports.StringRepresentationProvider = StringRepresentationProvider;

var IdentityProvider =
/** @class */
function () {
  function IdentityProvider() {}

  IdentityProvider.prototype.getId = function (element) {
    return element instanceof _referencesModel.OneReference ? element.id : element.uri;
  };

  return IdentityProvider;
}();

exports.IdentityProvider = IdentityProvider;

//#region render: File
var FileReferencesTemplate =
/** @class */
function (_super) {
  __extends(FileReferencesTemplate, _super);

  function FileReferencesTemplate(container, _uriLabel, themeService) {
    var _this = _super.call(this) || this;

    _this._uriLabel = _uriLabel;
    var parent = document.createElement('div');
    dom.addClass(parent, 'reference-file');
    _this.file = _this._register(new _iconLabel.IconLabel(parent, {
      supportHighlights: true
    }));
    _this.badge = new _countBadge.CountBadge(dom.append(parent, dom.$('.count')));

    _this._register((0, _styler.attachBadgeStyler)(_this.badge, themeService));

    container.appendChild(parent);
    return _this;
  }

  FileReferencesTemplate.prototype.set = function (element, matches) {
    var parent = (0, _resources.dirname)(element.uri);
    this.file.setLabel((0, _labels.getBaseLabel)(element.uri), this._uriLabel.getUriLabel(parent, {
      relative: true
    }), {
      title: this._uriLabel.getUriLabel(element.uri),
      matches: matches
    });
    var len = element.children.length;
    this.badge.setCount(len);

    if (element.failure) {
      this.badge.setTitleFormat((0, _nls.localize)('referencesFailre', "Failed to resolve file."));
    } else if (len > 1) {
      this.badge.setTitleFormat((0, _nls.localize)('referencesCount', "{0} references", len));
    } else {
      this.badge.setTitleFormat((0, _nls.localize)('referenceCount', "{0} reference", len));
    }
  };

  FileReferencesTemplate = __decorate([__param(1, _label.ILabelService), __param(2, _themeService.IThemeService)], FileReferencesTemplate);
  return FileReferencesTemplate;
}(_lifecycle.Disposable);

var FileReferencesRenderer =
/** @class */
function () {
  function FileReferencesRenderer(_instantiationService) {
    this._instantiationService = _instantiationService;
    this.templateId = FileReferencesRenderer.id;
  }

  FileReferencesRenderer.prototype.renderTemplate = function (container) {
    return this._instantiationService.createInstance(FileReferencesTemplate, container);
  };

  FileReferencesRenderer.prototype.renderElement = function (node, index, template) {
    template.set(node.element, (0, _filters.createMatches)(node.filterData));
  };

  FileReferencesRenderer.prototype.disposeTemplate = function (templateData) {
    templateData.dispose();
  };

  FileReferencesRenderer.id = 'FileReferencesRenderer';
  FileReferencesRenderer = __decorate([__param(0, _instantiation.IInstantiationService)], FileReferencesRenderer);
  return FileReferencesRenderer;
}();

exports.FileReferencesRenderer = FileReferencesRenderer;

//#endregion
//#region render: Reference
var OneReferenceTemplate =
/** @class */
function () {
  function OneReferenceTemplate(container) {
    this.label = new _highlightedLabel.HighlightedLabel(container, false);
  }

  OneReferenceTemplate.prototype.set = function (element, score) {
    var filePreview = element.parent.preview;
    var preview = filePreview && filePreview.preview(element.range);

    if (!preview) {
      // this means we FAILED to resolve the document...
      this.label.set((0, _resources.basename)(element.uri) + ":" + (element.range.startLineNumber + 1) + ":" + (element.range.startColumn + 1));
    } else {
      // render search match as highlight unless
      // we have score, then render the score
      var value = preview.value,
          highlight = preview.highlight;

      if (score && !_filters.FuzzyScore.isDefault(score)) {
        dom.toggleClass(this.label.element, 'referenceMatch', false);
        this.label.set(value, (0, _filters.createMatches)(score));
      } else {
        dom.toggleClass(this.label.element, 'referenceMatch', true);
        this.label.set(value, [highlight]);
      }
    }
  };

  return OneReferenceTemplate;
}();

var OneReferenceRenderer =
/** @class */
function () {
  function OneReferenceRenderer() {
    this.templateId = OneReferenceRenderer.id;
  }

  OneReferenceRenderer.prototype.renderTemplate = function (container) {
    return new OneReferenceTemplate(container);
  };

  OneReferenceRenderer.prototype.renderElement = function (node, index, templateData) {
    templateData.set(node.element, node.filterData);
  };

  OneReferenceRenderer.prototype.disposeTemplate = function () {};

  OneReferenceRenderer.id = 'OneReferenceRenderer';
  return OneReferenceRenderer;
}();

exports.OneReferenceRenderer = OneReferenceRenderer;

//#endregion
var AriaProvider =
/** @class */
function () {
  function AriaProvider() {}

  AriaProvider.prototype.getAriaLabel = function (element) {
    return element.ariaMessage;
  };

  return AriaProvider;
}();

exports.AriaProvider = AriaProvider;
},{"../referencesModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/referencesModel.js","../../../common/services/resolverService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/resolverService.js","../../../../base/browser/ui/iconLabel/iconLabel.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/iconLabel/iconLabel.js","../../../../base/browser/ui/countBadge/countBadge.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/countBadge/countBadge.js","../../../../platform/label/common/label.js":"../node_modules/monaco-editor/esm/vs/platform/label/common/label.js","../../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../../platform/theme/common/styler.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/styler.js","../../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../../base/common/labels.js":"../node_modules/monaco-editor/esm/vs/base/common/labels.js","../../../../base/common/resources.js":"../node_modules/monaco-editor/esm/vs/base/common/resources.js","../../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../../platform/keybinding/common/keybinding.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding.js","../../../../base/common/filters.js":"../node_modules/monaco-editor/esm/vs/base/common/filters.js","../../../../base/browser/ui/highlightedlabel/highlightedLabel.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/highlightedlabel/highlightedLabel.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/splitview/splitview.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/splitview/splitview.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SplitView = exports.Sizing = void 0;

require("./splitview.css");

var _lifecycle = require("../../../common/lifecycle.js");

var _event = require("../../../common/event.js");

var types = _interopRequireWildcard(require("../../../common/types.js"));

var dom = _interopRequireWildcard(require("../../dom.js"));

var _numbers = require("../../../common/numbers.js");

var _arrays = require("../../../common/arrays.js");

var _sash = require("../sash/sash.js");

var _color = require("../../../common/color.js");

var _event2 = require("../../event.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __spreadArrays = void 0 && (void 0).__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
};

var defaultStyles = {
  separatorBorder: _color.Color.transparent
};

var ViewItem =
/** @class */
function () {
  function ViewItem(container, view, size, disposable) {
    this.container = container;
    this.view = view;
    this.disposable = disposable;
    this._cachedVisibleSize = undefined;

    if (typeof size === 'number') {
      this._size = size;
      this._cachedVisibleSize = undefined;
      dom.addClass(container, 'visible');
    } else {
      this._size = 0;
      this._cachedVisibleSize = size.cachedVisibleSize;
    }
  }

  Object.defineProperty(ViewItem.prototype, "size", {
    get: function () {
      return this._size;
    },
    set: function (size) {
      this._size = size;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewItem.prototype, "visible", {
    get: function () {
      return typeof this._cachedVisibleSize === 'undefined';
    },
    enumerable: true,
    configurable: true
  });

  ViewItem.prototype.setVisible = function (visible, size) {
    if (visible === this.visible) {
      return;
    }

    if (visible) {
      this.size = (0, _numbers.clamp)(this._cachedVisibleSize, this.viewMinimumSize, this.viewMaximumSize);
      this._cachedVisibleSize = undefined;
    } else {
      this._cachedVisibleSize = typeof size === 'number' ? size : this.size;
      this.size = 0;
    }

    dom.toggleClass(this.container, 'visible', visible);

    if (this.view.setVisible) {
      this.view.setVisible(visible);
    }
  };

  Object.defineProperty(ViewItem.prototype, "minimumSize", {
    get: function () {
      return this.visible ? this.view.minimumSize : 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewItem.prototype, "viewMinimumSize", {
    get: function () {
      return this.view.minimumSize;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewItem.prototype, "maximumSize", {
    get: function () {
      return this.visible ? this.view.maximumSize : 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewItem.prototype, "viewMaximumSize", {
    get: function () {
      return this.view.maximumSize;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewItem.prototype, "priority", {
    get: function () {
      return this.view.priority;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewItem.prototype, "snap", {
    get: function () {
      return !!this.view.snap;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewItem.prototype, "enabled", {
    set: function (enabled) {
      this.container.style.pointerEvents = enabled ? null : 'none';
    },
    enumerable: true,
    configurable: true
  });

  ViewItem.prototype.layout = function (offset, layoutContext) {
    this.layoutContainer(offset);
    this.view.layout(this.size, offset, layoutContext);
  };

  ViewItem.prototype.dispose = function () {
    this.disposable.dispose();
    return this.view;
  };

  return ViewItem;
}();

var VerticalViewItem =
/** @class */
function (_super) {
  __extends(VerticalViewItem, _super);

  function VerticalViewItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  VerticalViewItem.prototype.layoutContainer = function (offset) {
    this.container.style.top = offset + "px";
    this.container.style.height = this.size + "px";
  };

  return VerticalViewItem;
}(ViewItem);

var HorizontalViewItem =
/** @class */
function (_super) {
  __extends(HorizontalViewItem, _super);

  function HorizontalViewItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  HorizontalViewItem.prototype.layoutContainer = function (offset) {
    this.container.style.left = offset + "px";
    this.container.style.width = this.size + "px";
  };

  return HorizontalViewItem;
}(ViewItem);

var State;

(function (State) {
  State[State["Idle"] = 0] = "Idle";
  State[State["Busy"] = 1] = "Busy";
})(State || (State = {}));

var Sizing;
exports.Sizing = Sizing;

(function (Sizing) {
  Sizing.Distribute = {
    type: 'distribute'
  };

  function Split(index) {
    return {
      type: 'split',
      index: index
    };
  }

  Sizing.Split = Split;

  function Invisible(cachedVisibleSize) {
    return {
      type: 'invisible',
      cachedVisibleSize: cachedVisibleSize
    };
  }

  Sizing.Invisible = Invisible;
})(Sizing || (exports.Sizing = Sizing = {}));

var SplitView =
/** @class */
function (_super) {
  __extends(SplitView, _super);

  function SplitView(container, options) {
    if (options === void 0) {
      options = {};
    }

    var _this = _super.call(this) || this;

    _this.size = 0;
    _this.contentSize = 0;
    _this.proportions = undefined;
    _this.viewItems = [];
    _this.sashItems = [];
    _this.state = State.Idle;
    _this._onDidSashChange = _this._register(new _event.Emitter());
    _this.onDidSashChange = _this._onDidSashChange.event;
    _this._onDidSashReset = _this._register(new _event.Emitter());
    _this._startSnappingEnabled = true;
    _this._endSnappingEnabled = true;
    _this.orientation = types.isUndefined(options.orientation) ? 0
    /* VERTICAL */
    : options.orientation;
    _this.inverseAltBehavior = !!options.inverseAltBehavior;
    _this.proportionalLayout = types.isUndefined(options.proportionalLayout) ? true : !!options.proportionalLayout;
    _this.el = document.createElement('div');
    dom.addClass(_this.el, 'monaco-split-view2');
    dom.addClass(_this.el, _this.orientation === 0
    /* VERTICAL */
    ? 'vertical' : 'horizontal');
    container.appendChild(_this.el);
    _this.sashContainer = dom.append(_this.el, dom.$('.sash-container'));
    _this.viewContainer = dom.append(_this.el, dom.$('.split-view-container'));

    _this.style(options.styles || defaultStyles); // We have an existing set of view, add them now


    if (options.descriptor) {
      _this.size = options.descriptor.size;
      options.descriptor.views.forEach(function (viewDescriptor, index) {
        var sizing = types.isUndefined(viewDescriptor.visible) || viewDescriptor.visible ? viewDescriptor.size : {
          type: 'invisible',
          cachedVisibleSize: viewDescriptor.size
        };
        var view = viewDescriptor.view;

        _this.doAddView(view, sizing, index, true);
      }); // Initialize content size and proportions for first layout

      _this.contentSize = _this.viewItems.reduce(function (r, i) {
        return r + i.size;
      }, 0);

      _this.saveProportions();
    }

    return _this;
  }

  Object.defineProperty(SplitView.prototype, "orthogonalStartSash", {
    get: function () {
      return this._orthogonalStartSash;
    },
    set: function (sash) {
      for (var _i = 0, _a = this.sashItems; _i < _a.length; _i++) {
        var sashItem = _a[_i];
        sashItem.sash.orthogonalStartSash = sash;
      }

      this._orthogonalStartSash = sash;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(SplitView.prototype, "orthogonalEndSash", {
    get: function () {
      return this._orthogonalEndSash;
    },
    set: function (sash) {
      for (var _i = 0, _a = this.sashItems; _i < _a.length; _i++) {
        var sashItem = _a[_i];
        sashItem.sash.orthogonalEndSash = sash;
      }

      this._orthogonalEndSash = sash;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(SplitView.prototype, "startSnappingEnabled", {
    get: function () {
      return this._startSnappingEnabled;
    },
    set: function (startSnappingEnabled) {
      if (this._startSnappingEnabled === startSnappingEnabled) {
        return;
      }

      this._startSnappingEnabled = startSnappingEnabled;
      this.updateSashEnablement();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(SplitView.prototype, "endSnappingEnabled", {
    get: function () {
      return this._endSnappingEnabled;
    },
    set: function (endSnappingEnabled) {
      if (this._endSnappingEnabled === endSnappingEnabled) {
        return;
      }

      this._endSnappingEnabled = endSnappingEnabled;
      this.updateSashEnablement();
    },
    enumerable: true,
    configurable: true
  });

  SplitView.prototype.style = function (styles) {
    if (styles.separatorBorder.isTransparent()) {
      dom.removeClass(this.el, 'separator-border');
      this.el.style.removeProperty('--separator-border');
    } else {
      dom.addClass(this.el, 'separator-border');
      this.el.style.setProperty('--separator-border', styles.separatorBorder.toString());
    }
  };

  SplitView.prototype.addView = function (view, size, index) {
    if (index === void 0) {
      index = this.viewItems.length;
    }

    this.doAddView(view, size, index, false);
  };

  SplitView.prototype.layout = function (size, layoutContext) {
    var _this = this;

    var previousSize = Math.max(this.size, this.contentSize);
    this.size = size;
    this.layoutContext = layoutContext;

    if (!this.proportions) {
      var indexes = (0, _arrays.range)(this.viewItems.length);
      var lowPriorityIndexes = indexes.filter(function (i) {
        return _this.viewItems[i].priority === 1
        /* Low */
        ;
      });
      var highPriorityIndexes = indexes.filter(function (i) {
        return _this.viewItems[i].priority === 2
        /* High */
        ;
      });
      this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);
    } else {
      for (var i = 0; i < this.viewItems.length; i++) {
        var item = this.viewItems[i];
        item.size = (0, _numbers.clamp)(Math.round(this.proportions[i] * size), item.minimumSize, item.maximumSize);
      }
    }

    this.distributeEmptySpace();
    this.layoutViews();
  };

  SplitView.prototype.saveProportions = function () {
    var _this = this;

    if (this.proportionalLayout && this.contentSize > 0) {
      this.proportions = this.viewItems.map(function (i) {
        return i.size / _this.contentSize;
      });
    }
  };

  SplitView.prototype.onSashStart = function (_a) {
    var _this = this;

    var sash = _a.sash,
        start = _a.start,
        alt = _a.alt;

    for (var _i = 0, _b = this.viewItems; _i < _b.length; _i++) {
      var item = _b[_i];
      item.enabled = false;
    }

    var index = (0, _arrays.firstIndex)(this.sashItems, function (item) {
      return item.sash === sash;
    }); // This way, we can press Alt while we resize a sash, macOS style!

    var disposable = (0, _lifecycle.combinedDisposable)((0, _event2.domEvent)(document.body, 'keydown')(function (e) {
      return resetSashDragState(_this.sashDragState.current, e.altKey);
    }), (0, _event2.domEvent)(document.body, 'keyup')(function () {
      return resetSashDragState(_this.sashDragState.current, false);
    }));

    var resetSashDragState = function (start, alt) {
      var sizes = _this.viewItems.map(function (i) {
        return i.size;
      });

      var minDelta = Number.NEGATIVE_INFINITY;
      var maxDelta = Number.POSITIVE_INFINITY;

      if (_this.inverseAltBehavior) {
        alt = !alt;
      }

      if (alt) {
        // When we're using the last sash with Alt, we're resizing
        // the view to the left/up, instead of right/down as usual
        // Thus, we must do the inverse of the usual
        var isLastSash = index === _this.sashItems.length - 1;

        if (isLastSash) {
          var viewItem = _this.viewItems[index];
          minDelta = (viewItem.minimumSize - viewItem.size) / 2;
          maxDelta = (viewItem.maximumSize - viewItem.size) / 2;
        } else {
          var viewItem = _this.viewItems[index + 1];
          minDelta = (viewItem.size - viewItem.maximumSize) / 2;
          maxDelta = (viewItem.size - viewItem.minimumSize) / 2;
        }
      }

      var snapBefore;
      var snapAfter;

      if (!alt) {
        var upIndexes = (0, _arrays.range)(index, -1);
        var downIndexes = (0, _arrays.range)(index + 1, _this.viewItems.length);
        var minDeltaUp = upIndexes.reduce(function (r, i) {
          return r + (_this.viewItems[i].minimumSize - sizes[i]);
        }, 0);
        var maxDeltaUp = upIndexes.reduce(function (r, i) {
          return r + (_this.viewItems[i].viewMaximumSize - sizes[i]);
        }, 0);
        var maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce(function (r, i) {
          return r + (sizes[i] - _this.viewItems[i].minimumSize);
        }, 0);
        var minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce(function (r, i) {
          return r + (sizes[i] - _this.viewItems[i].viewMaximumSize);
        }, 0);
        var minDelta_1 = Math.max(minDeltaUp, minDeltaDown);
        var maxDelta_1 = Math.min(maxDeltaDown, maxDeltaUp);

        var snapBeforeIndex = _this.findFirstSnapIndex(upIndexes);

        var snapAfterIndex = _this.findFirstSnapIndex(downIndexes);

        if (typeof snapBeforeIndex === 'number') {
          var viewItem = _this.viewItems[snapBeforeIndex];
          var halfSize = Math.floor(viewItem.viewMinimumSize / 2);
          snapBefore = {
            index: snapBeforeIndex,
            limitDelta: viewItem.visible ? minDelta_1 - halfSize : minDelta_1 + halfSize,
            size: viewItem.size
          };
        }

        if (typeof snapAfterIndex === 'number') {
          var viewItem = _this.viewItems[snapAfterIndex];
          var halfSize = Math.floor(viewItem.viewMinimumSize / 2);
          snapAfter = {
            index: snapAfterIndex,
            limitDelta: viewItem.visible ? maxDelta_1 + halfSize : maxDelta_1 - halfSize,
            size: viewItem.size
          };
        }
      }

      _this.sashDragState = {
        start: start,
        current: start,
        index: index,
        sizes: sizes,
        minDelta: minDelta,
        maxDelta: maxDelta,
        alt: alt,
        snapBefore: snapBefore,
        snapAfter: snapAfter,
        disposable: disposable
      };
    };

    resetSashDragState(start, alt);
  };

  SplitView.prototype.onSashChange = function (_a) {
    var current = _a.current;
    var _b = this.sashDragState,
        index = _b.index,
        start = _b.start,
        sizes = _b.sizes,
        alt = _b.alt,
        minDelta = _b.minDelta,
        maxDelta = _b.maxDelta,
        snapBefore = _b.snapBefore,
        snapAfter = _b.snapAfter;
    this.sashDragState.current = current;
    var delta = current - start;
    var newDelta = this.resize(index, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);

    if (alt) {
      var isLastSash = index === this.sashItems.length - 1;
      var newSizes = this.viewItems.map(function (i) {
        return i.size;
      });
      var viewItemIndex = isLastSash ? index : index + 1;
      var viewItem = this.viewItems[viewItemIndex];
      var newMinDelta = viewItem.size - viewItem.maximumSize;
      var newMaxDelta = viewItem.size - viewItem.minimumSize;
      var resizeIndex = isLastSash ? index - 1 : index + 1;
      this.resize(resizeIndex, -newDelta, newSizes, undefined, undefined, newMinDelta, newMaxDelta);
    }

    this.distributeEmptySpace();
    this.layoutViews();
  };

  SplitView.prototype.onSashEnd = function (index) {
    this._onDidSashChange.fire(index);

    this.sashDragState.disposable.dispose();
    this.saveProportions();

    for (var _i = 0, _a = this.viewItems; _i < _a.length; _i++) {
      var item = _a[_i];
      item.enabled = true;
    }
  };

  SplitView.prototype.onViewChange = function (item, size) {
    var index = this.viewItems.indexOf(item);

    if (index < 0 || index >= this.viewItems.length) {
      return;
    }

    size = typeof size === 'number' ? size : item.size;
    size = (0, _numbers.clamp)(size, item.minimumSize, item.maximumSize);

    if (this.inverseAltBehavior && index > 0) {
      // In this case, we want the view to grow or shrink both sides equally
      // so we just resize the "left" side by half and let `resize` do the clamping magic
      this.resize(index - 1, Math.floor((item.size - size) / 2));
      this.distributeEmptySpace();
      this.layoutViews();
    } else {
      item.size = size;
      this.relayout([index], undefined);
    }
  };

  SplitView.prototype.resizeView = function (index, size) {
    var _this = this;

    if (this.state !== State.Idle) {
      throw new Error('Cant modify splitview');
    }

    this.state = State.Busy;

    if (index < 0 || index >= this.viewItems.length) {
      return;
    }

    var indexes = (0, _arrays.range)(this.viewItems.length).filter(function (i) {
      return i !== index;
    });

    var lowPriorityIndexes = __spreadArrays(indexes.filter(function (i) {
      return _this.viewItems[i].priority === 1
      /* Low */
      ;
    }), [index]);

    var highPriorityIndexes = indexes.filter(function (i) {
      return _this.viewItems[i].priority === 2
      /* High */
      ;
    });
    var item = this.viewItems[index];
    size = Math.round(size);
    size = (0, _numbers.clamp)(size, item.minimumSize, Math.min(item.maximumSize, this.size));
    item.size = size;
    this.relayout(lowPriorityIndexes, highPriorityIndexes);
    this.state = State.Idle;
  };

  SplitView.prototype.distributeViewSizes = function () {
    var _this = this;

    var flexibleViewItems = [];
    var flexibleSize = 0;

    for (var _i = 0, _a = this.viewItems; _i < _a.length; _i++) {
      var item = _a[_i];

      if (item.maximumSize - item.minimumSize > 0) {
        flexibleViewItems.push(item);
        flexibleSize += item.size;
      }
    }

    var size = Math.floor(flexibleSize / flexibleViewItems.length);

    for (var _b = 0, flexibleViewItems_1 = flexibleViewItems; _b < flexibleViewItems_1.length; _b++) {
      var item = flexibleViewItems_1[_b];
      item.size = (0, _numbers.clamp)(size, item.minimumSize, item.maximumSize);
    }

    var indexes = (0, _arrays.range)(this.viewItems.length);
    var lowPriorityIndexes = indexes.filter(function (i) {
      return _this.viewItems[i].priority === 1
      /* Low */
      ;
    });
    var highPriorityIndexes = indexes.filter(function (i) {
      return _this.viewItems[i].priority === 2
      /* High */
      ;
    });
    this.relayout(lowPriorityIndexes, highPriorityIndexes);
  };

  SplitView.prototype.getViewSize = function (index) {
    if (index < 0 || index >= this.viewItems.length) {
      return -1;
    }

    return this.viewItems[index].size;
  };

  SplitView.prototype.doAddView = function (view, size, index, skipLayout) {
    var _this = this;

    if (index === void 0) {
      index = this.viewItems.length;
    }

    if (this.state !== State.Idle) {
      throw new Error('Cant modify splitview');
    }

    this.state = State.Busy; // Add view

    var container = dom.$('.split-view-view');

    if (index === this.viewItems.length) {
      this.viewContainer.appendChild(container);
    } else {
      this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));
    }

    var onChangeDisposable = view.onDidChange(function (size) {
      return _this.onViewChange(item, size);
    });
    var containerDisposable = (0, _lifecycle.toDisposable)(function () {
      return _this.viewContainer.removeChild(container);
    });
    var disposable = (0, _lifecycle.combinedDisposable)(onChangeDisposable, containerDisposable);
    var viewSize;

    if (typeof size === 'number') {
      viewSize = size;
    } else if (size.type === 'split') {
      viewSize = this.getViewSize(size.index) / 2;
    } else if (size.type === 'invisible') {
      viewSize = {
        cachedVisibleSize: size.cachedVisibleSize
      };
    } else {
      viewSize = view.minimumSize;
    }

    var item = this.orientation === 0
    /* VERTICAL */
    ? new VerticalViewItem(container, view, viewSize, disposable) : new HorizontalViewItem(container, view, viewSize, disposable);
    this.viewItems.splice(index, 0, item); // Add sash

    if (this.viewItems.length > 1) {
      var orientation_1 = this.orientation === 0
      /* VERTICAL */
      ? 1
      /* HORIZONTAL */
      : 0
      /* VERTICAL */
      ;
      var layoutProvider = this.orientation === 0
      /* VERTICAL */
      ? {
        getHorizontalSashTop: function (sash) {
          return _this.getSashPosition(sash);
        }
      } : {
        getVerticalSashLeft: function (sash) {
          return _this.getSashPosition(sash);
        }
      };
      var sash_1 = new _sash.Sash(this.sashContainer, layoutProvider, {
        orientation: orientation_1,
        orthogonalStartSash: this.orthogonalStartSash,
        orthogonalEndSash: this.orthogonalEndSash
      });
      var sashEventMapper = this.orientation === 0
      /* VERTICAL */
      ? function (e) {
        return {
          sash: sash_1,
          start: e.startY,
          current: e.currentY,
          alt: e.altKey
        };
      } : function (e) {
        return {
          sash: sash_1,
          start: e.startX,
          current: e.currentX,
          alt: e.altKey
        };
      };

      var onStart = _event.Event.map(sash_1.onDidStart, sashEventMapper);

      var onStartDisposable = onStart(this.onSashStart, this);

      var onChange = _event.Event.map(sash_1.onDidChange, sashEventMapper);

      var onChangeDisposable_1 = onChange(this.onSashChange, this);

      var onEnd = _event.Event.map(sash_1.onDidEnd, function () {
        return (0, _arrays.firstIndex)(_this.sashItems, function (item) {
          return item.sash === sash_1;
        });
      });

      var onEndDisposable = onEnd(this.onSashEnd, this);
      var onDidResetDisposable = sash_1.onDidReset(function () {
        var index = (0, _arrays.firstIndex)(_this.sashItems, function (item) {
          return item.sash === sash_1;
        });
        var upIndexes = (0, _arrays.range)(index, -1);
        var downIndexes = (0, _arrays.range)(index + 1, _this.viewItems.length);

        var snapBeforeIndex = _this.findFirstSnapIndex(upIndexes);

        var snapAfterIndex = _this.findFirstSnapIndex(downIndexes);

        if (typeof snapBeforeIndex === 'number' && !_this.viewItems[snapBeforeIndex].visible) {
          return;
        }

        if (typeof snapAfterIndex === 'number' && !_this.viewItems[snapAfterIndex].visible) {
          return;
        }

        _this._onDidSashReset.fire(index);
      });
      var disposable_1 = (0, _lifecycle.combinedDisposable)(onStartDisposable, onChangeDisposable_1, onEndDisposable, onDidResetDisposable, sash_1);
      var sashItem = {
        sash: sash_1,
        disposable: disposable_1
      };
      this.sashItems.splice(index - 1, 0, sashItem);
    }

    container.appendChild(view.element);
    var highPriorityIndexes;

    if (typeof size !== 'number' && size.type === 'split') {
      highPriorityIndexes = [size.index];
    }

    if (!skipLayout) {
      this.relayout([index], highPriorityIndexes);
    }

    this.state = State.Idle;

    if (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {
      this.distributeViewSizes();
    }
  };

  SplitView.prototype.relayout = function (lowPriorityIndexes, highPriorityIndexes) {
    var contentSize = this.viewItems.reduce(function (r, i) {
      return r + i.size;
    }, 0);
    this.resize(this.viewItems.length - 1, this.size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);
    this.distributeEmptySpace();
    this.layoutViews();
    this.saveProportions();
  };

  SplitView.prototype.resize = function (index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta, snapBefore, snapAfter) {
    var _this = this;

    if (sizes === void 0) {
      sizes = this.viewItems.map(function (i) {
        return i.size;
      });
    }

    if (overloadMinDelta === void 0) {
      overloadMinDelta = Number.NEGATIVE_INFINITY;
    }

    if (overloadMaxDelta === void 0) {
      overloadMaxDelta = Number.POSITIVE_INFINITY;
    }

    if (index < 0 || index >= this.viewItems.length) {
      return 0;
    }

    var upIndexes = (0, _arrays.range)(index, -1);
    var downIndexes = (0, _arrays.range)(index + 1, this.viewItems.length);

    if (highPriorityIndexes) {
      for (var _i = 0, highPriorityIndexes_1 = highPriorityIndexes; _i < highPriorityIndexes_1.length; _i++) {
        var index_1 = highPriorityIndexes_1[_i];
        (0, _arrays.pushToStart)(upIndexes, index_1);
        (0, _arrays.pushToStart)(downIndexes, index_1);
      }
    }

    if (lowPriorityIndexes) {
      for (var _a = 0, lowPriorityIndexes_1 = lowPriorityIndexes; _a < lowPriorityIndexes_1.length; _a++) {
        var index_2 = lowPriorityIndexes_1[_a];
        (0, _arrays.pushToEnd)(upIndexes, index_2);
        (0, _arrays.pushToEnd)(downIndexes, index_2);
      }
    }

    var upItems = upIndexes.map(function (i) {
      return _this.viewItems[i];
    });
    var upSizes = upIndexes.map(function (i) {
      return sizes[i];
    });
    var downItems = downIndexes.map(function (i) {
      return _this.viewItems[i];
    });
    var downSizes = downIndexes.map(function (i) {
      return sizes[i];
    });
    var minDeltaUp = upIndexes.reduce(function (r, i) {
      return r + (_this.viewItems[i].minimumSize - sizes[i]);
    }, 0);
    var maxDeltaUp = upIndexes.reduce(function (r, i) {
      return r + (_this.viewItems[i].maximumSize - sizes[i]);
    }, 0);
    var maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce(function (r, i) {
      return r + (sizes[i] - _this.viewItems[i].minimumSize);
    }, 0);
    var minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce(function (r, i) {
      return r + (sizes[i] - _this.viewItems[i].maximumSize);
    }, 0);
    var minDelta = Math.max(minDeltaUp, minDeltaDown, overloadMinDelta);
    var maxDelta = Math.min(maxDeltaDown, maxDeltaUp, overloadMaxDelta);
    var snapped = false;

    if (snapBefore) {
      var snapView = this.viewItems[snapBefore.index];
      var visible = delta >= snapBefore.limitDelta;
      snapped = visible !== snapView.visible;
      snapView.setVisible(visible, snapBefore.size);
    }

    if (!snapped && snapAfter) {
      var snapView = this.viewItems[snapAfter.index];
      var visible = delta < snapAfter.limitDelta;
      snapped = visible !== snapView.visible;
      snapView.setVisible(visible, snapAfter.size);
    }

    if (snapped) {
      return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);
    }

    delta = (0, _numbers.clamp)(delta, minDelta, maxDelta);

    for (var i = 0, deltaUp = delta; i < upItems.length; i++) {
      var item = upItems[i];
      var size = (0, _numbers.clamp)(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);
      var viewDelta = size - upSizes[i];
      deltaUp -= viewDelta;
      item.size = size;
    }

    for (var i = 0, deltaDown = delta; i < downItems.length; i++) {
      var item = downItems[i];
      var size = (0, _numbers.clamp)(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);
      var viewDelta = size - downSizes[i];
      deltaDown += viewDelta;
      item.size = size;
    }

    return delta;
  };

  SplitView.prototype.distributeEmptySpace = function (lowPriorityIndex) {
    var _this = this;

    var contentSize = this.viewItems.reduce(function (r, i) {
      return r + i.size;
    }, 0);
    var emptyDelta = this.size - contentSize;
    var indexes = (0, _arrays.range)(this.viewItems.length - 1, -1);
    var lowPriorityIndexes = indexes.filter(function (i) {
      return _this.viewItems[i].priority === 1
      /* Low */
      ;
    });
    var highPriorityIndexes = indexes.filter(function (i) {
      return _this.viewItems[i].priority === 2
      /* High */
      ;
    });

    for (var _i = 0, highPriorityIndexes_2 = highPriorityIndexes; _i < highPriorityIndexes_2.length; _i++) {
      var index = highPriorityIndexes_2[_i];
      (0, _arrays.pushToStart)(indexes, index);
    }

    for (var _a = 0, lowPriorityIndexes_2 = lowPriorityIndexes; _a < lowPriorityIndexes_2.length; _a++) {
      var index = lowPriorityIndexes_2[_a];
      (0, _arrays.pushToEnd)(indexes, index);
    }

    if (typeof lowPriorityIndex === 'number') {
      (0, _arrays.pushToEnd)(indexes, lowPriorityIndex);
    }

    for (var i = 0; emptyDelta !== 0 && i < indexes.length; i++) {
      var item = this.viewItems[indexes[i]];
      var size = (0, _numbers.clamp)(item.size + emptyDelta, item.minimumSize, item.maximumSize);
      var viewDelta = size - item.size;
      emptyDelta -= viewDelta;
      item.size = size;
    }
  };

  SplitView.prototype.layoutViews = function () {
    // Save new content size
    this.contentSize = this.viewItems.reduce(function (r, i) {
      return r + i.size;
    }, 0); // Layout views

    var offset = 0;

    for (var _i = 0, _a = this.viewItems; _i < _a.length; _i++) {
      var viewItem = _a[_i];
      viewItem.layout(offset, this.layoutContext);
      offset += viewItem.size;
    } // Layout sashes


    this.sashItems.forEach(function (item) {
      return item.sash.layout();
    });
    this.updateSashEnablement();
  };

  SplitView.prototype.updateSashEnablement = function () {
    var previous = false;
    var collapsesDown = this.viewItems.map(function (i) {
      return previous = i.size - i.minimumSize > 0 || previous;
    });
    previous = false;
    var expandsDown = this.viewItems.map(function (i) {
      return previous = i.maximumSize - i.size > 0 || previous;
    });

    var reverseViews = __spreadArrays(this.viewItems).reverse();

    previous = false;
    var collapsesUp = reverseViews.map(function (i) {
      return previous = i.size - i.minimumSize > 0 || previous;
    }).reverse();
    previous = false;
    var expandsUp = reverseViews.map(function (i) {
      return previous = i.maximumSize - i.size > 0 || previous;
    }).reverse();
    var position = 0;

    for (var index = 0; index < this.sashItems.length; index++) {
      var sash = this.sashItems[index].sash;
      var viewItem = this.viewItems[index];
      position += viewItem.size;
      var min = !(collapsesDown[index] && expandsUp[index + 1]);
      var max = !(expandsDown[index] && collapsesUp[index + 1]);

      if (min && max) {
        var upIndexes = (0, _arrays.range)(index, -1);
        var downIndexes = (0, _arrays.range)(index + 1, this.viewItems.length);
        var snapBeforeIndex = this.findFirstSnapIndex(upIndexes);
        var snapAfterIndex = this.findFirstSnapIndex(downIndexes);
        var snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;
        var snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;

        if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {
          sash.state = 1
          /* Minimum */
          ;
        } else if (snappedAfter && collapsesDown[index] && (position < this.contentSize || this.endSnappingEnabled)) {
          sash.state = 2
          /* Maximum */
          ;
        } else {
          sash.state = 0
          /* Disabled */
          ;
        }
      } else if (min && !max) {
        sash.state = 1
        /* Minimum */
        ;
      } else if (!min && max) {
        sash.state = 2
        /* Maximum */
        ;
      } else {
        sash.state = 3
        /* Enabled */
        ;
      }
    }
  };

  SplitView.prototype.getSashPosition = function (sash) {
    var position = 0;

    for (var i = 0; i < this.sashItems.length; i++) {
      position += this.viewItems[i].size;

      if (this.sashItems[i].sash === sash) {
        return Math.min(position, this.contentSize - 2);
      }
    }

    return 0;
  };

  SplitView.prototype.findFirstSnapIndex = function (indexes) {
    // visible views first
    for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {
      var index = indexes_1[_i];
      var viewItem = this.viewItems[index];

      if (!viewItem.visible) {
        continue;
      }

      if (viewItem.snap) {
        return index;
      }
    } // then, hidden views


    for (var _a = 0, indexes_2 = indexes; _a < indexes_2.length; _a++) {
      var index = indexes_2[_a];
      var viewItem = this.viewItems[index];

      if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {
        return undefined;
      }

      if (!viewItem.visible && viewItem.snap) {
        return index;
      }
    }

    return undefined;
  };

  SplitView.prototype.dispose = function () {
    _super.prototype.dispose.call(this);

    this.viewItems.forEach(function (i) {
      return i.dispose();
    });
    this.viewItems = [];
    this.sashItems.forEach(function (i) {
      return i.disposable.dispose();
    });
    this.sashItems = [];
  };

  return SplitView;
}(_lifecycle.Disposable);

exports.SplitView = SplitView;
},{"./splitview.css":"../node_modules/monaco-editor/esm/vs/base/browser/ui/splitview/splitview.css","../../../common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../common/types.js":"../node_modules/monaco-editor/esm/vs/base/common/types.js","../../dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../common/numbers.js":"../node_modules/monaco-editor/esm/vs/base/common/numbers.js","../../../common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../sash/sash.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/sash/sash.js","../../../common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../event.js":"../node_modules/monaco-editor/esm/vs/base/browser/event.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/peek/referencesWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReferenceWidget = exports.LayoutData = void 0;

require("./referencesWidget.css");

var dom = _interopRequireWildcard(require("../../../../base/browser/dom.js"));

var _color = require("../../../../base/common/color.js");

var _event = require("../../../../base/common/event.js");

var _lifecycle = require("../../../../base/common/lifecycle.js");

var _network = require("../../../../base/common/network.js");

var _resources = require("../../../../base/common/resources.js");

var _embeddedCodeEditorWidget = require("../../../browser/widget/embeddedCodeEditorWidget.js");

var _range = require("../../../common/core/range.js");

var _textModel = require("../../../common/model/textModel.js");

var _resolverService = require("../../../common/services/resolverService.js");

var _referencesTree = require("./referencesTree.js");

var nls = _interopRequireWildcard(require("../../../../nls.js"));

var _instantiation = require("../../../../platform/instantiation/common/instantiation.js");

var _label = require("../../../../platform/label/common/label.js");

var _listService = require("../../../../platform/list/browser/listService.js");

var _colorRegistry = require("../../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../../platform/theme/common/themeService.js");

var peekView = _interopRequireWildcard(require("../../peekView/peekView.js"));

var _referencesModel = require("../referencesModel.js");

var _splitview = require("../../../../base/browser/ui/splitview/splitview.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var DecorationsManager =
/** @class */
function () {
  function DecorationsManager(_editor, _model) {
    var _this = this;

    this._editor = _editor;
    this._model = _model;
    this._decorations = new Map();
    this._decorationIgnoreSet = new Set();
    this._callOnDispose = new _lifecycle.DisposableStore();
    this._callOnModelChange = new _lifecycle.DisposableStore();

    this._callOnDispose.add(this._editor.onDidChangeModel(function () {
      return _this._onModelChanged();
    }));

    this._onModelChanged();
  }

  DecorationsManager.prototype.dispose = function () {
    this._callOnModelChange.dispose();

    this._callOnDispose.dispose();

    this.removeDecorations();
  };

  DecorationsManager.prototype._onModelChanged = function () {
    this._callOnModelChange.clear();

    var model = this._editor.getModel();

    if (model) {
      for (var _i = 0, _a = this._model.groups; _i < _a.length; _i++) {
        var ref = _a[_i];

        if ((0, _resources.isEqual)(ref.uri, model.uri)) {
          this._addDecorations(ref);

          return;
        }
      }
    }
  };

  DecorationsManager.prototype._addDecorations = function (reference) {
    var _this = this;

    if (!this._editor.hasModel()) {
      return;
    }

    this._callOnModelChange.add(this._editor.getModel().onDidChangeDecorations(function (event) {
      return _this._onDecorationChanged();
    }));

    var newDecorations = [];
    var newDecorationsActualIndex = [];

    for (var i = 0, len = reference.children.length; i < len; i++) {
      var oneReference = reference.children[i];

      if (this._decorationIgnoreSet.has(oneReference.id)) {
        continue;
      }

      newDecorations.push({
        range: oneReference.range,
        options: DecorationsManager.DecorationOptions
      });
      newDecorationsActualIndex.push(i);
    }

    var decorations = this._editor.deltaDecorations([], newDecorations);

    for (var i = 0; i < decorations.length; i++) {
      this._decorations.set(decorations[i], reference.children[newDecorationsActualIndex[i]]);
    }
  };

  DecorationsManager.prototype._onDecorationChanged = function () {
    var _this = this;

    var toRemove = [];

    var model = this._editor.getModel();

    if (!model) {
      return;
    }

    this._decorations.forEach(function (reference, decorationId) {
      var newRange = model.getDecorationRange(decorationId);

      if (!newRange) {
        return;
      }

      var ignore = false;

      if (_range.Range.equalsRange(newRange, reference.range)) {
        return;
      } else if (_range.Range.spansMultipleLines(newRange)) {
        ignore = true;
      } else {
        var lineLength = reference.range.endColumn - reference.range.startColumn;
        var newLineLength = newRange.endColumn - newRange.startColumn;

        if (lineLength !== newLineLength) {
          ignore = true;
        }
      }

      if (ignore) {
        _this._decorationIgnoreSet.add(reference.id);

        toRemove.push(decorationId);
      } else {
        reference.range = newRange;
      }
    });

    for (var i = 0, len = toRemove.length; i < len; i++) {
      this._decorations.delete(toRemove[i]);
    }

    this._editor.deltaDecorations(toRemove, []);
  };

  DecorationsManager.prototype.removeDecorations = function () {
    var toRemove = [];

    this._decorations.forEach(function (value, key) {
      toRemove.push(key);
    });

    this._editor.deltaDecorations(toRemove, []);

    this._decorations.clear();
  };

  DecorationsManager.DecorationOptions = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    className: 'reference-decoration'
  });
  return DecorationsManager;
}();

var LayoutData =
/** @class */
function () {
  function LayoutData() {
    this.ratio = 0.7;
    this.heightInLines = 18;
  }

  LayoutData.fromJSON = function (raw) {
    var ratio;
    var heightInLines;

    try {
      var data = JSON.parse(raw);
      ratio = data.ratio;
      heightInLines = data.heightInLines;
    } catch (_a) {//
    }

    return {
      ratio: ratio || 0.7,
      heightInLines: heightInLines || 18
    };
  };

  return LayoutData;
}();

exports.LayoutData = LayoutData;

/**
 * ZoneWidget that is shown inside the editor
 */
var ReferenceWidget =
/** @class */
function (_super) {
  __extends(ReferenceWidget, _super);

  function ReferenceWidget(editor, _defaultTreeKeyboardSupport, layoutData, themeService, _textModelResolverService, _instantiationService, _peekViewService, _uriLabel) {
    var _this = _super.call(this, editor, {
      showFrame: false,
      showArrow: true,
      isResizeable: true,
      isAccessible: true
    }) || this;

    _this._defaultTreeKeyboardSupport = _defaultTreeKeyboardSupport;
    _this.layoutData = layoutData;
    _this._textModelResolverService = _textModelResolverService;
    _this._instantiationService = _instantiationService;
    _this._peekViewService = _peekViewService;
    _this._uriLabel = _uriLabel;
    _this._disposeOnNewModel = new _lifecycle.DisposableStore();
    _this._callOnDispose = new _lifecycle.DisposableStore();
    _this._onDidSelectReference = new _event.Emitter();
    _this.onDidSelectReference = _this._onDidSelectReference.event;
    _this._dim = {
      height: 0,
      width: 0
    };

    _this._applyTheme(themeService.getTheme());

    _this._callOnDispose.add(themeService.onThemeChange(_this._applyTheme.bind(_this)));

    _this._peekViewService.addExclusiveWidget(editor, _this);

    _this.create();

    return _this;
  }

  ReferenceWidget.prototype.dispose = function () {
    this.setModel(undefined);

    this._callOnDispose.dispose();

    this._disposeOnNewModel.dispose();

    (0, _lifecycle.dispose)(this._preview);
    (0, _lifecycle.dispose)(this._previewNotAvailableMessage);
    (0, _lifecycle.dispose)(this._tree);
    (0, _lifecycle.dispose)(this._previewModelReference);

    this._splitView.dispose();

    _super.prototype.dispose.call(this);
  };

  ReferenceWidget.prototype._applyTheme = function (theme) {
    var borderColor = theme.getColor(peekView.peekViewBorder) || _color.Color.transparent;

    this.style({
      arrowColor: borderColor,
      frameColor: borderColor,
      headerBackgroundColor: theme.getColor(peekView.peekViewTitleBackground) || _color.Color.transparent,
      primaryHeadingColor: theme.getColor(peekView.peekViewTitleForeground),
      secondaryHeadingColor: theme.getColor(peekView.peekViewTitleInfoForeground)
    });
  };

  ReferenceWidget.prototype.show = function (where) {
    this.editor.revealRangeInCenterIfOutsideViewport(where, 0
    /* Smooth */
    );

    _super.prototype.show.call(this, where, this.layoutData.heightInLines || 18);
  };

  ReferenceWidget.prototype.focus = function () {
    this._tree.domFocus();
  };

  ReferenceWidget.prototype._onTitleClick = function (e) {
    if (this._preview && this._preview.getModel()) {
      this._onDidSelectReference.fire({
        element: this._getFocusedReference(),
        kind: e.ctrlKey || e.metaKey || e.altKey ? 'side' : 'open',
        source: 'title'
      });
    }
  };

  ReferenceWidget.prototype._fillBody = function (containerElement) {
    var _this = this;

    this.setCssClass('reference-zone-widget'); // message pane

    this._messageContainer = dom.append(containerElement, dom.$('div.messages'));
    dom.hide(this._messageContainer);
    this._splitView = new _splitview.SplitView(containerElement, {
      orientation: 1
      /* HORIZONTAL */

    }); // editor

    this._previewContainer = dom.append(containerElement, dom.$('div.preview.inline'));
    var options = {
      scrollBeyondLastLine: false,
      scrollbar: {
        verticalScrollbarSize: 14,
        horizontal: 'auto',
        useShadows: true,
        verticalHasArrows: false,
        horizontalHasArrows: false,
        alwaysConsumeMouseWheel: false
      },
      overviewRulerLanes: 2,
      fixedOverflowWidgets: true,
      minimap: {
        enabled: false
      }
    };
    this._preview = this._instantiationService.createInstance(_embeddedCodeEditorWidget.EmbeddedCodeEditorWidget, this._previewContainer, options, this.editor);
    dom.hide(this._previewContainer);
    this._previewNotAvailableMessage = _textModel.TextModel.createFromString(nls.localize('missingPreviewMessage', "no preview available")); // tree

    this._treeContainer = dom.append(containerElement, dom.$('div.ref-tree.inline'));
    var treeOptions = {
      ariaLabel: nls.localize('treeAriaLabel', "References"),
      keyboardSupport: this._defaultTreeKeyboardSupport,
      accessibilityProvider: new _referencesTree.AriaProvider(),
      keyboardNavigationLabelProvider: this._instantiationService.createInstance(_referencesTree.StringRepresentationProvider),
      identityProvider: new _referencesTree.IdentityProvider(),
      overrideStyles: {
        listBackground: peekView.peekViewResultsBackground
      }
    };
    this._tree = this._instantiationService.createInstance(_listService.WorkbenchAsyncDataTree, 'ReferencesWidget', this._treeContainer, new _referencesTree.Delegate(), [this._instantiationService.createInstance(_referencesTree.FileReferencesRenderer), this._instantiationService.createInstance(_referencesTree.OneReferenceRenderer)], this._instantiationService.createInstance(_referencesTree.DataSource), treeOptions); // split stuff

    this._splitView.addView({
      onDidChange: _event.Event.None,
      element: this._previewContainer,
      minimumSize: 200,
      maximumSize: Number.MAX_VALUE,
      layout: function (width) {
        _this._preview.layout({
          height: _this._dim.height,
          width: width
        });
      }
    }, _splitview.Sizing.Distribute);

    this._splitView.addView({
      onDidChange: _event.Event.None,
      element: this._treeContainer,
      minimumSize: 100,
      maximumSize: Number.MAX_VALUE,
      layout: function (width) {
        _this._treeContainer.style.height = _this._dim.height + "px";
        _this._treeContainer.style.width = width + "px";

        _this._tree.layout(_this._dim.height, width);
      }
    }, _splitview.Sizing.Distribute);

    this._disposables.add(this._splitView.onDidSashChange(function () {
      if (_this._dim.width) {
        _this.layoutData.ratio = _this._splitView.getViewSize(0) / _this._dim.width;
      }
    }, undefined)); // listen on selection and focus


    var onEvent = function (element, kind) {
      if (element instanceof _referencesModel.OneReference) {
        if (kind === 'show') {
          _this._revealReference(element, false);
        }

        _this._onDidSelectReference.fire({
          element: element,
          kind: kind,
          source: 'tree'
        });
      }
    };

    this._tree.onDidChangeFocus(function (e) {
      onEvent(e.elements[0], 'show');
    });

    this._tree.onDidOpen(function (e) {
      if (e.browserEvent instanceof MouseEvent && (e.browserEvent.ctrlKey || e.browserEvent.metaKey || e.browserEvent.altKey)) {
        // modifier-click -> open to the side
        onEvent(e.elements[0], 'side');
      } else if (e.browserEvent instanceof KeyboardEvent || e.browserEvent instanceof MouseEvent && e.browserEvent.detail === 2 || e.browserEvent.tapCount === 2) {
        // keybinding (list service command)
        // OR double click
        // OR double tap
        // -> close widget and goto target
        onEvent(e.elements[0], 'goto');
      } else {
        // preview location
        onEvent(e.elements[0], 'show');
      }
    });

    dom.hide(this._treeContainer);
  };

  ReferenceWidget.prototype._onWidth = function (width) {
    if (this._dim) {
      this._doLayoutBody(this._dim.height, width);
    }
  };

  ReferenceWidget.prototype._doLayoutBody = function (heightInPixel, widthInPixel) {
    _super.prototype._doLayoutBody.call(this, heightInPixel, widthInPixel);

    this._dim = {
      height: heightInPixel,
      width: widthInPixel
    };
    this.layoutData.heightInLines = this._viewZone ? this._viewZone.heightInLines : this.layoutData.heightInLines;

    this._splitView.layout(widthInPixel);

    this._splitView.resizeView(0, widthInPixel * this.layoutData.ratio);
  };

  ReferenceWidget.prototype.setSelection = function (selection) {
    var _this = this;

    return this._revealReference(selection, true).then(function () {
      if (!_this._model) {
        // disposed
        return;
      } // show in tree


      _this._tree.setSelection([selection]);

      _this._tree.setFocus([selection]);
    });
  };

  ReferenceWidget.prototype.setModel = function (newModel) {
    // clean up
    this._disposeOnNewModel.clear();

    this._model = newModel;

    if (this._model) {
      return this._onNewModel();
    }

    return Promise.resolve();
  };

  ReferenceWidget.prototype._onNewModel = function () {
    var _this = this;

    if (!this._model) {
      return Promise.resolve(undefined);
    }

    if (this._model.isEmpty) {
      this.setTitle('');
      this._messageContainer.innerHTML = nls.localize('noResults', "No results");
      dom.show(this._messageContainer);
      return Promise.resolve(undefined);
    }

    dom.hide(this._messageContainer);
    this._decorationsManager = new DecorationsManager(this._preview, this._model);

    this._disposeOnNewModel.add(this._decorationsManager); // listen on model changes


    this._disposeOnNewModel.add(this._model.onDidChangeReferenceRange(function (reference) {
      return _this._tree.rerender(reference);
    })); // listen on editor


    this._disposeOnNewModel.add(this._preview.onMouseDown(function (e) {
      var event = e.event,
          target = e.target;

      if (event.detail !== 2) {
        return;
      }

      var element = _this._getFocusedReference();

      if (!element) {
        return;
      }

      _this._onDidSelectReference.fire({
        element: {
          uri: element.uri,
          range: target.range
        },
        kind: event.ctrlKey || event.metaKey || event.altKey ? 'side' : 'open',
        source: 'editor'
      });
    })); // make sure things are rendered


    dom.addClass(this.container, 'results-loaded');
    dom.show(this._treeContainer);
    dom.show(this._previewContainer);

    this._splitView.layout(this._dim.width);

    this.focus(); // pick input and a reference to begin with

    return this._tree.setInput(this._model.groups.length === 1 ? this._model.groups[0] : this._model);
  };

  ReferenceWidget.prototype._getFocusedReference = function () {
    var element = this._tree.getFocus()[0];

    if (element instanceof _referencesModel.OneReference) {
      return element;
    } else if (element instanceof _referencesModel.FileReferences) {
      if (element.children.length > 0) {
        return element.children[0];
      }
    }

    return undefined;
  };

  ReferenceWidget.prototype._revealReference = function (reference, revealParent) {
    return __awaiter(this, void 0, void 0, function () {
      var promise, ref, model, scrollType, sel;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            // check if there is anything to do...
            if (this._revealedReference === reference) {
              return [2
              /*return*/
              ];
            }

            this._revealedReference = reference; // Update widget header

            if (reference.uri.scheme !== _network.Schemas.inMemory) {
              this.setTitle((0, _resources.basenameOrAuthority)(reference.uri), this._uriLabel.getUriLabel((0, _resources.dirname)(reference.uri)));
            } else {
              this.setTitle(nls.localize('peekView.alternateTitle', "References"));
            }

            promise = this._textModelResolverService.createModelReference(reference.uri);
            if (!(this._tree.getInput() === reference.parent)) return [3
            /*break*/
            , 1];

            this._tree.reveal(reference);

            return [3
            /*break*/
            , 3];

          case 1:
            if (revealParent) {
              this._tree.reveal(reference.parent);
            }

            return [4
            /*yield*/
            , this._tree.expand(reference.parent)];

          case 2:
            _a.sent();

            this._tree.reveal(reference);

            _a.label = 3;

          case 3:
            return [4
            /*yield*/
            , promise];

          case 4:
            ref = _a.sent();

            if (!this._model) {
              // disposed
              ref.dispose();
              return [2
              /*return*/
              ];
            }

            (0, _lifecycle.dispose)(this._previewModelReference);
            model = ref.object;

            if (model) {
              scrollType = this._preview.getModel() === model.textEditorModel ? 0
              /* Smooth */
              : 1
              /* Immediate */
              ;
              sel = _range.Range.lift(reference.range).collapseToStart();
              this._previewModelReference = ref;

              this._preview.setModel(model.textEditorModel);

              this._preview.setSelection(sel);

              this._preview.revealRangeInCenter(sel, scrollType);
            } else {
              this._preview.setModel(this._previewNotAvailableMessage);

              ref.dispose();
            }

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  ReferenceWidget = __decorate([__param(3, _themeService.IThemeService), __param(4, _resolverService.ITextModelService), __param(5, _instantiation.IInstantiationService), __param(6, peekView.IPeekViewService), __param(7, _label.ILabelService)], ReferenceWidget);
  return ReferenceWidget;
}(peekView.PeekViewWidget);

exports.ReferenceWidget = ReferenceWidget;
// theming
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var findMatchHighlightColor = theme.getColor(peekView.peekViewResultsMatchHighlight);

  if (findMatchHighlightColor) {
    collector.addRule(".monaco-editor .reference-zone-widget .ref-tree .referenceMatch .highlight { background-color: " + findMatchHighlightColor + "; }");
  }

  var referenceHighlightColor = theme.getColor(peekView.peekViewEditorMatchHighlight);

  if (referenceHighlightColor) {
    collector.addRule(".monaco-editor .reference-zone-widget .preview .reference-decoration { background-color: " + referenceHighlightColor + "; }");
  }

  var referenceHighlightBorder = theme.getColor(peekView.peekViewEditorMatchHighlightBorder);

  if (referenceHighlightBorder) {
    collector.addRule(".monaco-editor .reference-zone-widget .preview .reference-decoration { border: 2px solid " + referenceHighlightBorder + "; box-sizing: border-box; }");
  }

  var hcOutline = theme.getColor(_colorRegistry.activeContrastBorder);

  if (hcOutline) {
    collector.addRule(".monaco-editor .reference-zone-widget .ref-tree .referenceMatch .highlight { border: 1px dotted " + hcOutline + "; box-sizing: border-box; }");
  }

  var resultsBackground = theme.getColor(peekView.peekViewResultsBackground);

  if (resultsBackground) {
    collector.addRule(".monaco-editor .reference-zone-widget .ref-tree { background-color: " + resultsBackground + "; }");
  }

  var resultsMatchForeground = theme.getColor(peekView.peekViewResultsMatchForeground);

  if (resultsMatchForeground) {
    collector.addRule(".monaco-editor .reference-zone-widget .ref-tree { color: " + resultsMatchForeground + "; }");
  }

  var resultsFileForeground = theme.getColor(peekView.peekViewResultsFileForeground);

  if (resultsFileForeground) {
    collector.addRule(".monaco-editor .reference-zone-widget .ref-tree .reference-file { color: " + resultsFileForeground + "; }");
  }

  var resultsSelectedBackground = theme.getColor(peekView.peekViewResultsSelectionBackground);

  if (resultsSelectedBackground) {
    collector.addRule(".monaco-editor .reference-zone-widget .ref-tree .monaco-list:focus .monaco-list-rows > .monaco-list-row.selected:not(.highlighted) { background-color: " + resultsSelectedBackground + "; }");
  }

  var resultsSelectedForeground = theme.getColor(peekView.peekViewResultsSelectionForeground);

  if (resultsSelectedForeground) {
    collector.addRule(".monaco-editor .reference-zone-widget .ref-tree .monaco-list:focus .monaco-list-rows > .monaco-list-row.selected:not(.highlighted) { color: " + resultsSelectedForeground + " !important; }");
  }

  var editorBackground = theme.getColor(peekView.peekViewEditorBackground);

  if (editorBackground) {
    collector.addRule(".monaco-editor .reference-zone-widget .preview .monaco-editor .monaco-editor-background," + ".monaco-editor .reference-zone-widget .preview .monaco-editor .inputarea.ime-input {" + ("\tbackground-color: " + editorBackground + ";") + "}");
  }

  var editorGutterBackground = theme.getColor(peekView.peekViewEditorGutterBackground);

  if (editorGutterBackground) {
    collector.addRule(".monaco-editor .reference-zone-widget .preview .monaco-editor .margin {" + ("\tbackground-color: " + editorGutterBackground + ";") + "}");
  }
});
},{"./referencesWidget.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/peek/referencesWidget.css","../../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../../base/common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../../base/common/network.js":"../node_modules/monaco-editor/esm/vs/base/common/network.js","../../../../base/common/resources.js":"../node_modules/monaco-editor/esm/vs/base/common/resources.js","../../../browser/widget/embeddedCodeEditorWidget.js":"../node_modules/monaco-editor/esm/vs/editor/browser/widget/embeddedCodeEditorWidget.js","../../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../../common/services/resolverService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/resolverService.js","./referencesTree.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/peek/referencesTree.js","../../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../../platform/label/common/label.js":"../node_modules/monaco-editor/esm/vs/platform/label/common/label.js","../../../../platform/list/browser/listService.js":"../node_modules/monaco-editor/esm/vs/platform/list/browser/listService.js","../../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../peekView/peekView.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/peekView/peekView.js","../referencesModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/referencesModel.js","../../../../base/browser/ui/splitview/splitview.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/splitview/splitview.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/peek/referencesController.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReferencesController = exports.ctxReferenceSearchVisible = void 0;

var nls = _interopRequireWildcard(require("../../../../nls.js"));

var _errors = require("../../../../base/common/errors.js");

var _lifecycle = require("../../../../base/common/lifecycle.js");

var _codeEditorService = require("../../../browser/services/codeEditorService.js");

var _instantiation = require("../../../../platform/instantiation/common/instantiation.js");

var _contextkey = require("../../../../platform/contextkey/common/contextkey.js");

var _configuration = require("../../../../platform/configuration/common/configuration.js");

var _storage = require("../../../../platform/storage/common/storage.js");

var _referencesModel = require("../referencesModel.js");

var _referencesWidget = require("./referencesWidget.js");

var _range = require("../../../common/core/range.js");

var _position = require("../../../common/core/position.js");

var _notification = require("../../../../platform/notification/common/notification.js");

var _async = require("../../../../base/common/async.js");

var _peekView = require("../../peekView/peekView.js");

var _listService = require("../../../../platform/list/browser/listService.js");

var _keybindingsRegistry = require("../../../../platform/keybinding/common/keybindingsRegistry.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var ctxReferenceSearchVisible = new _contextkey.RawContextKey('referenceSearchVisible', false);
exports.ctxReferenceSearchVisible = ctxReferenceSearchVisible;

var ReferencesController =
/** @class */
function () {
  function ReferencesController(_defaultTreeKeyboardSupport, _editor, contextKeyService, _editorService, _notificationService, _instantiationService, _storageService, _configurationService) {
    this._defaultTreeKeyboardSupport = _defaultTreeKeyboardSupport;
    this._editor = _editor;
    this._editorService = _editorService;
    this._notificationService = _notificationService;
    this._instantiationService = _instantiationService;
    this._storageService = _storageService;
    this._configurationService = _configurationService;
    this._disposables = new _lifecycle.DisposableStore();
    this._requestIdPool = 0;
    this._ignoreModelChangeEvent = false;
    this._referenceSearchVisible = ctxReferenceSearchVisible.bindTo(contextKeyService);
  }

  ReferencesController.get = function (editor) {
    return editor.getContribution(ReferencesController.ID);
  };

  ReferencesController.prototype.dispose = function () {
    this._referenceSearchVisible.reset();

    this._disposables.dispose();

    (0, _lifecycle.dispose)(this._widget);
    (0, _lifecycle.dispose)(this._model);
    this._widget = undefined;
    this._model = undefined;
  };

  ReferencesController.prototype.toggleWidget = function (range, modelPromise, peekMode) {
    var _this = this; // close current widget and return early is position didn't change


    var widgetPosition;

    if (this._widget) {
      widgetPosition = this._widget.position;
    }

    this.closeWidget();

    if (!!widgetPosition && range.containsPosition(widgetPosition)) {
      return;
    }

    this._peekMode = peekMode;

    this._referenceSearchVisible.set(true); // close the widget on model/mode changes


    this._disposables.add(this._editor.onDidChangeModelLanguage(function () {
      _this.closeWidget();
    }));

    this._disposables.add(this._editor.onDidChangeModel(function () {
      if (!_this._ignoreModelChangeEvent) {
        _this.closeWidget();
      }
    }));

    var storageKey = 'peekViewLayout';

    var data = _referencesWidget.LayoutData.fromJSON(this._storageService.get(storageKey, 0
    /* GLOBAL */
    , '{}'));

    this._widget = this._instantiationService.createInstance(_referencesWidget.ReferenceWidget, this._editor, this._defaultTreeKeyboardSupport, data);

    this._widget.setTitle(nls.localize('labelLoading', "Loading..."));

    this._widget.show(range);

    this._disposables.add(this._widget.onDidClose(function () {
      modelPromise.cancel();

      if (_this._widget) {
        _this._storageService.store(storageKey, JSON.stringify(_this._widget.layoutData), 0
        /* GLOBAL */
        );

        _this._widget = undefined;
      }

      _this.closeWidget();
    }));

    this._disposables.add(this._widget.onDidSelectReference(function (event) {
      var element = event.element,
          kind = event.kind;

      if (!element) {
        return;
      }

      switch (kind) {
        case 'open':
          if (event.source !== 'editor' || !_this._configurationService.getValue('editor.stablePeek')) {
            // when stable peek is configured we don't close
            // the peek window on selecting the editor
            _this.openReference(element, false);
          }

          break;

        case 'side':
          _this.openReference(element, true);

          break;

        case 'goto':
          if (peekMode) {
            _this._gotoReference(element);
          } else {
            _this.openReference(element, false);
          }

          break;
      }
    }));

    var requestId = ++this._requestIdPool;
    modelPromise.then(function (model) {
      // still current request? widget still open?
      if (requestId !== _this._requestIdPool || !_this._widget) {
        return undefined;
      }

      if (_this._model) {
        _this._model.dispose();
      }

      _this._model = model; // show widget

      return _this._widget.setModel(_this._model).then(function () {
        if (_this._widget && _this._model && _this._editor.hasModel()) {
          // might have been closed
          // set title
          if (!_this._model.isEmpty) {
            _this._widget.setMetaTitle(nls.localize('metaTitle.N', "{0} ({1})", _this._model.title, _this._model.references.length));
          } else {
            _this._widget.setMetaTitle('');
          } // set 'best' selection


          var uri = _this._editor.getModel().uri;

          var pos = new _position.Position(range.startLineNumber, range.startColumn);

          var selection = _this._model.nearestReference(uri, pos);

          if (selection) {
            return _this._widget.setSelection(selection);
          }
        }

        return undefined;
      });
    }, function (error) {
      _this._notificationService.error(error);
    });
  };

  ReferencesController.prototype.goToNextOrPreviousReference = function (fwd) {
    return __awaiter(this, void 0, void 0, function () {
      var currentPosition, source, target, editorFocus;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this._editor.hasModel() || !this._model || !this._widget) {
              // can be called while still resolving...
              return [2
              /*return*/
              ];
            }

            currentPosition = this._widget.position;

            if (!currentPosition) {
              return [2
              /*return*/
              ];
            }

            source = this._model.nearestReference(this._editor.getModel().uri, currentPosition);

            if (!source) {
              return [2
              /*return*/
              ];
            }

            target = this._model.nextOrPreviousReference(source, fwd);
            editorFocus = this._editor.hasTextFocus();
            return [4
            /*yield*/
            , this._widget.setSelection(target)];

          case 1:
            _a.sent();

            return [4
            /*yield*/
            , this._gotoReference(target)];

          case 2:
            _a.sent();

            if (editorFocus) {
              this._editor.focus();
            }

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  ReferencesController.prototype.closeWidget = function () {
    this._referenceSearchVisible.reset();

    this._disposables.clear();

    (0, _lifecycle.dispose)(this._widget);
    (0, _lifecycle.dispose)(this._model);
    this._widget = undefined;
    this._model = undefined;

    this._editor.focus();

    this._requestIdPool += 1; // Cancel pending requests
  };

  ReferencesController.prototype._gotoReference = function (ref) {
    var _this = this;

    if (this._widget) {
      this._widget.hide();
    }

    this._ignoreModelChangeEvent = true;

    var range = _range.Range.lift(ref.range).collapseToStart();

    return this._editorService.openCodeEditor({
      resource: ref.uri,
      options: {
        selection: range
      }
    }, this._editor).then(function (openedEditor) {
      var _a;

      _this._ignoreModelChangeEvent = false;

      if (!openedEditor || !_this._widget) {
        // something went wrong...
        _this.closeWidget();

        return;
      }

      if (_this._editor === openedEditor) {
        //
        _this._widget.show(range);

        _this._widget.focus();
      } else {
        // we opened a different editor instance which means a different controller instance.
        // therefore we stop with this controller and continue with the other
        var other = ReferencesController.get(openedEditor);

        var model_1 = _this._model.clone();

        _this.closeWidget();

        openedEditor.focus();
        other.toggleWidget(range, (0, _async.createCancelablePromise)(function (_) {
          return Promise.resolve(model_1);
        }), (_a = _this._peekMode, _a !== null && _a !== void 0 ? _a : false));
      }
    }, function (err) {
      _this._ignoreModelChangeEvent = false;
      (0, _errors.onUnexpectedError)(err);
    });
  };

  ReferencesController.prototype.openReference = function (ref, sideBySide) {
    // clear stage
    if (!sideBySide) {
      this.closeWidget();
    }

    var uri = ref.uri,
        range = ref.range;

    this._editorService.openCodeEditor({
      resource: uri,
      options: {
        selection: range
      }
    }, this._editor, sideBySide);
  };

  ReferencesController.ID = 'editor.contrib.referencesController';
  ReferencesController = __decorate([__param(2, _contextkey.IContextKeyService), __param(3, _codeEditorService.ICodeEditorService), __param(4, _notification.INotificationService), __param(5, _instantiation.IInstantiationService), __param(6, _storage.IStorageService), __param(7, _configuration.IConfigurationService)], ReferencesController);
  return ReferencesController;
}();

exports.ReferencesController = ReferencesController;

function withController(accessor, fn) {
  var outerEditor = (0, _peekView.getOuterEditor)(accessor);

  if (!outerEditor) {
    return;
  }

  var controller = ReferencesController.get(outerEditor);

  if (controller) {
    fn(controller);
  }
}

_keybindingsRegistry.KeybindingsRegistry.registerCommandAndKeybindingRule({
  id: 'goToNextReference',
  weight: 200
  /* WorkbenchContrib */
  + 50,
  primary: 62
  /* F4 */
  ,
  secondary: [70
  /* F12 */
  ],
  when: ctxReferenceSearchVisible,
  handler: function (accessor) {
    withController(accessor, function (controller) {
      controller.goToNextOrPreviousReference(true);
    });
  }
});

_keybindingsRegistry.KeybindingsRegistry.registerCommandAndKeybindingRule({
  id: 'goToNextReferenceFromEmbeddedEditor',
  weight: 100
  /* EditorContrib */
  + 50,
  primary: 62
  /* F4 */
  ,
  secondary: [70
  /* F12 */
  ],
  when: _peekView.PeekContext.inPeekEditor,
  handler: function (accessor) {
    withController(accessor, function (controller) {
      controller.goToNextOrPreviousReference(true);
    });
  }
});

_keybindingsRegistry.KeybindingsRegistry.registerCommandAndKeybindingRule({
  id: 'goToPreviousReference',
  weight: 200
  /* WorkbenchContrib */
  + 50,
  primary: 1024
  /* Shift */
  | 62
  /* F4 */
  ,
  secondary: [1024
  /* Shift */
  | 70
  /* F12 */
  ],
  when: ctxReferenceSearchVisible,
  handler: function (accessor) {
    withController(accessor, function (controller) {
      controller.goToNextOrPreviousReference(false);
    });
  }
});

_keybindingsRegistry.KeybindingsRegistry.registerCommandAndKeybindingRule({
  id: 'goToPreviousReferenceFromEmbeddedEditor',
  weight: 100
  /* EditorContrib */
  + 50,
  primary: 1024
  /* Shift */
  | 62
  /* F4 */
  ,
  secondary: [1024
  /* Shift */
  | 70
  /* F12 */
  ],
  when: _peekView.PeekContext.inPeekEditor,
  handler: function (accessor) {
    withController(accessor, function (controller) {
      controller.goToNextOrPreviousReference(false);
    });
  }
});

_keybindingsRegistry.KeybindingsRegistry.registerCommandAndKeybindingRule({
  id: 'closeReferenceSearch',
  weight: 200
  /* WorkbenchContrib */
  + 50,
  primary: 9
  /* Escape */
  ,
  secondary: [1024
  /* Shift */
  | 9
  /* Escape */
  ],
  when: _contextkey.ContextKeyExpr.and(ctxReferenceSearchVisible, _contextkey.ContextKeyExpr.not('config.editor.stablePeek')),
  handler: function (accessor) {
    withController(accessor, function (controller) {
      return controller.closeWidget();
    });
  }
});

_keybindingsRegistry.KeybindingsRegistry.registerCommandAndKeybindingRule({
  id: 'closeReferenceSearchEditor',
  weight: 100
  /* EditorContrib */
  - 101,
  primary: 9
  /* Escape */
  ,
  secondary: [1024
  /* Shift */
  | 9
  /* Escape */
  ],
  when: _contextkey.ContextKeyExpr.and(_peekView.PeekContext.inPeekEditor, _contextkey.ContextKeyExpr.not('config.editor.stablePeek')),
  handler: function (accessor) {
    withController(accessor, function (controller) {
      return controller.closeWidget();
    });
  }
});

_keybindingsRegistry.KeybindingsRegistry.registerCommandAndKeybindingRule({
  id: 'openReferenceToSide',
  weight: 100
  /* EditorContrib */
  ,
  primary: 2048
  /* CtrlCmd */
  | 3
  /* Enter */
  ,
  mac: {
    primary: 256
    /* WinCtrl */
    | 3
    /* Enter */

  },
  when: _contextkey.ContextKeyExpr.and(ctxReferenceSearchVisible, _listService.WorkbenchListFocusContextKey),
  handler: function (accessor) {
    var _a;

    var listService = accessor.get(_listService.IListService);
    var focus = (_a = listService.lastFocusedList) === null || _a === void 0 ? void 0 : _a.getFocus();

    if (Array.isArray(focus) && focus[0] instanceof _referencesModel.OneReference) {
      withController(accessor, function (controller) {
        return controller.openReference(focus[0], true);
      });
    }
  }
});
},{"../../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../browser/services/codeEditorService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService.js","../../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../../platform/configuration/common/configuration.js":"../node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js","../../../../platform/storage/common/storage.js":"../node_modules/monaco-editor/esm/vs/platform/storage/common/storage.js","../referencesModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/referencesModel.js","./referencesWidget.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/peek/referencesWidget.js","../../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../../../platform/notification/common/notification.js":"../node_modules/monaco-editor/esm/vs/platform/notification/common/notification.js","../../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../peekView/peekView.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/peekView/peekView.js","../../../../platform/list/browser/listService.js":"../node_modules/monaco-editor/esm/vs/platform/list/browser/listService.js","../../../../platform/keybinding/common/keybindingsRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/goToSymbol.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefinitionsAtPosition = getDefinitionsAtPosition;
exports.getDeclarationsAtPosition = getDeclarationsAtPosition;
exports.getImplementationsAtPosition = getImplementationsAtPosition;
exports.getTypeDefinitionsAtPosition = getTypeDefinitionsAtPosition;
exports.getReferencesAtPosition = getReferencesAtPosition;

var _arrays = require("../../../base/common/arrays.js");

var _cancellation = require("../../../base/common/cancellation.js");

var _errors = require("../../../base/common/errors.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _modes = require("../../common/modes.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

function getLocationLinks(model, position, registry, provide) {
  var provider = registry.ordered(model); // get results

  var promises = provider.map(function (provider) {
    return Promise.resolve(provide(provider, model, position)).then(undefined, function (err) {
      (0, _errors.onUnexpectedExternalError)(err);
      return undefined;
    });
  });
  return Promise.all(promises).then(_arrays.flatten).then(_arrays.coalesce);
}

function getDefinitionsAtPosition(model, position, token) {
  return getLocationLinks(model, position, _modes.DefinitionProviderRegistry, function (provider, model, position) {
    return provider.provideDefinition(model, position, token);
  });
}

function getDeclarationsAtPosition(model, position, token) {
  return getLocationLinks(model, position, _modes.DeclarationProviderRegistry, function (provider, model, position) {
    return provider.provideDeclaration(model, position, token);
  });
}

function getImplementationsAtPosition(model, position, token) {
  return getLocationLinks(model, position, _modes.ImplementationProviderRegistry, function (provider, model, position) {
    return provider.provideImplementation(model, position, token);
  });
}

function getTypeDefinitionsAtPosition(model, position, token) {
  return getLocationLinks(model, position, _modes.TypeDefinitionProviderRegistry, function (provider, model, position) {
    return provider.provideTypeDefinition(model, position, token);
  });
}

function getReferencesAtPosition(model, position, compact, token) {
  var _this = this;

  return getLocationLinks(model, position, _modes.ReferenceProviderRegistry, function (provider, model, position) {
    return __awaiter(_this, void 0, void 0, function () {
      var result, resultWithoutDeclaration;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , provider.provideReferences(model, position, {
              includeDeclaration: true
            }, token)];

          case 1:
            result = _a.sent();

            if (!compact || !result || result.length !== 2) {
              return [2
              /*return*/
              , result];
            }

            return [4
            /*yield*/
            , provider.provideReferences(model, position, {
              includeDeclaration: false
            }, token)];

          case 2:
            resultWithoutDeclaration = _a.sent();

            if (resultWithoutDeclaration && resultWithoutDeclaration.length === 1) {
              return [2
              /*return*/
              , resultWithoutDeclaration];
            }

            return [2
            /*return*/
            , result];
        }
      });
    });
  });
}

(0, _editorExtensions.registerDefaultLanguageCommand)('_executeDefinitionProvider', function (model, position) {
  return getDefinitionsAtPosition(model, position, _cancellation.CancellationToken.None);
});
(0, _editorExtensions.registerDefaultLanguageCommand)('_executeDeclarationProvider', function (model, position) {
  return getDeclarationsAtPosition(model, position, _cancellation.CancellationToken.None);
});
(0, _editorExtensions.registerDefaultLanguageCommand)('_executeImplementationProvider', function (model, position) {
  return getImplementationsAtPosition(model, position, _cancellation.CancellationToken.None);
});
(0, _editorExtensions.registerDefaultLanguageCommand)('_executeTypeDefinitionProvider', function (model, position) {
  return getTypeDefinitionsAtPosition(model, position, _cancellation.CancellationToken.None);
});
(0, _editorExtensions.registerDefaultLanguageCommand)('_executeReferenceProvider', function (model, position) {
  return getReferencesAtPosition(model, position, false, _cancellation.CancellationToken.None);
});
},{"../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/symbolNavigation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ISymbolNavigationService = exports.ctxHasSymbols = void 0;

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _extensions = require("../../../platform/instantiation/common/extensions.js");

var _keybindingsRegistry = require("../../../platform/keybinding/common/keybindingsRegistry.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _codeEditorService = require("../../browser/services/codeEditorService.js");

var _range = require("../../common/core/range.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _event = require("../../../base/common/event.js");

var _nls = require("../../../nls.js");

var _keybinding = require("../../../platform/keybinding/common/keybinding.js");

var _notification = require("../../../platform/notification/common/notification.js");

var _resources = require("../../../base/common/resources.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var ctxHasSymbols = new _contextkey.RawContextKey('hasSymbols', false);
exports.ctxHasSymbols = ctxHasSymbols;
var ISymbolNavigationService = (0, _instantiation.createDecorator)('ISymbolNavigationService');
exports.ISymbolNavigationService = ISymbolNavigationService;

var SymbolNavigationService =
/** @class */
function () {
  function SymbolNavigationService(contextKeyService, _editorService, _notificationService, _keybindingService) {
    this._editorService = _editorService;
    this._notificationService = _notificationService;
    this._keybindingService = _keybindingService;
    this._currentModel = undefined;
    this._currentIdx = -1;
    this._ignoreEditorChange = false;
    this._ctxHasSymbols = ctxHasSymbols.bindTo(contextKeyService);
  }

  SymbolNavigationService.prototype.reset = function () {
    this._ctxHasSymbols.reset();

    (0, _lifecycle.dispose)(this._currentState);
    (0, _lifecycle.dispose)(this._currentMessage);
    this._currentModel = undefined;
    this._currentIdx = -1;
  };

  SymbolNavigationService.prototype.put = function (anchor) {
    var _this = this;

    var refModel = anchor.parent.parent;

    if (refModel.references.length <= 1) {
      this.reset();
      return;
    }

    this._currentModel = refModel;
    this._currentIdx = refModel.references.indexOf(anchor);

    this._ctxHasSymbols.set(true);

    this._showMessage();

    var editorState = new EditorState(this._editorService);
    var listener = editorState.onDidChange(function (_) {
      if (_this._ignoreEditorChange) {
        return;
      }

      var editor = _this._editorService.getActiveCodeEditor();

      if (!editor) {
        return;
      }

      var model = editor.getModel();
      var position = editor.getPosition();

      if (!model || !position) {
        return;
      }

      var seenUri = false;
      var seenPosition = false;

      for (var _i = 0, _a = refModel.references; _i < _a.length; _i++) {
        var reference = _a[_i];

        if ((0, _resources.isEqual)(reference.uri, model.uri)) {
          seenUri = true;
          seenPosition = seenPosition || _range.Range.containsPosition(reference.range, position);
        } else if (seenUri) {
          break;
        }
      }

      if (!seenUri || !seenPosition) {
        _this.reset();
      }
    });
    this._currentState = (0, _lifecycle.combinedDisposable)(editorState, listener);
  };

  SymbolNavigationService.prototype.revealNext = function (source) {
    var _this = this;

    if (!this._currentModel) {
      return Promise.resolve();
    } // get next result and advance


    this._currentIdx += 1;
    this._currentIdx %= this._currentModel.references.length;
    var reference = this._currentModel.references[this._currentIdx]; // status

    this._showMessage(); // open editor, ignore events while that happens


    this._ignoreEditorChange = true;
    return this._editorService.openCodeEditor({
      resource: reference.uri,
      options: {
        selection: _range.Range.collapseToStart(reference.range),
        revealInCenterIfOutsideViewport: true
      }
    }, source).finally(function () {
      _this._ignoreEditorChange = false;
    });
  };

  SymbolNavigationService.prototype._showMessage = function () {
    (0, _lifecycle.dispose)(this._currentMessage);

    var kb = this._keybindingService.lookupKeybinding('editor.gotoNextSymbolFromResult');

    var message = kb ? (0, _nls.localize)('location.kb', "Symbol {0} of {1}, {2} for next", this._currentIdx + 1, this._currentModel.references.length, kb.getLabel()) : (0, _nls.localize)('location', "Symbol {0} of {1}", this._currentIdx + 1, this._currentModel.references.length);
    this._currentMessage = this._notificationService.status(message);
  };

  SymbolNavigationService = __decorate([__param(0, _contextkey.IContextKeyService), __param(1, _codeEditorService.ICodeEditorService), __param(2, _notification.INotificationService), __param(3, _keybinding.IKeybindingService)], SymbolNavigationService);
  return SymbolNavigationService;
}();

(0, _extensions.registerSingleton)(ISymbolNavigationService, SymbolNavigationService, true);
(0, _editorExtensions.registerEditorCommand)(new (
/** @class */
function (_super) {
  __extends(class_1, _super);

  function class_1() {
    return _super.call(this, {
      id: 'editor.gotoNextSymbolFromResult',
      precondition: ctxHasSymbols,
      kbOpts: {
        weight: 100
        /* EditorContrib */
        ,
        primary: 70
        /* F12 */

      }
    }) || this;
  }

  class_1.prototype.runEditorCommand = function (accessor, editor) {
    return accessor.get(ISymbolNavigationService).revealNext(editor);
  };

  return class_1;
}(_editorExtensions.EditorCommand))());

_keybindingsRegistry.KeybindingsRegistry.registerCommandAndKeybindingRule({
  id: 'editor.gotoNextSymbolFromResult.cancel',
  weight: 100
  /* EditorContrib */
  ,
  when: ctxHasSymbols,
  primary: 9
  /* Escape */
  ,
  handler: function (accessor) {
    accessor.get(ISymbolNavigationService).reset();
  }
}); //


var EditorState =
/** @class */
function () {
  function EditorState(editorService) {
    this._listener = new Map();
    this._disposables = new _lifecycle.DisposableStore();
    this._onDidChange = new _event.Emitter();
    this.onDidChange = this._onDidChange.event;

    this._disposables.add(editorService.onCodeEditorRemove(this._onDidRemoveEditor, this));

    this._disposables.add(editorService.onCodeEditorAdd(this._onDidAddEditor, this));

    editorService.listCodeEditors().forEach(this._onDidAddEditor, this);
  }

  EditorState.prototype.dispose = function () {
    this._disposables.dispose();

    this._onDidChange.dispose();

    this._listener.forEach(_lifecycle.dispose);
  };

  EditorState.prototype._onDidAddEditor = function (editor) {
    var _this = this;

    this._listener.set(editor, (0, _lifecycle.combinedDisposable)(editor.onDidChangeCursorPosition(function (_) {
      return _this._onDidChange.fire({
        editor: editor
      });
    }), editor.onDidChangeModelContent(function (_) {
      return _this._onDidChange.fire({
        editor: editor
      });
    })));
  };

  EditorState.prototype._onDidRemoveEditor = function (editor) {
    (0, _lifecycle.dispose)(this._listener.get(editor));

    this._listener.delete(editor);
  };

  EditorState = __decorate([__param(0, _codeEditorService.ICodeEditorService)], EditorState);
  return EditorState;
}();
},{"../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../platform/instantiation/common/extensions.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/extensions.js","../../../platform/keybinding/common/keybindingsRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../browser/services/codeEditorService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../platform/keybinding/common/keybinding.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding.js","../../../platform/notification/common/notification.js":"../node_modules/monaco-editor/esm/vs/platform/notification/common/notification.js","../../../base/common/resources.js":"../node_modules/monaco-editor/esm/vs/base/common/resources.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/goToCommands.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefinitionAction = void 0;

var _aria = require("../../../base/browser/ui/aria/aria.js");

var _async = require("../../../base/common/async.js");

var _keyCodes = require("../../../base/common/keyCodes.js");

var _platform = require("../../../base/common/platform.js");

var _editorBrowser = require("../../browser/editorBrowser.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _codeEditorService = require("../../browser/services/codeEditorService.js");

var corePosition = _interopRequireWildcard(require("../../common/core/position.js"));

var _range = require("../../common/core/range.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _modes = require("../../common/modes.js");

var _messageController = require("../message/messageController.js");

var _peekView = require("../peekView/peekView.js");

var _referencesController = require("./peek/referencesController.js");

var _referencesModel = require("./referencesModel.js");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _actions = require("../../../platform/actions/common/actions.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _notification = require("../../../platform/notification/common/notification.js");

var _progress = require("../../../platform/progress/common/progress.js");

var _goToSymbol = require("./goToSymbol.js");

var _commands = require("../../../platform/commands/common/commands.js");

var _editorState = require("../../browser/core/editorState.js");

var _symbolNavigation = require("./symbolNavigation.js");

var _browser = require("../../../base/browser/browser.js");

var _uri = require("../../../base/common/uri.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _types = require("../../../base/common/types.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var _a, _b, _c, _d, _e, _f, _g, _h;

_actions.MenuRegistry.appendMenuItem(7
/* EditorContext */
, {
  submenu: 8
  /* EditorContextPeek */
  ,
  title: nls.localize('peek.submenu', "Peek"),
  group: 'navigation',
  order: 100
});

var SymbolNavigationAction =
/** @class */
function (_super) {
  __extends(SymbolNavigationAction, _super);

  function SymbolNavigationAction(configuration, opts) {
    var _this = _super.call(this, opts) || this;

    _this._configuration = configuration;
    return _this;
  }

  SymbolNavigationAction.prototype.run = function (accessor, editor) {
    var _this = this;

    if (!editor.hasModel()) {
      return Promise.resolve(undefined);
    }

    var notificationService = accessor.get(_notification.INotificationService);
    var editorService = accessor.get(_codeEditorService.ICodeEditorService);
    var progressService = accessor.get(_progress.IEditorProgressService);
    var symbolNavService = accessor.get(_symbolNavigation.ISymbolNavigationService);
    var model = editor.getModel();
    var pos = editor.getPosition();
    var cts = new _editorState.EditorStateCancellationTokenSource(editor, 1
    /* Value */
    | 4
    /* Position */
    );
    var promise = (0, _async.raceCancellation)(this._getLocationModel(model, pos, cts.token), cts.token).then(function (references) {
      return __awaiter(_this, void 0, void 0, function () {
        var altAction, altActionId, referenceCount, info;
        return __generator(this, function (_a) {
          if (!references || cts.token.isCancellationRequested) {
            return [2
            /*return*/
            ];
          }

          (0, _aria.alert)(references.ariaMessage);

          if (references.referenceAt(model.uri, pos)) {
            altActionId = this._getAlternativeCommand(editor);

            if (altActionId !== this.id) {
              altAction = editor.getAction(altActionId);
            }
          }

          referenceCount = references.references.length;

          if (referenceCount === 0) {
            // no result -> show message
            if (!this._configuration.muteMessage) {
              info = model.getWordAtPosition(pos);

              _messageController.MessageController.get(editor).showMessage(this._getNoResultFoundMessage(info), pos);
            }
          } else if (referenceCount === 1 && altAction) {
            // already at the only result, run alternative
            altAction.run();
          } else {
            // normal results handling
            return [2
            /*return*/
            , this._onResult(editorService, symbolNavService, editor, references)];
          }

          return [2
          /*return*/
          ];
        });
      });
    }, function (err) {
      // report an error
      notificationService.error(err);
    }).finally(function () {
      cts.dispose();
    });
    progressService.showWhile(promise, 250);
    return promise;
  };

  SymbolNavigationAction.prototype._onResult = function (editorService, symbolNavService, editor, model) {
    return __awaiter(this, void 0, void 0, function () {
      var gotoLocation, next, peek, targetEditor;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            gotoLocation = this._getGoToPreference(editor);
            if (!(this._configuration.openInPeek || gotoLocation === 'peek' && model.references.length > 1)) return [3
            /*break*/
            , 1];

            this._openInPeek(editor, model);

            return [3
            /*break*/
            , 3];

          case 1:
            next = model.firstReference();
            peek = model.references.length > 1 && gotoLocation === 'gotoAndPeek';
            return [4
            /*yield*/
            , this._openReference(editor, editorService, next, this._configuration.openToSide, !peek)];

          case 2:
            targetEditor = _a.sent();

            if (peek && targetEditor) {
              this._openInPeek(targetEditor, model);
            } else {
              model.dispose();
            } // keep remaining locations around when using
            // 'goto'-mode


            if (gotoLocation === 'goto') {
              symbolNavService.put(next);
            }

            _a.label = 3;

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  SymbolNavigationAction.prototype._openReference = function (editor, editorService, reference, sideBySide, highlight) {
    return __awaiter(this, void 0, void 0, function () {
      var range, targetEditor, modelNow_1, ids_1;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            range = undefined;

            if ((0, _modes.isLocationLink)(reference)) {
              range = reference.targetSelectionRange;
            }

            if (!range) {
              range = reference.range;
            }

            return [4
            /*yield*/
            , editorService.openCodeEditor({
              resource: reference.uri,
              options: {
                selection: _range.Range.collapseToStart(range),
                revealInCenterIfOutsideViewport: true
              }
            }, editor, sideBySide)];

          case 1:
            targetEditor = _a.sent();

            if (!targetEditor) {
              return [2
              /*return*/
              , undefined];
            }

            if (highlight) {
              modelNow_1 = targetEditor.getModel();
              ids_1 = targetEditor.deltaDecorations([], [{
                range: range,
                options: {
                  className: 'symbolHighlight'
                }
              }]);
              setTimeout(function () {
                if (targetEditor.getModel() === modelNow_1) {
                  targetEditor.deltaDecorations(ids_1, []);
                }
              }, 350);
            }

            return [2
            /*return*/
            , targetEditor];
        }
      });
    });
  };

  SymbolNavigationAction.prototype._openInPeek = function (target, model) {
    var controller = _referencesController.ReferencesController.get(target);

    if (controller && target.hasModel()) {
      controller.toggleWidget(target.getSelection(), (0, _async.createCancelablePromise)(function (_) {
        return Promise.resolve(model);
      }), this._configuration.openInPeek);
    } else {
      model.dispose();
    }
  };

  return SymbolNavigationAction;
}(_editorExtensions.EditorAction); //#region --- DEFINITION


var DefinitionAction =
/** @class */
function (_super) {
  __extends(DefinitionAction, _super);

  function DefinitionAction() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DefinitionAction.prototype._getLocationModel = function (model, position, token) {
    return __awaiter(this, void 0, void 0, function () {
      var _a;

      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = _referencesModel.ReferencesModel.bind;
            return [4
            /*yield*/
            , (0, _goToSymbol.getDefinitionsAtPosition)(model, position, token)];

          case 1:
            return [2
            /*return*/
            , new (_a.apply(_referencesModel.ReferencesModel, [void 0, _b.sent(), nls.localize('def.title', 'Definitions')]))()];
        }
      });
    });
  };

  DefinitionAction.prototype._getNoResultFoundMessage = function (info) {
    return info && info.word ? nls.localize('noResultWord', "No definition found for '{0}'", info.word) : nls.localize('generic.noResults', "No definition found");
  };

  DefinitionAction.prototype._getAlternativeCommand = function (editor) {
    return editor.getOption(39
    /* gotoLocation */
    ).alternativeDefinitionCommand;
  };

  DefinitionAction.prototype._getGoToPreference = function (editor) {
    return editor.getOption(39
    /* gotoLocation */
    ).multipleDefinitions;
  };

  return DefinitionAction;
}(SymbolNavigationAction);

exports.DefinitionAction = DefinitionAction;
var goToDefinitionKb = _platform.isWeb && !_browser.isStandalone ? 2048
/* CtrlCmd */
| 70
/* F12 */
: 70
/* F12 */
;
(0, _editorExtensions.registerEditorAction)((_a =
/** @class */
function (_super) {
  __extends(GoToDefinitionAction, _super);

  function GoToDefinitionAction() {
    var _this = _super.call(this, {
      openToSide: false,
      openInPeek: false,
      muteMessage: false
    }, {
      id: GoToDefinitionAction.id,
      label: nls.localize('actions.goToDecl.label', "Go to Definition"),
      alias: 'Go to Definition',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.hasDefinitionProvider, _editorContextKeys.EditorContextKeys.isInEmbeddedEditor.toNegated()),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: goToDefinitionKb,
        weight: 100
        /* EditorContrib */

      },
      contextMenuOpts: {
        group: 'navigation',
        order: 1.1
      },
      menuOpts: {
        menuId: 17
        /* MenubarGoMenu */
        ,
        group: '4_symbol_nav',
        order: 2,
        title: nls.localize({
          key: 'miGotoDefinition',
          comment: ['&& denotes a mnemonic']
        }, "Go to &&Definition")
      }
    }) || this;

    _commands.CommandsRegistry.registerCommandAlias('editor.action.goToDeclaration', GoToDefinitionAction.id);

    return _this;
  }

  return GoToDefinitionAction;
}(DefinitionAction), _a.id = 'editor.action.revealDefinition', _a));
(0, _editorExtensions.registerEditorAction)((_b =
/** @class */
function (_super) {
  __extends(OpenDefinitionToSideAction, _super);

  function OpenDefinitionToSideAction() {
    var _this = _super.call(this, {
      openToSide: true,
      openInPeek: false,
      muteMessage: false
    }, {
      id: OpenDefinitionToSideAction.id,
      label: nls.localize('actions.goToDeclToSide.label', "Open Definition to the Side"),
      alias: 'Open Definition to the Side',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.hasDefinitionProvider, _editorContextKeys.EditorContextKeys.isInEmbeddedEditor.toNegated()),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , goToDefinitionKb),
        weight: 100
        /* EditorContrib */

      }
    }) || this;

    _commands.CommandsRegistry.registerCommandAlias('editor.action.openDeclarationToTheSide', OpenDefinitionToSideAction.id);

    return _this;
  }

  return OpenDefinitionToSideAction;
}(DefinitionAction), _b.id = 'editor.action.revealDefinitionAside', _b));
(0, _editorExtensions.registerEditorAction)((_c =
/** @class */
function (_super) {
  __extends(PeekDefinitionAction, _super);

  function PeekDefinitionAction() {
    var _this = _super.call(this, {
      openToSide: false,
      openInPeek: true,
      muteMessage: false
    }, {
      id: PeekDefinitionAction.id,
      label: nls.localize('actions.previewDecl.label', "Peek Definition"),
      alias: 'Peek Definition',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.hasDefinitionProvider, _peekView.PeekContext.notInPeekEditor, _editorContextKeys.EditorContextKeys.isInEmbeddedEditor.toNegated()),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 512
        /* Alt */
        | 70
        /* F12 */
        ,
        linux: {
          primary: 2048
          /* CtrlCmd */
          | 1024
          /* Shift */
          | 68
          /* F10 */

        },
        weight: 100
        /* EditorContrib */

      },
      contextMenuOpts: {
        menuId: 8
        /* EditorContextPeek */
        ,
        group: 'peek',
        order: 2
      }
    }) || this;

    _commands.CommandsRegistry.registerCommandAlias('editor.action.previewDeclaration', PeekDefinitionAction.id);

    return _this;
  }

  return PeekDefinitionAction;
}(DefinitionAction), _c.id = 'editor.action.peekDefinition', _c)); //#endregion
//#region --- DECLARATION

var DeclarationAction =
/** @class */
function (_super) {
  __extends(DeclarationAction, _super);

  function DeclarationAction() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DeclarationAction.prototype._getLocationModel = function (model, position, token) {
    return __awaiter(this, void 0, void 0, function () {
      var _a;

      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = _referencesModel.ReferencesModel.bind;
            return [4
            /*yield*/
            , (0, _goToSymbol.getDeclarationsAtPosition)(model, position, token)];

          case 1:
            return [2
            /*return*/
            , new (_a.apply(_referencesModel.ReferencesModel, [void 0, _b.sent(), nls.localize('decl.title', 'Declarations')]))()];
        }
      });
    });
  };

  DeclarationAction.prototype._getNoResultFoundMessage = function (info) {
    return info && info.word ? nls.localize('decl.noResultWord', "No declaration found for '{0}'", info.word) : nls.localize('decl.generic.noResults', "No declaration found");
  };

  DeclarationAction.prototype._getAlternativeCommand = function (editor) {
    return editor.getOption(39
    /* gotoLocation */
    ).alternativeDeclarationCommand;
  };

  DeclarationAction.prototype._getGoToPreference = function (editor) {
    return editor.getOption(39
    /* gotoLocation */
    ).multipleDeclarations;
  };

  return DeclarationAction;
}(SymbolNavigationAction);

(0, _editorExtensions.registerEditorAction)((_d =
/** @class */
function (_super) {
  __extends(GoToDeclarationAction, _super);

  function GoToDeclarationAction() {
    return _super.call(this, {
      openToSide: false,
      openInPeek: false,
      muteMessage: false
    }, {
      id: GoToDeclarationAction.id,
      label: nls.localize('actions.goToDeclaration.label', "Go to Declaration"),
      alias: 'Go to Declaration',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.hasDeclarationProvider, _editorContextKeys.EditorContextKeys.isInEmbeddedEditor.toNegated()),
      contextMenuOpts: {
        group: 'navigation',
        order: 1.3
      },
      menuOpts: {
        menuId: 17
        /* MenubarGoMenu */
        ,
        group: '4_symbol_nav',
        order: 3,
        title: nls.localize({
          key: 'miGotoDeclaration',
          comment: ['&& denotes a mnemonic']
        }, "Go to &&Declaration")
      }
    }) || this;
  }

  GoToDeclarationAction.prototype._getNoResultFoundMessage = function (info) {
    return info && info.word ? nls.localize('decl.noResultWord', "No declaration found for '{0}'", info.word) : nls.localize('decl.generic.noResults', "No declaration found");
  };

  return GoToDeclarationAction;
}(DeclarationAction), _d.id = 'editor.action.revealDeclaration', _d));
(0, _editorExtensions.registerEditorAction)(
/** @class */
function (_super) {
  __extends(PeekDeclarationAction, _super);

  function PeekDeclarationAction() {
    return _super.call(this, {
      openToSide: false,
      openInPeek: true,
      muteMessage: false
    }, {
      id: 'editor.action.peekDeclaration',
      label: nls.localize('actions.peekDecl.label', "Peek Declaration"),
      alias: 'Peek Declaration',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.hasDeclarationProvider, _peekView.PeekContext.notInPeekEditor, _editorContextKeys.EditorContextKeys.isInEmbeddedEditor.toNegated()),
      contextMenuOpts: {
        menuId: 8
        /* EditorContextPeek */
        ,
        group: 'peek',
        order: 3
      }
    }) || this;
  }

  return PeekDeclarationAction;
}(DeclarationAction)); //#endregion
//#region --- TYPE DEFINITION

var TypeDefinitionAction =
/** @class */
function (_super) {
  __extends(TypeDefinitionAction, _super);

  function TypeDefinitionAction() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TypeDefinitionAction.prototype._getLocationModel = function (model, position, token) {
    return __awaiter(this, void 0, void 0, function () {
      var _a;

      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = _referencesModel.ReferencesModel.bind;
            return [4
            /*yield*/
            , (0, _goToSymbol.getTypeDefinitionsAtPosition)(model, position, token)];

          case 1:
            return [2
            /*return*/
            , new (_a.apply(_referencesModel.ReferencesModel, [void 0, _b.sent(), nls.localize('typedef.title', 'Type Definitions')]))()];
        }
      });
    });
  };

  TypeDefinitionAction.prototype._getNoResultFoundMessage = function (info) {
    return info && info.word ? nls.localize('goToTypeDefinition.noResultWord', "No type definition found for '{0}'", info.word) : nls.localize('goToTypeDefinition.generic.noResults', "No type definition found");
  };

  TypeDefinitionAction.prototype._getAlternativeCommand = function (editor) {
    return editor.getOption(39
    /* gotoLocation */
    ).alternativeTypeDefinitionCommand;
  };

  TypeDefinitionAction.prototype._getGoToPreference = function (editor) {
    return editor.getOption(39
    /* gotoLocation */
    ).multipleTypeDefinitions;
  };

  return TypeDefinitionAction;
}(SymbolNavigationAction);

(0, _editorExtensions.registerEditorAction)((_e =
/** @class */
function (_super) {
  __extends(GoToTypeDefinitionAction, _super);

  function GoToTypeDefinitionAction() {
    return _super.call(this, {
      openToSide: false,
      openInPeek: false,
      muteMessage: false
    }, {
      id: GoToTypeDefinitionAction.ID,
      label: nls.localize('actions.goToTypeDefinition.label', "Go to Type Definition"),
      alias: 'Go to Type Definition',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.hasTypeDefinitionProvider, _editorContextKeys.EditorContextKeys.isInEmbeddedEditor.toNegated()),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 0,
        weight: 100
        /* EditorContrib */

      },
      contextMenuOpts: {
        group: 'navigation',
        order: 1.4
      },
      menuOpts: {
        menuId: 17
        /* MenubarGoMenu */
        ,
        group: '4_symbol_nav',
        order: 3,
        title: nls.localize({
          key: 'miGotoTypeDefinition',
          comment: ['&& denotes a mnemonic']
        }, "Go to &&Type Definition")
      }
    }) || this;
  }

  return GoToTypeDefinitionAction;
}(TypeDefinitionAction), _e.ID = 'editor.action.goToTypeDefinition', _e));
(0, _editorExtensions.registerEditorAction)((_f =
/** @class */
function (_super) {
  __extends(PeekTypeDefinitionAction, _super);

  function PeekTypeDefinitionAction() {
    return _super.call(this, {
      openToSide: false,
      openInPeek: true,
      muteMessage: false
    }, {
      id: PeekTypeDefinitionAction.ID,
      label: nls.localize('actions.peekTypeDefinition.label', "Peek Type Definition"),
      alias: 'Peek Type Definition',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.hasTypeDefinitionProvider, _peekView.PeekContext.notInPeekEditor, _editorContextKeys.EditorContextKeys.isInEmbeddedEditor.toNegated()),
      contextMenuOpts: {
        menuId: 8
        /* EditorContextPeek */
        ,
        group: 'peek',
        order: 4
      }
    }) || this;
  }

  return PeekTypeDefinitionAction;
}(TypeDefinitionAction), _f.ID = 'editor.action.peekTypeDefinition', _f)); //#endregion
//#region --- IMPLEMENTATION

var ImplementationAction =
/** @class */
function (_super) {
  __extends(ImplementationAction, _super);

  function ImplementationAction() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ImplementationAction.prototype._getLocationModel = function (model, position, token) {
    return __awaiter(this, void 0, void 0, function () {
      var _a;

      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = _referencesModel.ReferencesModel.bind;
            return [4
            /*yield*/
            , (0, _goToSymbol.getImplementationsAtPosition)(model, position, token)];

          case 1:
            return [2
            /*return*/
            , new (_a.apply(_referencesModel.ReferencesModel, [void 0, _b.sent(), nls.localize('impl.title', 'Implementations')]))()];
        }
      });
    });
  };

  ImplementationAction.prototype._getNoResultFoundMessage = function (info) {
    return info && info.word ? nls.localize('goToImplementation.noResultWord', "No implementation found for '{0}'", info.word) : nls.localize('goToImplementation.generic.noResults', "No implementation found");
  };

  ImplementationAction.prototype._getAlternativeCommand = function (editor) {
    return editor.getOption(39
    /* gotoLocation */
    ).alternativeImplementationCommand;
  };

  ImplementationAction.prototype._getGoToPreference = function (editor) {
    return editor.getOption(39
    /* gotoLocation */
    ).multipleImplementations;
  };

  return ImplementationAction;
}(SymbolNavigationAction);

(0, _editorExtensions.registerEditorAction)((_g =
/** @class */
function (_super) {
  __extends(GoToImplementationAction, _super);

  function GoToImplementationAction() {
    return _super.call(this, {
      openToSide: false,
      openInPeek: false,
      muteMessage: false
    }, {
      id: GoToImplementationAction.ID,
      label: nls.localize('actions.goToImplementation.label', "Go to Implementations"),
      alias: 'Go to Implementations',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.hasImplementationProvider, _editorContextKeys.EditorContextKeys.isInEmbeddedEditor.toNegated()),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 70
        /* F12 */
        ,
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 17
        /* MenubarGoMenu */
        ,
        group: '4_symbol_nav',
        order: 4,
        title: nls.localize({
          key: 'miGotoImplementation',
          comment: ['&& denotes a mnemonic']
        }, "Go to &&Implementations")
      },
      contextMenuOpts: {
        group: 'navigation',
        order: 1.45
      }
    }) || this;
  }

  return GoToImplementationAction;
}(ImplementationAction), _g.ID = 'editor.action.goToImplementation', _g));
(0, _editorExtensions.registerEditorAction)((_h =
/** @class */
function (_super) {
  __extends(PeekImplementationAction, _super);

  function PeekImplementationAction() {
    return _super.call(this, {
      openToSide: false,
      openInPeek: true,
      muteMessage: false
    }, {
      id: PeekImplementationAction.ID,
      label: nls.localize('actions.peekImplementation.label', "Peek Implementations"),
      alias: 'Peek Implementations',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.hasImplementationProvider, _peekView.PeekContext.notInPeekEditor, _editorContextKeys.EditorContextKeys.isInEmbeddedEditor.toNegated()),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 70
        /* F12 */
        ,
        weight: 100
        /* EditorContrib */

      },
      contextMenuOpts: {
        menuId: 8
        /* EditorContextPeek */
        ,
        group: 'peek',
        order: 5
      }
    }) || this;
  }

  return PeekImplementationAction;
}(ImplementationAction), _h.ID = 'editor.action.peekImplementation', _h)); //#endregion
//#region --- REFERENCES

var ReferencesAction =
/** @class */
function (_super) {
  __extends(ReferencesAction, _super);

  function ReferencesAction() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ReferencesAction.prototype._getNoResultFoundMessage = function (info) {
    return info ? nls.localize('references.no', "No references found for '{0}'", info.word) : nls.localize('references.noGeneric', "No references found");
  };

  ReferencesAction.prototype._getAlternativeCommand = function (editor) {
    return editor.getOption(39
    /* gotoLocation */
    ).alternativeReferenceCommand;
  };

  ReferencesAction.prototype._getGoToPreference = function (editor) {
    return editor.getOption(39
    /* gotoLocation */
    ).multipleReferences;
  };

  return ReferencesAction;
}(SymbolNavigationAction);

(0, _editorExtensions.registerEditorAction)(
/** @class */
function (_super) {
  __extends(GoToReferencesAction, _super);

  function GoToReferencesAction() {
    return _super.call(this, {
      openToSide: false,
      openInPeek: false,
      muteMessage: false
    }, {
      id: 'editor.action.goToReferences',
      label: nls.localize('goToReferences.label', "Go to References"),
      alias: 'Go to References',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.hasReferenceProvider, _peekView.PeekContext.notInPeekEditor, _editorContextKeys.EditorContextKeys.isInEmbeddedEditor.toNegated()),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 1024
        /* Shift */
        | 70
        /* F12 */
        ,
        weight: 100
        /* EditorContrib */

      },
      contextMenuOpts: {
        group: 'navigation',
        order: 1.45
      },
      menuOpts: {
        menuId: 17
        /* MenubarGoMenu */
        ,
        group: '4_symbol_nav',
        order: 5,
        title: nls.localize({
          key: 'miGotoReference',
          comment: ['&& denotes a mnemonic']
        }, "Go to &&References")
      }
    }) || this;
  }

  GoToReferencesAction.prototype._getLocationModel = function (model, position, token) {
    return __awaiter(this, void 0, void 0, function () {
      var _a;

      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = _referencesModel.ReferencesModel.bind;
            return [4
            /*yield*/
            , (0, _goToSymbol.getReferencesAtPosition)(model, position, true, token)];

          case 1:
            return [2
            /*return*/
            , new (_a.apply(_referencesModel.ReferencesModel, [void 0, _b.sent(), nls.localize('ref.title', 'References')]))()];
        }
      });
    });
  };

  return GoToReferencesAction;
}(ReferencesAction));
(0, _editorExtensions.registerEditorAction)(
/** @class */
function (_super) {
  __extends(PeekReferencesAction, _super);

  function PeekReferencesAction() {
    return _super.call(this, {
      openToSide: false,
      openInPeek: true,
      muteMessage: false
    }, {
      id: 'editor.action.referenceSearch.trigger',
      label: nls.localize('references.action.label', "Peek References"),
      alias: 'Peek References',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.hasReferenceProvider, _peekView.PeekContext.notInPeekEditor, _editorContextKeys.EditorContextKeys.isInEmbeddedEditor.toNegated()),
      contextMenuOpts: {
        menuId: 8
        /* EditorContextPeek */
        ,
        group: 'peek',
        order: 6
      }
    }) || this;
  }

  PeekReferencesAction.prototype._getLocationModel = function (model, position, token) {
    return __awaiter(this, void 0, void 0, function () {
      var _a;

      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = _referencesModel.ReferencesModel.bind;
            return [4
            /*yield*/
            , (0, _goToSymbol.getReferencesAtPosition)(model, position, false, token)];

          case 1:
            return [2
            /*return*/
            , new (_a.apply(_referencesModel.ReferencesModel, [void 0, _b.sent(), nls.localize('ref.title', 'References')]))()];
        }
      });
    });
  };

  return PeekReferencesAction;
}(ReferencesAction)); //#endregion
//#region --- GENERIC goto symbols command

var GenericGoToLocationAction =
/** @class */
function (_super) {
  __extends(GenericGoToLocationAction, _super);

  function GenericGoToLocationAction(_references, _gotoMultipleBehaviour) {
    var _this = _super.call(this, {
      muteMessage: true,
      openInPeek: false,
      openToSide: false
    }, {
      id: 'editor.action.goToLocation',
      label: nls.localize('label.generic', "Go To Any Symbol"),
      alias: 'Go To Any Symbol',
      precondition: _contextkey.ContextKeyExpr.and(_peekView.PeekContext.notInPeekEditor, _editorContextKeys.EditorContextKeys.isInEmbeddedEditor.toNegated())
    }) || this;

    _this._references = _references;
    _this._gotoMultipleBehaviour = _gotoMultipleBehaviour;
    return _this;
  }

  GenericGoToLocationAction.prototype._getLocationModel = function (_model, _position, _token) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        return [2
        /*return*/
        , new _referencesModel.ReferencesModel(this._references, nls.localize('generic.title', 'Locations'))];
      });
    });
  };

  GenericGoToLocationAction.prototype._getNoResultFoundMessage = function (info) {
    return info && nls.localize('generic.noResult', "No results for '{0}'", info.word) || '';
  };

  GenericGoToLocationAction.prototype._getGoToPreference = function (editor) {
    var _a;

    return _a = this._gotoMultipleBehaviour, _a !== null && _a !== void 0 ? _a : editor.getOption(39
    /* gotoLocation */
    ).multipleReferences;
  };

  GenericGoToLocationAction.prototype._getAlternativeCommand = function () {
    return '';
  };

  return GenericGoToLocationAction;
}(SymbolNavigationAction);

_commands.CommandsRegistry.registerCommand({
  id: 'editor.action.goToLocations',
  description: {
    description: 'Go to locations from a position in a file',
    args: [{
      name: 'uri',
      description: 'The text document in which to start',
      constraint: _uri.URI
    }, {
      name: 'position',
      description: 'The position at which to start',
      constraint: corePosition.Position.isIPosition
    }, {
      name: 'locations',
      description: 'An array of locations.',
      constraint: Array
    }, {
      name: 'multiple',
      description: 'Define what to do when having multiple results, either `peek`, `gotoAndPeek`, or `goto'
    }]
  },
  handler: function (accessor, resource, position, references, multiple) {
    return __awaiter(void 0, void 0, void 0, function () {
      var editorService, editor;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            (0, _types.assertType)(_uri.URI.isUri(resource));
            (0, _types.assertType)(corePosition.Position.isIPosition(position));
            (0, _types.assertType)(Array.isArray(references));
            (0, _types.assertType)(typeof multiple === 'undefined' || typeof multiple === 'string');
            editorService = accessor.get(_codeEditorService.ICodeEditorService);
            return [4
            /*yield*/
            , editorService.openCodeEditor({
              resource: resource
            }, editorService.getFocusedCodeEditor())];

          case 1:
            editor = _a.sent();

            if ((0, _editorBrowser.isCodeEditor)(editor)) {
              editor.setPosition(position);
              editor.revealPositionInCenterIfOutsideViewport(position, 0
              /* Smooth */
              );
              return [2
              /*return*/
              , editor.invokeWithinContext(function (accessor) {
                var command = new GenericGoToLocationAction(references, multiple);
                accessor.get(_instantiation.IInstantiationService).invokeFunction(command.run.bind(command), editor);
              })];
            }

            return [2
            /*return*/
            ];
        }
      });
    });
  }
}); //#endregion
//#region --- REFERENCE search special commands


_commands.CommandsRegistry.registerCommand({
  id: 'editor.action.findReferences',
  handler: function (accessor, resource, position) {
    (0, _types.assertType)(_uri.URI.isUri(resource));
    (0, _types.assertType)(corePosition.Position.isIPosition(position));
    var codeEditorService = accessor.get(_codeEditorService.ICodeEditorService);
    return codeEditorService.openCodeEditor({
      resource: resource
    }, codeEditorService.getFocusedCodeEditor()).then(function (control) {
      if (!(0, _editorBrowser.isCodeEditor)(control) || !control.hasModel()) {
        return undefined;
      }

      var controller = _referencesController.ReferencesController.get(control);

      if (!controller) {
        return undefined;
      }

      var references = (0, _async.createCancelablePromise)(function (token) {
        return (0, _goToSymbol.getReferencesAtPosition)(control.getModel(), corePosition.Position.lift(position), false, token).then(function (references) {
          return new _referencesModel.ReferencesModel(references, nls.localize('ref.title', 'References'));
        });
      });
      var range = new _range.Range(position.lineNumber, position.column, position.lineNumber, position.column);
      return Promise.resolve(controller.toggleWidget(range, references, false));
    });
  }
}); // use NEW command


_commands.CommandsRegistry.registerCommandAlias('editor.action.showReferences', 'editor.action.goToLocations'); //#endregion
},{"../../../base/browser/ui/aria/aria.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/keyCodes.js":"../node_modules/monaco-editor/esm/vs/base/common/keyCodes.js","../../../base/common/platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js","../../browser/editorBrowser.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorBrowser.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../browser/services/codeEditorService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../message/messageController.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/message/messageController.js","../peekView/peekView.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/peekView/peekView.js","./peek/referencesController.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/peek/referencesController.js","./referencesModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/referencesModel.js","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../platform/actions/common/actions.js":"../node_modules/monaco-editor/esm/vs/platform/actions/common/actions.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/notification/common/notification.js":"../node_modules/monaco-editor/esm/vs/platform/notification/common/notification.js","../../../platform/progress/common/progress.js":"../node_modules/monaco-editor/esm/vs/platform/progress/common/progress.js","./goToSymbol.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/goToSymbol.js","../../../platform/commands/common/commands.js":"../node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js","../../browser/core/editorState.js":"../node_modules/monaco-editor/esm/vs/editor/browser/core/editorState.js","./symbolNavigation.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/symbolNavigation.js","../../../base/browser/browser.js":"../node_modules/monaco-editor/esm/vs/base/browser/browser.js","../../../base/common/uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../base/common/types.js":"../node_modules/monaco-editor/esm/vs/base/common/types.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/link/goToDefinitionAtPosition.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/common/htmlContent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEmptyMarkdownString = isEmptyMarkdownString;
exports.isMarkdownString = isMarkdownString;
exports.markedStringsEquals = markedStringsEquals;
exports.removeMarkdownEscapes = removeMarkdownEscapes;
exports.parseHrefAndDimensions = parseHrefAndDimensions;
exports.MarkdownString = void 0;

var _arrays = require("./arrays.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var MarkdownString =
/** @class */
function () {
  function MarkdownString(value, isTrusted) {
    if (value === void 0) {
      value = '';
    }

    if (isTrusted === void 0) {
      isTrusted = false;
    }

    this._value = value;
    this._isTrusted = isTrusted;
  }

  Object.defineProperty(MarkdownString.prototype, "value", {
    get: function () {
      return this._value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkdownString.prototype, "isTrusted", {
    get: function () {
      return this._isTrusted;
    },
    enumerable: true,
    configurable: true
  });

  MarkdownString.prototype.appendText = function (value) {
    // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    this._value += value.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&').replace('\n', '\n\n');
    return this;
  };

  MarkdownString.prototype.appendMarkdown = function (value) {
    this._value += value;
    return this;
  };

  MarkdownString.prototype.appendCodeblock = function (langId, code) {
    this._value += '\n```';
    this._value += langId;
    this._value += '\n';
    this._value += code;
    this._value += '\n```\n';
    return this;
  };

  return MarkdownString;
}();

exports.MarkdownString = MarkdownString;

function isEmptyMarkdownString(oneOrMany) {
  if (isMarkdownString(oneOrMany)) {
    return !oneOrMany.value;
  } else if (Array.isArray(oneOrMany)) {
    return oneOrMany.every(isEmptyMarkdownString);
  } else {
    return true;
  }
}

function isMarkdownString(thing) {
  if (thing instanceof MarkdownString) {
    return true;
  } else if (thing && typeof thing === 'object') {
    return typeof thing.value === 'string' && (typeof thing.isTrusted === 'boolean' || thing.isTrusted === undefined);
  }

  return false;
}

function markedStringsEquals(a, b) {
  if (!a && !b) {
    return true;
  } else if (!a || !b) {
    return false;
  } else if (Array.isArray(a) && Array.isArray(b)) {
    return (0, _arrays.equals)(a, b, markdownStringEqual);
  } else if (isMarkdownString(a) && isMarkdownString(b)) {
    return markdownStringEqual(a, b);
  } else {
    return false;
  }
}

function markdownStringEqual(a, b) {
  if (a === b) {
    return true;
  } else if (!a || !b) {
    return false;
  } else {
    return a.value === b.value && a.isTrusted === b.isTrusted;
  }
}

function removeMarkdownEscapes(text) {
  if (!text) {
    return text;
  }

  return text.replace(/\\([\\`*_{}[\]()#+\-.!])/g, '$1');
}

function parseHrefAndDimensions(href) {
  var dimensions = [];
  var splitted = href.split('|').map(function (s) {
    return s.trim();
  });
  href = splitted[0];
  var parameters = splitted[1];

  if (parameters) {
    var heightFromParams = /height=(\d+)/.exec(parameters);
    var widthFromParams = /width=(\d+)/.exec(parameters);
    var height = heightFromParams ? heightFromParams[1] : '';
    var width = widthFromParams ? widthFromParams[1] : '';
    var widthIsFinite = isFinite(parseInt(width));
    var heightIsFinite = isFinite(parseInt(height));

    if (widthIsFinite) {
      dimensions.push("width=\"" + width + "\"");
    }

    if (heightIsFinite) {
      dimensions.push("height=\"" + height + "\"");
    }
  }

  return {
    href: href,
    dimensions: dimensions
  };
}
},{"./arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/link/clickLinkGesture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClickLinkGesture = exports.ClickLinkOptions = exports.ClickLinkKeyboardEvent = exports.ClickLinkMouseEvent = void 0;

var browser = _interopRequireWildcard(require("../../../../base/browser/browser.js"));

var _lifecycle = require("../../../../base/common/lifecycle.js");

var _event = require("../../../../base/common/event.js");

var platform = _interopRequireWildcard(require("../../../../base/common/platform.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

function hasModifier(e, modifier) {
  return !!e[modifier];
}
/**
 * An event that encapsulates the various trigger modifiers logic needed for go to definition.
 */


var ClickLinkMouseEvent =
/** @class */
function () {
  function ClickLinkMouseEvent(source, opts) {
    this.target = source.target;
    this.hasTriggerModifier = hasModifier(source.event, opts.triggerModifier);
    this.hasSideBySideModifier = hasModifier(source.event, opts.triggerSideBySideModifier);
    this.isNoneOrSingleMouseDown = browser.isIE || source.event.detail <= 1; // IE does not support event.detail properly
  }

  return ClickLinkMouseEvent;
}();

exports.ClickLinkMouseEvent = ClickLinkMouseEvent;

/**
 * An event that encapsulates the various trigger modifiers logic needed for go to definition.
 */
var ClickLinkKeyboardEvent =
/** @class */
function () {
  function ClickLinkKeyboardEvent(source, opts) {
    this.keyCodeIsTriggerKey = source.keyCode === opts.triggerKey;
    this.keyCodeIsSideBySideKey = source.keyCode === opts.triggerSideBySideKey;
    this.hasTriggerModifier = hasModifier(source, opts.triggerModifier);
  }

  return ClickLinkKeyboardEvent;
}();

exports.ClickLinkKeyboardEvent = ClickLinkKeyboardEvent;

var ClickLinkOptions =
/** @class */
function () {
  function ClickLinkOptions(triggerKey, triggerModifier, triggerSideBySideKey, triggerSideBySideModifier) {
    this.triggerKey = triggerKey;
    this.triggerModifier = triggerModifier;
    this.triggerSideBySideKey = triggerSideBySideKey;
    this.triggerSideBySideModifier = triggerSideBySideModifier;
  }

  ClickLinkOptions.prototype.equals = function (other) {
    return this.triggerKey === other.triggerKey && this.triggerModifier === other.triggerModifier && this.triggerSideBySideKey === other.triggerSideBySideKey && this.triggerSideBySideModifier === other.triggerSideBySideModifier;
  };

  return ClickLinkOptions;
}();

exports.ClickLinkOptions = ClickLinkOptions;

function createOptions(multiCursorModifier) {
  if (multiCursorModifier === 'altKey') {
    if (platform.isMacintosh) {
      return new ClickLinkOptions(57
      /* Meta */
      , 'metaKey', 6
      /* Alt */
      , 'altKey');
    }

    return new ClickLinkOptions(5
    /* Ctrl */
    , 'ctrlKey', 6
    /* Alt */
    , 'altKey');
  }

  if (platform.isMacintosh) {
    return new ClickLinkOptions(6
    /* Alt */
    , 'altKey', 57
    /* Meta */
    , 'metaKey');
  }

  return new ClickLinkOptions(6
  /* Alt */
  , 'altKey', 5
  /* Ctrl */
  , 'ctrlKey');
}

var ClickLinkGesture =
/** @class */
function (_super) {
  __extends(ClickLinkGesture, _super);

  function ClickLinkGesture(editor) {
    var _this = _super.call(this) || this;

    _this._onMouseMoveOrRelevantKeyDown = _this._register(new _event.Emitter());
    _this.onMouseMoveOrRelevantKeyDown = _this._onMouseMoveOrRelevantKeyDown.event;
    _this._onExecute = _this._register(new _event.Emitter());
    _this.onExecute = _this._onExecute.event;
    _this._onCancel = _this._register(new _event.Emitter());
    _this.onCancel = _this._onCancel.event;
    _this._editor = editor;
    _this._opts = createOptions(_this._editor.getOption(57
    /* multiCursorModifier */
    ));
    _this.lastMouseMoveEvent = null;
    _this.hasTriggerKeyOnMouseDown = false;

    _this._register(_this._editor.onDidChangeConfiguration(function (e) {
      if (e.hasChanged(57
      /* multiCursorModifier */
      )) {
        var newOpts = createOptions(_this._editor.getOption(57
        /* multiCursorModifier */
        ));

        if (_this._opts.equals(newOpts)) {
          return;
        }

        _this._opts = newOpts;
        _this.lastMouseMoveEvent = null;
        _this.hasTriggerKeyOnMouseDown = false;

        _this._onCancel.fire();
      }
    }));

    _this._register(_this._editor.onMouseMove(function (e) {
      return _this.onEditorMouseMove(new ClickLinkMouseEvent(e, _this._opts));
    }));

    _this._register(_this._editor.onMouseDown(function (e) {
      return _this.onEditorMouseDown(new ClickLinkMouseEvent(e, _this._opts));
    }));

    _this._register(_this._editor.onMouseUp(function (e) {
      return _this.onEditorMouseUp(new ClickLinkMouseEvent(e, _this._opts));
    }));

    _this._register(_this._editor.onKeyDown(function (e) {
      return _this.onEditorKeyDown(new ClickLinkKeyboardEvent(e, _this._opts));
    }));

    _this._register(_this._editor.onKeyUp(function (e) {
      return _this.onEditorKeyUp(new ClickLinkKeyboardEvent(e, _this._opts));
    }));

    _this._register(_this._editor.onMouseDrag(function () {
      return _this.resetHandler();
    }));

    _this._register(_this._editor.onDidChangeCursorSelection(function (e) {
      return _this.onDidChangeCursorSelection(e);
    }));

    _this._register(_this._editor.onDidChangeModel(function (e) {
      return _this.resetHandler();
    }));

    _this._register(_this._editor.onDidChangeModelContent(function () {
      return _this.resetHandler();
    }));

    _this._register(_this._editor.onDidScrollChange(function (e) {
      if (e.scrollTopChanged || e.scrollLeftChanged) {
        _this.resetHandler();
      }
    }));

    return _this;
  }

  ClickLinkGesture.prototype.onDidChangeCursorSelection = function (e) {
    if (e.selection && e.selection.startColumn !== e.selection.endColumn) {
      this.resetHandler(); // immediately stop this feature if the user starts to select (https://github.com/Microsoft/vscode/issues/7827)
    }
  };

  ClickLinkGesture.prototype.onEditorMouseMove = function (mouseEvent) {
    this.lastMouseMoveEvent = mouseEvent;

    this._onMouseMoveOrRelevantKeyDown.fire([mouseEvent, null]);
  };

  ClickLinkGesture.prototype.onEditorMouseDown = function (mouseEvent) {
    // We need to record if we had the trigger key on mouse down because someone might select something in the editor
    // holding the mouse down and then while mouse is down start to press Ctrl/Cmd to start a copy operation and then
    // release the mouse button without wanting to do the navigation.
    // With this flag we prevent goto definition if the mouse was down before the trigger key was pressed.
    this.hasTriggerKeyOnMouseDown = mouseEvent.hasTriggerModifier;
  };

  ClickLinkGesture.prototype.onEditorMouseUp = function (mouseEvent) {
    if (this.hasTriggerKeyOnMouseDown) {
      this._onExecute.fire(mouseEvent);
    }
  };

  ClickLinkGesture.prototype.onEditorKeyDown = function (e) {
    if (this.lastMouseMoveEvent && (e.keyCodeIsTriggerKey // User just pressed Ctrl/Cmd (normal goto definition)
    || e.keyCodeIsSideBySideKey && e.hasTriggerModifier // User pressed Ctrl/Cmd+Alt (goto definition to the side)
    )) {
      this._onMouseMoveOrRelevantKeyDown.fire([this.lastMouseMoveEvent, e]);
    } else if (e.hasTriggerModifier) {
      this._onCancel.fire(); // remove decorations if user holds another key with ctrl/cmd to prevent accident goto declaration

    }
  };

  ClickLinkGesture.prototype.onEditorKeyUp = function (e) {
    if (e.keyCodeIsTriggerKey) {
      this._onCancel.fire();
    }
  };

  ClickLinkGesture.prototype.resetHandler = function () {
    this.lastMouseMoveEvent = null;
    this.hasTriggerKeyOnMouseDown = false;

    this._onCancel.fire();
  };

  return ClickLinkGesture;
}(_lifecycle.Disposable);

exports.ClickLinkGesture = ClickLinkGesture;
},{"../../../../base/browser/browser.js":"../node_modules/monaco-editor/esm/vs/base/browser/browser.js","../../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../../base/common/platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/link/goToDefinitionAtPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GotoDefinitionAtPositionEditorContribution = void 0;

require("./goToDefinitionAtPosition.css");

var nls = _interopRequireWildcard(require("../../../../nls.js"));

var _async = require("../../../../base/common/async.js");

var _errors = require("../../../../base/common/errors.js");

var _htmlContent = require("../../../../base/common/htmlContent.js");

var _modeService = require("../../../common/services/modeService.js");

var _range = require("../../../common/core/range.js");

var _modes = require("../../../common/modes.js");

var _editorExtensions = require("../../../browser/editorExtensions.js");

var _goToSymbol = require("../goToSymbol.js");

var _lifecycle = require("../../../../base/common/lifecycle.js");

var _resolverService = require("../../../common/services/resolverService.js");

var _themeService = require("../../../../platform/theme/common/themeService.js");

var _colorRegistry = require("../../../../platform/theme/common/colorRegistry.js");

var _editorState = require("../../../browser/core/editorState.js");

var _goToCommands = require("../goToCommands.js");

var _clickLinkGesture = require("./clickLinkGesture.js");

var _position = require("../../../common/core/position.js");

var _types = require("../../../../base/common/types.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var GotoDefinitionAtPositionEditorContribution =
/** @class */
function () {
  function GotoDefinitionAtPositionEditorContribution(editor, textModelResolverService, modeService) {
    var _this = this;

    this.textModelResolverService = textModelResolverService;
    this.modeService = modeService;
    this.toUnhook = new _lifecycle.DisposableStore();
    this.toUnhookForKeyboard = new _lifecycle.DisposableStore();
    this.linkDecorations = [];
    this.currentWordAtPosition = null;
    this.previousPromise = null;
    this.editor = editor;
    var linkGesture = new _clickLinkGesture.ClickLinkGesture(editor);
    this.toUnhook.add(linkGesture);
    this.toUnhook.add(linkGesture.onMouseMoveOrRelevantKeyDown(function (_a) {
      var mouseEvent = _a[0],
          keyboardEvent = _a[1];

      _this.startFindDefinitionFromMouse(mouseEvent, (0, _types.withNullAsUndefined)(keyboardEvent));
    }));
    this.toUnhook.add(linkGesture.onExecute(function (mouseEvent) {
      if (_this.isEnabled(mouseEvent)) {
        _this.gotoDefinition(mouseEvent.target.position, mouseEvent.hasSideBySideModifier).then(function () {
          _this.removeLinkDecorations();
        }, function (error) {
          _this.removeLinkDecorations();

          (0, _errors.onUnexpectedError)(error);
        });
      }
    }));
    this.toUnhook.add(linkGesture.onCancel(function () {
      _this.removeLinkDecorations();

      _this.currentWordAtPosition = null;
    }));
  }

  GotoDefinitionAtPositionEditorContribution.get = function (editor) {
    return editor.getContribution(GotoDefinitionAtPositionEditorContribution.ID);
  };

  GotoDefinitionAtPositionEditorContribution.prototype.startFindDefinitionFromCursor = function (position) {
    // For issue: https://github.com/microsoft/vscode/issues/46257
    // equivalent to mouse move with meta/ctrl key
    var _this = this; // First find the definition and add decorations
    // to the editor to be shown with the content hover widget


    return this.startFindDefinition(position).then(function () {
      // Add listeners for editor cursor move and key down events
      // Dismiss the "extended" editor decorations when the user hides
      // the hover widget. There is no event for the widget itself so these
      // serve as a best effort. After removing the link decorations, the hover
      // widget is clean and will only show declarations per next request.
      _this.toUnhookForKeyboard.add(_this.editor.onDidChangeCursorPosition(function () {
        _this.currentWordAtPosition = null;

        _this.removeLinkDecorations();

        _this.toUnhookForKeyboard.clear();
      }));

      _this.toUnhookForKeyboard.add(_this.editor.onKeyDown(function (e) {
        if (e) {
          _this.currentWordAtPosition = null;

          _this.removeLinkDecorations();

          _this.toUnhookForKeyboard.clear();
        }
      }));
    });
  };

  GotoDefinitionAtPositionEditorContribution.prototype.startFindDefinitionFromMouse = function (mouseEvent, withKey) {
    // check if we are active and on a content widget
    if (mouseEvent.target.type === 9
    /* CONTENT_WIDGET */
    && this.linkDecorations.length > 0) {
      return;
    }

    if (!this.editor.hasModel() || !this.isEnabled(mouseEvent, withKey)) {
      this.currentWordAtPosition = null;
      this.removeLinkDecorations();
      return;
    }

    var position = mouseEvent.target.position;
    this.startFindDefinition(position);
  };

  GotoDefinitionAtPositionEditorContribution.prototype.startFindDefinition = function (position) {
    var _this = this;

    var _a; // Dispose listeners for updating decorations when using keyboard to show definition hover


    this.toUnhookForKeyboard.clear(); // Find word at mouse position

    var word = position ? (_a = this.editor.getModel()) === null || _a === void 0 ? void 0 : _a.getWordAtPosition(position) : null;

    if (!word) {
      this.currentWordAtPosition = null;
      this.removeLinkDecorations();
      return Promise.resolve(0);
    } // Return early if word at position is still the same


    if (this.currentWordAtPosition && this.currentWordAtPosition.startColumn === word.startColumn && this.currentWordAtPosition.endColumn === word.endColumn && this.currentWordAtPosition.word === word.word) {
      return Promise.resolve(0);
    }

    this.currentWordAtPosition = word; // Find definition and decorate word if found

    var state = new _editorState.EditorState(this.editor, 4
    /* Position */
    | 1
    /* Value */
    | 2
    /* Selection */
    | 8
    /* Scroll */
    );

    if (this.previousPromise) {
      this.previousPromise.cancel();
      this.previousPromise = null;
    }

    this.previousPromise = (0, _async.createCancelablePromise)(function (token) {
      return _this.findDefinition(position, token);
    });
    return this.previousPromise.then(function (results) {
      if (!results || !results.length || !state.validate(_this.editor)) {
        _this.removeLinkDecorations();

        return;
      } // Multiple results


      if (results.length > 1) {
        _this.addDecoration(new _range.Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn), new _htmlContent.MarkdownString().appendText(nls.localize('multipleResults', "Click to show {0} definitions.", results.length)));
      } // Single result
      else {
          var result_1 = results[0];

          if (!result_1.uri) {
            return;
          }

          _this.textModelResolverService.createModelReference(result_1.uri).then(function (ref) {
            if (!ref.object || !ref.object.textEditorModel) {
              ref.dispose();
              return;
            }

            var textEditorModel = ref.object.textEditorModel;
            var startLineNumber = result_1.range.startLineNumber;

            if (startLineNumber < 1 || startLineNumber > textEditorModel.getLineCount()) {
              // invalid range
              ref.dispose();
              return;
            }

            var previewValue = _this.getPreviewValue(textEditorModel, startLineNumber, result_1);

            var wordRange;

            if (result_1.originSelectionRange) {
              wordRange = _range.Range.lift(result_1.originSelectionRange);
            } else {
              wordRange = new _range.Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);
            }

            var modeId = _this.modeService.getModeIdByFilepathOrFirstLine(textEditorModel.uri);

            _this.addDecoration(wordRange, new _htmlContent.MarkdownString().appendCodeblock(modeId ? modeId : '', previewValue));

            ref.dispose();
          });
        }
    }).then(undefined, _errors.onUnexpectedError);
  };

  GotoDefinitionAtPositionEditorContribution.prototype.getPreviewValue = function (textEditorModel, startLineNumber, result) {
    var rangeToUse = result.targetSelectionRange ? result.range : this.getPreviewRangeBasedOnBrackets(textEditorModel, startLineNumber);
    var numberOfLinesInRange = rangeToUse.endLineNumber - rangeToUse.startLineNumber;

    if (numberOfLinesInRange >= GotoDefinitionAtPositionEditorContribution.MAX_SOURCE_PREVIEW_LINES) {
      rangeToUse = this.getPreviewRangeBasedOnIndentation(textEditorModel, startLineNumber);
    }

    var previewValue = this.stripIndentationFromPreviewRange(textEditorModel, startLineNumber, rangeToUse);
    return previewValue;
  };

  GotoDefinitionAtPositionEditorContribution.prototype.stripIndentationFromPreviewRange = function (textEditorModel, startLineNumber, previewRange) {
    var startIndent = textEditorModel.getLineFirstNonWhitespaceColumn(startLineNumber);
    var minIndent = startIndent;

    for (var endLineNumber = startLineNumber + 1; endLineNumber < previewRange.endLineNumber; endLineNumber++) {
      var endIndent = textEditorModel.getLineFirstNonWhitespaceColumn(endLineNumber);
      minIndent = Math.min(minIndent, endIndent);
    }

    var previewValue = textEditorModel.getValueInRange(previewRange).replace(new RegExp("^\\s{" + (minIndent - 1) + "}", 'gm'), '').trim();
    return previewValue;
  };

  GotoDefinitionAtPositionEditorContribution.prototype.getPreviewRangeBasedOnIndentation = function (textEditorModel, startLineNumber) {
    var startIndent = textEditorModel.getLineFirstNonWhitespaceColumn(startLineNumber);
    var maxLineNumber = Math.min(textEditorModel.getLineCount(), startLineNumber + GotoDefinitionAtPositionEditorContribution.MAX_SOURCE_PREVIEW_LINES);
    var endLineNumber = startLineNumber + 1;

    for (; endLineNumber < maxLineNumber; endLineNumber++) {
      var endIndent = textEditorModel.getLineFirstNonWhitespaceColumn(endLineNumber);

      if (startIndent === endIndent) {
        break;
      }
    }

    return new _range.Range(startLineNumber, 1, endLineNumber + 1, 1);
  };

  GotoDefinitionAtPositionEditorContribution.prototype.getPreviewRangeBasedOnBrackets = function (textEditorModel, startLineNumber) {
    var maxLineNumber = Math.min(textEditorModel.getLineCount(), startLineNumber + GotoDefinitionAtPositionEditorContribution.MAX_SOURCE_PREVIEW_LINES);
    var brackets = [];
    var ignoreFirstEmpty = true;
    var currentBracket = textEditorModel.findNextBracket(new _position.Position(startLineNumber, 1));

    while (currentBracket !== null) {
      if (brackets.length === 0) {
        brackets.push(currentBracket);
      } else {
        var lastBracket = brackets[brackets.length - 1];

        if (lastBracket.open[0] === currentBracket.open[0] && lastBracket.isOpen && !currentBracket.isOpen) {
          brackets.pop();
        } else {
          brackets.push(currentBracket);
        }

        if (brackets.length === 0) {
          if (ignoreFirstEmpty) {
            ignoreFirstEmpty = false;
          } else {
            return new _range.Range(startLineNumber, 1, currentBracket.range.endLineNumber + 1, 1);
          }
        }
      }

      var maxColumn = textEditorModel.getLineMaxColumn(startLineNumber);
      var nextLineNumber = currentBracket.range.endLineNumber;
      var nextColumn = currentBracket.range.endColumn;

      if (maxColumn === currentBracket.range.endColumn) {
        nextLineNumber++;
        nextColumn = 1;
      }

      if (nextLineNumber > maxLineNumber) {
        return new _range.Range(startLineNumber, 1, maxLineNumber + 1, 1);
      }

      currentBracket = textEditorModel.findNextBracket(new _position.Position(nextLineNumber, nextColumn));
    }

    return new _range.Range(startLineNumber, 1, maxLineNumber + 1, 1);
  };

  GotoDefinitionAtPositionEditorContribution.prototype.addDecoration = function (range, hoverMessage) {
    var newDecorations = {
      range: range,
      options: {
        inlineClassName: 'goto-definition-link',
        hoverMessage: hoverMessage
      }
    };
    this.linkDecorations = this.editor.deltaDecorations(this.linkDecorations, [newDecorations]);
  };

  GotoDefinitionAtPositionEditorContribution.prototype.removeLinkDecorations = function () {
    if (this.linkDecorations.length > 0) {
      this.linkDecorations = this.editor.deltaDecorations(this.linkDecorations, []);
    }
  };

  GotoDefinitionAtPositionEditorContribution.prototype.isEnabled = function (mouseEvent, withKey) {
    return this.editor.hasModel() && mouseEvent.isNoneOrSingleMouseDown && mouseEvent.target.type === 6
    /* CONTENT_TEXT */
    && (mouseEvent.hasTriggerModifier || (withKey ? withKey.keyCodeIsTriggerKey : false)) && _modes.DefinitionProviderRegistry.has(this.editor.getModel());
  };

  GotoDefinitionAtPositionEditorContribution.prototype.findDefinition = function (position, token) {
    var model = this.editor.getModel();

    if (!model) {
      return Promise.resolve(null);
    }

    return (0, _goToSymbol.getDefinitionsAtPosition)(model, position, token);
  };

  GotoDefinitionAtPositionEditorContribution.prototype.gotoDefinition = function (position, openToSide) {
    var _this = this;

    this.editor.setPosition(position);
    var action = new _goToCommands.DefinitionAction({
      openToSide: openToSide,
      openInPeek: false,
      muteMessage: true
    }, {
      alias: '',
      label: '',
      id: '',
      precondition: undefined
    });
    return this.editor.invokeWithinContext(function (accessor) {
      return action.run(accessor, _this.editor);
    });
  };

  GotoDefinitionAtPositionEditorContribution.prototype.dispose = function () {
    this.toUnhook.dispose();
  };

  GotoDefinitionAtPositionEditorContribution.ID = 'editor.contrib.gotodefinitionatposition';
  GotoDefinitionAtPositionEditorContribution.MAX_SOURCE_PREVIEW_LINES = 8;
  GotoDefinitionAtPositionEditorContribution = __decorate([__param(1, _resolverService.ITextModelService), __param(2, _modeService.IModeService)], GotoDefinitionAtPositionEditorContribution);
  return GotoDefinitionAtPositionEditorContribution;
}();

exports.GotoDefinitionAtPositionEditorContribution = GotoDefinitionAtPositionEditorContribution;
(0, _editorExtensions.registerEditorContribution)(GotoDefinitionAtPositionEditorContribution.ID, GotoDefinitionAtPositionEditorContribution);
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var activeLinkForeground = theme.getColor(_colorRegistry.editorActiveLinkForeground);

  if (activeLinkForeground) {
    collector.addRule(".monaco-editor .goto-definition-link { color: " + activeLinkForeground + " !important; }");
  }
});
},{"./goToDefinitionAtPosition.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/link/goToDefinitionAtPosition.css","../../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../../base/common/htmlContent.js":"../node_modules/monaco-editor/esm/vs/base/common/htmlContent.js","../../../common/services/modeService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modeService.js","../../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../goToSymbol.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/goToSymbol.js","../../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../common/services/resolverService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/resolverService.js","../../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../browser/core/editorState.js":"../node_modules/monaco-editor/esm/vs/editor/browser/core/editorState.js","../goToCommands.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/goToCommands.js","./clickLinkGesture.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/link/clickLinkGesture.js","../../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../../../base/common/types.js":"../node_modules/monaco-editor/esm/vs/base/common/types.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoError/media/gotoErrorWidget.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/platform/severityIcon/common/severityIcon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SeverityIcon = void 0;

var _severity = _interopRequireDefault(require("../../../base/common/severity.js"));

var _themeService = require("../../theme/common/themeService.js");

var _colorRegistry = require("../../theme/common/colorRegistry.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var SeverityIcon;
exports.SeverityIcon = SeverityIcon;

(function (SeverityIcon) {
  function className(severity) {
    switch (severity) {
      case _severity.default.Ignore:
        return 'severity-ignore codicon-info';

      case _severity.default.Info:
        return 'codicon-info';

      case _severity.default.Warning:
        return 'codicon-warning';

      case _severity.default.Error:
        return 'codicon-error';
    }

    return '';
  }

  SeverityIcon.className = className;
})(SeverityIcon || (exports.SeverityIcon = SeverityIcon = {}));

(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var errorIconForeground = theme.getColor(_colorRegistry.problemsErrorIconForeground);

  if (errorIconForeground) {
    collector.addRule("\n\t\t\t.monaco-editor .zone-widget .codicon-error,\n\t\t\t.monaco-workbench .markers-panel .marker-icon.codicon-error,\n\t\t\t.monaco-workbench .extensions-viewlet > .extensions .codicon-error,\n\t\t\t.monaco-workbench .dialog-box .dialog-message-row .codicon-error {\n\t\t\t\tcolor: " + errorIconForeground + ";\n\t\t\t}\n\t\t");
  }

  var warningIconForeground = theme.getColor(_colorRegistry.problemsWarningIconForeground);

  if (errorIconForeground) {
    collector.addRule("\n\t\t\t.monaco-editor .zone-widget .codicon-warning,\n\t\t\t.monaco-workbench .markers-panel .marker-icon.codicon-warning,\n\t\t\t.monaco-workbench .extensions-viewlet > .extensions .codicon-warning,\n\t\t\t.monaco-workbench .extension-editor .codicon-warning,\n\t\t\t.monaco-workbench .dialog-box .dialog-message-row .codicon-warning {\n\t\t\t\tcolor: " + warningIconForeground + ";\n\t\t\t}\n\t\t");
  }

  var infoIconForeground = theme.getColor(_colorRegistry.problemsInfoIconForeground);

  if (errorIconForeground) {
    collector.addRule("\n\t\t\t.monaco-editor .zone-widget .codicon-info,\n\t\t\t.monaco-workbench .markers-panel .marker-icon.codicon-info,\n\t\t\t.monaco-workbench .extensions-viewlet > .extensions .codicon-info,\n\t\t\t.monaco-workbench .extension-editor .codicon-info,\n\t\t\t.monaco-workbench .dialog-box .dialog-message-row .codicon-info {\n\t\t\t\tcolor: " + infoIconForeground + ";\n\t\t\t}\n\t\t");
  }
});
},{"../../../base/common/severity.js":"../node_modules/monaco-editor/esm/vs/base/common/severity.js","../../theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoError/gotoErrorWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editorMarkerNavigationBackground = exports.editorMarkerNavigationInfo = exports.editorMarkerNavigationWarning = exports.editorMarkerNavigationError = exports.MarkerNavigationWidget = void 0;

require("./media/gotoErrorWidget.css");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var dom = _interopRequireWildcard(require("../../../base/browser/dom.js"));

var _lifecycle = require("../../../base/common/lifecycle.js");

var _markers = require("../../../platform/markers/common/markers.js");

var _range = require("../../common/core/range.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _themeService2 = require("../../../platform/theme/common/themeService.js");

var _color = require("../../../base/common/color.js");

var _scrollableElement = require("../../../base/browser/ui/scrollbar/scrollableElement.js");

var _labels = require("../../../base/common/labels.js");

var _arrays = require("../../../base/common/arrays.js");

var _event = require("../../../base/common/event.js");

var _peekView = require("../peekView/peekView.js");

var _resources = require("../../../base/common/resources.js");

var _severityIcon = require("../../../platform/severityIcon/common/severityIcon.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var MessageWidget =
/** @class */
function () {
  function MessageWidget(parent, editor, onRelatedInformation) {
    var _this = this;

    this._lines = 0;
    this._longestLineLength = 0;
    this._relatedDiagnostics = new WeakMap();
    this._disposables = new _lifecycle.DisposableStore();
    this._editor = editor;
    var domNode = document.createElement('div');
    domNode.className = 'descriptioncontainer';
    domNode.setAttribute('aria-live', 'assertive');
    domNode.setAttribute('role', 'alert');
    this._messageBlock = document.createElement('div');
    dom.addClass(this._messageBlock, 'message');
    domNode.appendChild(this._messageBlock);
    this._relatedBlock = document.createElement('div');
    domNode.appendChild(this._relatedBlock);

    this._disposables.add(dom.addStandardDisposableListener(this._relatedBlock, 'click', function (event) {
      event.preventDefault();

      var related = _this._relatedDiagnostics.get(event.target);

      if (related) {
        onRelatedInformation(related);
      }
    }));

    this._scrollable = new _scrollableElement.ScrollableElement(domNode, {
      horizontal: 1
      /* Auto */
      ,
      vertical: 1
      /* Auto */
      ,
      useShadows: false,
      horizontalScrollbarSize: 3,
      verticalScrollbarSize: 3
    });
    parent.appendChild(this._scrollable.getDomNode());

    this._disposables.add(this._scrollable.onScroll(function (e) {
      domNode.style.left = "-" + e.scrollLeft + "px";
      domNode.style.top = "-" + e.scrollTop + "px";
    }));

    this._disposables.add(this._scrollable);
  }

  MessageWidget.prototype.dispose = function () {
    (0, _lifecycle.dispose)(this._disposables);
  };

  MessageWidget.prototype.update = function (_a) {
    var source = _a.source,
        message = _a.message,
        relatedInformation = _a.relatedInformation,
        code = _a.code;
    var lines = message.split(/\r\n|\r|\n/g);
    this._lines = lines.length;
    this._longestLineLength = 0;

    for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
      var line = lines_1[_i];
      this._longestLineLength = Math.max(line.length, this._longestLineLength);
    }

    dom.clearNode(this._messageBlock);

    this._editor.applyFontInfo(this._messageBlock);

    var lastLineElement = this._messageBlock;

    for (var _b = 0, lines_2 = lines; _b < lines_2.length; _b++) {
      var line = lines_2[_b];
      lastLineElement = document.createElement('div');
      lastLineElement.innerText = line;

      if (line === '') {
        lastLineElement.style.height = this._messageBlock.style.lineHeight;
      }

      this._messageBlock.appendChild(lastLineElement);
    }

    if (source || code) {
      var detailsElement = document.createElement('span');
      dom.addClass(detailsElement, 'details');
      lastLineElement.appendChild(detailsElement);

      if (source) {
        var sourceElement = document.createElement('span');
        sourceElement.innerText = source;
        dom.addClass(sourceElement, 'source');
        detailsElement.appendChild(sourceElement);
      }

      if (code) {
        var codeElement = document.createElement('span');
        codeElement.innerText = "(" + code + ")";
        dom.addClass(codeElement, 'code');
        detailsElement.appendChild(codeElement);
      }
    }

    dom.clearNode(this._relatedBlock);

    this._editor.applyFontInfo(this._relatedBlock);

    if ((0, _arrays.isNonEmptyArray)(relatedInformation)) {
      var relatedInformationNode = this._relatedBlock.appendChild(document.createElement('div'));

      relatedInformationNode.style.paddingTop = Math.floor(this._editor.getOption(47
      /* lineHeight */
      ) * 0.66) + "px";
      this._lines += 1;

      for (var _c = 0, relatedInformation_1 = relatedInformation; _c < relatedInformation_1.length; _c++) {
        var related = relatedInformation_1[_c];
        var container = document.createElement('div');
        var relatedResource = document.createElement('a');
        dom.addClass(relatedResource, 'filename');
        relatedResource.innerHTML = (0, _labels.getBaseLabel)(related.resource) + "(" + related.startLineNumber + ", " + related.startColumn + "): ";
        relatedResource.title = (0, _labels.getPathLabel)(related.resource, undefined);

        this._relatedDiagnostics.set(relatedResource, related);

        var relatedMessage = document.createElement('span');
        relatedMessage.innerText = related.message;
        container.appendChild(relatedResource);
        container.appendChild(relatedMessage);
        this._lines += 1;
        relatedInformationNode.appendChild(container);
      }
    }

    var fontInfo = this._editor.getOption(32
    /* fontInfo */
    );

    var scrollWidth = Math.ceil(fontInfo.typicalFullwidthCharacterWidth * this._longestLineLength * 0.75);
    var scrollHeight = fontInfo.lineHeight * this._lines;

    this._scrollable.setScrollDimensions({
      scrollWidth: scrollWidth,
      scrollHeight: scrollHeight
    });
  };

  MessageWidget.prototype.layout = function (height, width) {
    this._scrollable.getDomNode().style.height = height + "px";
    this._scrollable.getDomNode().style.width = width + "px";

    this._scrollable.setScrollDimensions({
      width: width,
      height: height
    });
  };

  MessageWidget.prototype.getHeightInLines = function () {
    return Math.min(17, this._lines);
  };

  return MessageWidget;
}();

var MarkerNavigationWidget =
/** @class */
function (_super) {
  __extends(MarkerNavigationWidget, _super);

  function MarkerNavigationWidget(editor, actions, _themeService) {
    var _this = _super.call(this, editor, {
      showArrow: true,
      showFrame: true,
      isAccessible: true
    }) || this;

    _this.actions = actions;
    _this._themeService = _themeService;
    _this._callOnDispose = new _lifecycle.DisposableStore();
    _this._onDidSelectRelatedInformation = new _event.Emitter();
    _this.onDidSelectRelatedInformation = _this._onDidSelectRelatedInformation.event;
    _this._severity = _markers.MarkerSeverity.Warning;
    _this._backgroundColor = _color.Color.white;

    _this._applyTheme(_themeService.getTheme());

    _this._callOnDispose.add(_themeService.onThemeChange(_this._applyTheme.bind(_this)));

    _this.create();

    return _this;
  }

  MarkerNavigationWidget.prototype._applyTheme = function (theme) {
    this._backgroundColor = theme.getColor(editorMarkerNavigationBackground);
    var colorId = editorMarkerNavigationError;

    if (this._severity === _markers.MarkerSeverity.Warning) {
      colorId = editorMarkerNavigationWarning;
    } else if (this._severity === _markers.MarkerSeverity.Info) {
      colorId = editorMarkerNavigationInfo;
    }

    var frameColor = theme.getColor(colorId);
    this.style({
      arrowColor: frameColor,
      frameColor: frameColor,
      headerBackgroundColor: this._backgroundColor,
      primaryHeadingColor: theme.getColor(_peekView.peekViewTitleForeground),
      secondaryHeadingColor: theme.getColor(_peekView.peekViewTitleInfoForeground)
    }); // style() will trigger _applyStyles
  };

  MarkerNavigationWidget.prototype._applyStyles = function () {
    if (this._parentContainer) {
      this._parentContainer.style.backgroundColor = this._backgroundColor ? this._backgroundColor.toString() : '';
    }

    _super.prototype._applyStyles.call(this);
  };

  MarkerNavigationWidget.prototype.dispose = function () {
    this._callOnDispose.dispose();

    _super.prototype.dispose.call(this);
  };

  MarkerNavigationWidget.prototype._fillHead = function (container) {
    _super.prototype._fillHead.call(this, container);

    this._actionbarWidget.push(this.actions, {
      label: false,
      icon: true
    });
  };

  MarkerNavigationWidget.prototype._fillTitleIcon = function (container) {
    this._icon = dom.append(container, dom.$(''));
  };

  MarkerNavigationWidget.prototype._getActionBarOptions = function () {
    return {
      orientation: 1
      /* HORIZONTAL_REVERSE */

    };
  };

  MarkerNavigationWidget.prototype._fillBody = function (container) {
    var _this = this;

    this._parentContainer = container;
    dom.addClass(container, 'marker-widget');
    this._parentContainer.tabIndex = 0;

    this._parentContainer.setAttribute('role', 'tooltip');

    this._container = document.createElement('div');
    container.appendChild(this._container);
    this._message = new MessageWidget(this._container, this.editor, function (related) {
      return _this._onDidSelectRelatedInformation.fire(related);
    });

    this._disposables.add(this._message);
  };

  MarkerNavigationWidget.prototype.show = function (where, heightInLines) {
    throw new Error('call showAtMarker');
  };

  MarkerNavigationWidget.prototype.showAtMarker = function (marker, markerIdx, markerCount) {
    // update:
    // * title
    // * message
    this._container.classList.remove('stale');

    this._message.update(marker); // update frame color (only applied on 'show')


    this._severity = marker.severity;

    this._applyTheme(this._themeService.getTheme()); // show


    var range = _range.Range.lift(marker);

    var editorPosition = this.editor.getPosition();
    var position = editorPosition && range.containsPosition(editorPosition) ? editorPosition : range.getStartPosition();

    _super.prototype.show.call(this, position, this.computeRequiredHeight());

    var model = this.editor.getModel();

    if (model) {
      var detail = markerCount > 1 ? nls.localize('problems', "{0} of {1} problems", markerIdx, markerCount) : nls.localize('change', "{0} of {1} problem", markerIdx, markerCount);
      this.setTitle((0, _resources.basename)(model.uri), detail);
    }

    this._icon.className = "codicon " + _severityIcon.SeverityIcon.className(_markers.MarkerSeverity.toSeverity(this._severity));
    this.editor.revealPositionInCenter(position, 0
    /* Smooth */
    );
  };

  MarkerNavigationWidget.prototype.updateMarker = function (marker) {
    this._container.classList.remove('stale');

    this._message.update(marker);
  };

  MarkerNavigationWidget.prototype.showStale = function () {
    this._container.classList.add('stale');

    this._relayout();
  };

  MarkerNavigationWidget.prototype._doLayoutBody = function (heightInPixel, widthInPixel) {
    _super.prototype._doLayoutBody.call(this, heightInPixel, widthInPixel);

    this._heightInPixel = heightInPixel;

    this._message.layout(heightInPixel, widthInPixel);

    this._container.style.height = heightInPixel + "px";
  };

  MarkerNavigationWidget.prototype._onWidth = function (widthInPixel) {
    this._message.layout(this._heightInPixel, widthInPixel);
  };

  MarkerNavigationWidget.prototype._relayout = function () {
    _super.prototype._relayout.call(this, this.computeRequiredHeight());
  };

  MarkerNavigationWidget.prototype.computeRequiredHeight = function () {
    return 3 + this._message.getHeightInLines();
  };

  return MarkerNavigationWidget;
}(_peekView.PeekViewWidget);

exports.MarkerNavigationWidget = MarkerNavigationWidget;
// theming
var errorDefault = (0, _colorRegistry.oneOf)(_colorRegistry.editorErrorForeground, _colorRegistry.editorErrorBorder);
var warningDefault = (0, _colorRegistry.oneOf)(_colorRegistry.editorWarningForeground, _colorRegistry.editorWarningBorder);
var infoDefault = (0, _colorRegistry.oneOf)(_colorRegistry.editorInfoForeground, _colorRegistry.editorInfoBorder);
var editorMarkerNavigationError = (0, _colorRegistry.registerColor)('editorMarkerNavigationError.background', {
  dark: errorDefault,
  light: errorDefault,
  hc: errorDefault
}, nls.localize('editorMarkerNavigationError', 'Editor marker navigation widget error color.'));
exports.editorMarkerNavigationError = editorMarkerNavigationError;
var editorMarkerNavigationWarning = (0, _colorRegistry.registerColor)('editorMarkerNavigationWarning.background', {
  dark: warningDefault,
  light: warningDefault,
  hc: warningDefault
}, nls.localize('editorMarkerNavigationWarning', 'Editor marker navigation widget warning color.'));
exports.editorMarkerNavigationWarning = editorMarkerNavigationWarning;
var editorMarkerNavigationInfo = (0, _colorRegistry.registerColor)('editorMarkerNavigationInfo.background', {
  dark: infoDefault,
  light: infoDefault,
  hc: infoDefault
}, nls.localize('editorMarkerNavigationInfo', 'Editor marker navigation widget info color.'));
exports.editorMarkerNavigationInfo = editorMarkerNavigationInfo;
var editorMarkerNavigationBackground = (0, _colorRegistry.registerColor)('editorMarkerNavigation.background', {
  dark: '#2D2D30',
  light: _color.Color.white,
  hc: '#0C141F'
}, nls.localize('editorMarkerNavigationBackground', 'Editor marker navigation widget background.'));
exports.editorMarkerNavigationBackground = editorMarkerNavigationBackground;
(0, _themeService2.registerThemingParticipant)(function (theme, collector) {
  var link = theme.getColor(_colorRegistry.textLinkForeground);

  if (link) {
    collector.addRule(".monaco-editor .marker-widget a { color: " + link + "; }");
  }
});
},{"./media/gotoErrorWidget.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoError/media/gotoErrorWidget.css","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../platform/markers/common/markers.js":"../node_modules/monaco-editor/esm/vs/platform/markers/common/markers.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../base/common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../base/browser/ui/scrollbar/scrollableElement.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/scrollbar/scrollableElement.js","../../../base/common/labels.js":"../node_modules/monaco-editor/esm/vs/base/common/labels.js","../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../peekView/peekView.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/peekView/peekView.js","../../../base/common/resources.js":"../node_modules/monaco-editor/esm/vs/base/common/resources.js","../../../platform/severityIcon/common/severityIcon.js":"../node_modules/monaco-editor/esm/vs/platform/severityIcon/common/severityIcon.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoError/gotoError.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NextMarkerAction = exports.MarkerController = void 0;

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _event = require("../../../base/common/event.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _markers = require("../../../platform/markers/common/markers.js");

var _range = require("../../common/core/range.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _themeService2 = require("../../../platform/theme/common/themeService.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _gotoErrorWidget = require("./gotoErrorWidget.js");

var _strings = require("../../../base/common/strings.js");

var _arrays = require("../../../base/common/arrays.js");

var _codeEditorService = require("../../browser/services/codeEditorService.js");

var _errors = require("../../../base/common/errors.js");

var _actions = require("../../../platform/actions/common/actions.js");

var _actions2 = require("../../../base/common/actions.js");

var _keybinding = require("../../../platform/keybinding/common/keybinding.js");

var _resources = require("../../../base/common/resources.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var MarkerModel =
/** @class */
function () {
  function MarkerModel(editor, markers) {
    var _this = this;

    this._toUnbind = new _lifecycle.DisposableStore();
    this._editor = editor;
    this._markers = [];
    this._nextIdx = -1;
    this._ignoreSelectionChange = false;
    this._onCurrentMarkerChanged = new _event.Emitter();
    this._onMarkerSetChanged = new _event.Emitter();
    this.setMarkers(markers); // listen on editor

    this._toUnbind.add(this._editor.onDidDispose(function () {
      return _this.dispose();
    }));

    this._toUnbind.add(this._editor.onDidChangeCursorPosition(function () {
      if (_this._ignoreSelectionChange) {
        return;
      }

      if (_this.currentMarker && _this._editor.getPosition() && _range.Range.containsPosition(_this.currentMarker, _this._editor.getPosition())) {
        return;
      }

      _this._nextIdx = -1;
    }));
  }

  Object.defineProperty(MarkerModel.prototype, "onCurrentMarkerChanged", {
    get: function () {
      return this._onCurrentMarkerChanged.event;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerModel.prototype, "onMarkerSetChanged", {
    get: function () {
      return this._onMarkerSetChanged.event;
    },
    enumerable: true,
    configurable: true
  });

  MarkerModel.prototype.setMarkers = function (markers) {
    var oldMarker = this._nextIdx >= 0 ? this._markers[this._nextIdx] : undefined;
    this._markers = markers || [];

    this._markers.sort(MarkerNavigationAction.compareMarker);

    if (!oldMarker) {
      this._nextIdx = -1;
    } else {
      this._nextIdx = Math.max(-1, (0, _arrays.binarySearch)(this._markers, oldMarker, MarkerNavigationAction.compareMarker));
    }

    this._onMarkerSetChanged.fire(this);
  };

  MarkerModel.prototype.withoutWatchingEditorPosition = function (callback) {
    this._ignoreSelectionChange = true;

    try {
      callback();
    } finally {
      this._ignoreSelectionChange = false;
    }
  };

  MarkerModel.prototype._initIdx = function (fwd) {
    var found = false;

    var position = this._editor.getPosition();

    for (var i = 0; i < this._markers.length; i++) {
      var range = _range.Range.lift(this._markers[i]);

      if (range.isEmpty() && this._editor.getModel()) {
        var word = this._editor.getModel().getWordAtPosition(range.getStartPosition());

        if (word) {
          range = new _range.Range(range.startLineNumber, word.startColumn, range.startLineNumber, word.endColumn);
        }
      }

      if (position && (range.containsPosition(position) || position.isBeforeOrEqual(range.getStartPosition()))) {
        this._nextIdx = i;
        found = true;
        break;
      }
    }

    if (!found) {
      // after the last change
      this._nextIdx = fwd ? 0 : this._markers.length - 1;
    }

    if (this._nextIdx < 0) {
      this._nextIdx = this._markers.length - 1;
    }
  };

  Object.defineProperty(MarkerModel.prototype, "currentMarker", {
    get: function () {
      return this.canNavigate() ? this._markers[this._nextIdx] : undefined;
    },
    set: function (marker) {
      var idx = this._nextIdx;
      this._nextIdx = -1;

      if (marker) {
        this._nextIdx = this.indexOf(marker);
      }

      if (this._nextIdx !== idx) {
        this._onCurrentMarkerChanged.fire(marker);
      }
    },
    enumerable: true,
    configurable: true
  });

  MarkerModel.prototype.move = function (fwd, inCircles) {
    if (!this.canNavigate()) {
      this._onCurrentMarkerChanged.fire(undefined);

      return !inCircles;
    }

    var oldIdx = this._nextIdx;
    var atEdge = false;

    if (this._nextIdx === -1) {
      this._initIdx(fwd);
    } else if (fwd) {
      if (inCircles || this._nextIdx + 1 < this._markers.length) {
        this._nextIdx = (this._nextIdx + 1) % this._markers.length;
      } else {
        atEdge = true;
      }
    } else if (!fwd) {
      if (inCircles || this._nextIdx > 0) {
        this._nextIdx = (this._nextIdx - 1 + this._markers.length) % this._markers.length;
      } else {
        atEdge = true;
      }
    }

    if (oldIdx !== this._nextIdx) {
      var marker = this._markers[this._nextIdx];

      this._onCurrentMarkerChanged.fire(marker);
    }

    return atEdge;
  };

  MarkerModel.prototype.canNavigate = function () {
    return this._markers.length > 0;
  };

  MarkerModel.prototype.findMarkerAtPosition = function (pos) {
    return (0, _arrays.find)(this._markers, function (marker) {
      return _range.Range.containsPosition(marker, pos);
    });
  };

  Object.defineProperty(MarkerModel.prototype, "total", {
    get: function () {
      return this._markers.length;
    },
    enumerable: true,
    configurable: true
  });

  MarkerModel.prototype.indexOf = function (marker) {
    return 1 + this._markers.indexOf(marker);
  };

  MarkerModel.prototype.dispose = function () {
    this._toUnbind.dispose();
  };

  return MarkerModel;
}();

var MarkerController =
/** @class */
function () {
  function MarkerController(editor, _markerService, _contextKeyService, _themeService, _editorService, _keybindingService) {
    this._markerService = _markerService;
    this._contextKeyService = _contextKeyService;
    this._themeService = _themeService;
    this._editorService = _editorService;
    this._keybindingService = _keybindingService;
    this._model = null;
    this._widget = null;
    this._disposeOnClose = new _lifecycle.DisposableStore();
    this._editor = editor;
    this._widgetVisible = CONTEXT_MARKERS_NAVIGATION_VISIBLE.bindTo(this._contextKeyService);
  }

  MarkerController.get = function (editor) {
    return editor.getContribution(MarkerController.ID);
  };

  MarkerController.prototype.dispose = function () {
    this._cleanUp();

    this._disposeOnClose.dispose();
  };

  MarkerController.prototype._cleanUp = function () {
    this._widgetVisible.reset();

    this._disposeOnClose.clear();

    this._widget = null;
    this._model = null;
  };

  MarkerController.prototype.getOrCreateModel = function () {
    var _this = this;

    if (this._model) {
      return this._model;
    }

    var markers = this._getMarkers();

    this._model = new MarkerModel(this._editor, markers);

    this._markerService.onMarkerChanged(this._onMarkerChanged, this, this._disposeOnClose);

    var prevMarkerKeybinding = this._keybindingService.lookupKeybinding(PrevMarkerAction.ID);

    var nextMarkerKeybinding = this._keybindingService.lookupKeybinding(NextMarkerAction.ID);

    var actions = [new _actions2.Action(PrevMarkerAction.ID, PrevMarkerAction.LABEL + (prevMarkerKeybinding ? " (" + prevMarkerKeybinding.getLabel() + ")" : ''), 'show-previous-problem codicon-chevron-up', this._model.canNavigate(), function () {
      return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
          if (this._model) {
            this._model.move(false, true);
          }

          return [2
          /*return*/
          ];
        });
      });
    }), new _actions2.Action(NextMarkerAction.ID, NextMarkerAction.LABEL + (nextMarkerKeybinding ? " (" + nextMarkerKeybinding.getLabel() + ")" : ''), 'show-next-problem codicon-chevron-down', this._model.canNavigate(), function () {
      return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
          if (this._model) {
            this._model.move(true, true);
          }

          return [2
          /*return*/
          ];
        });
      });
    })];
    this._widget = new _gotoErrorWidget.MarkerNavigationWidget(this._editor, actions, this._themeService);

    this._widgetVisible.set(true);

    this._widget.onDidClose(function () {
      return _this.closeMarkersNavigation();
    }, this, this._disposeOnClose);

    this._disposeOnClose.add(this._model);

    this._disposeOnClose.add(this._widget);

    for (var _i = 0, actions_1 = actions; _i < actions_1.length; _i++) {
      var action = actions_1[_i];

      this._disposeOnClose.add(action);
    }

    this._disposeOnClose.add(this._widget.onDidSelectRelatedInformation(function (related) {
      _this._editorService.openCodeEditor({
        resource: related.resource,
        options: {
          pinned: true,
          revealIfOpened: true,
          selection: _range.Range.lift(related).collapseToStart()
        }
      }, _this._editor).then(undefined, _errors.onUnexpectedError);

      _this.closeMarkersNavigation(false);
    }));

    this._disposeOnClose.add(this._editor.onDidChangeModel(function () {
      return _this._cleanUp();
    }));

    this._disposeOnClose.add(this._model.onCurrentMarkerChanged(function (marker) {
      if (!marker || !_this._model) {
        _this._cleanUp();
      } else {
        _this._model.withoutWatchingEditorPosition(function () {
          if (!_this._widget || !_this._model) {
            return;
          }

          _this._widget.showAtMarker(marker, _this._model.indexOf(marker), _this._model.total);
        });
      }
    }));

    this._disposeOnClose.add(this._model.onMarkerSetChanged(function () {
      if (!_this._widget || !_this._widget.position || !_this._model) {
        return;
      }

      var marker = _this._model.findMarkerAtPosition(_this._widget.position);

      if (marker) {
        _this._widget.updateMarker(marker);
      } else {
        _this._widget.showStale();
      }
    }));

    return this._model;
  };

  MarkerController.prototype.closeMarkersNavigation = function (focusEditor) {
    if (focusEditor === void 0) {
      focusEditor = true;
    }

    this._cleanUp();

    if (focusEditor) {
      this._editor.focus();
    }
  };

  MarkerController.prototype.show = function (marker) {
    var model = this.getOrCreateModel();
    model.currentMarker = marker;
  };

  MarkerController.prototype._onMarkerChanged = function (changedResources) {
    var editorModel = this._editor.getModel();

    if (!editorModel) {
      return;
    }

    if (!this._model) {
      return;
    }

    if (!changedResources.some(function (r) {
      return (0, _resources.isEqual)(editorModel.uri, r);
    })) {
      return;
    }

    this._model.setMarkers(this._getMarkers());
  };

  MarkerController.prototype._getMarkers = function () {
    var model = this._editor.getModel();

    if (!model) {
      return [];
    }

    return this._markerService.read({
      resource: model.uri,
      severities: _markers.MarkerSeverity.Error | _markers.MarkerSeverity.Warning | _markers.MarkerSeverity.Info
    });
  };

  MarkerController.ID = 'editor.contrib.markerController';
  MarkerController = __decorate([__param(1, _markers.IMarkerService), __param(2, _contextkey.IContextKeyService), __param(3, _themeService2.IThemeService), __param(4, _codeEditorService.ICodeEditorService), __param(5, _keybinding.IKeybindingService)], MarkerController);
  return MarkerController;
}();

exports.MarkerController = MarkerController;

var MarkerNavigationAction =
/** @class */
function (_super) {
  __extends(MarkerNavigationAction, _super);

  function MarkerNavigationAction(next, multiFile, opts) {
    var _this = _super.call(this, opts) || this;

    _this._isNext = next;
    _this._multiFile = multiFile;
    return _this;
  }

  MarkerNavigationAction.prototype.run = function (accessor, editor) {
    var _this = this;

    var markerService = accessor.get(_markers.IMarkerService);
    var editorService = accessor.get(_codeEditorService.ICodeEditorService);
    var controller = MarkerController.get(editor);

    if (!controller) {
      return Promise.resolve(undefined);
    }

    var model = controller.getOrCreateModel();
    var atEdge = model.move(this._isNext, !this._multiFile);

    if (!atEdge || !this._multiFile) {
      return Promise.resolve(undefined);
    } // try with the next/prev file


    var markers = markerService.read({
      severities: _markers.MarkerSeverity.Error | _markers.MarkerSeverity.Warning | _markers.MarkerSeverity.Info
    }).sort(MarkerNavigationAction.compareMarker);

    if (markers.length === 0) {
      return Promise.resolve(undefined);
    }

    var editorModel = editor.getModel();

    if (!editorModel) {
      return Promise.resolve(undefined);
    }

    var oldMarker = model.currentMarker || {
      resource: editorModel.uri,
      severity: _markers.MarkerSeverity.Error,
      startLineNumber: 1,
      startColumn: 1,
      endLineNumber: 1,
      endColumn: 1
    };
    var idx = (0, _arrays.binarySearch)(markers, oldMarker, MarkerNavigationAction.compareMarker);

    if (idx < 0) {
      // find best match...
      idx = ~idx;
      idx %= markers.length;
    } else if (this._isNext) {
      idx = (idx + 1) % markers.length;
    } else {
      idx = (idx + markers.length - 1) % markers.length;
    }

    var newMarker = markers[idx];

    if ((0, _resources.isEqual)(newMarker.resource, editorModel.uri)) {
      // the next `resource` is this resource which
      // means we cycle within this file
      model.move(this._isNext, true);
      return Promise.resolve(undefined);
    } // close the widget for this editor-instance, open the resource
    // for the next marker and re-start marker navigation in there


    controller.closeMarkersNavigation();
    return editorService.openCodeEditor({
      resource: newMarker.resource,
      options: {
        pinned: false,
        revealIfOpened: true,
        revealInCenterIfOutsideViewport: true,
        selection: newMarker
      }
    }, editor).then(function (editor) {
      if (!editor) {
        return undefined;
      }

      return editor.getAction(_this.id).run();
    });
  };

  MarkerNavigationAction.compareMarker = function (a, b) {
    var res = (0, _strings.compare)(a.resource.toString(), b.resource.toString());

    if (res === 0) {
      res = _markers.MarkerSeverity.compare(a.severity, b.severity);
    }

    if (res === 0) {
      res = _range.Range.compareRangesUsingStarts(a, b);
    }

    return res;
  };

  return MarkerNavigationAction;
}(_editorExtensions.EditorAction);

var NextMarkerAction =
/** @class */
function (_super) {
  __extends(NextMarkerAction, _super);

  function NextMarkerAction() {
    return _super.call(this, true, false, {
      id: NextMarkerAction.ID,
      label: NextMarkerAction.LABEL,
      alias: 'Go to Next Problem (Error, Warning, Info)',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 512
        /* Alt */
        | 66
        /* F8 */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  NextMarkerAction.ID = 'editor.action.marker.next';
  NextMarkerAction.LABEL = nls.localize('markerAction.next.label', "Go to Next Problem (Error, Warning, Info)");
  return NextMarkerAction;
}(MarkerNavigationAction);

exports.NextMarkerAction = NextMarkerAction;

var PrevMarkerAction =
/** @class */
function (_super) {
  __extends(PrevMarkerAction, _super);

  function PrevMarkerAction() {
    return _super.call(this, false, false, {
      id: PrevMarkerAction.ID,
      label: PrevMarkerAction.LABEL,
      alias: 'Go to Previous Problem (Error, Warning, Info)',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 1024
        /* Shift */
        | 512
        /* Alt */
        | 66
        /* F8 */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  PrevMarkerAction.ID = 'editor.action.marker.prev';
  PrevMarkerAction.LABEL = nls.localize('markerAction.previous.label', "Go to Previous Problem (Error, Warning, Info)");
  return PrevMarkerAction;
}(MarkerNavigationAction);

var NextMarkerInFilesAction =
/** @class */
function (_super) {
  __extends(NextMarkerInFilesAction, _super);

  function NextMarkerInFilesAction() {
    return _super.call(this, true, true, {
      id: 'editor.action.marker.nextInFiles',
      label: nls.localize('markerAction.nextInFiles.label', "Go to Next Problem in Files (Error, Warning, Info)"),
      alias: 'Go to Next Problem in Files (Error, Warning, Info)',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: 66
        /* F8 */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return NextMarkerInFilesAction;
}(MarkerNavigationAction);

var PrevMarkerInFilesAction =
/** @class */
function (_super) {
  __extends(PrevMarkerInFilesAction, _super);

  function PrevMarkerInFilesAction() {
    return _super.call(this, false, true, {
      id: 'editor.action.marker.prevInFiles',
      label: nls.localize('markerAction.previousInFiles.label', "Go to Previous Problem in Files (Error, Warning, Info)"),
      alias: 'Go to Previous Problem in Files (Error, Warning, Info)',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: 1024
        /* Shift */
        | 66
        /* F8 */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return PrevMarkerInFilesAction;
}(MarkerNavigationAction);

(0, _editorExtensions.registerEditorContribution)(MarkerController.ID, MarkerController);
(0, _editorExtensions.registerEditorAction)(NextMarkerAction);
(0, _editorExtensions.registerEditorAction)(PrevMarkerAction);
(0, _editorExtensions.registerEditorAction)(NextMarkerInFilesAction);
(0, _editorExtensions.registerEditorAction)(PrevMarkerInFilesAction);
var CONTEXT_MARKERS_NAVIGATION_VISIBLE = new _contextkey.RawContextKey('markersNavigationVisible', false);

var MarkerCommand = _editorExtensions.EditorCommand.bindToContribution(MarkerController.get);

(0, _editorExtensions.registerEditorCommand)(new MarkerCommand({
  id: 'closeMarkersNavigation',
  precondition: CONTEXT_MARKERS_NAVIGATION_VISIBLE,
  handler: function (x) {
    return x.closeMarkersNavigation();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 50,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: 9
    /* Escape */
    ,
    secondary: [1024
    /* Shift */
    | 9
    /* Escape */
    ]
  }
})); // Go to menu

_actions.MenuRegistry.appendMenuItem(17
/* MenubarGoMenu */
, {
  group: '6_problem_nav',
  command: {
    id: 'editor.action.marker.nextInFiles',
    title: nls.localize({
      key: 'miGotoNextProblem',
      comment: ['&& denotes a mnemonic']
    }, "Next &&Problem")
  },
  order: 1
});

_actions.MenuRegistry.appendMenuItem(17
/* MenubarGoMenu */
, {
  group: '6_problem_nav',
  command: {
    id: 'editor.action.marker.prevInFiles',
    title: nls.localize({
      key: 'miGotoPreviousProblem',
      comment: ['&& denotes a mnemonic']
    }, "Previous &&Problem")
  },
  order: 2
});
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/markers/common/markers.js":"../node_modules/monaco-editor/esm/vs/platform/markers/common/markers.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","./gotoErrorWidget.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoError/gotoErrorWidget.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../browser/services/codeEditorService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../platform/actions/common/actions.js":"../node_modules/monaco-editor/esm/vs/platform/actions/common/actions.js","../../../base/common/actions.js":"../node_modules/monaco-editor/esm/vs/base/common/actions.js","../../../platform/keybinding/common/keybinding.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding.js","../../../base/common/resources.js":"../node_modules/monaco-editor/esm/vs/base/common/resources.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/hover.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/colorPickerModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorPickerModel = void 0;

var _event = require("../../../base/common/event.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var ColorPickerModel =
/** @class */
function () {
  function ColorPickerModel(color, availableColorPresentations, presentationIndex) {
    this.presentationIndex = presentationIndex;
    this._onColorFlushed = new _event.Emitter();
    this.onColorFlushed = this._onColorFlushed.event;
    this._onDidChangeColor = new _event.Emitter();
    this.onDidChangeColor = this._onDidChangeColor.event;
    this._onDidChangePresentation = new _event.Emitter();
    this.onDidChangePresentation = this._onDidChangePresentation.event;
    this.originalColor = color;
    this._color = color;
    this._colorPresentations = availableColorPresentations;
  }

  Object.defineProperty(ColorPickerModel.prototype, "color", {
    get: function () {
      return this._color;
    },
    set: function (color) {
      if (this._color.equals(color)) {
        return;
      }

      this._color = color;

      this._onDidChangeColor.fire(color);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ColorPickerModel.prototype, "presentation", {
    get: function () {
      return this.colorPresentations[this.presentationIndex];
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ColorPickerModel.prototype, "colorPresentations", {
    get: function () {
      return this._colorPresentations;
    },
    set: function (colorPresentations) {
      this._colorPresentations = colorPresentations;

      if (this.presentationIndex > colorPresentations.length - 1) {
        this.presentationIndex = 0;
      }

      this._onDidChangePresentation.fire(this.presentation);
    },
    enumerable: true,
    configurable: true
  });

  ColorPickerModel.prototype.selectNextColorPresentation = function () {
    this.presentationIndex = (this.presentationIndex + 1) % this.colorPresentations.length;
    this.flushColor();

    this._onDidChangePresentation.fire(this.presentation);
  };

  ColorPickerModel.prototype.guessColorPresentation = function (color, originalText) {
    for (var i = 0; i < this.colorPresentations.length; i++) {
      if (originalText === this.colorPresentations[i].label) {
        this.presentationIndex = i;

        this._onDidChangePresentation.fire(this.presentation);

        break;
      }
    }
  };

  ColorPickerModel.prototype.flushColor = function () {
    this._onColorFlushed.fire(this._color);
  };

  return ColorPickerModel;
}();

exports.ColorPickerModel = ColorPickerModel;
},{"../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/colorPicker.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/colorPickerWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorPickerWidget = exports.ColorPickerBody = exports.ColorPickerHeader = void 0;

require("./colorPicker.css");

var _browser = require("../../../base/browser/browser.js");

var dom = _interopRequireWildcard(require("../../../base/browser/dom.js"));

var _globalMouseMoveMonitor = require("../../../base/browser/globalMouseMoveMonitor.js");

var _widget = require("../../../base/browser/ui/widget.js");

var _color = require("../../../base/common/color.js");

var _event = require("../../../base/common/event.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var $ = dom.$;

var ColorPickerHeader =
/** @class */
function (_super) {
  __extends(ColorPickerHeader, _super);

  function ColorPickerHeader(container, model, themeService) {
    var _this = _super.call(this) || this;

    _this.model = model;
    _this.domNode = $('.colorpicker-header');
    dom.append(container, _this.domNode);
    _this.pickedColorNode = dom.append(_this.domNode, $('.picked-color'));
    var colorBox = dom.append(_this.domNode, $('.original-color'));
    colorBox.style.backgroundColor = _color.Color.Format.CSS.format(_this.model.originalColor) || '';
    _this.backgroundColor = themeService.getTheme().getColor(_colorRegistry.editorHoverBackground) || _color.Color.white;

    _this._register((0, _themeService.registerThemingParticipant)(function (theme, collector) {
      _this.backgroundColor = theme.getColor(_colorRegistry.editorHoverBackground) || _color.Color.white;
    }));

    _this._register(dom.addDisposableListener(_this.pickedColorNode, dom.EventType.CLICK, function () {
      return _this.model.selectNextColorPresentation();
    }));

    _this._register(dom.addDisposableListener(colorBox, dom.EventType.CLICK, function () {
      _this.model.color = _this.model.originalColor;

      _this.model.flushColor();
    }));

    _this._register(model.onDidChangeColor(_this.onDidChangeColor, _this));

    _this._register(model.onDidChangePresentation(_this.onDidChangePresentation, _this));

    _this.pickedColorNode.style.backgroundColor = _color.Color.Format.CSS.format(model.color) || '';
    dom.toggleClass(_this.pickedColorNode, 'light', model.color.rgba.a < 0.5 ? _this.backgroundColor.isLighter() : model.color.isLighter());
    return _this;
  }

  ColorPickerHeader.prototype.onDidChangeColor = function (color) {
    this.pickedColorNode.style.backgroundColor = _color.Color.Format.CSS.format(color) || '';
    dom.toggleClass(this.pickedColorNode, 'light', color.rgba.a < 0.5 ? this.backgroundColor.isLighter() : color.isLighter());
    this.onDidChangePresentation();
  };

  ColorPickerHeader.prototype.onDidChangePresentation = function () {
    this.pickedColorNode.textContent = this.model.presentation ? this.model.presentation.label : '';
  };

  return ColorPickerHeader;
}(_lifecycle.Disposable);

exports.ColorPickerHeader = ColorPickerHeader;

var ColorPickerBody =
/** @class */
function (_super) {
  __extends(ColorPickerBody, _super);

  function ColorPickerBody(container, model, pixelRatio) {
    var _this = _super.call(this) || this;

    _this.model = model;
    _this.pixelRatio = pixelRatio;
    _this.domNode = $('.colorpicker-body');
    dom.append(container, _this.domNode);
    _this.saturationBox = new SaturationBox(_this.domNode, _this.model, _this.pixelRatio);

    _this._register(_this.saturationBox);

    _this._register(_this.saturationBox.onDidChange(_this.onDidSaturationValueChange, _this));

    _this._register(_this.saturationBox.onColorFlushed(_this.flushColor, _this));

    _this.opacityStrip = new OpacityStrip(_this.domNode, _this.model);

    _this._register(_this.opacityStrip);

    _this._register(_this.opacityStrip.onDidChange(_this.onDidOpacityChange, _this));

    _this._register(_this.opacityStrip.onColorFlushed(_this.flushColor, _this));

    _this.hueStrip = new HueStrip(_this.domNode, _this.model);

    _this._register(_this.hueStrip);

    _this._register(_this.hueStrip.onDidChange(_this.onDidHueChange, _this));

    _this._register(_this.hueStrip.onColorFlushed(_this.flushColor, _this));

    return _this;
  }

  ColorPickerBody.prototype.flushColor = function () {
    this.model.flushColor();
  };

  ColorPickerBody.prototype.onDidSaturationValueChange = function (_a) {
    var s = _a.s,
        v = _a.v;
    var hsva = this.model.color.hsva;
    this.model.color = new _color.Color(new _color.HSVA(hsva.h, s, v, hsva.a));
  };

  ColorPickerBody.prototype.onDidOpacityChange = function (a) {
    var hsva = this.model.color.hsva;
    this.model.color = new _color.Color(new _color.HSVA(hsva.h, hsva.s, hsva.v, a));
  };

  ColorPickerBody.prototype.onDidHueChange = function (value) {
    var hsva = this.model.color.hsva;
    var h = (1 - value) * 360;
    this.model.color = new _color.Color(new _color.HSVA(h === 360 ? 0 : h, hsva.s, hsva.v, hsva.a));
  };

  ColorPickerBody.prototype.layout = function () {
    this.saturationBox.layout();
    this.opacityStrip.layout();
    this.hueStrip.layout();
  };

  return ColorPickerBody;
}(_lifecycle.Disposable);

exports.ColorPickerBody = ColorPickerBody;

var SaturationBox =
/** @class */
function (_super) {
  __extends(SaturationBox, _super);

  function SaturationBox(container, model, pixelRatio) {
    var _this = _super.call(this) || this;

    _this.model = model;
    _this.pixelRatio = pixelRatio;
    _this._onDidChange = new _event.Emitter();
    _this.onDidChange = _this._onDidChange.event;
    _this._onColorFlushed = new _event.Emitter();
    _this.onColorFlushed = _this._onColorFlushed.event;
    _this.domNode = $('.saturation-wrap');
    dom.append(container, _this.domNode); // Create canvas, draw selected color

    _this.canvas = document.createElement('canvas');
    _this.canvas.className = 'saturation-box';
    dom.append(_this.domNode, _this.canvas); // Add selection circle

    _this.selection = $('.saturation-selection');
    dom.append(_this.domNode, _this.selection);

    _this.layout();

    _this._register(dom.addDisposableGenericMouseDownListner(_this.domNode, function (e) {
      return _this.onMouseDown(e);
    }));

    _this._register(_this.model.onDidChangeColor(_this.onDidChangeColor, _this));

    _this.monitor = null;
    return _this;
  }

  SaturationBox.prototype.onMouseDown = function (e) {
    var _this = this;

    this.monitor = this._register(new _globalMouseMoveMonitor.GlobalMouseMoveMonitor());
    var origin = dom.getDomNodePagePosition(this.domNode);

    if (e.target !== this.selection) {
      this.onDidChangePosition(e.offsetX, e.offsetY);
    }

    this.monitor.startMonitoring(_globalMouseMoveMonitor.standardMouseMoveMerger, function (event) {
      return _this.onDidChangePosition(event.posx - origin.left, event.posy - origin.top);
    }, function () {
      return null;
    });
    var mouseUpListener = dom.addDisposableGenericMouseUpListner(document, function () {
      _this._onColorFlushed.fire();

      mouseUpListener.dispose();

      if (_this.monitor) {
        _this.monitor.stopMonitoring(true);

        _this.monitor = null;
      }
    }, true);
  };

  SaturationBox.prototype.onDidChangePosition = function (left, top) {
    var s = Math.max(0, Math.min(1, left / this.width));
    var v = Math.max(0, Math.min(1, 1 - top / this.height));
    this.paintSelection(s, v);

    this._onDidChange.fire({
      s: s,
      v: v
    });
  };

  SaturationBox.prototype.layout = function () {
    this.width = this.domNode.offsetWidth;
    this.height = this.domNode.offsetHeight;
    this.canvas.width = this.width * this.pixelRatio;
    this.canvas.height = this.height * this.pixelRatio;
    this.paint();
    var hsva = this.model.color.hsva;
    this.paintSelection(hsva.s, hsva.v);
  };

  SaturationBox.prototype.paint = function () {
    var hsva = this.model.color.hsva;
    var saturatedColor = new _color.Color(new _color.HSVA(hsva.h, 1, 1, 1));
    var ctx = this.canvas.getContext('2d');
    var whiteGradient = ctx.createLinearGradient(0, 0, this.canvas.width, 0);
    whiteGradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
    whiteGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.5)');
    whiteGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
    var blackGradient = ctx.createLinearGradient(0, 0, 0, this.canvas.height);
    blackGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');
    blackGradient.addColorStop(1, 'rgba(0, 0, 0, 1)');
    ctx.rect(0, 0, this.canvas.width, this.canvas.height);
    ctx.fillStyle = _color.Color.Format.CSS.format(saturatedColor);
    ctx.fill();
    ctx.fillStyle = whiteGradient;
    ctx.fill();
    ctx.fillStyle = blackGradient;
    ctx.fill();
  };

  SaturationBox.prototype.paintSelection = function (s, v) {
    this.selection.style.left = s * this.width + "px";
    this.selection.style.top = this.height - v * this.height + "px";
  };

  SaturationBox.prototype.onDidChangeColor = function () {
    if (this.monitor && this.monitor.isMonitoring()) {
      return;
    }

    this.paint();
  };

  return SaturationBox;
}(_lifecycle.Disposable);

var Strip =
/** @class */
function (_super) {
  __extends(Strip, _super);

  function Strip(container, model) {
    var _this = _super.call(this) || this;

    _this.model = model;
    _this._onDidChange = new _event.Emitter();
    _this.onDidChange = _this._onDidChange.event;
    _this._onColorFlushed = new _event.Emitter();
    _this.onColorFlushed = _this._onColorFlushed.event;
    _this.domNode = dom.append(container, $('.strip'));
    _this.overlay = dom.append(_this.domNode, $('.overlay'));
    _this.slider = dom.append(_this.domNode, $('.slider'));
    _this.slider.style.top = "0px";

    _this._register(dom.addDisposableGenericMouseDownListner(_this.domNode, function (e) {
      return _this.onMouseDown(e);
    }));

    _this.layout();

    return _this;
  }

  Strip.prototype.layout = function () {
    this.height = this.domNode.offsetHeight - this.slider.offsetHeight;
    var value = this.getValue(this.model.color);
    this.updateSliderPosition(value);
  };

  Strip.prototype.onMouseDown = function (e) {
    var _this = this;

    var monitor = this._register(new _globalMouseMoveMonitor.GlobalMouseMoveMonitor());

    var origin = dom.getDomNodePagePosition(this.domNode);
    dom.addClass(this.domNode, 'grabbing');

    if (e.target !== this.slider) {
      this.onDidChangeTop(e.offsetY);
    }

    monitor.startMonitoring(_globalMouseMoveMonitor.standardMouseMoveMerger, function (event) {
      return _this.onDidChangeTop(event.posy - origin.top);
    }, function () {
      return null;
    });
    var mouseUpListener = dom.addDisposableGenericMouseUpListner(document, function () {
      _this._onColorFlushed.fire();

      mouseUpListener.dispose();
      monitor.stopMonitoring(true);
      dom.removeClass(_this.domNode, 'grabbing');
    }, true);
  };

  Strip.prototype.onDidChangeTop = function (top) {
    var value = Math.max(0, Math.min(1, 1 - top / this.height));
    this.updateSliderPosition(value);

    this._onDidChange.fire(value);
  };

  Strip.prototype.updateSliderPosition = function (value) {
    this.slider.style.top = (1 - value) * this.height + "px";
  };

  return Strip;
}(_lifecycle.Disposable);

var OpacityStrip =
/** @class */
function (_super) {
  __extends(OpacityStrip, _super);

  function OpacityStrip(container, model) {
    var _this = _super.call(this, container, model) || this;

    dom.addClass(_this.domNode, 'opacity-strip');

    _this._register(model.onDidChangeColor(_this.onDidChangeColor, _this));

    _this.onDidChangeColor(_this.model.color);

    return _this;
  }

  OpacityStrip.prototype.onDidChangeColor = function (color) {
    var _a = color.rgba,
        r = _a.r,
        g = _a.g,
        b = _a.b;
    var opaque = new _color.Color(new _color.RGBA(r, g, b, 1));
    var transparent = new _color.Color(new _color.RGBA(r, g, b, 0));
    this.overlay.style.background = "linear-gradient(to bottom, " + opaque + " 0%, " + transparent + " 100%)";
  };

  OpacityStrip.prototype.getValue = function (color) {
    return color.hsva.a;
  };

  return OpacityStrip;
}(Strip);

var HueStrip =
/** @class */
function (_super) {
  __extends(HueStrip, _super);

  function HueStrip(container, model) {
    var _this = _super.call(this, container, model) || this;

    dom.addClass(_this.domNode, 'hue-strip');
    return _this;
  }

  HueStrip.prototype.getValue = function (color) {
    return 1 - color.hsva.h / 360;
  };

  return HueStrip;
}(Strip);

var ColorPickerWidget =
/** @class */
function (_super) {
  __extends(ColorPickerWidget, _super);

  function ColorPickerWidget(container, model, pixelRatio, themeService) {
    var _this = _super.call(this) || this;

    _this.model = model;
    _this.pixelRatio = pixelRatio;

    _this._register((0, _browser.onDidChangeZoomLevel)(function () {
      return _this.layout();
    }));

    var element = $('.colorpicker-widget');
    container.appendChild(element);
    var header = new ColorPickerHeader(element, _this.model, themeService);
    _this.body = new ColorPickerBody(element, _this.model, _this.pixelRatio);

    _this._register(header);

    _this._register(_this.body);

    return _this;
  }

  ColorPickerWidget.prototype.layout = function () {
    this.body.layout();
  };

  return ColorPickerWidget;
}(_widget.Widget);

exports.ColorPickerWidget = ColorPickerWidget;
},{"./colorPicker.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/colorPicker.css","../../../base/browser/browser.js":"../node_modules/monaco-editor/esm/vs/base/browser/browser.js","../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/browser/globalMouseMoveMonitor.js":"../node_modules/monaco-editor/esm/vs/base/browser/globalMouseMoveMonitor.js","../../../base/browser/ui/widget.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/widget.js","../../../base/common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/getHover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHover = getHover;

var _arrays = require("../../../base/common/arrays.js");

var _cancellation = require("../../../base/common/cancellation.js");

var _errors = require("../../../base/common/errors.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _modes = require("../../common/modes.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function getHover(model, position, token) {
  var supports = _modes.HoverProviderRegistry.ordered(model);

  var promises = supports.map(function (support) {
    return Promise.resolve(support.provideHover(model, position, token)).then(function (hover) {
      return hover && isValid(hover) ? hover : undefined;
    }, function (err) {
      (0, _errors.onUnexpectedExternalError)(err);
      return undefined;
    });
  });
  return Promise.all(promises).then(_arrays.coalesce);
}

(0, _editorExtensions.registerDefaultLanguageCommand)('_executeHoverProvider', function (model, position) {
  return getHover(model, position, _cancellation.CancellationToken.None);
});

function isValid(result) {
  var hasRange = typeof result.range !== 'undefined';
  var hasHtmlContent = typeof result.contents !== 'undefined' && result.contents && result.contents.length > 0;
  return hasRange && hasHtmlContent;
}
},{"../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/hoverOperation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HoverOperation = void 0;

var _async = require("../../../base/common/async.js");

var _errors = require("../../../base/common/errors.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var HoverOperation =
/** @class */
function () {
  function HoverOperation(computer, success, error, progress, hoverTime) {
    var _this = this;

    this._computer = computer;
    this._state = 0
    /* IDLE */
    ;
    this._hoverTime = hoverTime;
    this._firstWaitScheduler = new _async.RunOnceScheduler(function () {
      return _this._triggerAsyncComputation();
    }, 0);
    this._secondWaitScheduler = new _async.RunOnceScheduler(function () {
      return _this._triggerSyncComputation();
    }, 0);
    this._loadingMessageScheduler = new _async.RunOnceScheduler(function () {
      return _this._showLoadingMessage();
    }, 0);
    this._asyncComputationPromise = null;
    this._asyncComputationPromiseDone = false;
    this._completeCallback = success;
    this._errorCallback = error;
    this._progressCallback = progress;
  }

  HoverOperation.prototype.setHoverTime = function (hoverTime) {
    this._hoverTime = hoverTime;
  };

  HoverOperation.prototype._firstWaitTime = function () {
    return this._hoverTime / 2;
  };

  HoverOperation.prototype._secondWaitTime = function () {
    return this._hoverTime / 2;
  };

  HoverOperation.prototype._loadingMessageTime = function () {
    return 3 * this._hoverTime;
  };

  HoverOperation.prototype._triggerAsyncComputation = function () {
    var _this = this;

    this._state = 2
    /* SECOND_WAIT */
    ;

    this._secondWaitScheduler.schedule(this._secondWaitTime());

    if (this._computer.computeAsync) {
      this._asyncComputationPromiseDone = false;
      this._asyncComputationPromise = (0, _async.createCancelablePromise)(function (token) {
        return _this._computer.computeAsync(token);
      });

      this._asyncComputationPromise.then(function (asyncResult) {
        _this._asyncComputationPromiseDone = true;

        _this._withAsyncResult(asyncResult);
      }, function (e) {
        return _this._onError(e);
      });
    } else {
      this._asyncComputationPromiseDone = true;
    }
  };

  HoverOperation.prototype._triggerSyncComputation = function () {
    if (this._computer.computeSync) {
      this._computer.onResult(this._computer.computeSync(), true);
    }

    if (this._asyncComputationPromiseDone) {
      this._state = 0
      /* IDLE */
      ;

      this._onComplete(this._computer.getResult());
    } else {
      this._state = 3
      /* WAITING_FOR_ASYNC_COMPUTATION */
      ;

      this._onProgress(this._computer.getResult());
    }
  };

  HoverOperation.prototype._showLoadingMessage = function () {
    if (this._state === 3
    /* WAITING_FOR_ASYNC_COMPUTATION */
    ) {
        this._onProgress(this._computer.getResultWithLoadingMessage());
      }
  };

  HoverOperation.prototype._withAsyncResult = function (asyncResult) {
    if (asyncResult) {
      this._computer.onResult(asyncResult, false);
    }

    if (this._state === 3
    /* WAITING_FOR_ASYNC_COMPUTATION */
    ) {
        this._state = 0
        /* IDLE */
        ;

        this._onComplete(this._computer.getResult());
      }
  };

  HoverOperation.prototype._onComplete = function (value) {
    if (this._completeCallback) {
      this._completeCallback(value);
    }
  };

  HoverOperation.prototype._onError = function (error) {
    if (this._errorCallback) {
      this._errorCallback(error);
    } else {
      (0, _errors.onUnexpectedError)(error);
    }
  };

  HoverOperation.prototype._onProgress = function (value) {
    if (this._progressCallback) {
      this._progressCallback(value);
    }
  };

  HoverOperation.prototype.start = function (mode) {
    if (mode === 0
    /* Delayed */
    ) {
        if (this._state === 0
        /* IDLE */
        ) {
            this._state = 1
            /* FIRST_WAIT */
            ;

            this._firstWaitScheduler.schedule(this._firstWaitTime());

            this._loadingMessageScheduler.schedule(this._loadingMessageTime());
          }
      } else {
      switch (this._state) {
        case 0
        /* IDLE */
        :
          this._triggerAsyncComputation();

          this._secondWaitScheduler.cancel();

          this._triggerSyncComputation();

          break;

        case 2
        /* SECOND_WAIT */
        :
          this._secondWaitScheduler.cancel();

          this._triggerSyncComputation();

          break;
      }
    }
  };

  HoverOperation.prototype.cancel = function () {
    this._loadingMessageScheduler.cancel();

    if (this._state === 1
    /* FIRST_WAIT */
    ) {
        this._firstWaitScheduler.cancel();
      }

    if (this._state === 2
    /* SECOND_WAIT */
    ) {
        this._secondWaitScheduler.cancel();

        if (this._asyncComputationPromise) {
          this._asyncComputationPromise.cancel();

          this._asyncComputationPromise = null;
        }
      }

    if (this._state === 3
    /* WAITING_FOR_ASYNC_COMPUTATION */
    ) {
        if (this._asyncComputationPromise) {
          this._asyncComputationPromise.cancel();

          this._asyncComputationPromise = null;
        }
      }

    this._state = 0
    /* IDLE */
    ;
  };

  return HoverOperation;
}();

exports.HoverOperation = HoverOperation;
},{"../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/hoverWidgets.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GlyphHoverWidget = exports.ContentHoverWidget = void 0;

var _dom = require("../../../base/browser/dom.js");

var _scrollableElement = require("../../../base/browser/ui/scrollbar/scrollableElement.js");

var _widget = require("../../../base/browser/ui/widget.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __spreadArrays = void 0 && (void 0).__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
};

var ContentHoverWidget =
/** @class */
function (_super) {
  __extends(ContentHoverWidget, _super);

  function ContentHoverWidget(id, editor) {
    var _this = _super.call(this) || this; // Editor.IContentWidget.allowEditorOverflow


    _this.allowEditorOverflow = true;
    _this._id = id;
    _this._editor = editor;
    _this._isVisible = false;
    _this._stoleFocus = false;
    _this._containerDomNode = document.createElement('div');
    _this._containerDomNode.className = 'monaco-editor-hover hidden';
    _this._containerDomNode.tabIndex = 0;
    _this._domNode = document.createElement('div');
    _this._domNode.className = 'monaco-editor-hover-content';
    _this.scrollbar = new _scrollableElement.DomScrollableElement(_this._domNode, {});

    _this._register(_this.scrollbar);

    _this._containerDomNode.appendChild(_this.scrollbar.getDomNode());

    _this.onkeydown(_this._containerDomNode, function (e) {
      if (e.equals(9
      /* Escape */
      )) {
        _this.hide();
      }
    });

    _this._register(_this._editor.onDidChangeConfiguration(function (e) {
      if (e.hasChanged(32
      /* fontInfo */
      )) {
        _this.updateFont();
      }
    }));

    _this._editor.onDidLayoutChange(function (e) {
      return _this.layout();
    });

    _this.layout();

    _this._editor.addContentWidget(_this);

    _this._showAtPosition = null;
    _this._showAtRange = null;
    _this._stoleFocus = false;
    return _this;
  }

  Object.defineProperty(ContentHoverWidget.prototype, "isVisible", {
    get: function () {
      return this._isVisible;
    },
    set: function (value) {
      this._isVisible = value;
      (0, _dom.toggleClass)(this._containerDomNode, 'hidden', !this._isVisible);
    },
    enumerable: true,
    configurable: true
  });

  ContentHoverWidget.prototype.getId = function () {
    return this._id;
  };

  ContentHoverWidget.prototype.getDomNode = function () {
    return this._containerDomNode;
  };

  ContentHoverWidget.prototype.showAt = function (position, range, focus) {
    // Position has changed
    this._showAtPosition = position;
    this._showAtRange = range;
    this.isVisible = true;

    this._editor.layoutContentWidget(this); // Simply force a synchronous render on the editor
    // such that the widget does not really render with left = '0px'


    this._editor.render();

    this._stoleFocus = focus;

    if (focus) {
      this._containerDomNode.focus();
    }
  };

  ContentHoverWidget.prototype.hide = function () {
    if (!this.isVisible) {
      return;
    }

    this.isVisible = false;

    this._editor.layoutContentWidget(this);

    if (this._stoleFocus) {
      this._editor.focus();
    }
  };

  ContentHoverWidget.prototype.getPosition = function () {
    if (this.isVisible) {
      return {
        position: this._showAtPosition,
        range: this._showAtRange,
        preference: [1
        /* ABOVE */
        , 2
        /* BELOW */
        ]
      };
    }

    return null;
  };

  ContentHoverWidget.prototype.dispose = function () {
    this._editor.removeContentWidget(this);

    _super.prototype.dispose.call(this);
  };

  ContentHoverWidget.prototype.updateFont = function () {
    var _this = this;

    var codeClasses = Array.prototype.slice.call(this._domNode.getElementsByClassName('code'));
    codeClasses.forEach(function (node) {
      return _this._editor.applyFontInfo(node);
    });
  };

  ContentHoverWidget.prototype.updateContents = function (node) {
    this._domNode.textContent = '';

    this._domNode.appendChild(node);

    this.updateFont();

    this._editor.layoutContentWidget(this);

    this.onContentsChange();
  };

  ContentHoverWidget.prototype.onContentsChange = function () {
    this.scrollbar.scanDomNode();
  };

  ContentHoverWidget.prototype.layout = function () {
    var height = Math.max(this._editor.getLayoutInfo().height / 4, 250);

    var _a = this._editor.getOption(32
    /* fontInfo */
    ),
        fontSize = _a.fontSize,
        lineHeight = _a.lineHeight;

    this._domNode.style.fontSize = fontSize + "px";
    this._domNode.style.lineHeight = lineHeight + "px";
    this._domNode.style.maxHeight = height + "px";
    this._domNode.style.maxWidth = Math.max(this._editor.getLayoutInfo().width * 0.66, 500) + "px";
  };

  return ContentHoverWidget;
}(_widget.Widget);

exports.ContentHoverWidget = ContentHoverWidget;

var GlyphHoverWidget =
/** @class */
function (_super) {
  __extends(GlyphHoverWidget, _super);

  function GlyphHoverWidget(id, editor) {
    var _this = _super.call(this) || this;

    _this._id = id;
    _this._editor = editor;
    _this._isVisible = false;
    _this._domNode = document.createElement('div');
    _this._domNode.className = 'monaco-editor-hover hidden';

    _this._domNode.setAttribute('aria-hidden', 'true');

    _this._domNode.setAttribute('role', 'presentation');

    _this._showAtLineNumber = -1;

    _this._register(_this._editor.onDidChangeConfiguration(function (e) {
      if (e.hasChanged(32
      /* fontInfo */
      )) {
        _this.updateFont();
      }
    }));

    _this._editor.addOverlayWidget(_this);

    return _this;
  }

  Object.defineProperty(GlyphHoverWidget.prototype, "isVisible", {
    get: function () {
      return this._isVisible;
    },
    set: function (value) {
      this._isVisible = value;
      (0, _dom.toggleClass)(this._domNode, 'hidden', !this._isVisible);
    },
    enumerable: true,
    configurable: true
  });

  GlyphHoverWidget.prototype.getId = function () {
    return this._id;
  };

  GlyphHoverWidget.prototype.getDomNode = function () {
    return this._domNode;
  };

  GlyphHoverWidget.prototype.showAt = function (lineNumber) {
    this._showAtLineNumber = lineNumber;

    if (!this.isVisible) {
      this.isVisible = true;
    }

    var editorLayout = this._editor.getLayoutInfo();

    var topForLineNumber = this._editor.getTopForLineNumber(this._showAtLineNumber);

    var editorScrollTop = this._editor.getScrollTop();

    var lineHeight = this._editor.getOption(47
    /* lineHeight */
    );

    var nodeHeight = this._domNode.clientHeight;
    var top = topForLineNumber - editorScrollTop - (nodeHeight - lineHeight) / 2;
    this._domNode.style.left = editorLayout.glyphMarginLeft + editorLayout.glyphMarginWidth + "px";
    this._domNode.style.top = Math.max(Math.round(top), 0) + "px";
  };

  GlyphHoverWidget.prototype.hide = function () {
    if (!this.isVisible) {
      return;
    }

    this.isVisible = false;
  };

  GlyphHoverWidget.prototype.getPosition = function () {
    return null;
  };

  GlyphHoverWidget.prototype.dispose = function () {
    this._editor.removeOverlayWidget(this);

    _super.prototype.dispose.call(this);
  };

  GlyphHoverWidget.prototype.updateFont = function () {
    var _this = this;

    var codeTags = Array.prototype.slice.call(this._domNode.getElementsByTagName('code'));
    var codeClasses = Array.prototype.slice.call(this._domNode.getElementsByClassName('code'));

    __spreadArrays(codeTags, codeClasses).forEach(function (node) {
      return _this._editor.applyFontInfo(node);
    });
  };

  GlyphHoverWidget.prototype.updateContents = function (node) {
    this._domNode.textContent = '';

    this._domNode.appendChild(node);

    this.updateFont();
  };

  return GlyphHoverWidget;
}(_widget.Widget);

exports.GlyphHoverWidget = GlyphHoverWidget;
},{"../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/browser/ui/scrollbar/scrollableElement.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/scrollbar/scrollableElement.js","../../../base/browser/ui/widget.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/widget.js"}],"../node_modules/monaco-editor/esm/vs/base/common/marked/marked.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = exports.inlineLexer = exports.InlineLexer = exports.lexer = exports.Lexer = exports.TextRenderer = exports.Renderer = exports.parser = exports.Parser = exports.marked = void 0;

/**
 * marked - a markdown parser
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/markedjs/marked
 */
// BEGIN MONACOCHANGE
var __marked_exports; // END MONACOCHANGE


;
(function (root) {
  'use strict';
  /**
   * Block-Level Grammar
   */

  var block = {
    newline: /^\n+/,
    code: /^( {4}[^\n]+\n*)+/,
    fences: noop,
    hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
    heading: /^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,
    nptable: noop,
    blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
    list: /^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
    html: '^ {0,3}(?:' // optional indentation
    + '<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
    + '|comment[^\\n]*(\\n+|$)' // (2)
    + '|<\\?[\\s\\S]*?\\?>\\n*' // (3)
    + '|<![A-Z][\\s\\S]*?>\\n*' // (4)
    + '|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*' // (5)
    + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)' // (6)
    + '|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) open tag
    + '|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) closing tag
    + ')',
    def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
    table: noop,
    lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
    paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading| {0,3}>|<\/?(?:tag)(?: +|\n|\/?>)|<(?:script|pre|style|!--))[^\n]+)*)/,
    text: /^[^\n]+/
  };
  block._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
  block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
  block.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();
  block.bullet = /(?:[*+-]|\d{1,9}\.)/;
  block.item = /^( *)(bull) ?[^\n]*(?:\n(?!\1bull ?)[^\n]*)*/;
  block.item = edit(block.item, 'gm').replace(/bull/g, block.bullet).getRegex();
  block.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))').replace('def', '\\n+(?=' + block.def.source + ')').getRegex();
  block._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';
  block._comment = /<!--(?!-?>)[\s\S]*?-->/;
  block.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
  block.paragraph = edit(block.paragraph).replace('hr', block.hr).replace('heading', block.heading).replace('lheading', block.lheading).replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
  .getRegex();
  block.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();
  /**
   * Normal Block Grammar
   */

  block.normal = merge({}, block);
  /**
   * GFM Block Grammar
   */

  block.gfm = merge({}, block.normal, {
    fences: /^ {0,3}(`{3,}|~{3,})([^`\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,
    paragraph: /^/,
    heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
  });
  block.gfm.paragraph = edit(block.paragraph).replace('(?!', '(?!' + block.gfm.fences.source.replace('\\1', '\\2') + '|' + block.list.source.replace('\\1', '\\3') + '|').getRegex();
  /**
   * GFM + Tables Block Grammar
   */

  block.tables = merge({}, block.gfm, {
    nptable: /^ *([^|\n ].*\|.*)\n *([-:]+ *\|[-| :]*)(?:\n((?:.*[^>\n ].*(?:\n|$))*)\n*|$)/,
    table: /^ *\|(.+)\n *\|?( *[-:]+[-| :]*)(?:\n((?: *[^>\n ].*(?:\n|$))*)\n*|$)/
  });
  /**
   * Pedantic grammar
   */

  block.pedantic = merge({}, block.normal, {
    html: edit('^ *(?:comment *(?:\\n|\\s*$)' + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
    + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b').getRegex(),
    def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/
  });
  /**
   * Block Lexer
   */

  function Lexer(options) {
    this.tokens = [];
    this.tokens.links = Object.create(null);
    this.options = options || marked.defaults;
    this.rules = block.normal;

    if (this.options.pedantic) {
      this.rules = block.pedantic;
    } else if (this.options.gfm) {
      if (this.options.tables) {
        this.rules = block.tables;
      } else {
        this.rules = block.gfm;
      }
    }
  }
  /**
   * Expose Block Rules
   */


  Lexer.rules = block;
  /**
   * Static Lex Method
   */

  Lexer.lex = function (src, options) {
    var lexer = new Lexer(options);
    return lexer.lex(src);
  };
  /**
   * Preprocessing
   */


  Lexer.prototype.lex = function (src) {
    src = src.replace(/\r\n|\r/g, '\n').replace(/\t/g, '    ').replace(/\u00a0/g, ' ').replace(/\u2424/g, '\n');
    return this.token(src, true);
  };
  /**
   * Lexing
   */


  Lexer.prototype.token = function (src, top) {
    src = src.replace(/^ +$/gm, '');
    var next, loose, cap, bull, b, item, listStart, listItems, t, space, i, tag, l, isordered, istask, ischecked;

    while (src) {
      // newline
      if (cap = this.rules.newline.exec(src)) {
        src = src.substring(cap[0].length);

        if (cap[0].length > 1) {
          this.tokens.push({
            type: 'space'
          });
        }
      } // code


      if (cap = this.rules.code.exec(src)) {
        src = src.substring(cap[0].length);
        cap = cap[0].replace(/^ {4}/gm, '');
        this.tokens.push({
          type: 'code',
          text: !this.options.pedantic ? rtrim(cap, '\n') : cap
        });
        continue;
      } // fences (gfm)


      if (cap = this.rules.fences.exec(src)) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'code',
          lang: cap[2] ? cap[2].trim() : cap[2],
          text: cap[3] || ''
        });
        continue;
      } // heading


      if (cap = this.rules.heading.exec(src)) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'heading',
          depth: cap[1].length,
          text: cap[2]
        });
        continue;
      } // table no leading pipe (gfm)


      if (cap = this.rules.nptable.exec(src)) {
        item = {
          type: 'table',
          header: splitCells(cap[1].replace(/^ *| *\| *$/g, '')),
          align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
          cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : []
        };

        if (item.header.length === item.align.length) {
          src = src.substring(cap[0].length);

          for (i = 0; i < item.align.length; i++) {
            if (/^ *-+: *$/.test(item.align[i])) {
              item.align[i] = 'right';
            } else if (/^ *:-+: *$/.test(item.align[i])) {
              item.align[i] = 'center';
            } else if (/^ *:-+ *$/.test(item.align[i])) {
              item.align[i] = 'left';
            } else {
              item.align[i] = null;
            }
          }

          for (i = 0; i < item.cells.length; i++) {
            item.cells[i] = splitCells(item.cells[i], item.header.length);
          }

          this.tokens.push(item);
          continue;
        }
      } // hr


      if (cap = this.rules.hr.exec(src)) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'hr'
        });
        continue;
      } // blockquote


      if (cap = this.rules.blockquote.exec(src)) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'blockquote_start'
        });
        cap = cap[0].replace(/^ *> ?/gm, ''); // Pass `top` to keep the current
        // "toplevel" state. This is exactly
        // how markdown.pl works.

        this.token(cap, top);
        this.tokens.push({
          type: 'blockquote_end'
        });
        continue;
      } // list


      if (cap = this.rules.list.exec(src)) {
        src = src.substring(cap[0].length);
        bull = cap[2];
        isordered = bull.length > 1;
        listStart = {
          type: 'list_start',
          ordered: isordered,
          start: isordered ? +bull : '',
          loose: false
        };
        this.tokens.push(listStart); // Get each top-level item.

        cap = cap[0].match(this.rules.item);
        listItems = [];
        next = false;
        l = cap.length;
        i = 0;

        for (; i < l; i++) {
          item = cap[i]; // Remove the list item's bullet
          // so it is seen as the next token.

          space = item.length;
          item = item.replace(/^ *([*+-]|\d+\.) */, ''); // Outdent whatever the
          // list item contains. Hacky.

          if (~item.indexOf('\n ')) {
            space -= item.length;
            item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');
          } // Determine whether the next list item belongs here.
          // Backpedal if it does not belong in this list.


          if (i !== l - 1) {
            b = block.bullet.exec(cap[i + 1])[0];

            if (bull.length > 1 ? b.length === 1 : b.length > 1 || this.options.smartLists && b !== bull) {
              src = cap.slice(i + 1).join('\n') + src;
              i = l - 1;
            }
          } // Determine whether item is loose or not.
          // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
          // for discount behavior.


          loose = next || /\n\n(?!\s*$)/.test(item);

          if (i !== l - 1) {
            next = item.charAt(item.length - 1) === '\n';
            if (!loose) loose = next;
          }

          if (loose) {
            listStart.loose = true;
          } // Check for task list items


          istask = /^\[[ xX]\] /.test(item);
          ischecked = undefined;

          if (istask) {
            ischecked = item[1] !== ' ';
            item = item.replace(/^\[[ xX]\] +/, '');
          }

          t = {
            type: 'list_item_start',
            task: istask,
            checked: ischecked,
            loose: loose
          };
          listItems.push(t);
          this.tokens.push(t); // Recurse.

          this.token(item, false);
          this.tokens.push({
            type: 'list_item_end'
          });
        }

        if (listStart.loose) {
          l = listItems.length;
          i = 0;

          for (; i < l; i++) {
            listItems[i].loose = true;
          }
        }

        this.tokens.push({
          type: 'list_end'
        });
        continue;
      } // html


      if (cap = this.rules.html.exec(src)) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: this.options.sanitize ? 'paragraph' : 'html',
          pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
          text: cap[0]
        });
        continue;
      } // def


      if (top && (cap = this.rules.def.exec(src))) {
        src = src.substring(cap[0].length);
        if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
        tag = cap[1].toLowerCase().replace(/\s+/g, ' ');

        if (!this.tokens.links[tag]) {
          this.tokens.links[tag] = {
            href: cap[2],
            title: cap[3]
          };
        }

        continue;
      } // table (gfm)


      if (cap = this.rules.table.exec(src)) {
        item = {
          type: 'table',
          header: splitCells(cap[1].replace(/^ *| *\| *$/g, '')),
          align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
          cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : []
        };

        if (item.header.length === item.align.length) {
          src = src.substring(cap[0].length);

          for (i = 0; i < item.align.length; i++) {
            if (/^ *-+: *$/.test(item.align[i])) {
              item.align[i] = 'right';
            } else if (/^ *:-+: *$/.test(item.align[i])) {
              item.align[i] = 'center';
            } else if (/^ *:-+ *$/.test(item.align[i])) {
              item.align[i] = 'left';
            } else {
              item.align[i] = null;
            }
          }

          for (i = 0; i < item.cells.length; i++) {
            item.cells[i] = splitCells(item.cells[i].replace(/^ *\| *| *\| *$/g, ''), item.header.length);
          }

          this.tokens.push(item);
          continue;
        }
      } // lheading


      if (cap = this.rules.lheading.exec(src)) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'heading',
          depth: cap[2] === '=' ? 1 : 2,
          text: cap[1]
        });
        continue;
      } // top-level paragraph


      if (top && (cap = this.rules.paragraph.exec(src))) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'paragraph',
          text: cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1]
        });
        continue;
      } // text


      if (cap = this.rules.text.exec(src)) {
        // Top-level should never reach here.
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'text',
          text: cap[0]
        });
        continue;
      }

      if (src) {
        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
      }
    }

    return this.tokens;
  };
  /**
   * Inline-Level Grammar
   */


  var inline = {
    escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
    autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
    url: noop,
    tag: '^comment' + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
    + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
    + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
    + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
    + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>',
    // CDATA section
    link: /^!?\[(label)\]\(href(?:\s+(title))?\s*\)/,
    reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
    nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
    strong: /^__([^\s_])__(?!_)|^\*\*([^\s*])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,
    em: /^_([^\s_])_(?!_)|^\*([^\s*"<\[])\*(?!\*)|^_([^\s][\s\S]*?[^\s_])_(?!_|[^\spunctuation])|^_([^\s_][\s\S]*?[^\s])_(?!_|[^\spunctuation])|^\*([^\s"<\[][\s\S]*?[^\s*])\*(?!\*)|^\*([^\s*"<\[][\s\S]*?[^\s])\*(?!\*)/,
    code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
    br: /^( {2,}|\\)\n(?!\s*$)/,
    del: noop,
    text: /^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*]|\b_|$)|[^ ](?= {2,}\n))|(?= {2,}\n))/
  }; // list of punctuation marks from common mark spec
  // without ` and ] to workaround Rule 17 (inline code blocks/links)

  inline._punctuation = '!"#$%&\'()*+,\\-./:;<=>?@\\[^_{|}~';
  inline.em = edit(inline.em).replace(/punctuation/g, inline._punctuation).getRegex();
  inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
  inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
  inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
  inline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();
  inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
  inline.tag = edit(inline.tag).replace('comment', block._comment).replace('attribute', inline._attribute).getRegex();
  inline._label = /(?:\[[^\[\]]*\]|\\[\[\]]?|`[^`]*`|`(?!`)|[^\[\]\\`])*?/;
  inline._href = /\s*(<(?:\\[<>]?|[^\s<>\\])*>|[^\s\x00-\x1f]*)/;
  inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
  inline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();
  inline.reflink = edit(inline.reflink).replace('label', inline._label).getRegex();
  /**
   * Normal Inline Grammar
   */

  inline.normal = merge({}, inline);
  /**
   * Pedantic Inline Grammar
   */

  inline.pedantic = merge({}, inline.normal, {
    strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,
    link: edit(/^!?\[(label)\]\((.*?)\)/).replace('label', inline._label).getRegex(),
    reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace('label', inline._label).getRegex()
  });
  /**
   * GFM Inline Grammar
   */

  inline.gfm = merge({}, inline.normal, {
    escape: edit(inline.escape).replace('])', '~|])').getRegex(),
    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
    url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
    _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
    del: /^~+(?=\S)([\s\S]*?\S)~+/,
    text: /^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*~]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?= {2,}\n|[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/
  });
  inline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();
  /**
   * GFM + Line Breaks Inline Grammar
   */

  inline.breaks = merge({}, inline.gfm, {
    br: edit(inline.br).replace('{2,}', '*').getRegex(),
    text: edit(inline.gfm.text).replace(/\{2,\}/g, '*').getRegex()
  });
  /**
   * Inline Lexer & Compiler
   */

  function InlineLexer(links, options) {
    this.options = options || marked.defaults;
    this.links = links;
    this.rules = inline.normal;
    this.renderer = this.options.renderer || new Renderer();
    this.renderer.options = this.options;

    if (!this.links) {
      throw new Error('Tokens array requires a `links` property.');
    }

    if (this.options.pedantic) {
      this.rules = inline.pedantic;
    } else if (this.options.gfm) {
      if (this.options.breaks) {
        this.rules = inline.breaks;
      } else {
        this.rules = inline.gfm;
      }
    }
  }
  /**
   * Expose Inline Rules
   */


  InlineLexer.rules = inline;
  /**
   * Static Lexing/Compiling Method
   */

  InlineLexer.output = function (src, links, options) {
    var inline = new InlineLexer(links, options);
    return inline.output(src);
  };
  /**
   * Lexing/Compiling
   */


  InlineLexer.prototype.output = function (src) {
    var out = '',
        link,
        text,
        href,
        title,
        cap,
        prevCapZero;

    while (src) {
      // escape
      if (cap = this.rules.escape.exec(src)) {
        src = src.substring(cap[0].length);
        out += escape(cap[1]);
        continue;
      } // tag


      if (cap = this.rules.tag.exec(src)) {
        if (!this.inLink && /^<a /i.test(cap[0])) {
          this.inLink = true;
        } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
          this.inLink = false;
        }

        if (!this.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
          this.inRawBlock = true;
        } else if (this.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
          this.inRawBlock = false;
        }

        src = src.substring(cap[0].length);
        out += this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];
        continue;
      } // link


      if (cap = this.rules.link.exec(src)) {
        var lastParenIndex = findClosingBracket(cap[2], '()');

        if (lastParenIndex > -1) {
          var linkLen = cap[0].length - (cap[2].length - lastParenIndex) - (cap[3] || '').length;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = '';
        }

        src = src.substring(cap[0].length);
        this.inLink = true;
        href = cap[2];

        if (this.options.pedantic) {
          link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);

          if (link) {
            href = link[1];
            title = link[3];
          } else {
            title = '';
          }
        } else {
          title = cap[3] ? cap[3].slice(1, -1) : '';
        }

        href = href.trim().replace(/^<([\s\S]*)>$/, '$1');
        out += this.outputLink(cap, {
          href: InlineLexer.escapes(href),
          title: InlineLexer.escapes(title)
        });
        this.inLink = false;
        continue;
      } // reflink, nolink


      if ((cap = this.rules.reflink.exec(src)) || (cap = this.rules.nolink.exec(src))) {
        src = src.substring(cap[0].length);
        link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
        link = this.links[link.toLowerCase()];

        if (!link || !link.href) {
          out += cap[0].charAt(0);
          src = cap[0].substring(1) + src;
          continue;
        }

        this.inLink = true;
        out += this.outputLink(cap, link);
        this.inLink = false;
        continue;
      } // strong


      if (cap = this.rules.strong.exec(src)) {
        src = src.substring(cap[0].length);
        out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));
        continue;
      } // em


      if (cap = this.rules.em.exec(src)) {
        src = src.substring(cap[0].length);
        out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));
        continue;
      } // code


      if (cap = this.rules.code.exec(src)) {
        src = src.substring(cap[0].length);
        out += this.renderer.codespan(escape(cap[2].trim(), true));
        continue;
      } // br


      if (cap = this.rules.br.exec(src)) {
        src = src.substring(cap[0].length);
        out += this.renderer.br();
        continue;
      } // del (gfm)


      if (cap = this.rules.del.exec(src)) {
        src = src.substring(cap[0].length);
        out += this.renderer.del(this.output(cap[1]));
        continue;
      } // autolink


      if (cap = this.rules.autolink.exec(src)) {
        src = src.substring(cap[0].length);

        if (cap[2] === '@') {
          text = escape(this.mangle(cap[1]));
          href = 'mailto:' + text;
        } else {
          text = escape(cap[1]);
          href = text;
        }

        out += this.renderer.link(href, null, text);
        continue;
      } // url (gfm)


      if (!this.inLink && (cap = this.rules.url.exec(src))) {
        if (cap[2] === '@') {
          text = escape(cap[0]);
          href = 'mailto:' + text;
        } else {
          // do extended autolink path validation
          do {
            prevCapZero = cap[0];
            cap[0] = this.rules._backpedal.exec(cap[0])[0];
          } while (prevCapZero !== cap[0]);

          text = escape(cap[0]);

          if (cap[1] === 'www.') {
            href = 'http://' + text;
          } else {
            href = text;
          }
        }

        src = src.substring(cap[0].length);
        out += this.renderer.link(href, null, text);
        continue;
      } // text


      if (cap = this.rules.text.exec(src)) {
        src = src.substring(cap[0].length);

        if (this.inRawBlock) {
          out += this.renderer.text(cap[0]);
        } else {
          out += this.renderer.text(escape(this.smartypants(cap[0])));
        }

        continue;
      }

      if (src) {
        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
      }
    }

    return out;
  };

  InlineLexer.escapes = function (text) {
    return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;
  };
  /**
   * Compile Link
   */


  InlineLexer.prototype.outputLink = function (cap, link) {
    var href = link.href,
        title = link.title ? escape(link.title) : null;
    return cap[0].charAt(0) !== '!' ? this.renderer.link(href, title, this.output(cap[1])) : this.renderer.image(href, title, escape(cap[1]));
  };
  /**
   * Smartypants Transformations
   */


  InlineLexer.prototype.smartypants = function (text) {
    if (!this.options.smartypants) return text;
    return text // em-dashes
    .replace(/---/g, '\u2014') // en-dashes
    .replace(/--/g, '\u2013') // opening singles
    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018') // closing singles & apostrophes
    .replace(/'/g, '\u2019') // opening doubles
    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c') // closing doubles
    .replace(/"/g, '\u201d') // ellipses
    .replace(/\.{3}/g, '\u2026');
  };
  /**
   * Mangle Links
   */


  InlineLexer.prototype.mangle = function (text) {
    if (!this.options.mangle) return text;
    var out = '',
        l = text.length,
        i = 0,
        ch;

    for (; i < l; i++) {
      ch = text.charCodeAt(i);

      if (Math.random() > 0.5) {
        ch = 'x' + ch.toString(16);
      }

      out += '&#' + ch + ';';
    }

    return out;
  };
  /**
   * Renderer
   */


  function Renderer(options) {
    this.options = options || marked.defaults;
  }

  Renderer.prototype.code = function (code, infostring, escaped) {
    var lang = (infostring || '').match(/\S*/)[0];

    if (this.options.highlight) {
      var out = this.options.highlight(code, lang);

      if (out != null && out !== code) {
        escaped = true;
        code = out;
      }
    }

    if (!lang) {
      return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>';
    }

    return '<pre><code class="' + this.options.langPrefix + escape(lang, true) + '">' + (escaped ? code : escape(code, true)) + '</code></pre>\n';
  };

  Renderer.prototype.blockquote = function (quote) {
    return '<blockquote>\n' + quote + '</blockquote>\n';
  };

  Renderer.prototype.html = function (html) {
    return html;
  };

  Renderer.prototype.heading = function (text, level, raw, slugger) {
    if (this.options.headerIds) {
      return '<h' + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + '</h' + level + '>\n';
    } // ignore IDs


    return '<h' + level + '>' + text + '</h' + level + '>\n';
  };

  Renderer.prototype.hr = function () {
    return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
  };

  Renderer.prototype.list = function (body, ordered, start) {
    var type = ordered ? 'ol' : 'ul',
        startatt = ordered && start !== 1 ? ' start="' + start + '"' : '';
    return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
  };

  Renderer.prototype.listitem = function (text) {
    return '<li>' + text + '</li>\n';
  };

  Renderer.prototype.checkbox = function (checked) {
    return '<input ' + (checked ? 'checked="" ' : '') + 'disabled="" type="checkbox"' + (this.options.xhtml ? ' /' : '') + '> ';
  };

  Renderer.prototype.paragraph = function (text) {
    return '<p>' + text + '</p>\n';
  };

  Renderer.prototype.table = function (header, body) {
    if (body) body = '<tbody>' + body + '</tbody>';
    return '<table>\n' + '<thead>\n' + header + '</thead>\n' + body + '</table>\n';
  };

  Renderer.prototype.tablerow = function (content) {
    return '<tr>\n' + content + '</tr>\n';
  };

  Renderer.prototype.tablecell = function (content, flags) {
    var type = flags.header ? 'th' : 'td';
    var tag = flags.align ? '<' + type + ' align="' + flags.align + '">' : '<' + type + '>';
    return tag + content + '</' + type + '>\n';
  }; // span level renderer


  Renderer.prototype.strong = function (text) {
    return '<strong>' + text + '</strong>';
  };

  Renderer.prototype.em = function (text) {
    return '<em>' + text + '</em>';
  };

  Renderer.prototype.codespan = function (text) {
    return '<code>' + text + '</code>';
  };

  Renderer.prototype.br = function () {
    return this.options.xhtml ? '<br/>' : '<br>';
  };

  Renderer.prototype.del = function (text) {
    return '<del>' + text + '</del>';
  };

  Renderer.prototype.link = function (href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);

    if (href === null) {
      return text;
    }

    var out = '<a href="' + escape(href) + '"';

    if (title) {
      out += ' title="' + title + '"';
    }

    out += '>' + text + '</a>';
    return out;
  };

  Renderer.prototype.image = function (href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);

    if (href === null) {
      return text;
    }

    var out = '<img src="' + href + '" alt="' + text + '"';

    if (title) {
      out += ' title="' + title + '"';
    }

    out += this.options.xhtml ? '/>' : '>';
    return out;
  };

  Renderer.prototype.text = function (text) {
    return text;
  };
  /**
   * TextRenderer
   * returns only the textual part of the token
   */


  function TextRenderer() {} // no need for block level renderers


  TextRenderer.prototype.strong = TextRenderer.prototype.em = TextRenderer.prototype.codespan = TextRenderer.prototype.del = TextRenderer.prototype.text = function (text) {
    return text;
  };

  TextRenderer.prototype.link = TextRenderer.prototype.image = function (href, title, text) {
    return '' + text;
  };

  TextRenderer.prototype.br = function () {
    return '';
  };
  /**
   * Parsing & Compiling
   */


  function Parser(options) {
    this.tokens = [];
    this.token = null;
    this.options = options || marked.defaults;
    this.options.renderer = this.options.renderer || new Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.slugger = new Slugger();
  }
  /**
   * Static Parse Method
   */


  Parser.parse = function (src, options) {
    var parser = new Parser(options);
    return parser.parse(src);
  };
  /**
   * Parse Loop
   */


  Parser.prototype.parse = function (src) {
    this.inline = new InlineLexer(src.links, this.options); // use an InlineLexer with a TextRenderer to extract pure text

    this.inlineText = new InlineLexer(src.links, merge({}, this.options, {
      renderer: new TextRenderer()
    }));
    this.tokens = src.reverse();
    var out = '';

    while (this.next()) {
      out += this.tok();
    }

    return out;
  };
  /**
   * Next Token
   */


  Parser.prototype.next = function () {
    return this.token = this.tokens.pop();
  };
  /**
   * Preview Next Token
   */


  Parser.prototype.peek = function () {
    return this.tokens[this.tokens.length - 1] || 0;
  };
  /**
   * Parse Text Tokens
   */


  Parser.prototype.parseText = function () {
    var body = this.token.text;

    while (this.peek().type === 'text') {
      body += '\n' + this.next().text;
    }

    return this.inline.output(body);
  };
  /**
   * Parse Current Token
   */


  Parser.prototype.tok = function () {
    switch (this.token.type) {
      case 'space':
        {
          return '';
        }

      case 'hr':
        {
          return this.renderer.hr();
        }

      case 'heading':
        {
          return this.renderer.heading(this.inline.output(this.token.text), this.token.depth, unescape(this.inlineText.output(this.token.text)), this.slugger);
        }

      case 'code':
        {
          return this.renderer.code(this.token.text, this.token.lang, this.token.escaped);
        }

      case 'table':
        {
          var header = '',
              body = '',
              i,
              row,
              cell,
              j; // header

          cell = '';

          for (i = 0; i < this.token.header.length; i++) {
            cell += this.renderer.tablecell(this.inline.output(this.token.header[i]), {
              header: true,
              align: this.token.align[i]
            });
          }

          header += this.renderer.tablerow(cell);

          for (i = 0; i < this.token.cells.length; i++) {
            row = this.token.cells[i];
            cell = '';

            for (j = 0; j < row.length; j++) {
              cell += this.renderer.tablecell(this.inline.output(row[j]), {
                header: false,
                align: this.token.align[j]
              });
            }

            body += this.renderer.tablerow(cell);
          }

          return this.renderer.table(header, body);
        }

      case 'blockquote_start':
        {
          body = '';

          while (this.next().type !== 'blockquote_end') {
            body += this.tok();
          }

          return this.renderer.blockquote(body);
        }

      case 'list_start':
        {
          body = '';
          var ordered = this.token.ordered,
              start = this.token.start;

          while (this.next().type !== 'list_end') {
            body += this.tok();
          }

          return this.renderer.list(body, ordered, start);
        }

      case 'list_item_start':
        {
          body = '';
          var loose = this.token.loose;
          var checked = this.token.checked;
          var task = this.token.task;

          if (this.token.task) {
            body += this.renderer.checkbox(checked);
          }

          while (this.next().type !== 'list_item_end') {
            body += !loose && this.token.type === 'text' ? this.parseText() : this.tok();
          }

          return this.renderer.listitem(body, task, checked);
        }

      case 'html':
        {
          // TODO parse inline content if parameter markdown=1
          return this.renderer.html(this.token.text);
        }

      case 'paragraph':
        {
          return this.renderer.paragraph(this.inline.output(this.token.text));
        }

      case 'text':
        {
          return this.renderer.paragraph(this.parseText());
        }

      default:
        {
          var errMsg = 'Token with "' + this.token.type + '" type was not found.';

          if (this.options.silent) {
            console.log(errMsg);
          } else {
            throw new Error(errMsg);
          }
        }
    }
  };
  /**
   * Slugger generates header id
   */


  function Slugger() {
    this.seen = {};
  }
  /**
   * Convert string to unique id
   */


  Slugger.prototype.slug = function (value) {
    var slug = value.toLowerCase().trim().replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, '').replace(/\s/g, '-');

    if (this.seen.hasOwnProperty(slug)) {
      var originalSlug = slug;

      do {
        this.seen[originalSlug]++;
        slug = originalSlug + '-' + this.seen[originalSlug];
      } while (this.seen.hasOwnProperty(slug));
    }

    this.seen[slug] = 0;
    return slug;
  };
  /**
   * Helpers
   */


  function escape(html, encode) {
    if (encode) {
      if (escape.escapeTest.test(html)) {
        return html.replace(escape.escapeReplace, function (ch) {
          return escape.replacements[ch];
        });
      }
    } else {
      if (escape.escapeTestNoEncode.test(html)) {
        return html.replace(escape.escapeReplaceNoEncode, function (ch) {
          return escape.replacements[ch];
        });
      }
    }

    return html;
  }

  escape.escapeTest = /[&<>"']/;
  escape.escapeReplace = /[&<>"']/g;
  escape.replacements = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };
  escape.escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
  escape.escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;

  function unescape(html) {
    // explicitly match decimal, hex, and named HTML entities
    return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig, function (_, n) {
      n = n.toLowerCase();
      if (n === 'colon') return ':';

      if (n.charAt(0) === '#') {
        return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
      }

      return '';
    });
  }

  function edit(regex, opt) {
    regex = regex.source || regex;
    opt = opt || '';
    return {
      replace: function (name, val) {
        val = val.source || val;
        val = val.replace(/(^|[^\[])\^/g, '$1');
        regex = regex.replace(name, val);
        return this;
      },
      getRegex: function () {
        return new RegExp(regex, opt);
      }
    };
  }

  function cleanUrl(sanitize, base, href) {
    if (sanitize) {
      try {
        var prot = decodeURIComponent(unescape(href)).replace(/[^\w:]/g, '').toLowerCase();
      } catch (e) {
        return null;
      }

      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
        return null;
      }
    }

    if (base && !originIndependentUrl.test(href)) {
      href = resolveUrl(base, href);
    }

    try {
      href = encodeURI(href).replace(/%25/g, '%');
    } catch (e) {
      return null;
    }

    return href;
  }

  function resolveUrl(base, href) {
    if (!baseUrls[' ' + base]) {
      // we can ignore everything in base after the last slash of its path component,
      // but we might need to add _that_
      // https://tools.ietf.org/html/rfc3986#section-3
      if (/^[^:]+:\/*[^/]*$/.test(base)) {
        baseUrls[' ' + base] = base + '/';
      } else {
        baseUrls[' ' + base] = rtrim(base, '/', true);
      }
    }

    base = baseUrls[' ' + base];

    if (href.slice(0, 2) === '//') {
      return base.replace(/:[\s\S]*/, ':') + href;
    } else if (href.charAt(0) === '/') {
      return base.replace(/(:\/*[^/]*)[\s\S]*/, '$1') + href;
    } else {
      return base + href;
    }
  }

  var baseUrls = {};
  var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;

  function noop() {}

  noop.exec = noop;

  function merge(obj) {
    var i = 1,
        target,
        key;

    for (; i < arguments.length; i++) {
      target = arguments[i];

      for (key in target) {
        if (Object.prototype.hasOwnProperty.call(target, key)) {
          obj[key] = target[key];
        }
      }
    }

    return obj;
  }

  function splitCells(tableRow, count) {
    // ensure that every cell-delimiting pipe has a space
    // before it to distinguish it from an escaped pipe
    var row = tableRow.replace(/\|/g, function (match, offset, str) {
      var escaped = false,
          curr = offset;

      while (--curr >= 0 && str[curr] === '\\') escaped = !escaped;

      if (escaped) {
        // odd number of slashes means | is escaped
        // so we leave it alone
        return '|';
      } else {
        // add space before unescaped |
        return ' |';
      }
    }),
        cells = row.split(/ \|/),
        i = 0;

    if (cells.length > count) {
      cells.splice(count);
    } else {
      while (cells.length < count) cells.push('');
    }

    for (; i < cells.length; i++) {
      // leading or trailing whitespace is ignored per the gfm spec
      cells[i] = cells[i].trim().replace(/\\\|/g, '|');
    }

    return cells;
  } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
  // /c*$/ is vulnerable to REDOS.
  // invert: Remove suffix of non-c chars instead. Default falsey.


  function rtrim(str, c, invert) {
    if (str.length === 0) {
      return '';
    } // Length of suffix matching the invert condition.


    var suffLen = 0; // Step left until we fail to match the invert condition.

    while (suffLen < str.length) {
      var currChar = str.charAt(str.length - suffLen - 1);

      if (currChar === c && !invert) {
        suffLen++;
      } else if (currChar !== c && invert) {
        suffLen++;
      } else {
        break;
      }
    }

    return str.substr(0, str.length - suffLen);
  }

  function findClosingBracket(str, b) {
    if (str.indexOf(b[1]) === -1) {
      return -1;
    }

    var level = 0;

    for (var i = 0; i < str.length; i++) {
      if (str[i] === '\\') {
        i++;
      } else if (str[i] === b[0]) {
        level++;
      } else if (str[i] === b[1]) {
        level--;

        if (level < 0) {
          return i;
        }
      }
    }

    return -1;
  }
  /**
   * Marked
   */


  function marked(src, opt, callback) {
    // throw error in case of non string input
    if (typeof src === 'undefined' || src === null) {
      throw new Error('marked(): input parameter is undefined or null');
    }

    if (typeof src !== 'string') {
      throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
    }

    if (callback || typeof opt === 'function') {
      if (!callback) {
        callback = opt;
        opt = null;
      }

      opt = merge({}, marked.defaults, opt || {});
      var highlight = opt.highlight,
          tokens,
          pending,
          i = 0;

      try {
        tokens = Lexer.lex(src, opt);
      } catch (e) {
        return callback(e);
      }

      pending = tokens.length;

      var done = function (err) {
        if (err) {
          opt.highlight = highlight;
          return callback(err);
        }

        var out;

        try {
          out = Parser.parse(tokens, opt);
        } catch (e) {
          err = e;
        }

        opt.highlight = highlight;
        return err ? callback(err) : callback(null, out);
      };

      if (!highlight || highlight.length < 3) {
        return done();
      }

      delete opt.highlight;
      if (!pending) return done();

      for (; i < tokens.length; i++) {
        (function (token) {
          if (token.type !== 'code') {
            return --pending || done();
          }

          return highlight(token.text, token.lang, function (err, code) {
            if (err) return done(err);

            if (code == null || code === token.text) {
              return --pending || done();
            }

            token.text = code;
            token.escaped = true;
            --pending || done();
          });
        })(tokens[i]);
      }

      return;
    }

    try {
      if (opt) opt = merge({}, marked.defaults, opt);
      return Parser.parse(Lexer.lex(src, opt), opt);
    } catch (e) {
      e.message += '\nPlease report this to https://github.com/markedjs/marked.';

      if ((opt || marked.defaults).silent) {
        return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';
      }

      throw e;
    }
  }
  /**
   * Options
   */


  marked.options = marked.setOptions = function (opt) {
    merge(marked.defaults, opt);
    return marked;
  };

  marked.getDefaults = function () {
    return {
      baseUrl: null,
      breaks: false,
      gfm: true,
      headerIds: true,
      headerPrefix: '',
      highlight: null,
      langPrefix: 'language-',
      mangle: true,
      pedantic: false,
      renderer: new Renderer(),
      sanitize: false,
      sanitizer: null,
      silent: false,
      smartLists: false,
      smartypants: false,
      tables: true,
      xhtml: false
    };
  };

  marked.defaults = marked.getDefaults();
  /**
   * Expose
   */

  marked.Parser = Parser;
  marked.parser = Parser.parse;
  marked.Renderer = Renderer;
  marked.TextRenderer = TextRenderer;
  marked.Lexer = Lexer;
  marked.lexer = Lexer.lex;
  marked.InlineLexer = InlineLexer;
  marked.inlineLexer = InlineLexer.output;
  marked.Slugger = Slugger;
  marked.parse = marked; // BEGIN MONACOCHANGE
  // if (typeof module !== 'undefined' && typeof exports === 'object') {
  //   module.exports = marked;
  // } else if (typeof define === 'function' && define.amd) {
  //   define(function() { return marked; });
  // } else {
  //   root.marked = marked;
  // }
  // })(this || (typeof window !== 'undefined' ? window : global));

  __marked_exports = marked;
}).call(void 0); // ESM-comment-begin
// define(function() { return __marked_exports; });
// ESM-comment-end
// ESM-uncomment-begin

var marked = __marked_exports;
exports.marked = marked;
var Parser = __marked_exports.Parser;
exports.Parser = Parser;
var parser = __marked_exports.parser;
exports.parser = parser;
var Renderer = __marked_exports.Renderer;
exports.Renderer = Renderer;
var TextRenderer = __marked_exports.TextRenderer;
exports.TextRenderer = TextRenderer;
var Lexer = __marked_exports.Lexer;
exports.Lexer = Lexer;
var lexer = __marked_exports.lexer;
exports.lexer = lexer;
var InlineLexer = __marked_exports.InlineLexer;
exports.InlineLexer = InlineLexer;
var inlineLexer = __marked_exports.inlineLexer;
exports.inlineLexer = inlineLexer;
var parse = __marked_exports.parse; // ESM-uncomment-end
// END MONACOCHANGE

exports.parse = parse;
},{}],"../node_modules/monaco-editor/esm/vs/base/common/insane/insane.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insane = void 0;

/*
The MIT License (MIT)

Copyright © 2015 Nicolas Bevacqua

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
let __insane_func;

(function () {
  function r(e, n, t) {
    function o(i, f) {
      if (!n[i]) {
        if (!e[i]) {
          var c = "function" == typeof require && require;
          if (!f && c) return c(i, !0);
          if (u) return u(i, !0);
          var a = new Error("Cannot find module '" + i + "'");
          throw a.code = "MODULE_NOT_FOUND", a;
        }

        var p = n[i] = {
          exports: {}
        };
        e[i][0].call(p.exports, function (r) {
          var n = e[i][1][r];
          return o(n || r);
        }, p, p.exports, r, e, n, t);
      }

      return n[i].exports;
    }

    for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);

    return o;
  }

  return r;
})()({
  1: [function (require, module, exports) {
    'use strict';

    var toMap = require('./toMap');

    var uris = ['background', 'base', 'cite', 'href', 'longdesc', 'src', 'usemap'];
    module.exports = {
      uris: toMap(uris) // attributes that have an href and hence need to be sanitized

    };
  }, {
    "./toMap": 10
  }],
  2: [function (require, module, exports) {
    'use strict';

    var defaults = {
      allowedAttributes: {
        '*': ['title', 'accesskey'],
        a: ['href', 'name', 'target', 'aria-label'],
        iframe: ['allowfullscreen', 'frameborder', 'src'],
        img: ['src', 'alt', 'title', 'aria-label']
      },
      allowedClasses: {},
      allowedSchemes: ['http', 'https', 'mailto'],
      allowedTags: ['a', 'abbr', 'article', 'b', 'blockquote', 'br', 'caption', 'code', 'del', 'details', 'div', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'ins', 'kbd', 'li', 'main', 'mark', 'ol', 'p', 'pre', 'section', 'span', 'strike', 'strong', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'th', 'thead', 'tr', 'u', 'ul'],
      filter: null
    };
    module.exports = defaults;
  }, {}],
  3: [function (require, module, exports) {
    'use strict';

    var toMap = require('./toMap');

    var voids = ['area', 'br', 'col', 'hr', 'img', 'wbr', 'input', 'base', 'basefont', 'link', 'meta'];
    module.exports = {
      voids: toMap(voids)
    };
  }, {
    "./toMap": 10
  }],
  4: [function (require, module, exports) {
    'use strict';

    var he = require('he');

    var assign = require('assignment');

    var parser = require('./parser');

    var sanitizer = require('./sanitizer');

    var defaults = require('./defaults');

    function insane(html, options, strict) {
      var buffer = [];
      var configuration = strict === true ? options : assign({}, defaults, options);
      var handler = sanitizer(buffer, configuration);
      parser(html, handler);
      return buffer.join('');
    }

    insane.defaults = defaults;
    module.exports = insane;
    __insane_func = insane;
  }, {
    "./defaults": 2,
    "./parser": 7,
    "./sanitizer": 8,
    "assignment": 6,
    "he": 9
  }],
  5: [function (require, module, exports) {
    'use strict';

    module.exports = function lowercase(string) {
      return typeof string === 'string' ? string.toLowerCase() : string;
    };
  }, {}],
  6: [function (require, module, exports) {
    'use strict';

    function assignment(result) {
      var stack = Array.prototype.slice.call(arguments, 1);
      var item;
      var key;

      while (stack.length) {
        item = stack.shift();

        for (key in item) {
          if (item.hasOwnProperty(key)) {
            if (Object.prototype.toString.call(result[key]) === '[object Object]') {
              result[key] = assignment(result[key], item[key]);
            } else {
              result[key] = item[key];
            }
          }
        }
      }

      return result;
    }

    module.exports = assignment;
  }, {}],
  7: [function (require, module, exports) {
    'use strict';

    var he = require('he');

    var lowercase = require('./lowercase');

    var attributes = require('./attributes');

    var elements = require('./elements');

    var rstart = /^<\s*([\w:-]+)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*>/;
    var rend = /^<\s*\/\s*([\w:-]+)[^>]*>/;
    var rattrs = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g;
    var rtag = /^</;
    var rtagend = /^<\s*\//;

    function createStack() {
      var stack = [];

      stack.lastItem = function lastItem() {
        return stack[stack.length - 1];
      };

      return stack;
    }

    function parser(html, handler) {
      var stack = createStack();
      var last = html;
      var chars;

      while (html) {
        parsePart();
      }

      parseEndTag(); // clean up any remaining tags

      function parsePart() {
        chars = true;
        parseTag();
        var same = html === last;
        last = html;

        if (same) {
          // discard, because it's invalid
          html = '';
        }
      }

      function parseTag() {
        if (html.substr(0, 4) === '<!--') {
          // comments
          parseComment();
        } else if (rtagend.test(html)) {
          parseEdge(rend, parseEndTag);
        } else if (rtag.test(html)) {
          parseEdge(rstart, parseStartTag);
        }

        parseTagDecode();
      }

      function parseEdge(regex, parser) {
        var match = html.match(regex);

        if (match) {
          html = html.substring(match[0].length);
          match[0].replace(regex, parser);
          chars = false;
        }
      }

      function parseComment() {
        var index = html.indexOf('-->');

        if (index >= 0) {
          if (handler.comment) {
            handler.comment(html.substring(4, index));
          }

          html = html.substring(index + 3);
          chars = false;
        }
      }

      function parseTagDecode() {
        if (!chars) {
          return;
        }

        var text;
        var index = html.indexOf('<');

        if (index >= 0) {
          text = html.substring(0, index);
          html = html.substring(index);
        } else {
          text = html;
          html = '';
        }

        if (handler.chars) {
          handler.chars(text);
        }
      }

      function parseStartTag(tag, tagName, rest, unary) {
        var attrs = {};
        var low = lowercase(tagName);
        var u = elements.voids[low] || !!unary;
        rest.replace(rattrs, attrReplacer);

        if (!u) {
          stack.push(low);
        }

        if (handler.start) {
          handler.start(low, attrs, u);
        }

        function attrReplacer(match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {
          if (doubleQuotedValue === void 0 && singleQuotedValue === void 0 && unquotedValue === void 0) {
            attrs[name] = void 0; // attribute is like <button disabled></button>
          } else {
            attrs[name] = he.decode(doubleQuotedValue || singleQuotedValue || unquotedValue || '');
          }
        }
      }

      function parseEndTag(tag, tagName) {
        var i;
        var pos = 0;
        var low = lowercase(tagName);

        if (low) {
          for (pos = stack.length - 1; pos >= 0; pos--) {
            if (stack[pos] === low) {
              break; // find the closest opened tag of the same type
            }
          }
        }

        if (pos >= 0) {
          for (i = stack.length - 1; i >= pos; i--) {
            if (handler.end) {
              // close all the open elements, up the stack
              handler.end(stack[i]);
            }
          }

          stack.length = pos;
        }
      }
    }

    module.exports = parser;
  }, {
    "./attributes": 1,
    "./elements": 3,
    "./lowercase": 5,
    "he": 9
  }],
  8: [function (require, module, exports) {
    'use strict';

    var he = require('he');

    var lowercase = require('./lowercase');

    var attributes = require('./attributes');

    var elements = require('./elements');

    function sanitizer(buffer, options) {
      var last;
      var context;
      var o = options || {};
      reset();
      return {
        start: start,
        end: end,
        chars: chars
      };

      function out(value) {
        buffer.push(value);
      }

      function start(tag, attrs, unary) {
        var low = lowercase(tag);

        if (context.ignoring) {
          ignore(low);
          return;
        }

        if ((o.allowedTags || []).indexOf(low) === -1) {
          ignore(low);
          return;
        }

        if (o.filter && !o.filter({
          tag: low,
          attrs: attrs
        })) {
          ignore(low);
          return;
        }

        out('<');
        out(low);
        Object.keys(attrs).forEach(parse);
        out(unary ? '/>' : '>');

        function parse(key) {
          var value = attrs[key];
          var classesOk = (o.allowedClasses || {})[low] || [];
          var attrsOk = (o.allowedAttributes || {})[low] || [];
          attrsOk = attrsOk.concat((o.allowedAttributes || {})['*'] || []);
          var valid;
          var lkey = lowercase(key);

          if (lkey === 'class' && attrsOk.indexOf(lkey) === -1) {
            value = value.split(' ').filter(isValidClass).join(' ').trim();
            valid = value.length;
          } else {
            valid = attrsOk.indexOf(lkey) !== -1 && (attributes.uris[lkey] !== true || testUrl(value));
          }

          if (valid) {
            out(' ');
            out(key);

            if (typeof value === 'string') {
              out('="');
              out(he.encode(value));
              out('"');
            }
          }

          function isValidClass(className) {
            return classesOk && classesOk.indexOf(className) !== -1;
          }
        }
      }

      function end(tag) {
        var low = lowercase(tag);
        var allowed = (o.allowedTags || []).indexOf(low) !== -1;

        if (allowed) {
          if (context.ignoring === false) {
            out('</');
            out(low);
            out('>');
          } else {
            unignore(low);
          }
        } else {
          unignore(low);
        }
      }

      function testUrl(text) {
        var start = text[0];

        if (start === '#' || start === '/') {
          return true;
        }

        var colon = text.indexOf(':');

        if (colon === -1) {
          return true;
        }

        var questionmark = text.indexOf('?');

        if (questionmark !== -1 && colon > questionmark) {
          return true;
        }

        var hash = text.indexOf('#');

        if (hash !== -1 && colon > hash) {
          return true;
        }

        return o.allowedSchemes.some(matches);

        function matches(scheme) {
          return text.indexOf(scheme + ':') === 0;
        }
      }

      function chars(text) {
        if (context.ignoring === false) {
          out(o.transformText ? o.transformText(text) : text);
        }
      }

      function ignore(tag) {
        if (elements.voids[tag]) {
          return;
        }

        if (context.ignoring === false) {
          context = {
            ignoring: tag,
            depth: 1
          };
        } else if (context.ignoring === tag) {
          context.depth++;
        }
      }

      function unignore(tag) {
        if (context.ignoring === tag) {
          if (--context.depth <= 0) {
            reset();
          }
        }
      }

      function reset() {
        context = {
          ignoring: false,
          depth: 0
        };
      }
    }

    module.exports = sanitizer;
  }, {
    "./attributes": 1,
    "./elements": 3,
    "./lowercase": 5,
    "he": 9
  }],
  9: [function (require, module, exports) {
    'use strict';

    var escapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    var unescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };
    var rescaped = /(&amp;|&lt;|&gt;|&quot;|&#39;)/g;
    var runescaped = /[&<>"']/g;

    function escapeHtmlChar(match) {
      return escapes[match];
    }

    function unescapeHtmlChar(match) {
      return unescapes[match];
    }

    function escapeHtml(text) {
      return text == null ? '' : String(text).replace(runescaped, escapeHtmlChar);
    }

    function unescapeHtml(html) {
      return html == null ? '' : String(html).replace(rescaped, unescapeHtmlChar);
    }

    escapeHtml.options = unescapeHtml.options = {};
    module.exports = {
      encode: escapeHtml,
      escape: escapeHtml,
      decode: unescapeHtml,
      unescape: unescapeHtml,
      version: '1.0.0-browser'
    };
  }, {}],
  10: [function (require, module, exports) {
    'use strict';

    function toMap(list) {
      return list.reduce(asKey, {});
    }

    function asKey(accumulator, item) {
      accumulator[item] = true;
      return accumulator;
    }

    module.exports = toMap;
  }, {}]
}, {}, [4]); // ESM-comment-begin
// define(function() { return { insane: __insane_func }; });
// ESM-comment-end
// ESM-uncomment-begin

var insane = __insane_func; // ESM-uncomment-end

exports.insane = insane;
},{}],"../node_modules/monaco-editor/esm/vs/base/browser/markdownRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderMarkdown = renderMarkdown;

var DOM = _interopRequireWildcard(require("./dom.js"));

var _formattedTextRenderer = require("./formattedTextRenderer.js");

var _errors = require("../common/errors.js");

var _htmlContent = require("../common/htmlContent.js");

var _idGenerator = require("../common/idGenerator.js");

var marked = _interopRequireWildcard(require("../common/marked/marked.js"));

var _insane = require("../common/insane/insane.js");

var _marshalling = require("../common/marshalling.js");

var _objects = require("../common/objects.js");

var _strings = require("../common/strings.js");

var _uri = require("../common/uri.js");

var _network = require("../common/network.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * Create html nodes for the given content element.
 */
function renderMarkdown(markdown, options) {
  if (options === void 0) {
    options = {};
  }

  var element = (0, _formattedTextRenderer.createElement)(options);

  var _uriMassage = function (part) {
    var data;

    try {
      data = (0, _marshalling.parse)(decodeURIComponent(part));
    } catch (e) {// ignore
    }

    if (!data) {
      return part;
    }

    data = (0, _objects.cloneAndChange)(data, function (value) {
      if (markdown.uris && markdown.uris[value]) {
        return _uri.URI.revive(markdown.uris[value]);
      } else {
        return undefined;
      }
    });
    return encodeURIComponent(JSON.stringify(data));
  };

  var _href = function (href, isDomUri) {
    var data = markdown.uris && markdown.uris[href];

    if (!data) {
      return href; // no uri exists
    }

    var uri = _uri.URI.revive(data);

    if (_uri.URI.parse(href).toString() === uri.toString()) {
      return href; // no tranformation performed
    }

    if (isDomUri) {
      uri = DOM.asDomUri(uri);
    }

    if (uri.query) {
      uri = uri.with({
        query: _uriMassage(uri.query)
      });
    }

    return uri.toString(true);
  }; // signal to code-block render that the
  // element has been created


  var signalInnerHTML;
  var withInnerHTML = new Promise(function (c) {
    return signalInnerHTML = c;
  });
  var renderer = new marked.Renderer();

  renderer.image = function (href, title, text) {
    var _a;

    var dimensions = [];
    var attributes = [];

    if (href) {
      _a = (0, _htmlContent.parseHrefAndDimensions)(href), href = _a.href, dimensions = _a.dimensions;
      href = _href(href, true);
      attributes.push("src=\"" + href + "\"");
    }

    if (text) {
      attributes.push("alt=\"" + text + "\"");
    }

    if (title) {
      attributes.push("title=\"" + title + "\"");
    }

    if (dimensions.length) {
      attributes = attributes.concat(dimensions);
    }

    return '<img ' + attributes.join(' ') + '>';
  };

  renderer.link = function (href, title, text) {
    // Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829
    if (href === text) {
      // raw link case
      text = (0, _htmlContent.removeMarkdownEscapes)(text);
    }

    href = _href(href, false);
    title = (0, _htmlContent.removeMarkdownEscapes)(title);
    href = (0, _htmlContent.removeMarkdownEscapes)(href);

    if (!href || href.match(/^data:|javascript:/i) || href.match(/^command:/i) && !markdown.isTrusted || href.match(/^command:(\/\/\/)?_workbench\.downloadResource/i)) {
      // drop the link
      return text;
    } else {
      // HTML Encode href
      href = href.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
      return "<a href=\"#\" data-href=\"" + href + "\" title=\"" + (title || href) + "\">" + text + "</a>";
    }
  };

  renderer.paragraph = function (text) {
    return "<p>" + text + "</p>";
  };

  if (options.codeBlockRenderer) {
    renderer.code = function (code, lang) {
      var value = options.codeBlockRenderer(lang, code); // when code-block rendering is async we return sync
      // but update the node with the real result later.

      var id = _idGenerator.defaultGenerator.nextId();

      var promise = Promise.all([value, withInnerHTML]).then(function (values) {
        var strValue = values[0];
        var span = element.querySelector("div[data-code=\"" + id + "\"]");

        if (span) {
          span.innerHTML = strValue;
        }
      }).catch(function (err) {// ignore
      });

      if (options.codeBlockRenderCallback) {
        promise.then(options.codeBlockRenderCallback);
      }

      return "<div class=\"code\" data-code=\"" + id + "\">" + (0, _strings.escape)(code) + "</div>";
    };
  }

  var actionHandler = options.actionHandler;

  if (actionHandler) {
    actionHandler.disposeables.add(DOM.addStandardDisposableListener(element, 'click', function (event) {
      var target = event.target;

      if (target.tagName !== 'A') {
        target = target.parentElement;

        if (!target || target.tagName !== 'A') {
          return;
        }
      }

      try {
        var href = target.dataset['href'];

        if (href) {
          actionHandler.callback(href, event);
        }
      } catch (err) {
        (0, _errors.onUnexpectedError)(err);
      } finally {
        event.preventDefault();
      }
    }));
  }

  var markedOptions = {
    sanitize: true,
    renderer: renderer
  };
  var allowedSchemes = [_network.Schemas.http, _network.Schemas.https, _network.Schemas.mailto, _network.Schemas.data, _network.Schemas.file, _network.Schemas.vscodeRemote, _network.Schemas.vscodeRemoteResource];

  if (markdown.isTrusted) {
    allowedSchemes.push(_network.Schemas.command);
  }

  var renderedMarkdown = marked.parse(markdown.value, markedOptions);
  element.innerHTML = (0, _insane.insane)(renderedMarkdown, {
    allowedSchemes: allowedSchemes,
    allowedAttributes: {
      'a': ['href', 'name', 'target', 'data-href'],
      'iframe': ['allowfullscreen', 'frameborder', 'src'],
      'img': ['src', 'title', 'alt', 'width', 'height'],
      'div': ['class', 'data-code'],
      'span': ['class']
    }
  });
  signalInnerHTML();
  return element;
}
},{"./dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","./formattedTextRenderer.js":"../node_modules/monaco-editor/esm/vs/base/browser/formattedTextRenderer.js","../common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../common/htmlContent.js":"../node_modules/monaco-editor/esm/vs/base/common/htmlContent.js","../common/idGenerator.js":"../node_modules/monaco-editor/esm/vs/base/common/idGenerator.js","../common/marked/marked.js":"../node_modules/monaco-editor/esm/vs/base/common/marked/marked.js","../common/insane/insane.js":"../node_modules/monaco-editor/esm/vs/base/common/insane/insane.js","../common/marshalling.js":"../node_modules/monaco-editor/esm/vs/base/common/marshalling.js","../common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js","../common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../common/uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js","../common/network.js":"../node_modules/monaco-editor/esm/vs/base/common/network.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/markdown/markdownRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarkdownRenderer = void 0;

var _markdownRenderer = require("../../../base/browser/markdownRenderer.js");

var _opener = require("../../../platform/opener/common/opener.js");

var _modeService2 = require("../../common/services/modeService.js");

var _errors = require("../../../base/common/errors.js");

var _textToHtmlTokenizer = require("../../common/modes/textToHtmlTokenizer.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _event = require("../../../base/common/event.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _modes = require("../../common/modes.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var MarkdownRenderer =
/** @class */
function (_super) {
  __extends(MarkdownRenderer, _super);

  function MarkdownRenderer(_editor, _modeService, _openerService) {
    if (_openerService === void 0) {
      _openerService = _opener.NullOpenerService;
    }

    var _this = _super.call(this) || this;

    _this._editor = _editor;
    _this._modeService = _modeService;
    _this._openerService = _openerService;
    _this._onDidRenderCodeBlock = _this._register(new _event.Emitter());
    _this.onDidRenderCodeBlock = _this._onDidRenderCodeBlock.event;
    return _this;
  }

  MarkdownRenderer.prototype.getOptions = function (disposeables) {
    var _this = this;

    return {
      codeBlockRenderer: function (languageAlias, value) {
        // In markdown,
        // it is possible that we stumble upon language aliases (e.g.js instead of javascript)
        // it is possible no alias is given in which case we fall back to the current editor lang
        var modeId = null;

        if (languageAlias) {
          modeId = _this._modeService.getModeIdForLanguageName(languageAlias);
        } else {
          var model = _this._editor.getModel();

          if (model) {
            modeId = model.getLanguageIdentifier().language;
          }
        }

        _this._modeService.triggerMode(modeId || '');

        return Promise.resolve(true).then(function (_) {
          var promise = _modes.TokenizationRegistry.getPromise(modeId || '');

          if (promise) {
            return promise.then(function (support) {
              return (0, _textToHtmlTokenizer.tokenizeToString)(value, support);
            });
          }

          return (0, _textToHtmlTokenizer.tokenizeToString)(value, undefined);
        }).then(function (code) {
          return "<span style=\"font-family: " + _this._editor.getOption(32
          /* fontInfo */
          ).fontFamily + "\">" + code + "</span>";
        });
      },
      codeBlockRenderCallback: function () {
        return _this._onDidRenderCodeBlock.fire();
      },
      actionHandler: {
        callback: function (content) {
          _this._openerService.open(content, {
            fromUserGesture: true
          }).catch(_errors.onUnexpectedError);
        },
        disposeables: disposeables
      }
    };
  };

  MarkdownRenderer.prototype.render = function (markdown) {
    var disposeables = new _lifecycle.DisposableStore();
    var element;

    if (!markdown) {
      element = document.createElement('span');
    } else {
      element = (0, _markdownRenderer.renderMarkdown)(markdown, this.getOptions(disposeables));
    }

    return {
      element: element,
      dispose: function () {
        return disposeables.dispose();
      }
    };
  };

  MarkdownRenderer = __decorate([__param(1, _modeService2.IModeService), __param(2, (0, _instantiation.optional)(_opener.IOpenerService))], MarkdownRenderer);
  return MarkdownRenderer;
}(_lifecycle.Disposable);

exports.MarkdownRenderer = MarkdownRenderer;
},{"../../../base/browser/markdownRenderer.js":"../node_modules/monaco-editor/esm/vs/base/browser/markdownRenderer.js","../../../platform/opener/common/opener.js":"../node_modules/monaco-editor/esm/vs/platform/opener/common/opener.js","../../common/services/modeService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modeService.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../common/modes/textToHtmlTokenizer.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes/textToHtmlTokenizer.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/modesContentHover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModesContentHoverWidget = void 0;

var nls = _interopRequireWildcard(require("../../../nls.js"));

var dom = _interopRequireWildcard(require("../../../base/browser/dom.js"));

var _cancellation = require("../../../base/common/cancellation.js");

var _color = require("../../../base/common/color.js");

var _htmlContent = require("../../../base/common/htmlContent.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _position = require("../../common/core/position.js");

var _range = require("../../common/core/range.js");

var _textModel = require("../../common/model/textModel.js");

var _modes = require("../../common/modes.js");

var _color2 = require("../colorPicker/color.js");

var _colorDetector = require("../colorPicker/colorDetector.js");

var _colorPickerModel = require("../colorPicker/colorPickerModel.js");

var _colorPickerWidget = require("../colorPicker/colorPickerWidget.js");

var _getHover = require("./getHover.js");

var _hoverOperation = require("./hoverOperation.js");

var _hoverWidgets = require("./hoverWidgets.js");

var _markdownRenderer = require("../markdown/markdownRenderer.js");

var _arrays = require("../../../base/common/arrays.js");

var _markers = require("../../../platform/markers/common/markers.js");

var _resources = require("../../../base/common/resources.js");

var _errors = require("../../../base/common/errors.js");

var _opener = require("../../../platform/opener/common/opener.js");

var _gotoError = require("../gotoError/gotoError.js");

var _async = require("../../../base/common/async.js");

var _codeAction = require("../codeAction/codeAction.js");

var _codeActionCommands = require("../codeAction/codeActionCommands.js");

var _types = require("../codeAction/types.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __spreadArrays = void 0 && (void 0).__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
};

var $ = dom.$;

var ColorHover =
/** @class */
function () {
  function ColorHover(range, color, provider) {
    this.range = range;
    this.color = color;
    this.provider = provider;
  }

  return ColorHover;
}();

var MarkerHover =
/** @class */
function () {
  function MarkerHover(range, marker) {
    this.range = range;
    this.marker = marker;
  }

  return MarkerHover;
}();

var ModesContentComputer =
/** @class */
function () {
  function ModesContentComputer(editor, _markerDecorationsService) {
    this._markerDecorationsService = _markerDecorationsService;
    this._editor = editor;
    this._result = [];
  }

  ModesContentComputer.prototype.setRange = function (range) {
    this._range = range;
    this._result = [];
  };

  ModesContentComputer.prototype.clearResult = function () {
    this._result = [];
  };

  ModesContentComputer.prototype.computeAsync = function (token) {
    if (!this._editor.hasModel() || !this._range) {
      return Promise.resolve([]);
    }

    var model = this._editor.getModel();

    if (!_modes.HoverProviderRegistry.has(model)) {
      return Promise.resolve([]);
    }

    return (0, _getHover.getHover)(model, new _position.Position(this._range.startLineNumber, this._range.startColumn), token);
  };

  ModesContentComputer.prototype.computeSync = function () {
    var _this = this;

    if (!this._editor.hasModel() || !this._range) {
      return [];
    }

    var model = this._editor.getModel();

    var lineNumber = this._range.startLineNumber;

    if (lineNumber > this._editor.getModel().getLineCount()) {
      // Illegal line number => no results
      return [];
    }

    var colorDetector = _colorDetector.ColorDetector.get(this._editor);

    var maxColumn = model.getLineMaxColumn(lineNumber);

    var lineDecorations = this._editor.getLineDecorations(lineNumber);

    var didFindColor = false;
    var hoverRange = this._range;
    var result = lineDecorations.map(function (d) {
      var startColumn = d.range.startLineNumber === lineNumber ? d.range.startColumn : 1;
      var endColumn = d.range.endLineNumber === lineNumber ? d.range.endColumn : maxColumn;

      if (startColumn > hoverRange.startColumn || hoverRange.endColumn > endColumn) {
        return null;
      }

      var range = new _range.Range(hoverRange.startLineNumber, startColumn, hoverRange.startLineNumber, endColumn);

      var marker = _this._markerDecorationsService.getMarker(model, d);

      if (marker) {
        return new MarkerHover(range, marker);
      }

      var colorData = colorDetector.getColorData(d.range.getStartPosition());

      if (!didFindColor && colorData) {
        didFindColor = true;
        var _a = colorData.colorInfo,
            color = _a.color,
            range_1 = _a.range;
        return new ColorHover(range_1, color, colorData.provider);
      } else {
        if ((0, _htmlContent.isEmptyMarkdownString)(d.options.hoverMessage)) {
          return null;
        }

        var contents = d.options.hoverMessage ? (0, _arrays.asArray)(d.options.hoverMessage) : [];
        return {
          contents: contents,
          range: range
        };
      }
    });
    return (0, _arrays.coalesce)(result);
  };

  ModesContentComputer.prototype.onResult = function (result, isFromSynchronousComputation) {
    // Always put synchronous messages before asynchronous ones
    if (isFromSynchronousComputation) {
      this._result = result.concat(this._result.sort(function (a, b) {
        if (a instanceof ColorHover) {
          // sort picker messages at to the top
          return -1;
        } else if (b instanceof ColorHover) {
          return 1;
        }

        return 0;
      }));
    } else {
      this._result = this._result.concat(result);
    }
  };

  ModesContentComputer.prototype.getResult = function () {
    return this._result.slice(0);
  };

  ModesContentComputer.prototype.getResultWithLoadingMessage = function () {
    return this._result.slice(0).concat([this._getLoadingMessage()]);
  };

  ModesContentComputer.prototype._getLoadingMessage = function () {
    return {
      range: this._range,
      contents: [new _htmlContent.MarkdownString().appendText(nls.localize('modesContentHover.loading', "Loading..."))]
    };
  };

  return ModesContentComputer;
}();

var ModesContentHoverWidget =
/** @class */
function (_super) {
  __extends(ModesContentHoverWidget, _super);

  function ModesContentHoverWidget(editor, markerDecorationsService, _themeService, _keybindingService, _modeService, _openerService) {
    if (_openerService === void 0) {
      _openerService = _opener.NullOpenerService;
    }

    var _this = _super.call(this, ModesContentHoverWidget.ID, editor) || this;

    _this._themeService = _themeService;
    _this._keybindingService = _keybindingService;
    _this._modeService = _modeService;
    _this._openerService = _openerService;
    _this.renderDisposable = _this._register(new _lifecycle.MutableDisposable());
    _this._messages = [];
    _this._lastRange = null;
    _this._computer = new ModesContentComputer(_this._editor, markerDecorationsService);
    _this._highlightDecorations = [];
    _this._isChangingDecorations = false;
    _this._shouldFocus = false;
    _this._colorPicker = null;
    _this._hoverOperation = new _hoverOperation.HoverOperation(_this._computer, function (result) {
      return _this._withResult(result, true);
    }, null, function (result) {
      return _this._withResult(result, false);
    }, _this._editor.getOption(42
    /* hover */
    ).delay);

    _this._register(dom.addStandardDisposableListener(_this.getDomNode(), dom.EventType.FOCUS, function () {
      if (_this._colorPicker) {
        dom.addClass(_this.getDomNode(), 'colorpicker-hover');
      }
    }));

    _this._register(dom.addStandardDisposableListener(_this.getDomNode(), dom.EventType.BLUR, function () {
      dom.removeClass(_this.getDomNode(), 'colorpicker-hover');
    }));

    _this._register(editor.onDidChangeConfiguration(function (e) {
      _this._hoverOperation.setHoverTime(_this._editor.getOption(42
      /* hover */
      ).delay);
    }));

    _this._register(_modes.TokenizationRegistry.onDidChange(function (e) {
      if (_this.isVisible && _this._lastRange && _this._messages.length > 0) {
        _this._domNode.textContent = '';

        _this._renderMessages(_this._lastRange, _this._messages);
      }
    }));

    return _this;
  }

  ModesContentHoverWidget.prototype.dispose = function () {
    this._hoverOperation.cancel();

    _super.prototype.dispose.call(this);
  };

  ModesContentHoverWidget.prototype.onModelDecorationsChanged = function () {
    if (this._isChangingDecorations) {
      return;
    }

    if (this.isVisible) {
      // The decorations have changed and the hover is visible,
      // we need to recompute the displayed text
      this._hoverOperation.cancel();

      this._computer.clearResult();

      if (!this._colorPicker) {
        // TODO@Michel ensure that displayed text for other decorations is computed even if color picker is in place
        this._hoverOperation.start(0
        /* Delayed */
        );
      }
    }
  };

  ModesContentHoverWidget.prototype.startShowingAt = function (range, mode, focus) {
    if (this._lastRange && this._lastRange.equalsRange(range)) {
      // We have to show the widget at the exact same range as before, so no work is needed
      return;
    }

    this._hoverOperation.cancel();

    if (this.isVisible) {
      // The range might have changed, but the hover is visible
      // Instead of hiding it completely, filter out messages that are still in the new range and
      // kick off a new computation
      if (!this._showAtPosition || this._showAtPosition.lineNumber !== range.startLineNumber) {
        this.hide();
      } else {
        var filteredMessages = [];

        for (var i = 0, len = this._messages.length; i < len; i++) {
          var msg = this._messages[i];
          var rng = msg.range;

          if (rng && rng.startColumn <= range.startColumn && rng.endColumn >= range.endColumn) {
            filteredMessages.push(msg);
          }
        }

        if (filteredMessages.length > 0) {
          if (hoverContentsEquals(filteredMessages, this._messages)) {
            return;
          }

          this._renderMessages(range, filteredMessages);
        } else {
          this.hide();
        }
      }
    }

    this._lastRange = range;

    this._computer.setRange(range);

    this._shouldFocus = focus;

    this._hoverOperation.start(mode);
  };

  ModesContentHoverWidget.prototype.hide = function () {
    this._lastRange = null;

    this._hoverOperation.cancel();

    _super.prototype.hide.call(this);

    this._isChangingDecorations = true;
    this._highlightDecorations = this._editor.deltaDecorations(this._highlightDecorations, []);
    this._isChangingDecorations = false;
    this.renderDisposable.clear();
    this._colorPicker = null;
  };

  ModesContentHoverWidget.prototype.isColorPickerVisible = function () {
    if (this._colorPicker) {
      return true;
    }

    return false;
  };

  ModesContentHoverWidget.prototype._withResult = function (result, complete) {
    this._messages = result;

    if (this._lastRange && this._messages.length > 0) {
      this._renderMessages(this._lastRange, this._messages);
    } else if (complete) {
      this.hide();
    }
  };

  ModesContentHoverWidget.prototype._renderMessages = function (renderRange, messages) {
    var _this = this;

    this.renderDisposable.dispose();
    this._colorPicker = null; // update column from which to show

    var renderColumn = 1073741824
    /* MAX_SAFE_SMALL_INTEGER */
    ;
    var highlightRange = messages[0].range ? _range.Range.lift(messages[0].range) : null;
    var fragment = document.createDocumentFragment();
    var isEmptyHoverContent = true;
    var containColorPicker = false;
    var markdownDisposeables = new _lifecycle.DisposableStore();
    var markerMessages = [];
    messages.forEach(function (msg) {
      if (!msg.range) {
        return;
      }

      renderColumn = Math.min(renderColumn, msg.range.startColumn);
      highlightRange = highlightRange ? _range.Range.plusRange(highlightRange, msg.range) : _range.Range.lift(msg.range);

      if (msg instanceof ColorHover) {
        containColorPicker = true;
        var _a = msg.color,
            red = _a.red,
            green = _a.green,
            blue = _a.blue,
            alpha = _a.alpha;
        var rgba = new _color.RGBA(Math.round(red * 255), Math.round(green * 255), Math.round(blue * 255), alpha);
        var color_1 = new _color.Color(rgba);

        if (!_this._editor.hasModel()) {
          return;
        }

        var editorModel_1 = _this._editor.getModel();

        var range_2 = new _range.Range(msg.range.startLineNumber, msg.range.startColumn, msg.range.endLineNumber, msg.range.endColumn);
        var colorInfo = {
          range: msg.range,
          color: msg.color
        }; // create blank olor picker model and widget first to ensure it's positioned correctly.

        var model_1 = new _colorPickerModel.ColorPickerModel(color_1, [], 0);
        var widget_1 = new _colorPickerWidget.ColorPickerWidget(fragment, model_1, _this._editor.getOption(101
        /* pixelRatio */
        ), _this._themeService);
        (0, _color2.getColorPresentations)(editorModel_1, colorInfo, msg.provider, _cancellation.CancellationToken.None).then(function (colorPresentations) {
          model_1.colorPresentations = colorPresentations || [];

          if (!_this._editor.hasModel()) {
            // gone...
            return;
          }

          var originalText = _this._editor.getModel().getValueInRange(msg.range);

          model_1.guessColorPresentation(color_1, originalText);

          var updateEditorModel = function () {
            var textEdits;
            var newRange;

            if (model_1.presentation.textEdit) {
              textEdits = [model_1.presentation.textEdit];
              newRange = new _range.Range(model_1.presentation.textEdit.range.startLineNumber, model_1.presentation.textEdit.range.startColumn, model_1.presentation.textEdit.range.endLineNumber, model_1.presentation.textEdit.range.endColumn);
              newRange = newRange.setEndPosition(newRange.endLineNumber, newRange.startColumn + model_1.presentation.textEdit.text.length);
            } else {
              textEdits = [{
                identifier: null,
                range: range_2,
                text: model_1.presentation.label,
                forceMoveMarkers: false
              }];
              newRange = range_2.setEndPosition(range_2.endLineNumber, range_2.startColumn + model_1.presentation.label.length);
            }

            _this._editor.pushUndoStop();

            _this._editor.executeEdits('colorpicker', textEdits);

            if (model_1.presentation.additionalTextEdits) {
              textEdits = __spreadArrays(model_1.presentation.additionalTextEdits);

              _this._editor.executeEdits('colorpicker', textEdits);

              _this.hide();
            }

            _this._editor.pushUndoStop();

            range_2 = newRange;
          };

          var updateColorPresentations = function (color) {
            return (0, _color2.getColorPresentations)(editorModel_1, {
              range: range_2,
              color: {
                red: color.rgba.r / 255,
                green: color.rgba.g / 255,
                blue: color.rgba.b / 255,
                alpha: color.rgba.a
              }
            }, msg.provider, _cancellation.CancellationToken.None).then(function (colorPresentations) {
              model_1.colorPresentations = colorPresentations || [];
            });
          };

          var colorListener = model_1.onColorFlushed(function (color) {
            updateColorPresentations(color).then(updateEditorModel);
          });
          var colorChangeListener = model_1.onDidChangeColor(updateColorPresentations);
          _this._colorPicker = widget_1;

          _this.showAt(range_2.getStartPosition(), range_2, _this._shouldFocus);

          _this.updateContents(fragment);

          _this._colorPicker.layout();

          _this.renderDisposable.value = (0, _lifecycle.combinedDisposable)(colorListener, colorChangeListener, widget_1, markdownDisposeables);
        });
      } else {
        if (msg instanceof MarkerHover) {
          markerMessages.push(msg);
          isEmptyHoverContent = false;
        } else {
          msg.contents.filter(function (contents) {
            return !(0, _htmlContent.isEmptyMarkdownString)(contents);
          }).forEach(function (contents) {
            var markdownHoverElement = $('div.hover-row.markdown-hover');
            var hoverContentsElement = dom.append(markdownHoverElement, $('div.hover-contents'));
            var renderer = markdownDisposeables.add(new _markdownRenderer.MarkdownRenderer(_this._editor, _this._modeService, _this._openerService));
            markdownDisposeables.add(renderer.onDidRenderCodeBlock(function () {
              hoverContentsElement.className = 'hover-contents code-hover-contents';

              _this.onContentsChange();
            }));
            var renderedContents = markdownDisposeables.add(renderer.render(contents));
            hoverContentsElement.appendChild(renderedContents.element);
            fragment.appendChild(markdownHoverElement);
            isEmptyHoverContent = false;
          });
        }
      }
    });

    if (markerMessages.length) {
      markerMessages.forEach(function (msg) {
        return fragment.appendChild(_this.renderMarkerHover(msg));
      });
      var markerHoverForStatusbar = markerMessages.length === 1 ? markerMessages[0] : markerMessages.sort(function (a, b) {
        return _markers.MarkerSeverity.compare(a.marker.severity, b.marker.severity);
      })[0];
      fragment.appendChild(this.renderMarkerStatusbar(markerHoverForStatusbar));
    } // show


    if (!containColorPicker && !isEmptyHoverContent) {
      this.showAt(new _position.Position(renderRange.startLineNumber, renderColumn), highlightRange, this._shouldFocus);
      this.updateContents(fragment);
    }

    this._isChangingDecorations = true;
    this._highlightDecorations = this._editor.deltaDecorations(this._highlightDecorations, highlightRange ? [{
      range: highlightRange,
      options: ModesContentHoverWidget._DECORATION_OPTIONS
    }] : []);
    this._isChangingDecorations = false;
  };

  ModesContentHoverWidget.prototype.renderMarkerHover = function (markerHover) {
    var _this = this;

    var hoverElement = $('div.hover-row');
    var markerElement = dom.append(hoverElement, $('div.marker.hover-contents'));
    var _a = markerHover.marker,
        source = _a.source,
        message = _a.message,
        code = _a.code,
        relatedInformation = _a.relatedInformation;

    this._editor.applyFontInfo(markerElement);

    var messageElement = dom.append(markerElement, $('span'));
    messageElement.style.whiteSpace = 'pre-wrap';
    messageElement.innerText = message;

    if (source || code) {
      var detailsElement = dom.append(markerElement, $('span'));
      detailsElement.style.opacity = '0.6';
      detailsElement.style.paddingLeft = '6px';
      detailsElement.innerText = source && code ? source + "(" + code + ")" : source ? source : "(" + code + ")";
    }

    if ((0, _arrays.isNonEmptyArray)(relatedInformation)) {
      var _loop_1 = function (message_1, resource, startLineNumber, startColumn) {
        var relatedInfoContainer = dom.append(markerElement, $('div'));
        relatedInfoContainer.style.marginTop = '8px';
        var a = dom.append(relatedInfoContainer, $('a'));
        a.innerText = (0, _resources.basename)(resource) + "(" + startLineNumber + ", " + startColumn + "): ";
        a.style.cursor = 'pointer';

        a.onclick = function (e) {
          e.stopPropagation();
          e.preventDefault();

          if (_this._openerService) {
            _this._openerService.open(resource.with({
              fragment: startLineNumber + "," + startColumn
            }), {
              fromUserGesture: true
            }).catch(_errors.onUnexpectedError);
          }
        };

        var messageElement_1 = dom.append(relatedInfoContainer, $('span'));
        messageElement_1.innerText = message_1;

        this_1._editor.applyFontInfo(messageElement_1);
      };

      var this_1 = this;

      for (var _i = 0, relatedInformation_1 = relatedInformation; _i < relatedInformation_1.length; _i++) {
        var _b = relatedInformation_1[_i],
            message_1 = _b.message,
            resource = _b.resource,
            startLineNumber = _b.startLineNumber,
            startColumn = _b.startColumn;

        _loop_1(message_1, resource, startLineNumber, startColumn);
      }
    }

    return hoverElement;
  };

  ModesContentHoverWidget.prototype.renderMarkerStatusbar = function (markerHover) {
    var _this = this;

    var hoverElement = $('div.hover-row.status-bar');
    var disposables = new _lifecycle.DisposableStore();
    var actionsElement = dom.append(hoverElement, $('div.actions'));

    if (markerHover.marker.severity === _markers.MarkerSeverity.Error || markerHover.marker.severity === _markers.MarkerSeverity.Warning || markerHover.marker.severity === _markers.MarkerSeverity.Info) {
      disposables.add(this.renderAction(actionsElement, {
        label: nls.localize('peek problem', "Peek Problem"),
        commandId: _gotoError.NextMarkerAction.ID,
        run: function () {
          _this.hide();

          _gotoError.MarkerController.get(_this._editor).show(markerHover.marker);

          _this._editor.focus();
        }
      }));
    }

    var quickfixPlaceholderElement = dom.append(actionsElement, $('div'));
    quickfixPlaceholderElement.style.opacity = '0';
    quickfixPlaceholderElement.style.transition = 'opacity 0.2s';
    setTimeout(function () {
      return quickfixPlaceholderElement.style.opacity = '1';
    }, 200);
    quickfixPlaceholderElement.textContent = nls.localize('checkingForQuickFixes', "Checking for quick fixes...");
    disposables.add((0, _lifecycle.toDisposable)(function () {
      return quickfixPlaceholderElement.remove();
    }));
    var codeActionsPromise = this.getCodeActions(markerHover.marker);
    disposables.add((0, _lifecycle.toDisposable)(function () {
      return codeActionsPromise.cancel();
    }));
    codeActionsPromise.then(function (actions) {
      quickfixPlaceholderElement.style.transition = '';
      quickfixPlaceholderElement.style.opacity = '1';

      if (!actions.validActions.length) {
        actions.dispose();
        quickfixPlaceholderElement.textContent = nls.localize('noQuickFixes', "No quick fixes available");
        return;
      }

      quickfixPlaceholderElement.remove();
      var showing = false;
      disposables.add((0, _lifecycle.toDisposable)(function () {
        if (!showing) {
          actions.dispose();
        }
      }));
      disposables.add(_this.renderAction(actionsElement, {
        label: nls.localize('quick fixes', "Quick Fix..."),
        commandId: _codeActionCommands.QuickFixAction.Id,
        run: function (target) {
          showing = true;

          var controller = _codeActionCommands.QuickFixController.get(_this._editor);

          var elementPosition = dom.getDomNodePagePosition(target);
          controller.showCodeActions(actions, {
            x: elementPosition.left + 6,
            y: elementPosition.top + elementPosition.height + 6
          });
        }
      }));
    });
    this.renderDisposable.value = disposables;
    return hoverElement;
  };

  ModesContentHoverWidget.prototype.getCodeActions = function (marker) {
    var _this = this;

    return (0, _async.createCancelablePromise)(function (cancellationToken) {
      return (0, _codeAction.getCodeActions)(_this._editor.getModel(), new _range.Range(marker.startLineNumber, marker.startColumn, marker.endLineNumber, marker.endColumn), {
        type: 'manual',
        filter: {
          include: _types.CodeActionKind.QuickFix
        }
      }, cancellationToken);
    });
  };

  ModesContentHoverWidget.prototype.renderAction = function (parent, actionOptions) {
    var actionContainer = dom.append(parent, $('div.action-container'));
    var action = dom.append(actionContainer, $('a.action'));

    if (actionOptions.iconClass) {
      dom.append(action, $("span.icon." + actionOptions.iconClass));
    }

    var label = dom.append(action, $('span'));
    label.textContent = actionOptions.label;

    var keybinding = this._keybindingService.lookupKeybinding(actionOptions.commandId);

    if (keybinding) {
      label.title = actionOptions.label + " (" + keybinding.getLabel() + ")";
    }

    return dom.addDisposableListener(actionContainer, dom.EventType.CLICK, function (e) {
      e.stopPropagation();
      e.preventDefault();
      actionOptions.run(actionContainer);
    });
  };

  ModesContentHoverWidget.ID = 'editor.contrib.modesContentHoverWidget';
  ModesContentHoverWidget._DECORATION_OPTIONS = _textModel.ModelDecorationOptions.register({
    className: 'hoverHighlight'
  });
  return ModesContentHoverWidget;
}(_hoverWidgets.ContentHoverWidget);

exports.ModesContentHoverWidget = ModesContentHoverWidget;

function hoverContentsEquals(first, second) {
  if (!first && second || first && !second || first.length !== second.length) {
    return false;
  }

  for (var i = 0; i < first.length; i++) {
    var firstElement = first[i];
    var secondElement = second[i];

    if (firstElement instanceof MarkerHover && secondElement instanceof MarkerHover) {
      return _markers.IMarkerData.makeKey(firstElement.marker) === _markers.IMarkerData.makeKey(secondElement.marker);
    }

    if (firstElement instanceof ColorHover || secondElement instanceof ColorHover) {
      return false;
    }

    if (firstElement instanceof MarkerHover || secondElement instanceof MarkerHover) {
      return false;
    }

    if (!(0, _htmlContent.markedStringsEquals)(firstElement.contents, secondElement.contents)) {
      return false;
    }
  }

  return true;
}
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../base/common/htmlContent.js":"../node_modules/monaco-editor/esm/vs/base/common/htmlContent.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../colorPicker/color.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/color.js","../colorPicker/colorDetector.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/colorDetector.js","../colorPicker/colorPickerModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/colorPickerModel.js","../colorPicker/colorPickerWidget.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/colorPickerWidget.js","./getHover.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/getHover.js","./hoverOperation.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/hoverOperation.js","./hoverWidgets.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/hoverWidgets.js","../markdown/markdownRenderer.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/markdown/markdownRenderer.js","../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../platform/markers/common/markers.js":"../node_modules/monaco-editor/esm/vs/platform/markers/common/markers.js","../../../base/common/resources.js":"../node_modules/monaco-editor/esm/vs/base/common/resources.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../platform/opener/common/opener.js":"../node_modules/monaco-editor/esm/vs/platform/opener/common/opener.js","../gotoError/gotoError.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoError/gotoError.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../codeAction/codeAction.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeAction.js","../codeAction/codeActionCommands.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeActionCommands.js","../codeAction/types.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/types.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/modesGlyphHover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModesGlyphHoverWidget = void 0;

var _dom = require("../../../base/browser/dom.js");

var _htmlContent = require("../../../base/common/htmlContent.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _hoverOperation = require("./hoverOperation.js");

var _hoverWidgets = require("./hoverWidgets.js");

var _markdownRenderer = require("../markdown/markdownRenderer.js");

var _opener = require("../../../platform/opener/common/opener.js");

var _arrays = require("../../../base/common/arrays.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var MarginComputer =
/** @class */
function () {
  function MarginComputer(editor) {
    this._editor = editor;
    this._lineNumber = -1;
    this._result = [];
  }

  MarginComputer.prototype.setLineNumber = function (lineNumber) {
    this._lineNumber = lineNumber;
    this._result = [];
  };

  MarginComputer.prototype.clearResult = function () {
    this._result = [];
  };

  MarginComputer.prototype.computeSync = function () {
    var toHoverMessage = function (contents) {
      return {
        value: contents
      };
    };

    var lineDecorations = this._editor.getLineDecorations(this._lineNumber);

    var result = [];

    if (!lineDecorations) {
      return result;
    }

    for (var _i = 0, lineDecorations_1 = lineDecorations; _i < lineDecorations_1.length; _i++) {
      var d = lineDecorations_1[_i];

      if (!d.options.glyphMarginClassName) {
        continue;
      }

      var hoverMessage = d.options.glyphMarginHoverMessage;

      if (!hoverMessage || (0, _htmlContent.isEmptyMarkdownString)(hoverMessage)) {
        continue;
      }

      result.push.apply(result, (0, _arrays.asArray)(hoverMessage).map(toHoverMessage));
    }

    return result;
  };

  MarginComputer.prototype.onResult = function (result, isFromSynchronousComputation) {
    this._result = this._result.concat(result);
  };

  MarginComputer.prototype.getResult = function () {
    return this._result;
  };

  MarginComputer.prototype.getResultWithLoadingMessage = function () {
    return this.getResult();
  };

  return MarginComputer;
}();

var ModesGlyphHoverWidget =
/** @class */
function (_super) {
  __extends(ModesGlyphHoverWidget, _super);

  function ModesGlyphHoverWidget(editor, modeService, openerService) {
    if (openerService === void 0) {
      openerService = _opener.NullOpenerService;
    }

    var _this = _super.call(this, ModesGlyphHoverWidget.ID, editor) || this;

    _this._renderDisposeables = _this._register(new _lifecycle.DisposableStore());
    _this._messages = [];
    _this._lastLineNumber = -1;
    _this._markdownRenderer = _this._register(new _markdownRenderer.MarkdownRenderer(_this._editor, modeService, openerService));
    _this._computer = new MarginComputer(_this._editor);
    _this._hoverOperation = new _hoverOperation.HoverOperation(_this._computer, function (result) {
      return _this._withResult(result);
    }, undefined, function (result) {
      return _this._withResult(result);
    }, 300);
    return _this;
  }

  ModesGlyphHoverWidget.prototype.dispose = function () {
    this._hoverOperation.cancel();

    _super.prototype.dispose.call(this);
  };

  ModesGlyphHoverWidget.prototype.onModelDecorationsChanged = function () {
    if (this.isVisible) {
      // The decorations have changed and the hover is visible,
      // we need to recompute the displayed text
      this._hoverOperation.cancel();

      this._computer.clearResult();

      this._hoverOperation.start(0
      /* Delayed */
      );
    }
  };

  ModesGlyphHoverWidget.prototype.startShowingAt = function (lineNumber) {
    if (this._lastLineNumber === lineNumber) {
      // We have to show the widget at the exact same line number as before, so no work is needed
      return;
    }

    this._hoverOperation.cancel();

    this.hide();
    this._lastLineNumber = lineNumber;

    this._computer.setLineNumber(lineNumber);

    this._hoverOperation.start(0
    /* Delayed */
    );
  };

  ModesGlyphHoverWidget.prototype.hide = function () {
    this._lastLineNumber = -1;

    this._hoverOperation.cancel();

    _super.prototype.hide.call(this);
  };

  ModesGlyphHoverWidget.prototype._withResult = function (result) {
    this._messages = result;

    if (this._messages.length > 0) {
      this._renderMessages(this._lastLineNumber, this._messages);
    } else {
      this.hide();
    }
  };

  ModesGlyphHoverWidget.prototype._renderMessages = function (lineNumber, messages) {
    this._renderDisposeables.clear();

    var fragment = document.createDocumentFragment();

    for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {
      var msg = messages_1[_i];

      var renderedContents = this._markdownRenderer.render(msg.value);

      this._renderDisposeables.add(renderedContents);

      fragment.appendChild((0, _dom.$)('div.hover-row', undefined, renderedContents.element));
    }

    this.updateContents(fragment);
    this.showAt(lineNumber);
  };

  ModesGlyphHoverWidget.ID = 'editor.contrib.modesGlyphHoverWidget';
  return ModesGlyphHoverWidget;
}(_hoverWidgets.GlyphHoverWidget);

exports.ModesGlyphHoverWidget = ModesGlyphHoverWidget;
},{"../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/common/htmlContent.js":"../node_modules/monaco-editor/esm/vs/base/common/htmlContent.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","./hoverOperation.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/hoverOperation.js","./hoverWidgets.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/hoverWidgets.js","../markdown/markdownRenderer.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/markdown/markdownRenderer.js","../../../platform/opener/common/opener.js":"../node_modules/monaco-editor/esm/vs/platform/opener/common/opener.js","../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/hover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModesHoverController = void 0;

require("./hover.css");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _keyCodes = require("../../../base/common/keyCodes.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _range = require("../../common/core/range.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _modeService2 = require("../../common/services/modeService.js");

var _modesContentHover = require("./modesContentHover.js");

var _modesGlyphHover = require("./modesGlyphHover.js");

var _opener = require("../../../platform/opener/common/opener.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _themeService2 = require("../../../platform/theme/common/themeService.js");

var _markersDecorationService = require("../../common/services/markersDecorationService.js");

var _keybinding = require("../../../platform/keybinding/common/keybinding.js");

var _goToDefinitionAtPosition = require("../gotoSymbol/link/goToDefinitionAtPosition.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var ModesHoverController =
/** @class */
function () {
  function ModesHoverController(_editor, _openerService, _modeService, _markerDecorationsService, _keybindingService, _themeService) {
    var _this = this;

    this._editor = _editor;
    this._openerService = _openerService;
    this._modeService = _modeService;
    this._markerDecorationsService = _markerDecorationsService;
    this._keybindingService = _keybindingService;
    this._themeService = _themeService;
    this._toUnhook = new _lifecycle.DisposableStore();
    this._contentWidget = new _lifecycle.MutableDisposable();
    this._glyphWidget = new _lifecycle.MutableDisposable();
    this._isMouseDown = false;
    this._hoverClicked = false;

    this._hookEvents();

    this._didChangeConfigurationHandler = this._editor.onDidChangeConfiguration(function (e) {
      if (e.hasChanged(42
      /* hover */
      )) {
        _this._hideWidgets();

        _this._unhookEvents();

        _this._hookEvents();
      }
    });
  }

  Object.defineProperty(ModesHoverController.prototype, "contentWidget", {
    get: function () {
      if (!this._contentWidget.value) {
        this._createHoverWidgets();
      }

      return this._contentWidget.value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ModesHoverController.prototype, "glyphWidget", {
    get: function () {
      if (!this._glyphWidget.value) {
        this._createHoverWidgets();
      }

      return this._glyphWidget.value;
    },
    enumerable: true,
    configurable: true
  });

  ModesHoverController.get = function (editor) {
    return editor.getContribution(ModesHoverController.ID);
  };

  ModesHoverController.prototype._hookEvents = function () {
    var _this = this;

    var hideWidgetsEventHandler = function () {
      return _this._hideWidgets();
    };

    var hoverOpts = this._editor.getOption(42
    /* hover */
    );

    this._isHoverEnabled = hoverOpts.enabled;
    this._isHoverSticky = hoverOpts.sticky;

    if (this._isHoverEnabled) {
      this._toUnhook.add(this._editor.onMouseDown(function (e) {
        return _this._onEditorMouseDown(e);
      }));

      this._toUnhook.add(this._editor.onMouseUp(function (e) {
        return _this._onEditorMouseUp(e);
      }));

      this._toUnhook.add(this._editor.onMouseMove(function (e) {
        return _this._onEditorMouseMove(e);
      }));

      this._toUnhook.add(this._editor.onKeyDown(function (e) {
        return _this._onKeyDown(e);
      }));

      this._toUnhook.add(this._editor.onDidChangeModelDecorations(function () {
        return _this._onModelDecorationsChanged();
      }));
    } else {
      this._toUnhook.add(this._editor.onMouseMove(hideWidgetsEventHandler));
    }

    this._toUnhook.add(this._editor.onMouseLeave(hideWidgetsEventHandler));

    this._toUnhook.add(this._editor.onDidChangeModel(hideWidgetsEventHandler));

    this._toUnhook.add(this._editor.onDidScrollChange(function (e) {
      return _this._onEditorScrollChanged(e);
    }));
  };

  ModesHoverController.prototype._unhookEvents = function () {
    this._toUnhook.clear();
  };

  ModesHoverController.prototype._onModelDecorationsChanged = function () {
    this.contentWidget.onModelDecorationsChanged();
    this.glyphWidget.onModelDecorationsChanged();
  };

  ModesHoverController.prototype._onEditorScrollChanged = function (e) {
    if (e.scrollTopChanged || e.scrollLeftChanged) {
      this._hideWidgets();
    }
  };

  ModesHoverController.prototype._onEditorMouseDown = function (mouseEvent) {
    this._isMouseDown = true;
    var targetType = mouseEvent.target.type;

    if (targetType === 9
    /* CONTENT_WIDGET */
    && mouseEvent.target.detail === _modesContentHover.ModesContentHoverWidget.ID) {
      this._hoverClicked = true; // mouse down on top of content hover widget

      return;
    }

    if (targetType === 12
    /* OVERLAY_WIDGET */
    && mouseEvent.target.detail === _modesGlyphHover.ModesGlyphHoverWidget.ID) {
      // mouse down on top of overlay hover widget
      return;
    }

    if (targetType !== 12
    /* OVERLAY_WIDGET */
    && mouseEvent.target.detail !== _modesGlyphHover.ModesGlyphHoverWidget.ID) {
      this._hoverClicked = false;
    }

    this._hideWidgets();
  };

  ModesHoverController.prototype._onEditorMouseUp = function (mouseEvent) {
    this._isMouseDown = false;
  };

  ModesHoverController.prototype._onEditorMouseMove = function (mouseEvent) {
    var targetType = mouseEvent.target.type;

    if (this._isMouseDown && this._hoverClicked && this.contentWidget.isColorPickerVisible()) {
      return;
    }

    if (this._isHoverSticky && targetType === 9
    /* CONTENT_WIDGET */
    && mouseEvent.target.detail === _modesContentHover.ModesContentHoverWidget.ID) {
      // mouse moved on top of content hover widget
      return;
    }

    if (this._isHoverSticky && targetType === 12
    /* OVERLAY_WIDGET */
    && mouseEvent.target.detail === _modesGlyphHover.ModesGlyphHoverWidget.ID) {
      // mouse moved on top of overlay hover widget
      return;
    }

    if (targetType === 7
    /* CONTENT_EMPTY */
    ) {
        var epsilon = this._editor.getOption(32
        /* fontInfo */
        ).typicalHalfwidthCharacterWidth / 2;
        var data = mouseEvent.target.detail;

        if (data && !data.isAfterLines && typeof data.horizontalDistanceToText === 'number' && data.horizontalDistanceToText < epsilon) {
          // Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough
          targetType = 6
          /* CONTENT_TEXT */
          ;
        }
      }

    if (targetType === 6
    /* CONTENT_TEXT */
    ) {
        this.glyphWidget.hide();

        if (this._isHoverEnabled && mouseEvent.target.range) {
          this.contentWidget.startShowingAt(mouseEvent.target.range, 0
          /* Delayed */
          , false);
        }
      } else if (targetType === 2
    /* GUTTER_GLYPH_MARGIN */
    ) {
        this.contentWidget.hide();

        if (this._isHoverEnabled && mouseEvent.target.position) {
          this.glyphWidget.startShowingAt(mouseEvent.target.position.lineNumber);
        }
      } else {
      this._hideWidgets();
    }
  };

  ModesHoverController.prototype._onKeyDown = function (e) {
    if (e.keyCode !== 5
    /* Ctrl */
    && e.keyCode !== 6
    /* Alt */
    && e.keyCode !== 57
    /* Meta */
    && e.keyCode !== 4
    /* Shift */
    ) {
        // Do not hide hover when a modifier key is pressed
        this._hideWidgets();
      }
  };

  ModesHoverController.prototype._hideWidgets = function () {
    if (!this._glyphWidget.value || !this._contentWidget.value || this._isMouseDown && this._hoverClicked && this._contentWidget.value.isColorPickerVisible()) {
      return;
    }

    this._glyphWidget.value.hide();

    this._contentWidget.value.hide();
  };

  ModesHoverController.prototype._createHoverWidgets = function () {
    this._contentWidget.value = new _modesContentHover.ModesContentHoverWidget(this._editor, this._markerDecorationsService, this._themeService, this._keybindingService, this._modeService, this._openerService);
    this._glyphWidget.value = new _modesGlyphHover.ModesGlyphHoverWidget(this._editor, this._modeService, this._openerService);
  };

  ModesHoverController.prototype.showContentHover = function (range, mode, focus) {
    this.contentWidget.startShowingAt(range, mode, focus);
  };

  ModesHoverController.prototype.dispose = function () {
    this._unhookEvents();

    this._toUnhook.dispose();

    this._didChangeConfigurationHandler.dispose();

    this._glyphWidget.dispose();

    this._contentWidget.dispose();
  };

  ModesHoverController.ID = 'editor.contrib.hover';
  ModesHoverController = __decorate([__param(1, _opener.IOpenerService), __param(2, _modeService2.IModeService), __param(3, _markersDecorationService.IMarkerDecorationsService), __param(4, _keybinding.IKeybindingService), __param(5, _themeService2.IThemeService)], ModesHoverController);
  return ModesHoverController;
}();

exports.ModesHoverController = ModesHoverController;

var ShowHoverAction =
/** @class */
function (_super) {
  __extends(ShowHoverAction, _super);

  function ShowHoverAction() {
    return _super.call(this, {
      id: 'editor.action.showHover',
      label: nls.localize({
        key: 'showHover',
        comment: ['Label for action that will trigger the showing of a hover in the editor.', 'This allows for users to show the hover without using the mouse.']
      }, "Show Hover"),
      alias: 'Show Hover',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 39
        /* KEY_I */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  ShowHoverAction.prototype.run = function (accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var controller = ModesHoverController.get(editor);

    if (!controller) {
      return;
    }

    var position = editor.getPosition();
    var range = new _range.Range(position.lineNumber, position.column, position.lineNumber, position.column);
    var focus = editor.getOption(2
    /* accessibilitySupport */
    ) === 2
    /* Enabled */
    ;
    controller.showContentHover(range, 1
    /* Immediate */
    , focus);
  };

  return ShowHoverAction;
}(_editorExtensions.EditorAction);

var ShowDefinitionPreviewHoverAction =
/** @class */
function (_super) {
  __extends(ShowDefinitionPreviewHoverAction, _super);

  function ShowDefinitionPreviewHoverAction() {
    return _super.call(this, {
      id: 'editor.action.showDefinitionPreviewHover',
      label: nls.localize({
        key: 'showDefinitionPreviewHover',
        comment: ['Label for action that will trigger the showing of definition preview hover in the editor.', 'This allows for users to show the definition preview hover without using the mouse.']
      }, "Show Definition Preview Hover"),
      alias: 'Show Definition Preview Hover',
      precondition: undefined
    }) || this;
  }

  ShowDefinitionPreviewHoverAction.prototype.run = function (accessor, editor) {
    var controller = ModesHoverController.get(editor);

    if (!controller) {
      return;
    }

    var position = editor.getPosition();

    if (!position) {
      return;
    }

    var range = new _range.Range(position.lineNumber, position.column, position.lineNumber, position.column);

    var goto = _goToDefinitionAtPosition.GotoDefinitionAtPositionEditorContribution.get(editor);

    var promise = goto.startFindDefinitionFromCursor(position);

    if (promise) {
      promise.then(function () {
        controller.showContentHover(range, 1
        /* Immediate */
        , true);
      });
    } else {
      controller.showContentHover(range, 1
      /* Immediate */
      , true);
    }
  };

  return ShowDefinitionPreviewHoverAction;
}(_editorExtensions.EditorAction);

(0, _editorExtensions.registerEditorContribution)(ModesHoverController.ID, ModesHoverController);
(0, _editorExtensions.registerEditorAction)(ShowHoverAction);
(0, _editorExtensions.registerEditorAction)(ShowDefinitionPreviewHoverAction); // theming

(0, _themeService2.registerThemingParticipant)(function (theme, collector) {
  var editorHoverHighlightColor = theme.getColor(_colorRegistry.editorHoverHighlight);

  if (editorHoverHighlightColor) {
    collector.addRule(".monaco-editor .hoverHighlight { background-color: " + editorHoverHighlightColor + "; }");
  }

  var hoverBackground = theme.getColor(_colorRegistry.editorHoverBackground);

  if (hoverBackground) {
    collector.addRule(".monaco-editor .monaco-editor-hover { background-color: " + hoverBackground + "; }");
  }

  var hoverBorder = theme.getColor(_colorRegistry.editorHoverBorder);

  if (hoverBorder) {
    collector.addRule(".monaco-editor .monaco-editor-hover { border: 1px solid " + hoverBorder + "; }");
    collector.addRule(".monaco-editor .monaco-editor-hover .hover-row:not(:first-child):not(:empty) { border-top: 1px solid " + hoverBorder.transparent(0.5) + "; }");
    collector.addRule(".monaco-editor .monaco-editor-hover hr { border-top: 1px solid " + hoverBorder.transparent(0.5) + "; }");
    collector.addRule(".monaco-editor .monaco-editor-hover hr { border-bottom: 0px solid " + hoverBorder.transparent(0.5) + "; }");
  }

  var link = theme.getColor(_colorRegistry.textLinkForeground);

  if (link) {
    collector.addRule(".monaco-editor .monaco-editor-hover a { color: " + link + "; }");
  }

  var hoverForeground = theme.getColor(_colorRegistry.editorHoverForeground);

  if (hoverForeground) {
    collector.addRule(".monaco-editor .monaco-editor-hover { color: " + hoverForeground + "; }");
  }

  var actionsBackground = theme.getColor(_colorRegistry.editorHoverStatusBarBackground);

  if (actionsBackground) {
    collector.addRule(".monaco-editor .monaco-editor-hover .hover-row .actions { background-color: " + actionsBackground + "; }");
  }

  var codeBackground = theme.getColor(_colorRegistry.textCodeBlockBackground);

  if (codeBackground) {
    collector.addRule(".monaco-editor .monaco-editor-hover code { background-color: " + codeBackground + "; }");
  }
});
},{"./hover.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/hover.css","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/keyCodes.js":"../node_modules/monaco-editor/esm/vs/base/common/keyCodes.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../common/services/modeService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modeService.js","./modesContentHover.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/modesContentHover.js","./modesGlyphHover.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/modesGlyphHover.js","../../../platform/opener/common/opener.js":"../node_modules/monaco-editor/esm/vs/platform/opener/common/opener.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../common/services/markersDecorationService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/markersDecorationService.js","../../../platform/keybinding/common/keybinding.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding.js","../gotoSymbol/link/goToDefinitionAtPosition.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/link/goToDefinitionAtPosition.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/inPlaceReplace/inPlaceReplaceCommand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InPlaceReplaceCommand = void 0;

var _selection = require("../../common/core/selection.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var InPlaceReplaceCommand =
/** @class */
function () {
  function InPlaceReplaceCommand(editRange, originalSelection, text) {
    this._editRange = editRange;
    this._originalSelection = originalSelection;
    this._text = text;
  }

  InPlaceReplaceCommand.prototype.getEditOperations = function (model, builder) {
    builder.addTrackedEditOperation(this._editRange, this._text);
  };

  InPlaceReplaceCommand.prototype.computeCursorState = function (model, helper) {
    var inverseEditOperations = helper.getInverseEditOperations();
    var srcRange = inverseEditOperations[0].range;

    if (!this._originalSelection.isEmpty()) {
      // Preserve selection and extends to typed text
      return new _selection.Selection(srcRange.endLineNumber, srcRange.endColumn - this._text.length, srcRange.endLineNumber, srcRange.endColumn);
    }

    return new _selection.Selection(srcRange.endLineNumber, Math.min(this._originalSelection.positionColumn, srcRange.endColumn), srcRange.endLineNumber, Math.min(this._originalSelection.positionColumn, srcRange.endColumn));
  };

  return InPlaceReplaceCommand;
}();

exports.InPlaceReplaceCommand = InPlaceReplaceCommand;
},{"../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/inPlaceReplace/inPlaceReplace.js":[function(require,module,exports) {
"use strict";

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _editorWorkerService = require("../../common/services/editorWorkerService.js");

var _inPlaceReplaceCommand = require("./inPlaceReplaceCommand.js");

var _editorState = require("../../browser/core/editorState.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

var _editorColorRegistry = require("../../common/view/editorColorRegistry.js");

var _textModel = require("../../common/model/textModel.js");

var _async = require("../../../base/common/async.js");

var _errors = require("../../../base/common/errors.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var InPlaceReplaceController =
/** @class */
function () {
  function InPlaceReplaceController(editor, editorWorkerService) {
    this.decorationIds = [];
    this.editor = editor;
    this.editorWorkerService = editorWorkerService;
  }

  InPlaceReplaceController.get = function (editor) {
    return editor.getContribution(InPlaceReplaceController.ID);
  };

  InPlaceReplaceController.prototype.dispose = function () {};

  InPlaceReplaceController.prototype.run = function (source, up) {
    var _this = this; // cancel any pending request


    if (this.currentRequest) {
      this.currentRequest.cancel();
    }

    var editorSelection = this.editor.getSelection();
    var model = this.editor.getModel();

    if (!model || !editorSelection) {
      return undefined;
    }

    var selection = editorSelection;

    if (selection.startLineNumber !== selection.endLineNumber) {
      // Can't accept multiline selection
      return undefined;
    }

    var state = new _editorState.EditorState(this.editor, 1
    /* Value */
    | 4
    /* Position */
    );
    var modelURI = model.uri;

    if (!this.editorWorkerService.canNavigateValueSet(modelURI)) {
      return Promise.resolve(undefined);
    }

    this.currentRequest = (0, _async.createCancelablePromise)(function (token) {
      return _this.editorWorkerService.navigateValueSet(modelURI, selection, up);
    });
    return this.currentRequest.then(function (result) {
      if (!result || !result.range || !result.value) {
        // No proper result
        return;
      }

      if (!state.validate(_this.editor)) {
        // state has changed
        return;
      } // Selection


      var editRange = _range.Range.lift(result.range);

      var highlightRange = result.range;
      var diff = result.value.length - (selection.endColumn - selection.startColumn); // highlight

      highlightRange = {
        startLineNumber: highlightRange.startLineNumber,
        startColumn: highlightRange.startColumn,
        endLineNumber: highlightRange.endLineNumber,
        endColumn: highlightRange.startColumn + result.value.length
      };

      if (diff > 1) {
        selection = new _selection.Selection(selection.startLineNumber, selection.startColumn, selection.endLineNumber, selection.endColumn + diff - 1);
      } // Insert new text


      var command = new _inPlaceReplaceCommand.InPlaceReplaceCommand(editRange, selection, result.value);

      _this.editor.pushUndoStop();

      _this.editor.executeCommand(source, command);

      _this.editor.pushUndoStop(); // add decoration


      _this.decorationIds = _this.editor.deltaDecorations(_this.decorationIds, [{
        range: highlightRange,
        options: InPlaceReplaceController.DECORATION
      }]); // remove decoration after delay

      if (_this.decorationRemover) {
        _this.decorationRemover.cancel();
      }

      _this.decorationRemover = (0, _async.timeout)(350);

      _this.decorationRemover.then(function () {
        return _this.decorationIds = _this.editor.deltaDecorations(_this.decorationIds, []);
      }).catch(_errors.onUnexpectedError);
    }).catch(_errors.onUnexpectedError);
  };

  InPlaceReplaceController.ID = 'editor.contrib.inPlaceReplaceController';
  InPlaceReplaceController.DECORATION = _textModel.ModelDecorationOptions.register({
    className: 'valueSetReplacement'
  });
  InPlaceReplaceController = __decorate([__param(1, _editorWorkerService.IEditorWorkerService)], InPlaceReplaceController);
  return InPlaceReplaceController;
}();

var InPlaceReplaceUp =
/** @class */
function (_super) {
  __extends(InPlaceReplaceUp, _super);

  function InPlaceReplaceUp() {
    return _super.call(this, {
      id: 'editor.action.inPlaceReplace.up',
      label: nls.localize('InPlaceReplaceAction.previous.label', "Replace with Previous Value"),
      alias: 'Replace with Previous Value',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 82
        /* US_COMMA */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  InPlaceReplaceUp.prototype.run = function (accessor, editor) {
    var controller = InPlaceReplaceController.get(editor);

    if (!controller) {
      return Promise.resolve(undefined);
    }

    return controller.run(this.id, true);
  };

  return InPlaceReplaceUp;
}(_editorExtensions.EditorAction);

var InPlaceReplaceDown =
/** @class */
function (_super) {
  __extends(InPlaceReplaceDown, _super);

  function InPlaceReplaceDown() {
    return _super.call(this, {
      id: 'editor.action.inPlaceReplace.down',
      label: nls.localize('InPlaceReplaceAction.next.label', "Replace with Next Value"),
      alias: 'Replace with Next Value',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 84
        /* US_DOT */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  InPlaceReplaceDown.prototype.run = function (accessor, editor) {
    var controller = InPlaceReplaceController.get(editor);

    if (!controller) {
      return Promise.resolve(undefined);
    }

    return controller.run(this.id, false);
  };

  return InPlaceReplaceDown;
}(_editorExtensions.EditorAction);

(0, _editorExtensions.registerEditorContribution)(InPlaceReplaceController.ID, InPlaceReplaceController);
(0, _editorExtensions.registerEditorAction)(InPlaceReplaceUp);
(0, _editorExtensions.registerEditorAction)(InPlaceReplaceDown);
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var border = theme.getColor(_editorColorRegistry.editorBracketMatchBorder);

  if (border) {
    collector.addRule(".monaco-editor.vs .valueSetReplacement { outline: solid 2px " + border + "; }");
  }
});
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/services/editorWorkerService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/editorWorkerService.js","./inPlaceReplaceCommand.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/inPlaceReplace/inPlaceReplaceCommand.js","../../browser/core/editorState.js":"../node_modules/monaco-editor/esm/vs/editor/browser/core/editorState.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../common/view/editorColorRegistry.js":"../node_modules/monaco-editor/esm/vs/editor/common/view/editorColorRegistry.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js"}],"../node_modules/monaco-editor/esm/vs/editor/common/commands/trimTrailingWhitespaceCommand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trimTrailingWhitespace = trimTrailingWhitespace;
exports.TrimTrailingWhitespaceCommand = void 0;

var strings = _interopRequireWildcard(require("../../../base/common/strings.js"));

var _editOperation = require("../core/editOperation.js");

var _range = require("../core/range.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var TrimTrailingWhitespaceCommand =
/** @class */
function () {
  function TrimTrailingWhitespaceCommand(selection, cursors) {
    this._selection = selection;
    this._cursors = cursors;
    this._selectionId = null;
  }

  TrimTrailingWhitespaceCommand.prototype.getEditOperations = function (model, builder) {
    var ops = trimTrailingWhitespace(model, this._cursors);

    for (var i = 0, len = ops.length; i < len; i++) {
      var op = ops[i];
      builder.addEditOperation(op.range, op.text);
    }

    this._selectionId = builder.trackSelection(this._selection);
  };

  TrimTrailingWhitespaceCommand.prototype.computeCursorState = function (model, helper) {
    return helper.getTrackedSelection(this._selectionId);
  };

  return TrimTrailingWhitespaceCommand;
}();

exports.TrimTrailingWhitespaceCommand = TrimTrailingWhitespaceCommand;

/**
 * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.
 */
function trimTrailingWhitespace(model, cursors) {
  // Sort cursors ascending
  cursors.sort(function (a, b) {
    if (a.lineNumber === b.lineNumber) {
      return a.column - b.column;
    }

    return a.lineNumber - b.lineNumber;
  }); // Reduce multiple cursors on the same line and only keep the last one on the line

  for (var i = cursors.length - 2; i >= 0; i--) {
    if (cursors[i].lineNumber === cursors[i + 1].lineNumber) {
      // Remove cursor at `i`
      cursors.splice(i, 1);
    }
  }

  var r = [];
  var rLen = 0;
  var cursorIndex = 0;
  var cursorLen = cursors.length;

  for (var lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {
    var lineContent = model.getLineContent(lineNumber);
    var maxLineColumn = lineContent.length + 1;
    var minEditColumn = 0;

    if (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {
      minEditColumn = cursors[cursorIndex].column;
      cursorIndex++;

      if (minEditColumn === maxLineColumn) {
        // The cursor is at the end of the line => no edits for sure on this line
        continue;
      }
    }

    if (lineContent.length === 0) {
      continue;
    }

    var lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);
    var fromColumn = 0;

    if (lastNonWhitespaceIndex === -1) {
      // Entire line is whitespace
      fromColumn = 1;
    } else if (lastNonWhitespaceIndex !== lineContent.length - 1) {
      // There is trailing whitespace
      fromColumn = lastNonWhitespaceIndex + 2;
    } else {
      // There is no trailing whitespace
      continue;
    }

    fromColumn = Math.max(minEditColumn, fromColumn);
    r[rLen++] = _editOperation.EditOperation.delete(new _range.Range(lineNumber, fromColumn, lineNumber, maxLineColumn));
  }

  return r;
}
},{"../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../core/editOperation.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/editOperation.js","../core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/copyLinesCommand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CopyLinesCommand = void 0;

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var CopyLinesCommand =
/** @class */
function () {
  function CopyLinesCommand(selection, isCopyingDown) {
    this._selection = selection;
    this._isCopyingDown = isCopyingDown;
    this._selectionDirection = 0
    /* LTR */
    ;
    this._selectionId = null;
    this._startLineNumberDelta = 0;
    this._endLineNumberDelta = 0;
  }

  CopyLinesCommand.prototype.getEditOperations = function (model, builder) {
    var s = this._selection;
    this._startLineNumberDelta = 0;
    this._endLineNumberDelta = 0;

    if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {
      this._endLineNumberDelta = 1;
      s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));
    }

    var sourceLines = [];

    for (var i = s.startLineNumber; i <= s.endLineNumber; i++) {
      sourceLines.push(model.getLineContent(i));
    }

    var sourceText = sourceLines.join('\n');

    if (sourceText === '') {
      // Duplicating empty line
      if (this._isCopyingDown) {
        this._startLineNumberDelta++;
        this._endLineNumberDelta++;
      }
    }

    if (!this._isCopyingDown) {
      builder.addEditOperation(new _range.Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\n' + sourceText);
    } else {
      builder.addEditOperation(new _range.Range(s.startLineNumber, 1, s.startLineNumber, 1), sourceText + '\n');
    }

    this._selectionId = builder.trackSelection(s);
    this._selectionDirection = this._selection.getDirection();
  };

  CopyLinesCommand.prototype.computeCursorState = function (model, helper) {
    var result = helper.getTrackedSelection(this._selectionId);

    if (this._startLineNumberDelta !== 0 || this._endLineNumberDelta !== 0) {
      var startLineNumber = result.startLineNumber;
      var startColumn = result.startColumn;
      var endLineNumber = result.endLineNumber;
      var endColumn = result.endColumn;

      if (this._startLineNumberDelta !== 0) {
        startLineNumber = startLineNumber + this._startLineNumberDelta;
        startColumn = 1;
      }

      if (this._endLineNumberDelta !== 0) {
        endLineNumber = endLineNumber + this._endLineNumberDelta;
        endColumn = 1;
      }

      result = _selection.Selection.createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, this._selectionDirection);
    }

    return result;
  };

  return CopyLinesCommand;
}();

exports.CopyLinesCommand = CopyLinesCommand;
},{"../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/indentation/indentUtils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSpaceCnt = getSpaceCnt;
exports.generateIndent = generateIndent;

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function getSpaceCnt(str, tabSize) {
  var spacesCnt = 0;

  for (var i = 0; i < str.length; i++) {
    if (str.charAt(i) === '\t') {
      spacesCnt += tabSize;
    } else {
      spacesCnt++;
    }
  }

  return spacesCnt;
}

function generateIndent(spacesCnt, tabSize, insertSpaces) {
  spacesCnt = spacesCnt < 0 ? 0 : spacesCnt;
  var result = '';

  if (!insertSpaces) {
    var tabsCnt = Math.floor(spacesCnt / tabSize);
    spacesCnt = spacesCnt % tabSize;

    for (var i = 0; i < tabsCnt; i++) {
      result += '\t';
    }
  }

  for (var i = 0; i < spacesCnt; i++) {
    result += ' ';
  }

  return result;
}
},{}],"../node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/moveLinesCommand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MoveLinesCommand = void 0;

var strings = _interopRequireWildcard(require("../../../base/common/strings.js"));

var _shiftCommand = require("../../common/commands/shiftCommand.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _languageConfiguration = require("../../common/modes/languageConfiguration.js");

var _languageConfigurationRegistry = require("../../common/modes/languageConfigurationRegistry.js");

var indentUtils = _interopRequireWildcard(require("../indentation/indentUtils.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var MoveLinesCommand =
/** @class */
function () {
  function MoveLinesCommand(selection, isMovingDown, autoIndent) {
    this._selection = selection;
    this._isMovingDown = isMovingDown;
    this._autoIndent = autoIndent;
    this._selectionId = null;
    this._moveEndLineSelectionShrink = false;
  }

  MoveLinesCommand.prototype.getEditOperations = function (model, builder) {
    var modelLineCount = model.getLineCount();

    if (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {
      this._selectionId = builder.trackSelection(this._selection);
      return;
    }

    if (!this._isMovingDown && this._selection.startLineNumber === 1) {
      this._selectionId = builder.trackSelection(this._selection);
      return;
    }

    this._moveEndPositionDown = false;
    var s = this._selection;

    if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {
      this._moveEndPositionDown = true;
      s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));
    }

    var _a = model.getOptions(),
        tabSize = _a.tabSize,
        indentSize = _a.indentSize,
        insertSpaces = _a.insertSpaces;

    var indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);
    var virtualModel = {
      getLineTokens: function (lineNumber) {
        return model.getLineTokens(lineNumber);
      },
      getLanguageIdentifier: function () {
        return model.getLanguageIdentifier();
      },
      getLanguageIdAtPosition: function (lineNumber, column) {
        return model.getLanguageIdAtPosition(lineNumber, column);
      },
      getLineContent: null
    };

    if (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {
      // Current line is empty
      var lineNumber = s.startLineNumber;
      var otherLineNumber = this._isMovingDown ? lineNumber + 1 : lineNumber - 1;

      if (model.getLineMaxColumn(otherLineNumber) === 1) {
        // Other line number is empty too, so no editing is needed
        // Add a no-op to force running by the model
        builder.addEditOperation(new _range.Range(1, 1, 1, 1), null);
      } else {
        // Type content from other line number on line number
        builder.addEditOperation(new _range.Range(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber)); // Remove content from other line number

        builder.addEditOperation(new _range.Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);
      } // Track selection at the other line number


      s = new _selection.Selection(otherLineNumber, 1, otherLineNumber, 1);
    } else {
      var movingLineNumber_1;
      var movingLineText = void 0;

      if (this._isMovingDown) {
        movingLineNumber_1 = s.endLineNumber + 1;
        movingLineText = model.getLineContent(movingLineNumber_1); // Delete line that needs to be moved

        builder.addEditOperation(new _range.Range(movingLineNumber_1 - 1, model.getLineMaxColumn(movingLineNumber_1 - 1), movingLineNumber_1, model.getLineMaxColumn(movingLineNumber_1)), null);
        var insertingText_1 = movingLineText;

        if (this.shouldAutoIndent(model, s)) {
          var movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber_1, s.startLineNumber - 1); // if s.startLineNumber - 1 matches onEnter rule, we still honor that.

          if (movingLineMatchResult !== null) {
            var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber_1));
            var newSpaceCnt = movingLineMatchResult + indentUtils.getSpaceCnt(oldIndentation, tabSize);
            var newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);
            insertingText_1 = newIndentation + this.trimLeft(movingLineText);
          } else {
            // no enter rule matches, let's check indentatin rules then.
            virtualModel.getLineContent = function (lineNumber) {
              if (lineNumber === s.startLineNumber) {
                return model.getLineContent(movingLineNumber_1);
              } else {
                return model.getLineContent(lineNumber);
              }
            };

            var indentOfMovingLine = _languageConfigurationRegistry.LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber_1, 1), s.startLineNumber, indentConverter);

            if (indentOfMovingLine !== null) {
              var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber_1));
              var newSpaceCnt = indentUtils.getSpaceCnt(indentOfMovingLine, tabSize);
              var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);

              if (newSpaceCnt !== oldSpaceCnt) {
                var newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);
                insertingText_1 = newIndentation + this.trimLeft(movingLineText);
              }
            }
          } // add edit operations for moving line first to make sure it's executed after we make indentation change
          // to s.startLineNumber


          builder.addEditOperation(new _range.Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText_1 + '\n');
          var ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber, insertingText_1); // check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.

          if (ret !== null) {
            if (ret !== 0) {
              this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);
            }
          } else {
            // it doesn't match onEnter rules, let's check indentation rules then.
            virtualModel.getLineContent = function (lineNumber) {
              if (lineNumber === s.startLineNumber) {
                return insertingText_1;
              } else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {
                return model.getLineContent(lineNumber - 1);
              } else {
                return model.getLineContent(lineNumber);
              }
            };

            var newIndentatOfMovingBlock = _languageConfigurationRegistry.LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber_1, 1), s.startLineNumber + 1, indentConverter);

            if (newIndentatOfMovingBlock !== null) {
              var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));
              var newSpaceCnt = indentUtils.getSpaceCnt(newIndentatOfMovingBlock, tabSize);
              var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);

              if (newSpaceCnt !== oldSpaceCnt) {
                var spaceCntOffset = newSpaceCnt - oldSpaceCnt;
                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);
              }
            }
          }
        } else {
          // Insert line that needs to be moved before
          builder.addEditOperation(new _range.Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText_1 + '\n');
        }
      } else {
        movingLineNumber_1 = s.startLineNumber - 1;
        movingLineText = model.getLineContent(movingLineNumber_1); // Delete line that needs to be moved

        builder.addEditOperation(new _range.Range(movingLineNumber_1, 1, movingLineNumber_1 + 1, 1), null); // Insert line that needs to be moved after

        builder.addEditOperation(new _range.Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\n' + movingLineText);

        if (this.shouldAutoIndent(model, s)) {
          virtualModel.getLineContent = function (lineNumber) {
            if (lineNumber === movingLineNumber_1) {
              return model.getLineContent(s.startLineNumber);
            } else {
              return model.getLineContent(lineNumber);
            }
          };

          var ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2); // check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.

          if (ret !== null) {
            if (ret !== 0) {
              this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);
            }
          } else {
            // it doesn't match any onEnter rule, let's check indentation rules then.
            var indentOfFirstLine = _languageConfigurationRegistry.LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(s.startLineNumber, 1), movingLineNumber_1, indentConverter);

            if (indentOfFirstLine !== null) {
              // adjust the indentation of the moving block
              var oldIndent = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));
              var newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);
              var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndent, tabSize);

              if (newSpaceCnt !== oldSpaceCnt) {
                var spaceCntOffset = newSpaceCnt - oldSpaceCnt;
                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);
              }
            }
          }
        }
      }
    }

    this._selectionId = builder.trackSelection(s);
  };

  MoveLinesCommand.prototype.buildIndentConverter = function (tabSize, indentSize, insertSpaces) {
    return {
      shiftIndent: function (indentation) {
        return _shiftCommand.ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);
      },
      unshiftIndent: function (indentation) {
        return _shiftCommand.ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);
      }
    };
  };

  MoveLinesCommand.prototype.matchEnterRule = function (model, indentConverter, tabSize, line, oneLineAbove, oneLineAboveText) {
    var validPrecedingLine = oneLineAbove;

    while (validPrecedingLine >= 1) {
      // ship empty lines as empty lines just inherit indentation
      var lineContent = void 0;

      if (validPrecedingLine === oneLineAbove && oneLineAboveText !== undefined) {
        lineContent = oneLineAboveText;
      } else {
        lineContent = model.getLineContent(validPrecedingLine);
      }

      var nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);

      if (nonWhitespaceIdx >= 0) {
        break;
      }

      validPrecedingLine--;
    }

    if (validPrecedingLine < 1 || line > model.getLineCount()) {
      return null;
    }

    var maxColumn = model.getLineMaxColumn(validPrecedingLine);

    var enter = _languageConfigurationRegistry.LanguageConfigurationRegistry.getEnterAction(this._autoIndent, model, new _range.Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn));

    if (enter) {
      var enterPrefix = enter.indentation;

      if (enter.indentAction === _languageConfiguration.IndentAction.None) {
        enterPrefix = enter.indentation + enter.appendText;
      } else if (enter.indentAction === _languageConfiguration.IndentAction.Indent) {
        enterPrefix = enter.indentation + enter.appendText;
      } else if (enter.indentAction === _languageConfiguration.IndentAction.IndentOutdent) {
        enterPrefix = enter.indentation;
      } else if (enter.indentAction === _languageConfiguration.IndentAction.Outdent) {
        enterPrefix = indentConverter.unshiftIndent(enter.indentation) + enter.appendText;
      }

      var movingLineText = model.getLineContent(line);

      if (this.trimLeft(movingLineText).indexOf(this.trimLeft(enterPrefix)) >= 0) {
        var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(line));
        var newIndentation = strings.getLeadingWhitespace(enterPrefix);

        var indentMetadataOfMovelingLine = _languageConfigurationRegistry.LanguageConfigurationRegistry.getIndentMetadata(model, line);

        if (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & 2
        /* DECREASE_MASK */
        ) {
            newIndentation = indentConverter.unshiftIndent(newIndentation);
          }

        var newSpaceCnt = indentUtils.getSpaceCnt(newIndentation, tabSize);
        var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);
        return newSpaceCnt - oldSpaceCnt;
      }
    }

    return null;
  };

  MoveLinesCommand.prototype.trimLeft = function (str) {
    return str.replace(/^\s+/, '');
  };

  MoveLinesCommand.prototype.shouldAutoIndent = function (model, selection) {
    if (this._autoIndent < 4
    /* Full */
    ) {
        return false;
      } // if it's not easy to tokenize, we stop auto indent.


    if (!model.isCheapToTokenize(selection.startLineNumber)) {
      return false;
    }

    var languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);
    var languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);

    if (languageAtSelectionStart !== languageAtSelectionEnd) {
      return false;
    }

    if (_languageConfigurationRegistry.LanguageConfigurationRegistry.getIndentRulesSupport(languageAtSelectionStart) === null) {
      return false;
    }

    return true;
  };

  MoveLinesCommand.prototype.getIndentEditsOfMovingBlock = function (model, builder, s, tabSize, insertSpaces, offset) {
    for (var i = s.startLineNumber; i <= s.endLineNumber; i++) {
      var lineContent = model.getLineContent(i);
      var originalIndent = strings.getLeadingWhitespace(lineContent);
      var originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);
      var newSpacesCnt = originalSpacesCnt + offset;
      var newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);

      if (newIndent !== originalIndent) {
        builder.addEditOperation(new _range.Range(i, 1, i, originalIndent.length + 1), newIndent);

        if (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === '') {
          // as users select part of the original indent white spaces
          // when we adjust the indentation of endLine, we should adjust the cursor position as well.
          this._moveEndLineSelectionShrink = true;
        }
      }
    }
  };

  MoveLinesCommand.prototype.computeCursorState = function (model, helper) {
    var result = helper.getTrackedSelection(this._selectionId);

    if (this._moveEndPositionDown) {
      result = result.setEndPosition(result.endLineNumber + 1, 1);
    }

    if (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) {
      result = result.setEndPosition(result.endLineNumber, 2);
    }

    return result;
  };

  return MoveLinesCommand;
}();

exports.MoveLinesCommand = MoveLinesCommand;
},{"../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../common/commands/shiftCommand.js":"../node_modules/monaco-editor/esm/vs/editor/common/commands/shiftCommand.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/modes/languageConfiguration.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes/languageConfiguration.js","../../common/modes/languageConfigurationRegistry.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes/languageConfigurationRegistry.js","../indentation/indentUtils.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/indentation/indentUtils.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/sortLinesCommand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SortLinesCommand = void 0;

var _editOperation = require("../../common/core/editOperation.js");

var _range = require("../../common/core/range.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var SortLinesCommand =
/** @class */
function () {
  function SortLinesCommand(selection, descending) {
    this.selection = selection;
    this.descending = descending;
    this.selectionId = null;
  }

  SortLinesCommand.getCollator = function () {
    if (!SortLinesCommand._COLLATOR) {
      SortLinesCommand._COLLATOR = new Intl.Collator();
    }

    return SortLinesCommand._COLLATOR;
  };

  SortLinesCommand.prototype.getEditOperations = function (model, builder) {
    var op = sortLines(model, this.selection, this.descending);

    if (op) {
      builder.addEditOperation(op.range, op.text);
    }

    this.selectionId = builder.trackSelection(this.selection);
  };

  SortLinesCommand.prototype.computeCursorState = function (model, helper) {
    return helper.getTrackedSelection(this.selectionId);
  };

  SortLinesCommand.canRun = function (model, selection, descending) {
    if (model === null) {
      return false;
    }

    var data = getSortData(model, selection, descending);

    if (!data) {
      return false;
    }

    for (var i = 0, len = data.before.length; i < len; i++) {
      if (data.before[i] !== data.after[i]) {
        return true;
      }
    }

    return false;
  };

  SortLinesCommand._COLLATOR = null;
  return SortLinesCommand;
}();

exports.SortLinesCommand = SortLinesCommand;

function getSortData(model, selection, descending) {
  var startLineNumber = selection.startLineNumber;
  var endLineNumber = selection.endLineNumber;

  if (selection.endColumn === 1) {
    endLineNumber--;
  } // Nothing to sort if user didn't select anything.


  if (startLineNumber >= endLineNumber) {
    return null;
  }

  var linesToSort = []; // Get the contents of the selection to be sorted.

  for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {
    linesToSort.push(model.getLineContent(lineNumber));
  }

  var sorted = linesToSort.slice(0);
  sorted.sort(SortLinesCommand.getCollator().compare); // If descending, reverse the order.

  if (descending === true) {
    sorted = sorted.reverse();
  }

  return {
    startLineNumber: startLineNumber,
    endLineNumber: endLineNumber,
    before: linesToSort,
    after: sorted
  };
}
/**
 * Generate commands for sorting lines on a model.
 */


function sortLines(model, selection, descending) {
  var data = getSortData(model, selection, descending);

  if (!data) {
    return null;
  }

  return _editOperation.EditOperation.replace(new _range.Range(data.startLineNumber, 1, data.endLineNumber, model.getLineMaxColumn(data.endLineNumber)), data.after.join('\n'));
}
},{"../../common/core/editOperation.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/editOperation.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/linesOperations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TitleCaseAction = exports.LowerCaseAction = exports.UpperCaseAction = exports.AbstractCaseAction = exports.TransposeAction = exports.JoinLinesAction = exports.DeleteAllRightAction = exports.DeleteAllLeftAction = exports.AbstractDeleteAllToBoundaryAction = exports.InsertLineAfterAction = exports.InsertLineBeforeAction = exports.IndentLinesAction = exports.DeleteLinesAction = exports.TrimTrailingWhitespaceAction = exports.SortLinesDescendingAction = exports.SortLinesAscendingAction = exports.AbstractSortLinesAction = exports.DuplicateSelectionAction = void 0;

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _keyCodes = require("../../../base/common/keyCodes.js");

var _coreCommands = require("../../browser/controller/coreCommands.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _replaceCommand = require("../../common/commands/replaceCommand.js");

var _trimTrailingWhitespaceCommand = require("../../common/commands/trimTrailingWhitespaceCommand.js");

var _cursorTypeOperations = require("../../common/controller/cursorTypeOperations.js");

var _editOperation = require("../../common/core/editOperation.js");

var _position = require("../../common/core/position.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _copyLinesCommand = require("./copyLinesCommand.js");

var _moveLinesCommand = require("./moveLinesCommand.js");

var _sortLinesCommand = require("./sortLinesCommand.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

// copy lines
var AbstractCopyLinesAction =
/** @class */
function (_super) {
  __extends(AbstractCopyLinesAction, _super);

  function AbstractCopyLinesAction(down, opts) {
    var _this = _super.call(this, opts) || this;

    _this.down = down;
    return _this;
  }

  AbstractCopyLinesAction.prototype.run = function (_accessor, editor) {
    var commands = [];
    var selections = editor.getSelections() || [];

    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {
      var selection = selections_1[_i];
      commands.push(new _copyLinesCommand.CopyLinesCommand(selection, this.down));
    }

    editor.pushUndoStop();
    editor.executeCommands(this.id, commands);
    editor.pushUndoStop();
  };

  return AbstractCopyLinesAction;
}(_editorExtensions.EditorAction);

var CopyLinesUpAction =
/** @class */
function (_super) {
  __extends(CopyLinesUpAction, _super);

  function CopyLinesUpAction() {
    return _super.call(this, false, {
      id: 'editor.action.copyLinesUpAction',
      label: nls.localize('lines.copyUp', "Copy Line Up"),
      alias: 'Copy Line Up',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 512
        /* Alt */
        | 1024
        /* Shift */
        | 16
        /* UpArrow */
        ,
        linux: {
          primary: 2048
          /* CtrlCmd */
          | 512
          /* Alt */
          | 1024
          /* Shift */
          | 16
          /* UpArrow */

        },
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '2_line',
        title: nls.localize({
          key: 'miCopyLinesUp',
          comment: ['&& denotes a mnemonic']
        }, "&&Copy Line Up"),
        order: 1
      }
    }) || this;
  }

  return CopyLinesUpAction;
}(AbstractCopyLinesAction);

var CopyLinesDownAction =
/** @class */
function (_super) {
  __extends(CopyLinesDownAction, _super);

  function CopyLinesDownAction() {
    return _super.call(this, true, {
      id: 'editor.action.copyLinesDownAction',
      label: nls.localize('lines.copyDown', "Copy Line Down"),
      alias: 'Copy Line Down',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 512
        /* Alt */
        | 1024
        /* Shift */
        | 18
        /* DownArrow */
        ,
        linux: {
          primary: 2048
          /* CtrlCmd */
          | 512
          /* Alt */
          | 1024
          /* Shift */
          | 18
          /* DownArrow */

        },
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '2_line',
        title: nls.localize({
          key: 'miCopyLinesDown',
          comment: ['&& denotes a mnemonic']
        }, "Co&&py Line Down"),
        order: 2
      }
    }) || this;
  }

  return CopyLinesDownAction;
}(AbstractCopyLinesAction);

var DuplicateSelectionAction =
/** @class */
function (_super) {
  __extends(DuplicateSelectionAction, _super);

  function DuplicateSelectionAction() {
    return _super.call(this, {
      id: 'editor.action.duplicateSelection',
      label: nls.localize('duplicateSelection', "Duplicate Selection"),
      alias: 'Duplicate Selection',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '2_line',
        title: nls.localize({
          key: 'miDuplicateSelection',
          comment: ['&& denotes a mnemonic']
        }, "&&Duplicate Selection"),
        order: 5
      }
    }) || this;
  }

  DuplicateSelectionAction.prototype.run = function (accessor, editor, args) {
    if (!editor.hasModel()) {
      return;
    }

    var commands = [];
    var selections = editor.getSelections();
    var model = editor.getModel();

    for (var _i = 0, selections_2 = selections; _i < selections_2.length; _i++) {
      var selection = selections_2[_i];

      if (selection.isEmpty()) {
        commands.push(new _copyLinesCommand.CopyLinesCommand(selection, true));
      } else {
        var insertSelection = new _selection.Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);
        commands.push(new _replaceCommand.ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));
      }
    }

    editor.pushUndoStop();
    editor.executeCommands(this.id, commands);
    editor.pushUndoStop();
  };

  return DuplicateSelectionAction;
}(_editorExtensions.EditorAction);

exports.DuplicateSelectionAction = DuplicateSelectionAction;

// move lines
var AbstractMoveLinesAction =
/** @class */
function (_super) {
  __extends(AbstractMoveLinesAction, _super);

  function AbstractMoveLinesAction(down, opts) {
    var _this = _super.call(this, opts) || this;

    _this.down = down;
    return _this;
  }

  AbstractMoveLinesAction.prototype.run = function (_accessor, editor) {
    var commands = [];
    var selections = editor.getSelections() || [];
    var autoIndent = editor.getOption(8
    /* autoIndent */
    );

    for (var _i = 0, selections_3 = selections; _i < selections_3.length; _i++) {
      var selection = selections_3[_i];
      commands.push(new _moveLinesCommand.MoveLinesCommand(selection, this.down, autoIndent));
    }

    editor.pushUndoStop();
    editor.executeCommands(this.id, commands);
    editor.pushUndoStop();
  };

  return AbstractMoveLinesAction;
}(_editorExtensions.EditorAction);

var MoveLinesUpAction =
/** @class */
function (_super) {
  __extends(MoveLinesUpAction, _super);

  function MoveLinesUpAction() {
    return _super.call(this, false, {
      id: 'editor.action.moveLinesUpAction',
      label: nls.localize('lines.moveUp', "Move Line Up"),
      alias: 'Move Line Up',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 512
        /* Alt */
        | 16
        /* UpArrow */
        ,
        linux: {
          primary: 512
          /* Alt */
          | 16
          /* UpArrow */

        },
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '2_line',
        title: nls.localize({
          key: 'miMoveLinesUp',
          comment: ['&& denotes a mnemonic']
        }, "Mo&&ve Line Up"),
        order: 3
      }
    }) || this;
  }

  return MoveLinesUpAction;
}(AbstractMoveLinesAction);

var MoveLinesDownAction =
/** @class */
function (_super) {
  __extends(MoveLinesDownAction, _super);

  function MoveLinesDownAction() {
    return _super.call(this, true, {
      id: 'editor.action.moveLinesDownAction',
      label: nls.localize('lines.moveDown', "Move Line Down"),
      alias: 'Move Line Down',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 512
        /* Alt */
        | 18
        /* DownArrow */
        ,
        linux: {
          primary: 512
          /* Alt */
          | 18
          /* DownArrow */

        },
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '2_line',
        title: nls.localize({
          key: 'miMoveLinesDown',
          comment: ['&& denotes a mnemonic']
        }, "Move &&Line Down"),
        order: 4
      }
    }) || this;
  }

  return MoveLinesDownAction;
}(AbstractMoveLinesAction);

var AbstractSortLinesAction =
/** @class */
function (_super) {
  __extends(AbstractSortLinesAction, _super);

  function AbstractSortLinesAction(descending, opts) {
    var _this = _super.call(this, opts) || this;

    _this.descending = descending;
    return _this;
  }

  AbstractSortLinesAction.prototype.run = function (_accessor, editor) {
    var selections = editor.getSelections() || [];

    for (var _i = 0, selections_4 = selections; _i < selections_4.length; _i++) {
      var selection = selections_4[_i];

      if (!_sortLinesCommand.SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {
        return;
      }
    }

    var commands = [];

    for (var i = 0, len = selections.length; i < len; i++) {
      commands[i] = new _sortLinesCommand.SortLinesCommand(selections[i], this.descending);
    }

    editor.pushUndoStop();
    editor.executeCommands(this.id, commands);
    editor.pushUndoStop();
  };

  return AbstractSortLinesAction;
}(_editorExtensions.EditorAction);

exports.AbstractSortLinesAction = AbstractSortLinesAction;

var SortLinesAscendingAction =
/** @class */
function (_super) {
  __extends(SortLinesAscendingAction, _super);

  function SortLinesAscendingAction() {
    return _super.call(this, false, {
      id: 'editor.action.sortLinesAscending',
      label: nls.localize('lines.sortAscending', "Sort Lines Ascending"),
      alias: 'Sort Lines Ascending',
      precondition: _editorContextKeys.EditorContextKeys.writable
    }) || this;
  }

  return SortLinesAscendingAction;
}(AbstractSortLinesAction);

exports.SortLinesAscendingAction = SortLinesAscendingAction;

var SortLinesDescendingAction =
/** @class */
function (_super) {
  __extends(SortLinesDescendingAction, _super);

  function SortLinesDescendingAction() {
    return _super.call(this, true, {
      id: 'editor.action.sortLinesDescending',
      label: nls.localize('lines.sortDescending', "Sort Lines Descending"),
      alias: 'Sort Lines Descending',
      precondition: _editorContextKeys.EditorContextKeys.writable
    }) || this;
  }

  return SortLinesDescendingAction;
}(AbstractSortLinesAction);

exports.SortLinesDescendingAction = SortLinesDescendingAction;

var TrimTrailingWhitespaceAction =
/** @class */
function (_super) {
  __extends(TrimTrailingWhitespaceAction, _super);

  function TrimTrailingWhitespaceAction() {
    return _super.call(this, {
      id: TrimTrailingWhitespaceAction.ID,
      label: nls.localize('lines.trimTrailingWhitespace', "Trim Trailing Whitespace"),
      alias: 'Trim Trailing Whitespace',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 54
        /* KEY_X */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  TrimTrailingWhitespaceAction.prototype.run = function (_accessor, editor, args) {
    var cursors = [];

    if (args.reason === 'auto-save') {
      // See https://github.com/editorconfig/editorconfig-vscode/issues/47
      // It is very convenient for the editor config extension to invoke this action.
      // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.
      cursors = (editor.getSelections() || []).map(function (s) {
        return new _position.Position(s.positionLineNumber, s.positionColumn);
      });
    }

    var selection = editor.getSelection();

    if (selection === null) {
      return;
    }

    var command = new _trimTrailingWhitespaceCommand.TrimTrailingWhitespaceCommand(selection, cursors);
    editor.pushUndoStop();
    editor.executeCommands(this.id, [command]);
    editor.pushUndoStop();
  };

  TrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';
  return TrimTrailingWhitespaceAction;
}(_editorExtensions.EditorAction);

exports.TrimTrailingWhitespaceAction = TrimTrailingWhitespaceAction;

var DeleteLinesAction =
/** @class */
function (_super) {
  __extends(DeleteLinesAction, _super);

  function DeleteLinesAction() {
    return _super.call(this, {
      id: 'editor.action.deleteLines',
      label: nls.localize('lines.delete', "Delete Line"),
      alias: 'Delete Line',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 41
        /* KEY_K */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  DeleteLinesAction.prototype.run = function (_accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var ops = this._getLinesToRemove(editor);

    var model = editor.getModel();

    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {
      // Model is empty
      return;
    }

    var linesDeleted = 0;
    var edits = [];
    var cursorState = [];

    for (var i = 0, len = ops.length; i < len; i++) {
      var op = ops[i];
      var startLineNumber = op.startLineNumber;
      var endLineNumber = op.endLineNumber;
      var startColumn = 1;
      var endColumn = model.getLineMaxColumn(endLineNumber);

      if (endLineNumber < model.getLineCount()) {
        endLineNumber += 1;
        endColumn = 1;
      } else if (startLineNumber > 1) {
        startLineNumber -= 1;
        startColumn = model.getLineMaxColumn(startLineNumber);
      }

      edits.push(_editOperation.EditOperation.replace(new _selection.Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));
      cursorState.push(new _selection.Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));
      linesDeleted += op.endLineNumber - op.startLineNumber + 1;
    }

    editor.pushUndoStop();
    editor.executeEdits(this.id, edits, cursorState);
    editor.pushUndoStop();
  };

  DeleteLinesAction.prototype._getLinesToRemove = function (editor) {
    // Construct delete operations
    var operations = editor.getSelections().map(function (s) {
      var endLineNumber = s.endLineNumber;

      if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {
        endLineNumber -= 1;
      }

      return {
        startLineNumber: s.startLineNumber,
        selectionStartColumn: s.selectionStartColumn,
        endLineNumber: endLineNumber,
        positionColumn: s.positionColumn
      };
    }); // Sort delete operations

    operations.sort(function (a, b) {
      if (a.startLineNumber === b.startLineNumber) {
        return a.endLineNumber - b.endLineNumber;
      }

      return a.startLineNumber - b.startLineNumber;
    }); // Merge delete operations which are adjacent or overlapping

    var mergedOperations = [];
    var previousOperation = operations[0];

    for (var i = 1; i < operations.length; i++) {
      if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {
        // Merge current operations into the previous one
        previousOperation.endLineNumber = operations[i].endLineNumber;
      } else {
        // Push previous operation
        mergedOperations.push(previousOperation);
        previousOperation = operations[i];
      }
    } // Push the last operation


    mergedOperations.push(previousOperation);
    return mergedOperations;
  };

  return DeleteLinesAction;
}(_editorExtensions.EditorAction);

exports.DeleteLinesAction = DeleteLinesAction;

var IndentLinesAction =
/** @class */
function (_super) {
  __extends(IndentLinesAction, _super);

  function IndentLinesAction() {
    return _super.call(this, {
      id: 'editor.action.indentLines',
      label: nls.localize('lines.indent', "Indent Line"),
      alias: 'Indent Line',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 89
        /* US_CLOSE_SQUARE_BRACKET */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  IndentLinesAction.prototype.run = function (_accessor, editor) {
    var cursors = editor._getCursors();

    if (!cursors) {
      return;
    }

    editor.pushUndoStop();
    editor.executeCommands(this.id, _cursorTypeOperations.TypeOperations.indent(cursors.context.config, editor.getModel(), editor.getSelections()));
    editor.pushUndoStop();
  };

  return IndentLinesAction;
}(_editorExtensions.EditorAction);

exports.IndentLinesAction = IndentLinesAction;

var OutdentLinesAction =
/** @class */
function (_super) {
  __extends(OutdentLinesAction, _super);

  function OutdentLinesAction() {
    return _super.call(this, {
      id: 'editor.action.outdentLines',
      label: nls.localize('lines.outdent', "Outdent Line"),
      alias: 'Outdent Line',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 87
        /* US_OPEN_SQUARE_BRACKET */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  OutdentLinesAction.prototype.run = function (_accessor, editor) {
    _coreCommands.CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);
  };

  return OutdentLinesAction;
}(_editorExtensions.EditorAction);

var InsertLineBeforeAction =
/** @class */
function (_super) {
  __extends(InsertLineBeforeAction, _super);

  function InsertLineBeforeAction() {
    return _super.call(this, {
      id: 'editor.action.insertLineBefore',
      label: nls.localize('lines.insertBefore', "Insert Line Above"),
      alias: 'Insert Line Above',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 3
        /* Enter */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  InsertLineBeforeAction.prototype.run = function (_accessor, editor) {
    var cursors = editor._getCursors();

    if (!cursors) {
      return;
    }

    editor.pushUndoStop();
    editor.executeCommands(this.id, _cursorTypeOperations.TypeOperations.lineInsertBefore(cursors.context.config, editor.getModel(), editor.getSelections()));
  };

  return InsertLineBeforeAction;
}(_editorExtensions.EditorAction);

exports.InsertLineBeforeAction = InsertLineBeforeAction;

var InsertLineAfterAction =
/** @class */
function (_super) {
  __extends(InsertLineAfterAction, _super);

  function InsertLineAfterAction() {
    return _super.call(this, {
      id: 'editor.action.insertLineAfter',
      label: nls.localize('lines.insertAfter', "Insert Line Below"),
      alias: 'Insert Line Below',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 3
        /* Enter */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  InsertLineAfterAction.prototype.run = function (_accessor, editor) {
    var cursors = editor._getCursors();

    if (!cursors) {
      return;
    }

    editor.pushUndoStop();
    editor.executeCommands(this.id, _cursorTypeOperations.TypeOperations.lineInsertAfter(cursors.context.config, editor.getModel(), editor.getSelections()));
  };

  return InsertLineAfterAction;
}(_editorExtensions.EditorAction);

exports.InsertLineAfterAction = InsertLineAfterAction;

var AbstractDeleteAllToBoundaryAction =
/** @class */
function (_super) {
  __extends(AbstractDeleteAllToBoundaryAction, _super);

  function AbstractDeleteAllToBoundaryAction() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AbstractDeleteAllToBoundaryAction.prototype.run = function (_accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var primaryCursor = editor.getSelection();

    var rangesToDelete = this._getRangesToDelete(editor); // merge overlapping selections


    var effectiveRanges = [];

    for (var i = 0, count = rangesToDelete.length - 1; i < count; i++) {
      var range = rangesToDelete[i];
      var nextRange = rangesToDelete[i + 1];

      if (_range.Range.intersectRanges(range, nextRange) === null) {
        effectiveRanges.push(range);
      } else {
        rangesToDelete[i + 1] = _range.Range.plusRange(range, nextRange);
      }
    }

    effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);

    var endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);

    var edits = effectiveRanges.map(function (range) {
      return _editOperation.EditOperation.replace(range, '');
    });
    editor.pushUndoStop();
    editor.executeEdits(this.id, edits, endCursorState);
    editor.pushUndoStop();
  };

  return AbstractDeleteAllToBoundaryAction;
}(_editorExtensions.EditorAction);

exports.AbstractDeleteAllToBoundaryAction = AbstractDeleteAllToBoundaryAction;

var DeleteAllLeftAction =
/** @class */
function (_super) {
  __extends(DeleteAllLeftAction, _super);

  function DeleteAllLeftAction() {
    return _super.call(this, {
      id: 'deleteAllLeft',
      label: nls.localize('lines.deleteAllLeft', "Delete All Left"),
      alias: 'Delete All Left',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 2048
          /* CtrlCmd */
          | 1
          /* Backspace */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  DeleteAllLeftAction.prototype._getEndCursorState = function (primaryCursor, rangesToDelete) {
    var endPrimaryCursor = null;
    var endCursorState = [];
    var deletedLines = 0;
    rangesToDelete.forEach(function (range) {
      var endCursor;

      if (range.endColumn === 1 && deletedLines > 0) {
        var newStartLine = range.startLineNumber - deletedLines;
        endCursor = new _selection.Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);
      } else {
        endCursor = new _selection.Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);
      }

      deletedLines += range.endLineNumber - range.startLineNumber;

      if (range.intersectRanges(primaryCursor)) {
        endPrimaryCursor = endCursor;
      } else {
        endCursorState.push(endCursor);
      }
    });

    if (endPrimaryCursor) {
      endCursorState.unshift(endPrimaryCursor);
    }

    return endCursorState;
  };

  DeleteAllLeftAction.prototype._getRangesToDelete = function (editor) {
    var selections = editor.getSelections();

    if (selections === null) {
      return [];
    }

    var rangesToDelete = selections;
    var model = editor.getModel();

    if (model === null) {
      return [];
    }

    rangesToDelete.sort(_range.Range.compareRangesUsingStarts);
    rangesToDelete = rangesToDelete.map(function (selection) {
      if (selection.isEmpty()) {
        if (selection.startColumn === 1) {
          var deleteFromLine = Math.max(1, selection.startLineNumber - 1);
          var deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineContent(deleteFromLine).length + 1;
          return new _range.Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);
        } else {
          return new _range.Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);
        }
      } else {
        return new _range.Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);
      }
    });
    return rangesToDelete;
  };

  return DeleteAllLeftAction;
}(AbstractDeleteAllToBoundaryAction);

exports.DeleteAllLeftAction = DeleteAllLeftAction;

var DeleteAllRightAction =
/** @class */
function (_super) {
  __extends(DeleteAllRightAction, _super);

  function DeleteAllRightAction() {
    return _super.call(this, {
      id: 'deleteAllRight',
      label: nls.localize('lines.deleteAllRight', "Delete All Right"),
      alias: 'Delete All Right',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256
          /* WinCtrl */
          | 41
          /* KEY_K */
          ,
          secondary: [2048
          /* CtrlCmd */
          | 20
          /* Delete */
          ]
        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  DeleteAllRightAction.prototype._getEndCursorState = function (primaryCursor, rangesToDelete) {
    var endPrimaryCursor = null;
    var endCursorState = [];

    for (var i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {
      var range = rangesToDelete[i];
      var endCursor = new _selection.Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);

      if (range.intersectRanges(primaryCursor)) {
        endPrimaryCursor = endCursor;
      } else {
        endCursorState.push(endCursor);
      }
    }

    if (endPrimaryCursor) {
      endCursorState.unshift(endPrimaryCursor);
    }

    return endCursorState;
  };

  DeleteAllRightAction.prototype._getRangesToDelete = function (editor) {
    var model = editor.getModel();

    if (model === null) {
      return [];
    }

    var selections = editor.getSelections();

    if (selections === null) {
      return [];
    }

    var rangesToDelete = selections.map(function (sel) {
      if (sel.isEmpty()) {
        var maxColumn = model.getLineMaxColumn(sel.startLineNumber);

        if (sel.startColumn === maxColumn) {
          return new _range.Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);
        } else {
          return new _range.Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);
        }
      }

      return sel;
    });
    rangesToDelete.sort(_range.Range.compareRangesUsingStarts);
    return rangesToDelete;
  };

  return DeleteAllRightAction;
}(AbstractDeleteAllToBoundaryAction);

exports.DeleteAllRightAction = DeleteAllRightAction;

var JoinLinesAction =
/** @class */
function (_super) {
  __extends(JoinLinesAction, _super);

  function JoinLinesAction() {
    return _super.call(this, {
      id: 'editor.action.joinLines',
      label: nls.localize('lines.joinLines', "Join Lines"),
      alias: 'Join Lines',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 0,
        mac: {
          primary: 256
          /* WinCtrl */
          | 40
          /* KEY_J */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  JoinLinesAction.prototype.run = function (_accessor, editor) {
    var selections = editor.getSelections();

    if (selections === null) {
      return;
    }

    var primaryCursor = editor.getSelection();

    if (primaryCursor === null) {
      return;
    }

    selections.sort(_range.Range.compareRangesUsingStarts);
    var reducedSelections = [];
    var lastSelection = selections.reduce(function (previousValue, currentValue) {
      if (previousValue.isEmpty()) {
        if (previousValue.endLineNumber === currentValue.startLineNumber) {
          if (primaryCursor.equalsSelection(previousValue)) {
            primaryCursor = currentValue;
          }

          return currentValue;
        }

        if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {
          reducedSelections.push(previousValue);
          return currentValue;
        } else {
          return new _selection.Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);
        }
      } else {
        if (currentValue.startLineNumber > previousValue.endLineNumber) {
          reducedSelections.push(previousValue);
          return currentValue;
        } else {
          return new _selection.Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);
        }
      }
    });
    reducedSelections.push(lastSelection);
    var model = editor.getModel();

    if (model === null) {
      return;
    }

    var edits = [];
    var endCursorState = [];
    var endPrimaryCursor = primaryCursor;
    var lineOffset = 0;

    for (var i = 0, len = reducedSelections.length; i < len; i++) {
      var selection = reducedSelections[i];
      var startLineNumber = selection.startLineNumber;
      var startColumn = 1;
      var columnDeltaOffset = 0;
      var endLineNumber = void 0,
          endColumn = void 0;
      var selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;

      if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {
        var position = selection.getStartPosition();

        if (position.lineNumber < model.getLineCount()) {
          endLineNumber = startLineNumber + 1;
          endColumn = model.getLineMaxColumn(endLineNumber);
        } else {
          endLineNumber = position.lineNumber;
          endColumn = model.getLineMaxColumn(position.lineNumber);
        }
      } else {
        endLineNumber = selection.endLineNumber;
        endColumn = model.getLineMaxColumn(endLineNumber);
      }

      var trimmedLinesContent = model.getLineContent(startLineNumber);

      for (var i_1 = startLineNumber + 1; i_1 <= endLineNumber; i_1++) {
        var lineText = model.getLineContent(i_1);
        var firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i_1);

        if (firstNonWhitespaceIdx >= 1) {
          var insertSpace = true;

          if (trimmedLinesContent === '') {
            insertSpace = false;
          }

          if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' || trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\t')) {
            insertSpace = false;
            trimmedLinesContent = trimmedLinesContent.replace(/[\s\uFEFF\xA0]+$/g, ' ');
          }

          var lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);
          trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;

          if (insertSpace) {
            columnDeltaOffset = lineTextWithoutIndent.length + 1;
          } else {
            columnDeltaOffset = lineTextWithoutIndent.length;
          }
        } else {
          columnDeltaOffset = 0;
        }
      }

      var deleteSelection = new _range.Range(startLineNumber, startColumn, endLineNumber, endColumn);

      if (!deleteSelection.isEmpty()) {
        var resultSelection = void 0;

        if (selection.isEmpty()) {
          edits.push(_editOperation.EditOperation.replace(deleteSelection, trimmedLinesContent));
          resultSelection = new _selection.Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);
        } else {
          if (selection.startLineNumber === selection.endLineNumber) {
            edits.push(_editOperation.EditOperation.replace(deleteSelection, trimmedLinesContent));
            resultSelection = new _selection.Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);
          } else {
            edits.push(_editOperation.EditOperation.replace(deleteSelection, trimmedLinesContent));
            resultSelection = new _selection.Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);
          }
        }

        if (_range.Range.intersectRanges(deleteSelection, primaryCursor) !== null) {
          endPrimaryCursor = resultSelection;
        } else {
          endCursorState.push(resultSelection);
        }
      }

      lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;
    }

    endCursorState.unshift(endPrimaryCursor);
    editor.pushUndoStop();
    editor.executeEdits(this.id, edits, endCursorState);
    editor.pushUndoStop();
  };

  return JoinLinesAction;
}(_editorExtensions.EditorAction);

exports.JoinLinesAction = JoinLinesAction;

var TransposeAction =
/** @class */
function (_super) {
  __extends(TransposeAction, _super);

  function TransposeAction() {
    return _super.call(this, {
      id: 'editor.action.transpose',
      label: nls.localize('editor.transpose', "Transpose characters around the cursor"),
      alias: 'Transpose characters around the cursor',
      precondition: _editorContextKeys.EditorContextKeys.writable
    }) || this;
  }

  TransposeAction.prototype.run = function (_accessor, editor) {
    var selections = editor.getSelections();

    if (selections === null) {
      return;
    }

    var model = editor.getModel();

    if (model === null) {
      return;
    }

    var commands = [];

    for (var i = 0, len = selections.length; i < len; i++) {
      var selection = selections[i];

      if (!selection.isEmpty()) {
        continue;
      }

      var cursor = selection.getStartPosition();
      var maxColumn = model.getLineMaxColumn(cursor.lineNumber);

      if (cursor.column >= maxColumn) {
        if (cursor.lineNumber === model.getLineCount()) {
          continue;
        } // The cursor is at the end of current line and current line is not empty
        // then we transpose the character before the cursor and the line break if there is any following line.


        var deleteSelection = new _range.Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);
        var chars = model.getValueInRange(deleteSelection).split('').reverse().join('');
        commands.push(new _replaceCommand.ReplaceCommand(new _selection.Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));
      } else {
        var deleteSelection = new _range.Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);
        var chars = model.getValueInRange(deleteSelection).split('').reverse().join('');
        commands.push(new _replaceCommand.ReplaceCommandThatPreservesSelection(deleteSelection, chars, new _selection.Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));
      }
    }

    editor.pushUndoStop();
    editor.executeCommands(this.id, commands);
    editor.pushUndoStop();
  };

  return TransposeAction;
}(_editorExtensions.EditorAction);

exports.TransposeAction = TransposeAction;

var AbstractCaseAction =
/** @class */
function (_super) {
  __extends(AbstractCaseAction, _super);

  function AbstractCaseAction() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AbstractCaseAction.prototype.run = function (_accessor, editor) {
    var selections = editor.getSelections();

    if (selections === null) {
      return;
    }

    var model = editor.getModel();

    if (model === null) {
      return;
    }

    var wordSeparators = editor.getOption(92
    /* wordSeparators */
    );
    var commands = [];

    for (var i = 0, len = selections.length; i < len; i++) {
      var selection = selections[i];

      if (selection.isEmpty()) {
        var cursor = selection.getStartPosition();
        var word = model.getWordAtPosition(cursor);

        if (!word) {
          continue;
        }

        var wordRange = new _range.Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);
        var text = model.getValueInRange(wordRange);
        commands.push(new _replaceCommand.ReplaceCommandThatPreservesSelection(wordRange, this._modifyText(text, wordSeparators), new _selection.Selection(cursor.lineNumber, cursor.column, cursor.lineNumber, cursor.column)));
      } else {
        var text = model.getValueInRange(selection);
        commands.push(new _replaceCommand.ReplaceCommandThatPreservesSelection(selection, this._modifyText(text, wordSeparators), selection));
      }
    }

    editor.pushUndoStop();
    editor.executeCommands(this.id, commands);
    editor.pushUndoStop();
  };

  return AbstractCaseAction;
}(_editorExtensions.EditorAction);

exports.AbstractCaseAction = AbstractCaseAction;

var UpperCaseAction =
/** @class */
function (_super) {
  __extends(UpperCaseAction, _super);

  function UpperCaseAction() {
    return _super.call(this, {
      id: 'editor.action.transformToUppercase',
      label: nls.localize('editor.transformToUppercase', "Transform to Uppercase"),
      alias: 'Transform to Uppercase',
      precondition: _editorContextKeys.EditorContextKeys.writable
    }) || this;
  }

  UpperCaseAction.prototype._modifyText = function (text, wordSeparators) {
    return text.toLocaleUpperCase();
  };

  return UpperCaseAction;
}(AbstractCaseAction);

exports.UpperCaseAction = UpperCaseAction;

var LowerCaseAction =
/** @class */
function (_super) {
  __extends(LowerCaseAction, _super);

  function LowerCaseAction() {
    return _super.call(this, {
      id: 'editor.action.transformToLowercase',
      label: nls.localize('editor.transformToLowercase', "Transform to Lowercase"),
      alias: 'Transform to Lowercase',
      precondition: _editorContextKeys.EditorContextKeys.writable
    }) || this;
  }

  LowerCaseAction.prototype._modifyText = function (text, wordSeparators) {
    return text.toLocaleLowerCase();
  };

  return LowerCaseAction;
}(AbstractCaseAction);

exports.LowerCaseAction = LowerCaseAction;

var TitleCaseAction =
/** @class */
function (_super) {
  __extends(TitleCaseAction, _super);

  function TitleCaseAction() {
    return _super.call(this, {
      id: 'editor.action.transformToTitlecase',
      label: nls.localize('editor.transformToTitlecase', "Transform to Title Case"),
      alias: 'Transform to Title Case',
      precondition: _editorContextKeys.EditorContextKeys.writable
    }) || this;
  }

  TitleCaseAction.prototype._modifyText = function (text, wordSeparators) {
    var separators = '\r\n\t ' + wordSeparators;
    var excludedChars = separators.split('');
    var title = '';
    var startUpperCase = true;

    for (var i = 0; i < text.length; i++) {
      var currentChar = text[i];

      if (excludedChars.indexOf(currentChar) >= 0) {
        startUpperCase = true;
        title += currentChar;
      } else if (startUpperCase) {
        startUpperCase = false;
        title += currentChar.toLocaleUpperCase();
      } else {
        title += currentChar.toLocaleLowerCase();
      }
    }

    return title;
  };

  return TitleCaseAction;
}(AbstractCaseAction);

exports.TitleCaseAction = TitleCaseAction;
(0, _editorExtensions.registerEditorAction)(CopyLinesUpAction);
(0, _editorExtensions.registerEditorAction)(CopyLinesDownAction);
(0, _editorExtensions.registerEditorAction)(DuplicateSelectionAction);
(0, _editorExtensions.registerEditorAction)(MoveLinesUpAction);
(0, _editorExtensions.registerEditorAction)(MoveLinesDownAction);
(0, _editorExtensions.registerEditorAction)(SortLinesAscendingAction);
(0, _editorExtensions.registerEditorAction)(SortLinesDescendingAction);
(0, _editorExtensions.registerEditorAction)(TrimTrailingWhitespaceAction);
(0, _editorExtensions.registerEditorAction)(DeleteLinesAction);
(0, _editorExtensions.registerEditorAction)(IndentLinesAction);
(0, _editorExtensions.registerEditorAction)(OutdentLinesAction);
(0, _editorExtensions.registerEditorAction)(InsertLineBeforeAction);
(0, _editorExtensions.registerEditorAction)(InsertLineAfterAction);
(0, _editorExtensions.registerEditorAction)(DeleteAllLeftAction);
(0, _editorExtensions.registerEditorAction)(DeleteAllRightAction);
(0, _editorExtensions.registerEditorAction)(JoinLinesAction);
(0, _editorExtensions.registerEditorAction)(TransposeAction);
(0, _editorExtensions.registerEditorAction)(UpperCaseAction);
(0, _editorExtensions.registerEditorAction)(LowerCaseAction);
(0, _editorExtensions.registerEditorAction)(TitleCaseAction);
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/keyCodes.js":"../node_modules/monaco-editor/esm/vs/base/common/keyCodes.js","../../browser/controller/coreCommands.js":"../node_modules/monaco-editor/esm/vs/editor/browser/controller/coreCommands.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/commands/replaceCommand.js":"../node_modules/monaco-editor/esm/vs/editor/common/commands/replaceCommand.js","../../common/commands/trimTrailingWhitespaceCommand.js":"../node_modules/monaco-editor/esm/vs/editor/common/commands/trimTrailingWhitespaceCommand.js","../../common/controller/cursorTypeOperations.js":"../node_modules/monaco-editor/esm/vs/editor/common/controller/cursorTypeOperations.js","../../common/core/editOperation.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/editOperation.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","./copyLinesCommand.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/copyLinesCommand.js","./moveLinesCommand.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/moveLinesCommand.js","./sortLinesCommand.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/sortLinesCommand.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/links/links.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/links/getLinks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLinks = getLinks;
exports.LinksList = exports.Link = void 0;

var _cancellation = require("../../../base/common/cancellation.js");

var _errors = require("../../../base/common/errors.js");

var _uri = require("../../../base/common/uri.js");

var _range = require("../../common/core/range.js");

var _modes = require("../../common/modes.js");

var _modelService = require("../../common/services/modelService.js");

var _commands = require("../../../platform/commands/common/commands.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _arrays = require("../../../base/common/arrays.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var Link =
/** @class */
function () {
  function Link(link, provider) {
    this._link = link;
    this._provider = provider;
  }

  Link.prototype.toJSON = function () {
    return {
      range: this.range,
      url: this.url,
      tooltip: this.tooltip
    };
  };

  Object.defineProperty(Link.prototype, "range", {
    get: function () {
      return this._link.range;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Link.prototype, "url", {
    get: function () {
      return this._link.url;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Link.prototype, "tooltip", {
    get: function () {
      return this._link.tooltip;
    },
    enumerable: true,
    configurable: true
  });

  Link.prototype.resolve = function (token) {
    return __awaiter(this, void 0, void 0, function () {
      var _this = this;

      return __generator(this, function (_a) {
        if (this._link.url) {
          return [2
          /*return*/
          , this._link.url];
        }

        if (typeof this._provider.resolveLink === 'function') {
          return [2
          /*return*/
          , Promise.resolve(this._provider.resolveLink(this._link, token)).then(function (value) {
            _this._link = value || _this._link;

            if (_this._link.url) {
              // recurse
              return _this.resolve(token);
            }

            return Promise.reject(new Error('missing'));
          })];
        }

        return [2
        /*return*/
        , Promise.reject(new Error('missing'))];
      });
    });
  };

  return Link;
}();

exports.Link = Link;

var LinksList =
/** @class */
function (_super) {
  __extends(LinksList, _super);

  function LinksList(tuples) {
    var _this = _super.call(this) || this;

    var links = [];

    var _loop_1 = function (list, provider) {
      // merge all links
      var newLinks = list.links.map(function (link) {
        return new Link(link, provider);
      });
      links = LinksList._union(links, newLinks); // register disposables

      if ((0, _lifecycle.isDisposable)(provider)) {
        this_1._register(provider);
      }
    };

    var this_1 = this;

    for (var _i = 0, tuples_1 = tuples; _i < tuples_1.length; _i++) {
      var _a = tuples_1[_i],
          list = _a[0],
          provider = _a[1];

      _loop_1(list, provider);
    }

    _this.links = links;
    return _this;
  }

  LinksList._union = function (oldLinks, newLinks) {
    // reunite oldLinks with newLinks and remove duplicates
    var result = [];
    var oldIndex;
    var oldLen;
    var newIndex;
    var newLen;

    for (oldIndex = 0, newIndex = 0, oldLen = oldLinks.length, newLen = newLinks.length; oldIndex < oldLen && newIndex < newLen;) {
      var oldLink = oldLinks[oldIndex];
      var newLink = newLinks[newIndex];

      if (_range.Range.areIntersectingOrTouching(oldLink.range, newLink.range)) {
        // Remove the oldLink
        oldIndex++;
        continue;
      }

      var comparisonResult = _range.Range.compareRangesUsingStarts(oldLink.range, newLink.range);

      if (comparisonResult < 0) {
        // oldLink is before
        result.push(oldLink);
        oldIndex++;
      } else {
        // newLink is before
        result.push(newLink);
        newIndex++;
      }
    }

    for (; oldIndex < oldLen; oldIndex++) {
      result.push(oldLinks[oldIndex]);
    }

    for (; newIndex < newLen; newIndex++) {
      result.push(newLinks[newIndex]);
    }

    return result;
  };

  return LinksList;
}(_lifecycle.Disposable);

exports.LinksList = LinksList;

function getLinks(model, token) {
  var lists = []; // ask all providers for links in parallel

  var promises = _modes.LinkProviderRegistry.ordered(model).reverse().map(function (provider, i) {
    return Promise.resolve(provider.provideLinks(model, token)).then(function (result) {
      if (result) {
        lists[i] = [result, provider];
      }
    }, _errors.onUnexpectedExternalError);
  });

  return Promise.all(promises).then(function () {
    var result = new LinksList((0, _arrays.coalesce)(lists));

    if (!token.isCancellationRequested) {
      return result;
    }

    result.dispose();
    return new LinksList([]);
  });
}

_commands.CommandsRegistry.registerCommand('_executeLinkProvider', function (accessor) {
  var args = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }

  return __awaiter(void 0, void 0, void 0, function () {
    var uri, model, list, result;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          uri = args[0];

          if (!(uri instanceof _uri.URI)) {
            return [2
            /*return*/
            , []];
          }

          model = accessor.get(_modelService.IModelService).getModel(uri);

          if (!model) {
            return [2
            /*return*/
            , []];
          }

          return [4
          /*yield*/
          , getLinks(model, _cancellation.CancellationToken.None)];

        case 1:
          list = _a.sent();

          if (!list) {
            return [2
            /*return*/
            , []];
          }

          result = list.links.slice(0);
          list.dispose();
          return [2
          /*return*/
          , result];
      }
    });
  });
});
},{"../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../common/services/modelService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js","../../../platform/commands/common/commands.js":"../node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/links/links.js":[function(require,module,exports) {
"use strict";

require("./links.css");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var async = _interopRequireWildcard(require("../../../base/common/async.js"));

var _cancellation = require("../../../base/common/cancellation.js");

var _errors = require("../../../base/common/errors.js");

var _htmlContent = require("../../../base/common/htmlContent.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var platform = _interopRequireWildcard(require("../../../base/common/platform.js"));

var _editorExtensions = require("../../browser/editorExtensions.js");

var _textModel = require("../../common/model/textModel.js");

var _modes = require("../../common/modes.js");

var _clickLinkGesture = require("../gotoSymbol/link/clickLinkGesture.js");

var _getLinks = require("./getLinks.js");

var _notification = require("../../../platform/notification/common/notification.js");

var _opener = require("../../../platform/opener/common/opener.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

function getHoverMessage(link, useMetaKey) {
  var executeCmd = link.url && /^command:/i.test(link.url.toString());
  var label = link.tooltip ? link.tooltip : executeCmd ? nls.localize('links.navigate.executeCmd', 'Execute command') : nls.localize('links.navigate.follow', 'Follow link');
  var kb = useMetaKey ? platform.isMacintosh ? nls.localize('links.navigate.kb.meta.mac', "cmd + click") : nls.localize('links.navigate.kb.meta', "ctrl + click") : platform.isMacintosh ? nls.localize('links.navigate.kb.alt.mac', "option + click") : nls.localize('links.navigate.kb.alt', "alt + click");

  if (link.url) {
    var hoverMessage = new _htmlContent.MarkdownString('', true).appendMarkdown("[" + label + "](" + link.url.toString() + ") (" + kb + ")");
    return hoverMessage;
  } else {
    return new _htmlContent.MarkdownString().appendText(label + " (" + kb + ")");
  }
}

var decoration = {
  general: _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    collapseOnReplaceEdit: true,
    inlineClassName: 'detected-link'
  }),
  active: _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    collapseOnReplaceEdit: true,
    inlineClassName: 'detected-link-active'
  })
};

var LinkOccurrence =
/** @class */
function () {
  function LinkOccurrence(link, decorationId) {
    this.link = link;
    this.decorationId = decorationId;
  }

  LinkOccurrence.decoration = function (link, useMetaKey) {
    return {
      range: link.range,
      options: LinkOccurrence._getOptions(link, useMetaKey, false)
    };
  };

  LinkOccurrence._getOptions = function (link, useMetaKey, isActive) {
    var options = __assign({}, isActive ? decoration.active : decoration.general);

    options.hoverMessage = getHoverMessage(link, useMetaKey);
    return options;
  };

  LinkOccurrence.prototype.activate = function (changeAccessor, useMetaKey) {
    changeAccessor.changeDecorationOptions(this.decorationId, LinkOccurrence._getOptions(this.link, useMetaKey, true));
  };

  LinkOccurrence.prototype.deactivate = function (changeAccessor, useMetaKey) {
    changeAccessor.changeDecorationOptions(this.decorationId, LinkOccurrence._getOptions(this.link, useMetaKey, false));
  };

  return LinkOccurrence;
}();

var LinkDetector =
/** @class */
function () {
  function LinkDetector(editor, openerService, notificationService) {
    var _this = this;

    this.listenersToRemove = new _lifecycle.DisposableStore();
    this.editor = editor;
    this.openerService = openerService;
    this.notificationService = notificationService;
    var clickLinkGesture = new _clickLinkGesture.ClickLinkGesture(editor);
    this.listenersToRemove.add(clickLinkGesture);
    this.listenersToRemove.add(clickLinkGesture.onMouseMoveOrRelevantKeyDown(function (_a) {
      var mouseEvent = _a[0],
          keyboardEvent = _a[1];

      _this._onEditorMouseMove(mouseEvent, keyboardEvent);
    }));
    this.listenersToRemove.add(clickLinkGesture.onExecute(function (e) {
      _this.onEditorMouseUp(e);
    }));
    this.listenersToRemove.add(clickLinkGesture.onCancel(function (e) {
      _this.cleanUpActiveLinkDecoration();
    }));
    this.enabled = editor.getOption(50
    /* links */
    );
    this.listenersToRemove.add(editor.onDidChangeConfiguration(function (e) {
      var enabled = editor.getOption(50
      /* links */
      );

      if (_this.enabled === enabled) {
        // No change in our configuration option
        return;
      }

      _this.enabled = enabled; // Remove any links (for the getting disabled case)

      _this.updateDecorations([]); // Stop any computation (for the getting disabled case)


      _this.stop(); // Start computing (for the getting enabled case)


      _this.beginCompute();
    }));
    this.listenersToRemove.add(editor.onDidChangeModelContent(function (e) {
      return _this.onChange();
    }));
    this.listenersToRemove.add(editor.onDidChangeModel(function (e) {
      return _this.onModelChanged();
    }));
    this.listenersToRemove.add(editor.onDidChangeModelLanguage(function (e) {
      return _this.onModelModeChanged();
    }));
    this.listenersToRemove.add(_modes.LinkProviderRegistry.onDidChange(function (e) {
      return _this.onModelModeChanged();
    }));
    this.timeout = new async.TimeoutTimer();
    this.computePromise = null;
    this.activeLinksList = null;
    this.currentOccurrences = {};
    this.activeLinkDecorationId = null;
    this.beginCompute();
  }

  LinkDetector.get = function (editor) {
    return editor.getContribution(LinkDetector.ID);
  };

  LinkDetector.prototype.onModelChanged = function () {
    this.currentOccurrences = {};
    this.activeLinkDecorationId = null;
    this.stop();
    this.beginCompute();
  };

  LinkDetector.prototype.onModelModeChanged = function () {
    this.stop();
    this.beginCompute();
  };

  LinkDetector.prototype.onChange = function () {
    var _this = this;

    this.timeout.setIfNotSet(function () {
      return _this.beginCompute();
    }, LinkDetector.RECOMPUTE_TIME);
  };

  LinkDetector.prototype.beginCompute = function () {
    return __awaiter(this, void 0, void 0, function () {
      var model, _a, err_1;

      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!this.editor.hasModel() || !this.enabled) {
              return [2
              /*return*/
              ];
            }

            model = this.editor.getModel();

            if (!_modes.LinkProviderRegistry.has(model)) {
              return [2
              /*return*/
              ];
            }

            if (this.activeLinksList) {
              this.activeLinksList.dispose();
              this.activeLinksList = null;
            }

            this.computePromise = async.createCancelablePromise(function (token) {
              return (0, _getLinks.getLinks)(model, token);
            });
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            _a = this;
            return [4
            /*yield*/
            , this.computePromise];

          case 2:
            _a.activeLinksList = _b.sent();
            this.updateDecorations(this.activeLinksList.links);
            return [3
            /*break*/
            , 5];

          case 3:
            err_1 = _b.sent();
            (0, _errors.onUnexpectedError)(err_1);
            return [3
            /*break*/
            , 5];

          case 4:
            this.computePromise = null;
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  LinkDetector.prototype.updateDecorations = function (links) {
    var useMetaKey = this.editor.getOption(57
    /* multiCursorModifier */
    ) === 'altKey';
    var oldDecorations = [];
    var keys = Object.keys(this.currentOccurrences);

    for (var i = 0, len = keys.length; i < len; i++) {
      var decorationId = keys[i];
      var occurance = this.currentOccurrences[decorationId];
      oldDecorations.push(occurance.decorationId);
    }

    var newDecorations = [];

    if (links) {
      // Not sure why this is sometimes null
      for (var _i = 0, links_1 = links; _i < links_1.length; _i++) {
        var link = links_1[_i];
        newDecorations.push(LinkOccurrence.decoration(link, useMetaKey));
      }
    }

    var decorations = this.editor.deltaDecorations(oldDecorations, newDecorations);
    this.currentOccurrences = {};
    this.activeLinkDecorationId = null;

    for (var i = 0, len = decorations.length; i < len; i++) {
      var occurance = new LinkOccurrence(links[i], decorations[i]);
      this.currentOccurrences[occurance.decorationId] = occurance;
    }
  };

  LinkDetector.prototype._onEditorMouseMove = function (mouseEvent, withKey) {
    var _this = this;

    var useMetaKey = this.editor.getOption(57
    /* multiCursorModifier */
    ) === 'altKey';

    if (this.isEnabled(mouseEvent, withKey)) {
      this.cleanUpActiveLinkDecoration(); // always remove previous link decoration as their can only be one

      var occurrence_1 = this.getLinkOccurrence(mouseEvent.target.position);

      if (occurrence_1) {
        this.editor.changeDecorations(function (changeAccessor) {
          occurrence_1.activate(changeAccessor, useMetaKey);
          _this.activeLinkDecorationId = occurrence_1.decorationId;
        });
      }
    } else {
      this.cleanUpActiveLinkDecoration();
    }
  };

  LinkDetector.prototype.cleanUpActiveLinkDecoration = function () {
    var useMetaKey = this.editor.getOption(57
    /* multiCursorModifier */
    ) === 'altKey';

    if (this.activeLinkDecorationId) {
      var occurrence_2 = this.currentOccurrences[this.activeLinkDecorationId];

      if (occurrence_2) {
        this.editor.changeDecorations(function (changeAccessor) {
          occurrence_2.deactivate(changeAccessor, useMetaKey);
        });
      }

      this.activeLinkDecorationId = null;
    }
  };

  LinkDetector.prototype.onEditorMouseUp = function (mouseEvent) {
    if (!this.isEnabled(mouseEvent)) {
      return;
    }

    var occurrence = this.getLinkOccurrence(mouseEvent.target.position);

    if (!occurrence) {
      return;
    }

    this.openLinkOccurrence(occurrence, mouseEvent.hasSideBySideModifier, true
    /* from user gesture */
    );
  };

  LinkDetector.prototype.openLinkOccurrence = function (occurrence, openToSide, fromUserGesture) {
    var _this = this;

    if (fromUserGesture === void 0) {
      fromUserGesture = false;
    }

    if (!this.openerService) {
      return;
    }

    var link = occurrence.link;
    link.resolve(_cancellation.CancellationToken.None).then(function (uri) {
      // open the uri
      return _this.openerService.open(uri, {
        openToSide: openToSide,
        fromUserGesture: fromUserGesture
      });
    }, function (err) {
      var messageOrError = err instanceof Error ? err.message : err; // different error cases

      if (messageOrError === 'invalid') {
        _this.notificationService.warn(nls.localize('invalid.url', 'Failed to open this link because it is not well-formed: {0}', link.url.toString()));
      } else if (messageOrError === 'missing') {
        _this.notificationService.warn(nls.localize('missing.url', 'Failed to open this link because its target is missing.'));
      } else {
        (0, _errors.onUnexpectedError)(err);
      }
    });
  };

  LinkDetector.prototype.getLinkOccurrence = function (position) {
    if (!this.editor.hasModel() || !position) {
      return null;
    }

    var decorations = this.editor.getModel().getDecorationsInRange({
      startLineNumber: position.lineNumber,
      startColumn: position.column,
      endLineNumber: position.lineNumber,
      endColumn: position.column
    }, 0, true);

    for (var _i = 0, decorations_1 = decorations; _i < decorations_1.length; _i++) {
      var decoration_1 = decorations_1[_i];
      var currentOccurrence = this.currentOccurrences[decoration_1.id];

      if (currentOccurrence) {
        return currentOccurrence;
      }
    }

    return null;
  };

  LinkDetector.prototype.isEnabled = function (mouseEvent, withKey) {
    return Boolean(mouseEvent.target.type === 6
    /* CONTENT_TEXT */
    && (mouseEvent.hasTriggerModifier || withKey && withKey.keyCodeIsTriggerKey));
  };

  LinkDetector.prototype.stop = function () {
    this.timeout.cancel();

    if (this.activeLinksList) {
      this.activeLinksList.dispose();
    }

    if (this.computePromise) {
      this.computePromise.cancel();
      this.computePromise = null;
    }
  };

  LinkDetector.prototype.dispose = function () {
    this.listenersToRemove.dispose();
    this.stop();
    this.timeout.dispose();
  };

  LinkDetector.ID = 'editor.linkDetector';
  LinkDetector.RECOMPUTE_TIME = 1000; // ms

  LinkDetector = __decorate([__param(1, _opener.IOpenerService), __param(2, _notification.INotificationService)], LinkDetector);
  return LinkDetector;
}();

var OpenLinkAction =
/** @class */
function (_super) {
  __extends(OpenLinkAction, _super);

  function OpenLinkAction() {
    return _super.call(this, {
      id: 'editor.action.openLink',
      label: nls.localize('label', "Open Link"),
      alias: 'Open Link',
      precondition: undefined
    }) || this;
  }

  OpenLinkAction.prototype.run = function (accessor, editor) {
    var linkDetector = LinkDetector.get(editor);

    if (!linkDetector) {
      return;
    }

    if (!editor.hasModel()) {
      return;
    }

    var selections = editor.getSelections();

    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {
      var sel = selections_1[_i];
      var link = linkDetector.getLinkOccurrence(sel.getEndPosition());

      if (link) {
        linkDetector.openLinkOccurrence(link, false);
      }
    }
  };

  return OpenLinkAction;
}(_editorExtensions.EditorAction);

(0, _editorExtensions.registerEditorContribution)(LinkDetector.ID, LinkDetector);
(0, _editorExtensions.registerEditorAction)(OpenLinkAction);
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var activeLinkForeground = theme.getColor(_colorRegistry.editorActiveLinkForeground);

  if (activeLinkForeground) {
    collector.addRule(".monaco-editor .detected-link-active { color: " + activeLinkForeground + " !important; }");
  }
});
},{"./links.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/links/links.css","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/htmlContent.js":"../node_modules/monaco-editor/esm/vs/base/common/htmlContent.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../gotoSymbol/link/clickLinkGesture.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/link/clickLinkGesture.js","./getLinks.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/links/getLinks.js","../../../platform/notification/common/notification.js":"../node_modules/monaco-editor/esm/vs/platform/notification/common/notification.js","../../../platform/opener/common/opener.js":"../node_modules/monaco-editor/esm/vs/platform/opener/common/opener.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/multicursor/multicursor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectionHighlighter = exports.CompatChangeAll = exports.SelectHighlightsAction = exports.MoveSelectionToPreviousFindMatchAction = exports.MoveSelectionToNextFindMatchAction = exports.AddSelectionToPreviousFindMatchAction = exports.AddSelectionToNextFindMatchAction = exports.MultiCursorSelectionControllerAction = exports.MultiCursorSelectionController = exports.MultiCursorSession = exports.MultiCursorSessionResult = exports.InsertCursorBelow = exports.InsertCursorAbove = void 0;

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _async = require("../../../base/common/async.js");

var _keyCodes = require("../../../base/common/keyCodes.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _cursorMoveCommands = require("../../common/controller/cursorMoveCommands.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _model = require("../../common/model.js");

var _textModel = require("../../common/model/textModel.js");

var _modes = require("../../common/modes.js");

var _findController = require("../find/findController.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var InsertCursorAbove =
/** @class */
function (_super) {
  __extends(InsertCursorAbove, _super);

  function InsertCursorAbove() {
    return _super.call(this, {
      id: 'editor.action.insertCursorAbove',
      label: nls.localize('mutlicursor.insertAbove', "Add Cursor Above"),
      alias: 'Add Cursor Above',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 512
        /* Alt */
        | 16
        /* UpArrow */
        ,
        linux: {
          primary: 1024
          /* Shift */
          | 512
          /* Alt */
          | 16
          /* UpArrow */
          ,
          secondary: [2048
          /* CtrlCmd */
          | 1024
          /* Shift */
          | 16
          /* UpArrow */
          ]
        },
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '3_multi',
        title: nls.localize({
          key: 'miInsertCursorAbove',
          comment: ['&& denotes a mnemonic']
        }, "&&Add Cursor Above"),
        order: 2
      }
    }) || this;
  }

  InsertCursorAbove.prototype.run = function (accessor, editor, args) {
    if (!editor.hasModel()) {
      return;
    }

    var useLogicalLine = args && args.logicalLine === true;

    var cursors = editor._getCursors();

    var context = cursors.context;

    if (context.config.readOnly) {
      return;
    }

    context.model.pushStackElement();
    cursors.setStates(args.source, 3
    /* Explicit */
    , _cursorMoveCommands.CursorMoveCommands.addCursorUp(context, cursors.getAll(), useLogicalLine));
    cursors.reveal(args.source, true, 1
    /* TopMost */
    , 0
    /* Smooth */
    );
  };

  return InsertCursorAbove;
}(_editorExtensions.EditorAction);

exports.InsertCursorAbove = InsertCursorAbove;

var InsertCursorBelow =
/** @class */
function (_super) {
  __extends(InsertCursorBelow, _super);

  function InsertCursorBelow() {
    return _super.call(this, {
      id: 'editor.action.insertCursorBelow',
      label: nls.localize('mutlicursor.insertBelow', "Add Cursor Below"),
      alias: 'Add Cursor Below',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 512
        /* Alt */
        | 18
        /* DownArrow */
        ,
        linux: {
          primary: 1024
          /* Shift */
          | 512
          /* Alt */
          | 18
          /* DownArrow */
          ,
          secondary: [2048
          /* CtrlCmd */
          | 1024
          /* Shift */
          | 18
          /* DownArrow */
          ]
        },
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '3_multi',
        title: nls.localize({
          key: 'miInsertCursorBelow',
          comment: ['&& denotes a mnemonic']
        }, "A&&dd Cursor Below"),
        order: 3
      }
    }) || this;
  }

  InsertCursorBelow.prototype.run = function (accessor, editor, args) {
    if (!editor.hasModel()) {
      return;
    }

    var useLogicalLine = args && args.logicalLine === true;

    var cursors = editor._getCursors();

    var context = cursors.context;

    if (context.config.readOnly) {
      return;
    }

    context.model.pushStackElement();
    cursors.setStates(args.source, 3
    /* Explicit */
    , _cursorMoveCommands.CursorMoveCommands.addCursorDown(context, cursors.getAll(), useLogicalLine));
    cursors.reveal(args.source, true, 2
    /* BottomMost */
    , 0
    /* Smooth */
    );
  };

  return InsertCursorBelow;
}(_editorExtensions.EditorAction);

exports.InsertCursorBelow = InsertCursorBelow;

var InsertCursorAtEndOfEachLineSelected =
/** @class */
function (_super) {
  __extends(InsertCursorAtEndOfEachLineSelected, _super);

  function InsertCursorAtEndOfEachLineSelected() {
    return _super.call(this, {
      id: 'editor.action.insertCursorAtEndOfEachLineSelected',
      label: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', "Add Cursors to Line Ends"),
      alias: 'Add Cursors to Line Ends',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 1024
        /* Shift */
        | 512
        /* Alt */
        | 39
        /* KEY_I */
        ,
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '3_multi',
        title: nls.localize({
          key: 'miInsertCursorAtEndOfEachLineSelected',
          comment: ['&& denotes a mnemonic']
        }, "Add C&&ursors to Line Ends"),
        order: 4
      }
    }) || this;
  }

  InsertCursorAtEndOfEachLineSelected.prototype.getCursorsForSelection = function (selection, model, result) {
    if (selection.isEmpty()) {
      return;
    }

    for (var i = selection.startLineNumber; i < selection.endLineNumber; i++) {
      var currentLineMaxColumn = model.getLineMaxColumn(i);
      result.push(new _selection.Selection(i, currentLineMaxColumn, i, currentLineMaxColumn));
    }

    if (selection.endColumn > 1) {
      result.push(new _selection.Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn));
    }
  };

  InsertCursorAtEndOfEachLineSelected.prototype.run = function (accessor, editor) {
    var _this = this;

    if (!editor.hasModel()) {
      return;
    }

    var model = editor.getModel();
    var selections = editor.getSelections();
    var newSelections = [];
    selections.forEach(function (sel) {
      return _this.getCursorsForSelection(sel, model, newSelections);
    });

    if (newSelections.length > 0) {
      editor.setSelections(newSelections);
    }
  };

  return InsertCursorAtEndOfEachLineSelected;
}(_editorExtensions.EditorAction);

var InsertCursorAtEndOfLineSelected =
/** @class */
function (_super) {
  __extends(InsertCursorAtEndOfLineSelected, _super);

  function InsertCursorAtEndOfLineSelected() {
    return _super.call(this, {
      id: 'editor.action.addCursorsToBottom',
      label: nls.localize('mutlicursor.addCursorsToBottom', "Add Cursors To Bottom"),
      alias: 'Add Cursors To Bottom',
      precondition: undefined
    }) || this;
  }

  InsertCursorAtEndOfLineSelected.prototype.run = function (accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var selections = editor.getSelections();
    var lineCount = editor.getModel().getLineCount();
    var newSelections = [];

    for (var i = selections[0].startLineNumber; i <= lineCount; i++) {
      newSelections.push(new _selection.Selection(i, selections[0].startColumn, i, selections[0].endColumn));
    }

    if (newSelections.length > 0) {
      editor.setSelections(newSelections);
    }
  };

  return InsertCursorAtEndOfLineSelected;
}(_editorExtensions.EditorAction);

var InsertCursorAtTopOfLineSelected =
/** @class */
function (_super) {
  __extends(InsertCursorAtTopOfLineSelected, _super);

  function InsertCursorAtTopOfLineSelected() {
    return _super.call(this, {
      id: 'editor.action.addCursorsToTop',
      label: nls.localize('mutlicursor.addCursorsToTop', "Add Cursors To Top"),
      alias: 'Add Cursors To Top',
      precondition: undefined
    }) || this;
  }

  InsertCursorAtTopOfLineSelected.prototype.run = function (accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var selections = editor.getSelections();
    var newSelections = [];

    for (var i = selections[0].startLineNumber; i >= 1; i--) {
      newSelections.push(new _selection.Selection(i, selections[0].startColumn, i, selections[0].endColumn));
    }

    if (newSelections.length > 0) {
      editor.setSelections(newSelections);
    }
  };

  return InsertCursorAtTopOfLineSelected;
}(_editorExtensions.EditorAction);

var MultiCursorSessionResult =
/** @class */
function () {
  function MultiCursorSessionResult(selections, revealRange, revealScrollType) {
    this.selections = selections;
    this.revealRange = revealRange;
    this.revealScrollType = revealScrollType;
  }

  return MultiCursorSessionResult;
}();

exports.MultiCursorSessionResult = MultiCursorSessionResult;

var MultiCursorSession =
/** @class */
function () {
  function MultiCursorSession(_editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch) {
    this._editor = _editor;
    this.findController = findController;
    this.isDisconnectedFromFindController = isDisconnectedFromFindController;
    this.searchText = searchText;
    this.wholeWord = wholeWord;
    this.matchCase = matchCase;
    this.currentMatch = currentMatch;
  }

  MultiCursorSession.create = function (editor, findController) {
    if (!editor.hasModel()) {
      return null;
    }

    var findState = findController.getState(); // Find widget owns entirely what we search for if:
    //  - focus is not in the editor (i.e. it is in the find widget)
    //  - and the search widget is visible
    //  - and the search string is non-empty

    if (!editor.hasTextFocus() && findState.isRevealed && findState.searchString.length > 0) {
      // Find widget owns what is searched for
      return new MultiCursorSession(editor, findController, false, findState.searchString, findState.wholeWord, findState.matchCase, null);
    } // Otherwise, the selection gives the search text, and the find widget gives the search settings
    // The exception is the find state disassociation case: when beginning with a single, collapsed selection


    var isDisconnectedFromFindController = false;
    var wholeWord;
    var matchCase;
    var selections = editor.getSelections();

    if (selections.length === 1 && selections[0].isEmpty()) {
      isDisconnectedFromFindController = true;
      wholeWord = true;
      matchCase = true;
    } else {
      wholeWord = findState.wholeWord;
      matchCase = findState.matchCase;
    } // Selection owns what is searched for


    var s = editor.getSelection();
    var searchText;
    var currentMatch = null;

    if (s.isEmpty()) {
      // selection is empty => expand to current word
      var word = editor.getModel().getWordAtPosition(s.getStartPosition());

      if (!word) {
        return null;
      }

      searchText = word.word;
      currentMatch = new _selection.Selection(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);
    } else {
      searchText = editor.getModel().getValueInRange(s).replace(/\r\n/g, '\n');
    }

    return new MultiCursorSession(editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch);
  };

  MultiCursorSession.prototype.addSelectionToNextFindMatch = function () {
    if (!this._editor.hasModel()) {
      return null;
    }

    var nextMatch = this._getNextMatch();

    if (!nextMatch) {
      return null;
    }

    var allSelections = this._editor.getSelections();

    return new MultiCursorSessionResult(allSelections.concat(nextMatch), nextMatch, 0
    /* Smooth */
    );
  };

  MultiCursorSession.prototype.moveSelectionToNextFindMatch = function () {
    if (!this._editor.hasModel()) {
      return null;
    }

    var nextMatch = this._getNextMatch();

    if (!nextMatch) {
      return null;
    }

    var allSelections = this._editor.getSelections();

    return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(nextMatch), nextMatch, 0
    /* Smooth */
    );
  };

  MultiCursorSession.prototype._getNextMatch = function () {
    if (!this._editor.hasModel()) {
      return null;
    }

    if (this.currentMatch) {
      var result = this.currentMatch;
      this.currentMatch = null;
      return result;
    }

    this.findController.highlightFindOptions();

    var allSelections = this._editor.getSelections();

    var lastAddedSelection = allSelections[allSelections.length - 1];

    var nextMatch = this._editor.getModel().findNextMatch(this.searchText, lastAddedSelection.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(92
    /* wordSeparators */
    ) : null, false);

    if (!nextMatch) {
      return null;
    }

    return new _selection.Selection(nextMatch.range.startLineNumber, nextMatch.range.startColumn, nextMatch.range.endLineNumber, nextMatch.range.endColumn);
  };

  MultiCursorSession.prototype.addSelectionToPreviousFindMatch = function () {
    if (!this._editor.hasModel()) {
      return null;
    }

    var previousMatch = this._getPreviousMatch();

    if (!previousMatch) {
      return null;
    }

    var allSelections = this._editor.getSelections();

    return new MultiCursorSessionResult(allSelections.concat(previousMatch), previousMatch, 0
    /* Smooth */
    );
  };

  MultiCursorSession.prototype.moveSelectionToPreviousFindMatch = function () {
    if (!this._editor.hasModel()) {
      return null;
    }

    var previousMatch = this._getPreviousMatch();

    if (!previousMatch) {
      return null;
    }

    var allSelections = this._editor.getSelections();

    return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(previousMatch), previousMatch, 0
    /* Smooth */
    );
  };

  MultiCursorSession.prototype._getPreviousMatch = function () {
    if (!this._editor.hasModel()) {
      return null;
    }

    if (this.currentMatch) {
      var result = this.currentMatch;
      this.currentMatch = null;
      return result;
    }

    this.findController.highlightFindOptions();

    var allSelections = this._editor.getSelections();

    var lastAddedSelection = allSelections[allSelections.length - 1];

    var previousMatch = this._editor.getModel().findPreviousMatch(this.searchText, lastAddedSelection.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(92
    /* wordSeparators */
    ) : null, false);

    if (!previousMatch) {
      return null;
    }

    return new _selection.Selection(previousMatch.range.startLineNumber, previousMatch.range.startColumn, previousMatch.range.endLineNumber, previousMatch.range.endColumn);
  };

  MultiCursorSession.prototype.selectAll = function () {
    if (!this._editor.hasModel()) {
      return [];
    }

    this.findController.highlightFindOptions();
    return this._editor.getModel().findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getOption(92
    /* wordSeparators */
    ) : null, false, 1073741824
    /* MAX_SAFE_SMALL_INTEGER */
    );
  };

  return MultiCursorSession;
}();

exports.MultiCursorSession = MultiCursorSession;

var MultiCursorSelectionController =
/** @class */
function (_super) {
  __extends(MultiCursorSelectionController, _super);

  function MultiCursorSelectionController(editor) {
    var _this = _super.call(this) || this;

    _this._sessionDispose = _this._register(new _lifecycle.DisposableStore());
    _this._editor = editor;
    _this._ignoreSelectionChange = false;
    _this._session = null;
    return _this;
  }

  MultiCursorSelectionController.get = function (editor) {
    return editor.getContribution(MultiCursorSelectionController.ID);
  };

  MultiCursorSelectionController.prototype.dispose = function () {
    this._endSession();

    _super.prototype.dispose.call(this);
  };

  MultiCursorSelectionController.prototype._beginSessionIfNeeded = function (findController) {
    var _this = this;

    if (!this._session) {
      // Create a new session
      var session = MultiCursorSession.create(this._editor, findController);

      if (!session) {
        return;
      }

      this._session = session;
      var newState = {
        searchString: this._session.searchText
      };

      if (this._session.isDisconnectedFromFindController) {
        newState.wholeWordOverride = 1
        /* True */
        ;
        newState.matchCaseOverride = 1
        /* True */
        ;
        newState.isRegexOverride = 2
        /* False */
        ;
      }

      findController.getState().change(newState, false);

      this._sessionDispose.add(this._editor.onDidChangeCursorSelection(function (e) {
        if (_this._ignoreSelectionChange) {
          return;
        }

        _this._endSession();
      }));

      this._sessionDispose.add(this._editor.onDidBlurEditorText(function () {
        _this._endSession();
      }));

      this._sessionDispose.add(findController.getState().onFindReplaceStateChange(function (e) {
        if (e.matchCase || e.wholeWord) {
          _this._endSession();
        }
      }));
    }
  };

  MultiCursorSelectionController.prototype._endSession = function () {
    this._sessionDispose.clear();

    if (this._session && this._session.isDisconnectedFromFindController) {
      var newState = {
        wholeWordOverride: 0
        /* NotSet */
        ,
        matchCaseOverride: 0
        /* NotSet */
        ,
        isRegexOverride: 0
        /* NotSet */

      };

      this._session.findController.getState().change(newState, false);
    }

    this._session = null;
  };

  MultiCursorSelectionController.prototype._setSelections = function (selections) {
    this._ignoreSelectionChange = true;

    this._editor.setSelections(selections);

    this._ignoreSelectionChange = false;
  };

  MultiCursorSelectionController.prototype._expandEmptyToWord = function (model, selection) {
    if (!selection.isEmpty()) {
      return selection;
    }

    var word = model.getWordAtPosition(selection.getStartPosition());

    if (!word) {
      return selection;
    }

    return new _selection.Selection(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);
  };

  MultiCursorSelectionController.prototype._applySessionResult = function (result) {
    if (!result) {
      return;
    }

    this._setSelections(result.selections);

    if (result.revealRange) {
      this._editor.revealRangeInCenterIfOutsideViewport(result.revealRange, result.revealScrollType);
    }
  };

  MultiCursorSelectionController.prototype.getSession = function (findController) {
    return this._session;
  };

  MultiCursorSelectionController.prototype.addSelectionToNextFindMatch = function (findController) {
    if (!this._editor.hasModel()) {
      return;
    }

    if (!this._session) {
      // If there are multiple cursors, handle the case where they do not all select the same text.
      var allSelections = this._editor.getSelections();

      if (allSelections.length > 1) {
        var findState = findController.getState();
        var matchCase = findState.matchCase;
        var selectionsContainSameText = modelRangesContainSameText(this._editor.getModel(), allSelections, matchCase);

        if (!selectionsContainSameText) {
          var model = this._editor.getModel();

          var resultingSelections = [];

          for (var i = 0, len = allSelections.length; i < len; i++) {
            resultingSelections[i] = this._expandEmptyToWord(model, allSelections[i]);
          }

          this._editor.setSelections(resultingSelections);

          return;
        }
      }
    }

    this._beginSessionIfNeeded(findController);

    if (this._session) {
      this._applySessionResult(this._session.addSelectionToNextFindMatch());
    }
  };

  MultiCursorSelectionController.prototype.addSelectionToPreviousFindMatch = function (findController) {
    this._beginSessionIfNeeded(findController);

    if (this._session) {
      this._applySessionResult(this._session.addSelectionToPreviousFindMatch());
    }
  };

  MultiCursorSelectionController.prototype.moveSelectionToNextFindMatch = function (findController) {
    this._beginSessionIfNeeded(findController);

    if (this._session) {
      this._applySessionResult(this._session.moveSelectionToNextFindMatch());
    }
  };

  MultiCursorSelectionController.prototype.moveSelectionToPreviousFindMatch = function (findController) {
    this._beginSessionIfNeeded(findController);

    if (this._session) {
      this._applySessionResult(this._session.moveSelectionToPreviousFindMatch());
    }
  };

  MultiCursorSelectionController.prototype.selectAll = function (findController) {
    if (!this._editor.hasModel()) {
      return;
    }

    var matches = null;
    var findState = findController.getState(); // Special case: find widget owns entirely what we search for if:
    // - focus is not in the editor (i.e. it is in the find widget)
    // - and the search widget is visible
    // - and the search string is non-empty
    // - and we're searching for a regex

    if (findState.isRevealed && findState.searchString.length > 0 && findState.isRegex) {
      matches = this._editor.getModel().findMatches(findState.searchString, true, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getOption(92
      /* wordSeparators */
      ) : null, false, 1073741824
      /* MAX_SAFE_SMALL_INTEGER */
      );
    } else {
      this._beginSessionIfNeeded(findController);

      if (!this._session) {
        return;
      }

      matches = this._session.selectAll();
    }

    if (findState.searchScope) {
      var state = findState.searchScope;
      var inSelection = [];

      for (var i = 0; i < matches.length; i++) {
        if (matches[i].range.endLineNumber <= state.endLineNumber && matches[i].range.startLineNumber >= state.startLineNumber) {
          inSelection.push(matches[i]);
        }
      }

      matches = inSelection;
    }

    if (matches.length > 0) {
      var editorSelection = this._editor.getSelection(); // Have the primary cursor remain the one where the action was invoked


      for (var i = 0, len = matches.length; i < len; i++) {
        var match = matches[i];
        var intersection = match.range.intersectRanges(editorSelection);

        if (intersection) {
          // bingo!
          matches[i] = matches[0];
          matches[0] = match;
          break;
        }
      }

      this._setSelections(matches.map(function (m) {
        return new _selection.Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn);
      }));
    }
  };

  MultiCursorSelectionController.ID = 'editor.contrib.multiCursorController';
  return MultiCursorSelectionController;
}(_lifecycle.Disposable);

exports.MultiCursorSelectionController = MultiCursorSelectionController;

var MultiCursorSelectionControllerAction =
/** @class */
function (_super) {
  __extends(MultiCursorSelectionControllerAction, _super);

  function MultiCursorSelectionControllerAction() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MultiCursorSelectionControllerAction.prototype.run = function (accessor, editor) {
    var multiCursorController = MultiCursorSelectionController.get(editor);

    if (!multiCursorController) {
      return;
    }

    var findController = _findController.CommonFindController.get(editor);

    if (!findController) {
      return;
    }

    this._run(multiCursorController, findController);
  };

  return MultiCursorSelectionControllerAction;
}(_editorExtensions.EditorAction);

exports.MultiCursorSelectionControllerAction = MultiCursorSelectionControllerAction;

var AddSelectionToNextFindMatchAction =
/** @class */
function (_super) {
  __extends(AddSelectionToNextFindMatchAction, _super);

  function AddSelectionToNextFindMatchAction() {
    return _super.call(this, {
      id: 'editor.action.addSelectionToNextFindMatch',
      label: nls.localize('addSelectionToNextFindMatch', "Add Selection To Next Find Match"),
      alias: 'Add Selection To Next Find Match',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: 2048
        /* CtrlCmd */
        | 34
        /* KEY_D */
        ,
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '3_multi',
        title: nls.localize({
          key: 'miAddSelectionToNextFindMatch',
          comment: ['&& denotes a mnemonic']
        }, "Add &&Next Occurrence"),
        order: 5
      }
    }) || this;
  }

  AddSelectionToNextFindMatchAction.prototype._run = function (multiCursorController, findController) {
    multiCursorController.addSelectionToNextFindMatch(findController);
  };

  return AddSelectionToNextFindMatchAction;
}(MultiCursorSelectionControllerAction);

exports.AddSelectionToNextFindMatchAction = AddSelectionToNextFindMatchAction;

var AddSelectionToPreviousFindMatchAction =
/** @class */
function (_super) {
  __extends(AddSelectionToPreviousFindMatchAction, _super);

  function AddSelectionToPreviousFindMatchAction() {
    return _super.call(this, {
      id: 'editor.action.addSelectionToPreviousFindMatch',
      label: nls.localize('addSelectionToPreviousFindMatch', "Add Selection To Previous Find Match"),
      alias: 'Add Selection To Previous Find Match',
      precondition: undefined,
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '3_multi',
        title: nls.localize({
          key: 'miAddSelectionToPreviousFindMatch',
          comment: ['&& denotes a mnemonic']
        }, "Add P&&revious Occurrence"),
        order: 6
      }
    }) || this;
  }

  AddSelectionToPreviousFindMatchAction.prototype._run = function (multiCursorController, findController) {
    multiCursorController.addSelectionToPreviousFindMatch(findController);
  };

  return AddSelectionToPreviousFindMatchAction;
}(MultiCursorSelectionControllerAction);

exports.AddSelectionToPreviousFindMatchAction = AddSelectionToPreviousFindMatchAction;

var MoveSelectionToNextFindMatchAction =
/** @class */
function (_super) {
  __extends(MoveSelectionToNextFindMatchAction, _super);

  function MoveSelectionToNextFindMatchAction() {
    return _super.call(this, {
      id: 'editor.action.moveSelectionToNextFindMatch',
      label: nls.localize('moveSelectionToNextFindMatch', "Move Last Selection To Next Find Match"),
      alias: 'Move Last Selection To Next Find Match',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: (0, _keyCodes.KeyChord)(2048
        /* CtrlCmd */
        | 41
        /* KEY_K */
        , 2048
        /* CtrlCmd */
        | 34
        /* KEY_D */
        ),
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  MoveSelectionToNextFindMatchAction.prototype._run = function (multiCursorController, findController) {
    multiCursorController.moveSelectionToNextFindMatch(findController);
  };

  return MoveSelectionToNextFindMatchAction;
}(MultiCursorSelectionControllerAction);

exports.MoveSelectionToNextFindMatchAction = MoveSelectionToNextFindMatchAction;

var MoveSelectionToPreviousFindMatchAction =
/** @class */
function (_super) {
  __extends(MoveSelectionToPreviousFindMatchAction, _super);

  function MoveSelectionToPreviousFindMatchAction() {
    return _super.call(this, {
      id: 'editor.action.moveSelectionToPreviousFindMatch',
      label: nls.localize('moveSelectionToPreviousFindMatch', "Move Last Selection To Previous Find Match"),
      alias: 'Move Last Selection To Previous Find Match',
      precondition: undefined
    }) || this;
  }

  MoveSelectionToPreviousFindMatchAction.prototype._run = function (multiCursorController, findController) {
    multiCursorController.moveSelectionToPreviousFindMatch(findController);
  };

  return MoveSelectionToPreviousFindMatchAction;
}(MultiCursorSelectionControllerAction);

exports.MoveSelectionToPreviousFindMatchAction = MoveSelectionToPreviousFindMatchAction;

var SelectHighlightsAction =
/** @class */
function (_super) {
  __extends(SelectHighlightsAction, _super);

  function SelectHighlightsAction() {
    return _super.call(this, {
      id: 'editor.action.selectHighlights',
      label: nls.localize('selectAllOccurrencesOfFindMatch', "Select All Occurrences of Find Match"),
      alias: 'Select All Occurrences of Find Match',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 42
        /* KEY_L */
        ,
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '3_multi',
        title: nls.localize({
          key: 'miSelectHighlights',
          comment: ['&& denotes a mnemonic']
        }, "Select All &&Occurrences"),
        order: 7
      }
    }) || this;
  }

  SelectHighlightsAction.prototype._run = function (multiCursorController, findController) {
    multiCursorController.selectAll(findController);
  };

  return SelectHighlightsAction;
}(MultiCursorSelectionControllerAction);

exports.SelectHighlightsAction = SelectHighlightsAction;

var CompatChangeAll =
/** @class */
function (_super) {
  __extends(CompatChangeAll, _super);

  function CompatChangeAll() {
    return _super.call(this, {
      id: 'editor.action.changeAll',
      label: nls.localize('changeAll.label', "Change All Occurrences"),
      alias: 'Change All Occurrences',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, _editorContextKeys.EditorContextKeys.editorTextFocus),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 60
        /* F2 */
        ,
        weight: 100
        /* EditorContrib */

      },
      contextMenuOpts: {
        group: '1_modification',
        order: 1.2
      }
    }) || this;
  }

  CompatChangeAll.prototype._run = function (multiCursorController, findController) {
    multiCursorController.selectAll(findController);
  };

  return CompatChangeAll;
}(MultiCursorSelectionControllerAction);

exports.CompatChangeAll = CompatChangeAll;

var SelectionHighlighterState =
/** @class */
function () {
  function SelectionHighlighterState(searchText, matchCase, wordSeparators) {
    this.searchText = searchText;
    this.matchCase = matchCase;
    this.wordSeparators = wordSeparators;
  }
  /**
   * Everything equals except for `lastWordUnderCursor`
   */


  SelectionHighlighterState.softEquals = function (a, b) {
    if (!a && !b) {
      return true;
    }

    if (!a || !b) {
      return false;
    }

    return a.searchText === b.searchText && a.matchCase === b.matchCase && a.wordSeparators === b.wordSeparators;
  };

  return SelectionHighlighterState;
}();

var SelectionHighlighter =
/** @class */
function (_super) {
  __extends(SelectionHighlighter, _super);

  function SelectionHighlighter(editor) {
    var _this = _super.call(this) || this;

    _this.editor = editor;
    _this._isEnabled = editor.getOption(78
    /* selectionHighlight */
    );
    _this.decorations = [];
    _this.updateSoon = _this._register(new _async.RunOnceScheduler(function () {
      return _this._update();
    }, 300));
    _this.state = null;

    _this._register(editor.onDidChangeConfiguration(function (e) {
      _this._isEnabled = editor.getOption(78
      /* selectionHighlight */
      );
    }));

    _this._register(editor.onDidChangeCursorSelection(function (e) {
      if (!_this._isEnabled) {
        // Early exit if nothing needs to be done!
        // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)
        return;
      }

      if (e.selection.isEmpty()) {
        if (e.reason === 3
        /* Explicit */
        ) {
            if (_this.state) {
              // no longer valid
              _this._setState(null);
            }

            _this.updateSoon.schedule();
          } else {
          _this._setState(null);
        }
      } else {
        _this._update();
      }
    }));

    _this._register(editor.onDidChangeModel(function (e) {
      _this._setState(null);
    }));

    _this._register(_findController.CommonFindController.get(editor).getState().onFindReplaceStateChange(function (e) {
      _this._update();
    }));

    return _this;
  }

  SelectionHighlighter.prototype._update = function () {
    this._setState(SelectionHighlighter._createState(this._isEnabled, this.editor));
  };

  SelectionHighlighter._createState = function (isEnabled, editor) {
    if (!isEnabled) {
      return null;
    }

    if (!editor.hasModel()) {
      return null;
    }

    var s = editor.getSelection();

    if (s.startLineNumber !== s.endLineNumber) {
      // multiline forbidden for perf reasons
      return null;
    }

    var multiCursorController = MultiCursorSelectionController.get(editor);

    if (!multiCursorController) {
      return null;
    }

    var findController = _findController.CommonFindController.get(editor);

    if (!findController) {
      return null;
    }

    var r = multiCursorController.getSession(findController);

    if (!r) {
      var allSelections = editor.getSelections();

      if (allSelections.length > 1) {
        var findState_1 = findController.getState();
        var matchCase = findState_1.matchCase;
        var selectionsContainSameText = modelRangesContainSameText(editor.getModel(), allSelections, matchCase);

        if (!selectionsContainSameText) {
          return null;
        }
      }

      r = MultiCursorSession.create(editor, findController);
    }

    if (!r) {
      return null;
    }

    if (r.currentMatch) {
      // This is an empty selection
      // Do not interfere with semantic word highlighting in the no selection case
      return null;
    }

    if (/^[ \t]+$/.test(r.searchText)) {
      // whitespace only selection
      return null;
    }

    if (r.searchText.length > 200) {
      // very long selection
      return null;
    } // TODO: better handling of this case


    var findState = findController.getState();
    var caseSensitive = findState.matchCase; // Return early if the find widget shows the exact same matches

    if (findState.isRevealed) {
      var findStateSearchString = findState.searchString;

      if (!caseSensitive) {
        findStateSearchString = findStateSearchString.toLowerCase();
      }

      var mySearchString = r.searchText;

      if (!caseSensitive) {
        mySearchString = mySearchString.toLowerCase();
      }

      if (findStateSearchString === mySearchString && r.matchCase === findState.matchCase && r.wholeWord === findState.wholeWord && !findState.isRegex) {
        return null;
      }
    }

    return new SelectionHighlighterState(r.searchText, r.matchCase, r.wholeWord ? editor.getOption(92
    /* wordSeparators */
    ) : null);
  };

  SelectionHighlighter.prototype._setState = function (state) {
    if (SelectionHighlighterState.softEquals(this.state, state)) {
      this.state = state;
      return;
    }

    this.state = state;

    if (!this.state) {
      this.decorations = this.editor.deltaDecorations(this.decorations, []);
      return;
    }

    if (!this.editor.hasModel()) {
      return;
    }

    var model = this.editor.getModel();

    if (model.isTooLargeForTokenization()) {
      // the file is too large, so searching word under cursor in the whole document takes is blocking the UI.
      return;
    }

    var hasFindOccurrences = _modes.DocumentHighlightProviderRegistry.has(model);

    var allMatches = model.findMatches(this.state.searchText, true, false, this.state.matchCase, this.state.wordSeparators, false).map(function (m) {
      return m.range;
    });
    allMatches.sort(_range.Range.compareRangesUsingStarts);
    var selections = this.editor.getSelections();
    selections.sort(_range.Range.compareRangesUsingStarts); // do not overlap with selection (issue #64 and #512)

    var matches = [];

    for (var i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;) {
      var match = allMatches[i];

      if (j >= lenJ) {
        // finished all editor selections
        matches.push(match);
        i++;
      } else {
        var cmp = _range.Range.compareRangesUsingStarts(match, selections[j]);

        if (cmp < 0) {
          // match is before sel
          if (selections[j].isEmpty() || !_range.Range.areIntersecting(match, selections[j])) {
            matches.push(match);
          }

          i++;
        } else if (cmp > 0) {
          // sel is before match
          j++;
        } else {
          // sel is equal to match
          i++;
          j++;
        }
      }
    }

    var decorations = matches.map(function (r) {
      return {
        range: r,
        // Show in overviewRuler only if model has no semantic highlighting
        options: hasFindOccurrences ? SelectionHighlighter._SELECTION_HIGHLIGHT : SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW
      };
    });
    this.decorations = this.editor.deltaDecorations(this.decorations, decorations);
  };

  SelectionHighlighter.prototype.dispose = function () {
    this._setState(null);

    _super.prototype.dispose.call(this);
  };

  SelectionHighlighter.ID = 'editor.contrib.selectionHighlighter';
  SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    className: 'selectionHighlight',
    overviewRuler: {
      color: (0, _themeService.themeColorFromId)(_colorRegistry.overviewRulerSelectionHighlightForeground),
      position: _model.OverviewRulerLane.Center
    }
  });
  SelectionHighlighter._SELECTION_HIGHLIGHT = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    className: 'selectionHighlight'
  });
  return SelectionHighlighter;
}(_lifecycle.Disposable);

exports.SelectionHighlighter = SelectionHighlighter;

function modelRangesContainSameText(model, ranges, matchCase) {
  var selectedText = getValueInRange(model, ranges[0], !matchCase);

  for (var i = 1, len = ranges.length; i < len; i++) {
    var range = ranges[i];

    if (range.isEmpty()) {
      return false;
    }

    var thisSelectedText = getValueInRange(model, range, !matchCase);

    if (selectedText !== thisSelectedText) {
      return false;
    }
  }

  return true;
}

function getValueInRange(model, range, toLowerCase) {
  var text = model.getValueInRange(range);
  return toLowerCase ? text.toLowerCase() : text;
}

(0, _editorExtensions.registerEditorContribution)(MultiCursorSelectionController.ID, MultiCursorSelectionController);
(0, _editorExtensions.registerEditorContribution)(SelectionHighlighter.ID, SelectionHighlighter);
(0, _editorExtensions.registerEditorAction)(InsertCursorAbove);
(0, _editorExtensions.registerEditorAction)(InsertCursorBelow);
(0, _editorExtensions.registerEditorAction)(InsertCursorAtEndOfEachLineSelected);
(0, _editorExtensions.registerEditorAction)(AddSelectionToNextFindMatchAction);
(0, _editorExtensions.registerEditorAction)(AddSelectionToPreviousFindMatchAction);
(0, _editorExtensions.registerEditorAction)(MoveSelectionToNextFindMatchAction);
(0, _editorExtensions.registerEditorAction)(MoveSelectionToPreviousFindMatchAction);
(0, _editorExtensions.registerEditorAction)(SelectHighlightsAction);
(0, _editorExtensions.registerEditorAction)(CompatChangeAll);
(0, _editorExtensions.registerEditorAction)(InsertCursorAtEndOfLineSelected);
(0, _editorExtensions.registerEditorAction)(InsertCursorAtTopOfLineSelected);
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/keyCodes.js":"../node_modules/monaco-editor/esm/vs/base/common/keyCodes.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/controller/cursorMoveCommands.js":"../node_modules/monaco-editor/esm/vs/editor/common/controller/cursorMoveCommands.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../common/model.js":"../node_modules/monaco-editor/esm/vs/editor/common/model.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../find/findController.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findController.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/parameterHints.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/provideSignatureHelp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.provideSignatureHelp = provideSignatureHelp;
exports.Context = void 0;

var _async = require("../../../base/common/async.js");

var _errors = require("../../../base/common/errors.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var modes = _interopRequireWildcard(require("../../common/modes.js"));

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _cancellation = require("../../../base/common/cancellation.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var Context = {
  Visible: new _contextkey.RawContextKey('parameterHintsVisible', false),
  MultipleSignatures: new _contextkey.RawContextKey('parameterHintsMultipleSignatures', false)
};
exports.Context = Context;

function provideSignatureHelp(model, position, context, token) {
  var supports = modes.SignatureHelpProviderRegistry.ordered(model);
  return (0, _async.first)(supports.map(function (support) {
    return function () {
      return Promise.resolve(support.provideSignatureHelp(model, position, token, context)).catch(function (e) {
        return (0, _errors.onUnexpectedExternalError)(e);
      });
    };
  }));
}

(0, _editorExtensions.registerDefaultLanguageCommand)('_executeSignatureHelpProvider', function (model, position, args) {
  return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , provideSignatureHelp(model, position, {
            triggerKind: modes.SignatureHelpTriggerKind.Invoke,
            isRetrigger: false,
            triggerCharacter: args['triggerCharacter']
          }, _cancellation.CancellationToken.None)];

        case 1:
          result = _a.sent();

          if (!result) {
            return [2
            /*return*/
            , undefined];
          }

          setTimeout(function () {
            return result.dispose();
          }, 0);
          return [2
          /*return*/
          , result.value];
      }
    });
  });
});
},{"../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/parameterHintsModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParameterHintsModel = void 0;

var _async = require("../../../base/common/async.js");

var _errors = require("../../../base/common/errors.js");

var _event = require("../../../base/common/event.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _characterClassifier = require("../../common/core/characterClassifier.js");

var modes = _interopRequireWildcard(require("../../common/modes.js"));

var _provideSignatureHelp = require("./provideSignatureHelp.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var ParameterHintState;

(function (ParameterHintState) {
  ParameterHintState.Default = {
    type: 0
    /* Default */

  };

  var Pending =
  /** @class */
  function () {
    function Pending(request) {
      this.request = request;
      this.type = 2
      /* Pending */
      ;
    }

    return Pending;
  }();

  ParameterHintState.Pending = Pending;

  var Active =
  /** @class */
  function () {
    function Active(hints) {
      this.hints = hints;
      this.type = 1
      /* Active */
      ;
    }

    return Active;
  }();

  ParameterHintState.Active = Active;
})(ParameterHintState || (ParameterHintState = {}));

var ParameterHintsModel =
/** @class */
function (_super) {
  __extends(ParameterHintsModel, _super);

  function ParameterHintsModel(editor, delay) {
    if (delay === void 0) {
      delay = ParameterHintsModel.DEFAULT_DELAY;
    }

    var _this = _super.call(this) || this;

    _this._onChangedHints = _this._register(new _event.Emitter());
    _this.onChangedHints = _this._onChangedHints.event;
    _this.triggerOnType = false;
    _this._state = ParameterHintState.Default;
    _this._pendingTriggers = [];
    _this._lastSignatureHelpResult = _this._register(new _lifecycle.MutableDisposable());
    _this.triggerChars = new _characterClassifier.CharacterSet();
    _this.retriggerChars = new _characterClassifier.CharacterSet();
    _this.triggerId = 0;
    _this.editor = editor;
    _this.throttledDelayer = new _async.Delayer(delay);

    _this._register(_this.editor.onDidChangeConfiguration(function () {
      return _this.onEditorConfigurationChange();
    }));

    _this._register(_this.editor.onDidChangeModel(function (e) {
      return _this.onModelChanged();
    }));

    _this._register(_this.editor.onDidChangeModelLanguage(function (_) {
      return _this.onModelChanged();
    }));

    _this._register(_this.editor.onDidChangeCursorSelection(function (e) {
      return _this.onCursorChange(e);
    }));

    _this._register(_this.editor.onDidChangeModelContent(function (e) {
      return _this.onModelContentChange();
    }));

    _this._register(modes.SignatureHelpProviderRegistry.onDidChange(_this.onModelChanged, _this));

    _this._register(_this.editor.onDidType(function (text) {
      return _this.onDidType(text);
    }));

    _this.onEditorConfigurationChange();

    _this.onModelChanged();

    return _this;
  }

  Object.defineProperty(ParameterHintsModel.prototype, "state", {
    get: function () {
      return this._state;
    },
    set: function (value) {
      if (this._state.type === 2
      /* Pending */
      ) {
          this._state.request.cancel();
        }

      this._state = value;
    },
    enumerable: true,
    configurable: true
  });

  ParameterHintsModel.prototype.cancel = function (silent) {
    if (silent === void 0) {
      silent = false;
    }

    this.state = ParameterHintState.Default;
    this.throttledDelayer.cancel();

    if (!silent) {
      this._onChangedHints.fire(undefined);
    }
  };

  ParameterHintsModel.prototype.trigger = function (context, delay) {
    var _this = this;

    var model = this.editor.getModel();

    if (!model || !modes.SignatureHelpProviderRegistry.has(model)) {
      return;
    }

    var triggerId = ++this.triggerId;

    this._pendingTriggers.push(context);

    this.throttledDelayer.trigger(function () {
      return _this.doTrigger(triggerId);
    }, delay).catch(_errors.onUnexpectedError);
  };

  ParameterHintsModel.prototype.next = function () {
    if (this.state.type !== 1
    /* Active */
    ) {
        return;
      }

    var length = this.state.hints.signatures.length;
    var activeSignature = this.state.hints.activeSignature;
    var last = activeSignature % length === length - 1;
    var cycle = this.editor.getOption(62
    /* parameterHints */
    ).cycle; // If there is only one signature, or we're on last signature of list

    if ((length < 2 || last) && !cycle) {
      this.cancel();
      return;
    }

    this.updateActiveSignature(last && cycle ? 0 : activeSignature + 1);
  };

  ParameterHintsModel.prototype.previous = function () {
    if (this.state.type !== 1
    /* Active */
    ) {
        return;
      }

    var length = this.state.hints.signatures.length;
    var activeSignature = this.state.hints.activeSignature;
    var first = activeSignature === 0;
    var cycle = this.editor.getOption(62
    /* parameterHints */
    ).cycle; // If there is only one signature, or we're on first signature of list

    if ((length < 2 || first) && !cycle) {
      this.cancel();
      return;
    }

    this.updateActiveSignature(first && cycle ? length - 1 : activeSignature - 1);
  };

  ParameterHintsModel.prototype.updateActiveSignature = function (activeSignature) {
    if (this.state.type !== 1
    /* Active */
    ) {
        return;
      }

    this.state = new ParameterHintState.Active(__assign(__assign({}, this.state.hints), {
      activeSignature: activeSignature
    }));

    this._onChangedHints.fire(this.state.hints);
  };

  ParameterHintsModel.prototype.doTrigger = function (triggerId) {
    var _a, _b;

    return __awaiter(this, void 0, void 0, function () {
      var isRetrigger, activeSignatureHelp, context, triggerContext, model, position, result, error_1;
      return __generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            isRetrigger = this.state.type === 1
            /* Active */
            || this.state.type === 2
            /* Pending */
            ;
            activeSignatureHelp = this.state.type === 1
            /* Active */
            ? this.state.hints : undefined;
            this.cancel(true);

            if (this._pendingTriggers.length === 0) {
              return [2
              /*return*/
              , false];
            }

            context = this._pendingTriggers.reduce(mergeTriggerContexts);
            this._pendingTriggers = [];
            triggerContext = {
              triggerKind: context.triggerKind,
              triggerCharacter: context.triggerCharacter,
              isRetrigger: isRetrigger,
              activeSignatureHelp: activeSignatureHelp
            };

            if (!this.editor.hasModel()) {
              return [2
              /*return*/
              , false];
            }

            model = this.editor.getModel();
            position = this.editor.getPosition();
            this.state = new ParameterHintState.Pending((0, _async.createCancelablePromise)(function (token) {
              return (0, _provideSignatureHelp.provideSignatureHelp)(model, position, triggerContext, token);
            }));
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , this.state.request];

          case 2:
            result = _c.sent(); // Check that we are still resolving the correct signature help

            if (triggerId !== this.triggerId) {
              (_a = result) === null || _a === void 0 ? void 0 : _a.dispose();
              return [2
              /*return*/
              , false];
            }

            if (!result || !result.value.signatures || result.value.signatures.length === 0) {
              (_b = result) === null || _b === void 0 ? void 0 : _b.dispose();

              this._lastSignatureHelpResult.clear();

              this.cancel();
              return [2
              /*return*/
              , false];
            } else {
              this.state = new ParameterHintState.Active(result.value);
              this._lastSignatureHelpResult.value = result;

              this._onChangedHints.fire(this.state.hints);

              return [2
              /*return*/
              , true];
            }

            return [3
            /*break*/
            , 4];

          case 3:
            error_1 = _c.sent();

            if (triggerId === this.triggerId) {
              this.state = ParameterHintState.Default;
            }

            (0, _errors.onUnexpectedError)(error_1);
            return [2
            /*return*/
            , false];

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  Object.defineProperty(ParameterHintsModel.prototype, "isTriggered", {
    get: function () {
      return this.state.type === 1
      /* Active */
      || this.state.type === 2
      /* Pending */
      || this.throttledDelayer.isTriggered();
    },
    enumerable: true,
    configurable: true
  });

  ParameterHintsModel.prototype.onModelChanged = function () {
    this.cancel(); // Update trigger characters

    this.triggerChars = new _characterClassifier.CharacterSet();
    this.retriggerChars = new _characterClassifier.CharacterSet();
    var model = this.editor.getModel();

    if (!model) {
      return;
    }

    for (var _i = 0, _a = modes.SignatureHelpProviderRegistry.ordered(model); _i < _a.length; _i++) {
      var support = _a[_i];

      for (var _b = 0, _c = support.signatureHelpTriggerCharacters || []; _b < _c.length; _b++) {
        var ch = _c[_b];
        this.triggerChars.add(ch.charCodeAt(0)); // All trigger characters are also considered retrigger characters

        this.retriggerChars.add(ch.charCodeAt(0));
      }

      for (var _d = 0, _e = support.signatureHelpRetriggerCharacters || []; _d < _e.length; _d++) {
        var ch = _e[_d];
        this.retriggerChars.add(ch.charCodeAt(0));
      }
    }
  };

  ParameterHintsModel.prototype.onDidType = function (text) {
    if (!this.triggerOnType) {
      return;
    }

    var lastCharIndex = text.length - 1;
    var triggerCharCode = text.charCodeAt(lastCharIndex);

    if (this.triggerChars.has(triggerCharCode) || this.isTriggered && this.retriggerChars.has(triggerCharCode)) {
      this.trigger({
        triggerKind: modes.SignatureHelpTriggerKind.TriggerCharacter,
        triggerCharacter: text.charAt(lastCharIndex)
      });
    }
  };

  ParameterHintsModel.prototype.onCursorChange = function (e) {
    if (e.source === 'mouse') {
      this.cancel();
    } else if (this.isTriggered) {
      this.trigger({
        triggerKind: modes.SignatureHelpTriggerKind.ContentChange
      });
    }
  };

  ParameterHintsModel.prototype.onModelContentChange = function () {
    if (this.isTriggered) {
      this.trigger({
        triggerKind: modes.SignatureHelpTriggerKind.ContentChange
      });
    }
  };

  ParameterHintsModel.prototype.onEditorConfigurationChange = function () {
    this.triggerOnType = this.editor.getOption(62
    /* parameterHints */
    ).enabled;

    if (!this.triggerOnType) {
      this.cancel();
    }
  };

  ParameterHintsModel.prototype.dispose = function () {
    this.cancel(true);

    _super.prototype.dispose.call(this);
  };

  ParameterHintsModel.DEFAULT_DELAY = 120; // ms

  return ParameterHintsModel;
}(_lifecycle.Disposable);

exports.ParameterHintsModel = ParameterHintsModel;

function mergeTriggerContexts(previous, current) {
  switch (current.triggerKind) {
    case modes.SignatureHelpTriggerKind.Invoke:
      // Invoke overrides previous triggers.
      return current;

    case modes.SignatureHelpTriggerKind.ContentChange:
      // Ignore content changes triggers
      return previous;

    case modes.SignatureHelpTriggerKind.TriggerCharacter:
    default:
      return current;
  }
}
},{"../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../common/core/characterClassifier.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","./provideSignatureHelp.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/provideSignatureHelp.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/parameterHintsWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParameterHintsWidget = void 0;

var dom = _interopRequireWildcard(require("../../../base/browser/dom.js"));

var _event = require("../../../base/browser/event.js");

var aria = _interopRequireWildcard(require("../../../base/browser/ui/aria/aria.js"));

var _scrollableElement = require("../../../base/browser/ui/scrollbar/scrollableElement.js");

var _event2 = require("../../../base/common/event.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

require("./parameterHints.css");

var _modeService = require("../../common/services/modeService.js");

var _markdownRenderer = require("../markdown/markdownRenderer.js");

var _provideSignatureHelp = require("./provideSignatureHelp.js");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _opener = require("../../../platform/opener/common/opener.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

var _parameterHintsModel = require("./parameterHintsModel.js");

var _strings = require("../../../base/common/strings.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var $ = dom.$;

var ParameterHintsWidget =
/** @class */
function (_super) {
  __extends(ParameterHintsWidget, _super);

  function ParameterHintsWidget(editor, contextKeyService, openerService, modeService) {
    var _this = _super.call(this) || this;

    _this.editor = editor;
    _this.renderDisposeables = _this._register(new _lifecycle.DisposableStore());
    _this.visible = false;
    _this.announcedLabel = null; // Editor.IContentWidget.allowEditorOverflow

    _this.allowEditorOverflow = true;
    _this.markdownRenderer = _this._register(new _markdownRenderer.MarkdownRenderer(editor, modeService, openerService));
    _this.model = _this._register(new _parameterHintsModel.ParameterHintsModel(editor));
    _this.keyVisible = _provideSignatureHelp.Context.Visible.bindTo(contextKeyService);
    _this.keyMultipleSignatures = _provideSignatureHelp.Context.MultipleSignatures.bindTo(contextKeyService);

    _this._register(_this.model.onChangedHints(function (newParameterHints) {
      if (newParameterHints) {
        _this.show();

        _this.render(newParameterHints);
      } else {
        _this.hide();
      }
    }));

    return _this;
  }

  ParameterHintsWidget.prototype.createParamaterHintDOMNodes = function () {
    var _this = this;

    var element = $('.editor-widget.parameter-hints-widget');
    var wrapper = dom.append(element, $('.wrapper'));
    wrapper.tabIndex = -1;
    var controls = dom.append(wrapper, $('.controls'));
    var previous = dom.append(controls, $('.button.previous'));
    var overloads = dom.append(controls, $('.overloads'));
    var next = dom.append(controls, $('.button.next'));
    var onPreviousClick = (0, _event.stop)((0, _event.domEvent)(previous, 'click'));

    this._register(onPreviousClick(this.previous, this));

    var onNextClick = (0, _event.stop)((0, _event.domEvent)(next, 'click'));

    this._register(onNextClick(this.next, this));

    var body = $('.body');
    var scrollbar = new _scrollableElement.DomScrollableElement(body, {});

    this._register(scrollbar);

    wrapper.appendChild(scrollbar.getDomNode());
    var signature = dom.append(body, $('.signature'));
    var docs = dom.append(body, $('.docs'));
    element.style.userSelect = 'text';
    this.domNodes = {
      element: element,
      signature: signature,
      overloads: overloads,
      docs: docs,
      scrollbar: scrollbar
    };
    this.editor.addContentWidget(this);
    this.hide();

    this._register(this.editor.onDidChangeCursorSelection(function (e) {
      if (_this.visible) {
        _this.editor.layoutContentWidget(_this);
      }
    }));

    var updateFont = function () {
      if (!_this.domNodes) {
        return;
      }

      var fontInfo = _this.editor.getOption(32
      /* fontInfo */
      );

      _this.domNodes.element.style.fontSize = fontInfo.fontSize + "px";
    };

    updateFont();

    this._register(_event2.Event.chain(this.editor.onDidChangeConfiguration.bind(this.editor)).filter(function (e) {
      return e.hasChanged(32
      /* fontInfo */
      );
    }).on(updateFont, null));

    this._register(this.editor.onDidLayoutChange(function (e) {
      return _this.updateMaxHeight();
    }));

    this.updateMaxHeight();
  };

  ParameterHintsWidget.prototype.show = function () {
    var _this = this;

    if (this.visible) {
      return;
    }

    if (!this.domNodes) {
      this.createParamaterHintDOMNodes();
    }

    this.keyVisible.set(true);
    this.visible = true;
    setTimeout(function () {
      if (_this.domNodes) {
        dom.addClass(_this.domNodes.element, 'visible');
      }
    }, 100);
    this.editor.layoutContentWidget(this);
  };

  ParameterHintsWidget.prototype.hide = function () {
    if (!this.visible) {
      return;
    }

    this.keyVisible.reset();
    this.visible = false;
    this.announcedLabel = null;

    if (this.domNodes) {
      dom.removeClass(this.domNodes.element, 'visible');
    }

    this.editor.layoutContentWidget(this);
  };

  ParameterHintsWidget.prototype.getPosition = function () {
    if (this.visible) {
      return {
        position: this.editor.getPosition(),
        preference: [1
        /* ABOVE */
        , 2
        /* BELOW */
        ]
      };
    }

    return null;
  };

  ParameterHintsWidget.prototype.render = function (hints) {
    if (!this.domNodes) {
      return;
    }

    var multiple = hints.signatures.length > 1;
    dom.toggleClass(this.domNodes.element, 'multiple', multiple);
    this.keyMultipleSignatures.set(multiple);
    this.domNodes.signature.innerHTML = '';
    this.domNodes.docs.innerHTML = '';
    var signature = hints.signatures[hints.activeSignature];

    if (!signature) {
      return;
    }

    var code = dom.append(this.domNodes.signature, $('.code'));
    var hasParameters = signature.parameters.length > 0;
    var fontInfo = this.editor.getOption(32
    /* fontInfo */
    );
    code.style.fontSize = fontInfo.fontSize + "px";
    code.style.fontFamily = fontInfo.fontFamily;

    if (!hasParameters) {
      var label = dom.append(code, $('span'));
      label.textContent = signature.label;
    } else {
      this.renderParameters(code, signature, hints.activeParameter);
    }

    this.renderDisposeables.clear();
    var activeParameter = signature.parameters[hints.activeParameter];

    if (activeParameter && activeParameter.documentation) {
      var documentation = $('span.documentation');

      if (typeof activeParameter.documentation === 'string') {
        documentation.textContent = activeParameter.documentation;
      } else {
        var renderedContents = this.markdownRenderer.render(activeParameter.documentation);
        dom.addClass(renderedContents.element, 'markdown-docs');
        this.renderDisposeables.add(renderedContents);
        documentation.appendChild(renderedContents.element);
      }

      dom.append(this.domNodes.docs, $('p', {}, documentation));
    }

    if (signature.documentation === undefined) {
      /** no op */
    } else if (typeof signature.documentation === 'string') {
      dom.append(this.domNodes.docs, $('p', {}, signature.documentation));
    } else {
      var renderedContents = this.markdownRenderer.render(signature.documentation);
      dom.addClass(renderedContents.element, 'markdown-docs');
      this.renderDisposeables.add(renderedContents);
      dom.append(this.domNodes.docs, renderedContents.element);
    }

    var hasDocs = this.hasDocs(signature, activeParameter);
    dom.toggleClass(this.domNodes.signature, 'has-docs', hasDocs);
    dom.toggleClass(this.domNodes.docs, 'empty', !hasDocs);
    this.domNodes.overloads.textContent = (0, _strings.pad)(hints.activeSignature + 1, hints.signatures.length.toString().length) + '/' + hints.signatures.length;

    if (activeParameter) {
      var labelToAnnounce = this.getParameterLabel(signature, hints.activeParameter); // Select method gets called on every user type while parameter hints are visible.
      // We do not want to spam the user with same announcements, so we only announce if the current parameter changed.

      if (this.announcedLabel !== labelToAnnounce) {
        aria.alert(nls.localize('hint', "{0}, hint", labelToAnnounce));
        this.announcedLabel = labelToAnnounce;
      }
    }

    this.editor.layoutContentWidget(this);
    this.domNodes.scrollbar.scanDomNode();
  };

  ParameterHintsWidget.prototype.hasDocs = function (signature, activeParameter) {
    if (activeParameter && typeof activeParameter.documentation === 'string' && activeParameter.documentation.length > 0) {
      return true;
    }

    if (activeParameter && typeof activeParameter.documentation === 'object' && activeParameter.documentation.value.length > 0) {
      return true;
    }

    if (typeof signature.documentation === 'string' && signature.documentation.length > 0) {
      return true;
    }

    if (typeof signature.documentation === 'object' && signature.documentation.value.length > 0) {
      return true;
    }

    return false;
  };

  ParameterHintsWidget.prototype.renderParameters = function (parent, signature, currentParameter) {
    var _a = this.getParameterLabelOffsets(signature, currentParameter),
        start = _a[0],
        end = _a[1];

    var beforeSpan = document.createElement('span');
    beforeSpan.textContent = signature.label.substring(0, start);
    var paramSpan = document.createElement('span');
    paramSpan.textContent = signature.label.substring(start, end);
    paramSpan.className = 'parameter active';
    var afterSpan = document.createElement('span');
    afterSpan.textContent = signature.label.substring(end);
    dom.append(parent, beforeSpan, paramSpan, afterSpan);
  };

  ParameterHintsWidget.prototype.getParameterLabel = function (signature, paramIdx) {
    var param = signature.parameters[paramIdx];

    if (typeof param.label === 'string') {
      return param.label;
    } else {
      return signature.label.substring(param.label[0], param.label[1]);
    }
  };

  ParameterHintsWidget.prototype.getParameterLabelOffsets = function (signature, paramIdx) {
    var param = signature.parameters[paramIdx];

    if (!param) {
      return [0, 0];
    } else if (Array.isArray(param.label)) {
      return param.label;
    } else {
      var idx = signature.label.lastIndexOf(param.label);
      return idx >= 0 ? [idx, idx + param.label.length] : [0, 0];
    }
  };

  ParameterHintsWidget.prototype.next = function () {
    this.editor.focus();
    this.model.next();
  };

  ParameterHintsWidget.prototype.previous = function () {
    this.editor.focus();
    this.model.previous();
  };

  ParameterHintsWidget.prototype.cancel = function () {
    this.model.cancel();
  };

  ParameterHintsWidget.prototype.getDomNode = function () {
    if (!this.domNodes) {
      this.createParamaterHintDOMNodes();
    }

    return this.domNodes.element;
  };

  ParameterHintsWidget.prototype.getId = function () {
    return ParameterHintsWidget.ID;
  };

  ParameterHintsWidget.prototype.trigger = function (context) {
    this.model.trigger(context, 0);
  };

  ParameterHintsWidget.prototype.updateMaxHeight = function () {
    if (!this.domNodes) {
      return;
    }

    var height = Math.max(this.editor.getLayoutInfo().height / 4, 250);
    var maxHeight = height + "px";
    this.domNodes.element.style.maxHeight = maxHeight;
    var wrapper = this.domNodes.element.getElementsByClassName('wrapper');

    if (wrapper.length) {
      wrapper[0].style.maxHeight = maxHeight;
    }
  };

  ParameterHintsWidget.ID = 'editor.widget.parameterHintsWidget';
  ParameterHintsWidget = __decorate([__param(1, _contextkey.IContextKeyService), __param(2, _opener.IOpenerService), __param(3, _modeService.IModeService)], ParameterHintsWidget);
  return ParameterHintsWidget;
}(_lifecycle.Disposable);

exports.ParameterHintsWidget = ParameterHintsWidget;
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var border = theme.getColor(_colorRegistry.editorHoverBorder);

  if (border) {
    var borderWidth = theme.type === _themeService.HIGH_CONTRAST ? 2 : 1;
    collector.addRule(".monaco-editor .parameter-hints-widget { border: " + borderWidth + "px solid " + border + "; }");
    collector.addRule(".monaco-editor .parameter-hints-widget.multiple .body { border-left: 1px solid " + border.transparent(0.5) + "; }");
    collector.addRule(".monaco-editor .parameter-hints-widget .signature.has-docs { border-bottom: 1px solid " + border.transparent(0.5) + "; }");
  }

  var background = theme.getColor(_colorRegistry.editorHoverBackground);

  if (background) {
    collector.addRule(".monaco-editor .parameter-hints-widget { background-color: " + background + "; }");
  }

  var link = theme.getColor(_colorRegistry.textLinkForeground);

  if (link) {
    collector.addRule(".monaco-editor .parameter-hints-widget a { color: " + link + "; }");
  }

  var foreground = theme.getColor(_colorRegistry.editorHoverForeground);

  if (foreground) {
    collector.addRule(".monaco-editor .parameter-hints-widget { color: " + foreground + "; }");
  }

  var codeBackground = theme.getColor(_colorRegistry.textCodeBlockBackground);

  if (codeBackground) {
    collector.addRule(".monaco-editor .parameter-hints-widget code { background-color: " + codeBackground + "; }");
  }
});
},{"../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/browser/event.js":"../node_modules/monaco-editor/esm/vs/base/browser/event.js","../../../base/browser/ui/aria/aria.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria.js","../../../base/browser/ui/scrollbar/scrollableElement.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/scrollbar/scrollableElement.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","./parameterHints.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/parameterHints.css","../../common/services/modeService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modeService.js","../markdown/markdownRenderer.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/markdown/markdownRenderer.js","./provideSignatureHelp.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/provideSignatureHelp.js","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/opener/common/opener.js":"../node_modules/monaco-editor/esm/vs/platform/opener/common/opener.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","./parameterHintsModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/parameterHintsModel.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/parameterHints.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TriggerParameterHintsAction = void 0;

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _lifecycle = require("../../../base/common/lifecycle.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _parameterHintsWidget = require("./parameterHintsWidget.js");

var _provideSignatureHelp = require("./provideSignatureHelp.js");

var modes = _interopRequireWildcard(require("../../common/modes.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var ParameterHintsController =
/** @class */
function (_super) {
  __extends(ParameterHintsController, _super);

  function ParameterHintsController(editor, instantiationService) {
    var _this = _super.call(this) || this;

    _this.editor = editor;
    _this.widget = _this._register(instantiationService.createInstance(_parameterHintsWidget.ParameterHintsWidget, _this.editor));
    return _this;
  }

  ParameterHintsController.get = function (editor) {
    return editor.getContribution(ParameterHintsController.ID);
  };

  ParameterHintsController.prototype.cancel = function () {
    this.widget.cancel();
  };

  ParameterHintsController.prototype.previous = function () {
    this.widget.previous();
  };

  ParameterHintsController.prototype.next = function () {
    this.widget.next();
  };

  ParameterHintsController.prototype.trigger = function (context) {
    this.widget.trigger(context);
  };

  ParameterHintsController.ID = 'editor.controller.parameterHints';
  ParameterHintsController = __decorate([__param(1, _instantiation.IInstantiationService)], ParameterHintsController);
  return ParameterHintsController;
}(_lifecycle.Disposable);

var TriggerParameterHintsAction =
/** @class */
function (_super) {
  __extends(TriggerParameterHintsAction, _super);

  function TriggerParameterHintsAction() {
    return _super.call(this, {
      id: 'editor.action.triggerParameterHints',
      label: nls.localize('parameterHints.trigger.label', "Trigger Parameter Hints"),
      alias: 'Trigger Parameter Hints',
      precondition: _editorContextKeys.EditorContextKeys.hasSignatureHelpProvider,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 10
        /* Space */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  TriggerParameterHintsAction.prototype.run = function (accessor, editor) {
    var controller = ParameterHintsController.get(editor);

    if (controller) {
      controller.trigger({
        triggerKind: modes.SignatureHelpTriggerKind.Invoke
      });
    }
  };

  return TriggerParameterHintsAction;
}(_editorExtensions.EditorAction);

exports.TriggerParameterHintsAction = TriggerParameterHintsAction;
(0, _editorExtensions.registerEditorContribution)(ParameterHintsController.ID, ParameterHintsController);
(0, _editorExtensions.registerEditorAction)(TriggerParameterHintsAction);
var weight = 100
/* EditorContrib */
+ 75;

var ParameterHintsCommand = _editorExtensions.EditorCommand.bindToContribution(ParameterHintsController.get);

(0, _editorExtensions.registerEditorCommand)(new ParameterHintsCommand({
  id: 'closeParameterHints',
  precondition: _provideSignatureHelp.Context.Visible,
  handler: function (x) {
    return x.cancel();
  },
  kbOpts: {
    weight: weight,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: 9
    /* Escape */
    ,
    secondary: [1024
    /* Shift */
    | 9
    /* Escape */
    ]
  }
}));
(0, _editorExtensions.registerEditorCommand)(new ParameterHintsCommand({
  id: 'showPrevParameterHint',
  precondition: _contextkey.ContextKeyExpr.and(_provideSignatureHelp.Context.Visible, _provideSignatureHelp.Context.MultipleSignatures),
  handler: function (x) {
    return x.previous();
  },
  kbOpts: {
    weight: weight,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: 16
    /* UpArrow */
    ,
    secondary: [512
    /* Alt */
    | 16
    /* UpArrow */
    ],
    mac: {
      primary: 16
      /* UpArrow */
      ,
      secondary: [512
      /* Alt */
      | 16
      /* UpArrow */
      , 256
      /* WinCtrl */
      | 46
      /* KEY_P */
      ]
    }
  }
}));
(0, _editorExtensions.registerEditorCommand)(new ParameterHintsCommand({
  id: 'showNextParameterHint',
  precondition: _contextkey.ContextKeyExpr.and(_provideSignatureHelp.Context.Visible, _provideSignatureHelp.Context.MultipleSignatures),
  handler: function (x) {
    return x.next();
  },
  kbOpts: {
    weight: weight,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: 18
    /* DownArrow */
    ,
    secondary: [512
    /* Alt */
    | 18
    /* DownArrow */
    ],
    mac: {
      primary: 18
      /* DownArrow */
      ,
      secondary: [512
      /* Alt */
      | 18
      /* DownArrow */
      , 256
      /* WinCtrl */
      | 44
      /* KEY_N */
      ]
    }
  }
}));
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","./parameterHintsWidget.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/parameterHintsWidget.js","./provideSignatureHelp.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/provideSignatureHelp.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/rename/renameInputField.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/rename/renameInputField.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RenameInputField = exports.CONTEXT_RENAME_INPUT_VISIBLE = void 0;

require("./renameInputField.css");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _position = require("../../common/core/position.js");

var _range = require("../../common/core/range.js");

var _nls = require("../../../nls.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var CONTEXT_RENAME_INPUT_VISIBLE = new _contextkey.RawContextKey('renameInputVisible', false);
exports.CONTEXT_RENAME_INPUT_VISIBLE = CONTEXT_RENAME_INPUT_VISIBLE;

var RenameInputField =
/** @class */
function () {
  function RenameInputField(editor, themeService, contextKeyService) {
    var _this = this;

    this.themeService = themeService;
    this._disposables = new _lifecycle.DisposableStore(); // Editor.IContentWidget.allowEditorOverflow

    this.allowEditorOverflow = true;
    this._currentAcceptInput = null;
    this._currentCancelInput = null;
    this._visibleContextKey = CONTEXT_RENAME_INPUT_VISIBLE.bindTo(contextKeyService);
    this._editor = editor;

    this._editor.addContentWidget(this);

    this._disposables.add(editor.onDidChangeConfiguration(function (e) {
      if (e.hasChanged(32
      /* fontInfo */
      )) {
        _this.updateFont();
      }
    }));

    this._disposables.add(themeService.onThemeChange(function (theme) {
      return _this.onThemeChange(theme);
    }));
  }

  RenameInputField.prototype.onThemeChange = function (theme) {
    this.updateStyles(theme);
  };

  RenameInputField.prototype.dispose = function () {
    this._disposables.dispose();

    this._editor.removeContentWidget(this);
  };

  RenameInputField.prototype.getId = function () {
    return '__renameInputWidget';
  };

  RenameInputField.prototype.getDomNode = function () {
    if (!this._domNode) {
      this._inputField = document.createElement('input');
      this._inputField.className = 'rename-input';
      this._inputField.type = 'text';

      this._inputField.setAttribute('aria-label', (0, _nls.localize)('renameAriaLabel', "Rename input. Type new name and press Enter to commit."));

      this._domNode = document.createElement('div');
      this._domNode.style.height = this._editor.getOption(47
      /* lineHeight */
      ) + "px";
      this._domNode.className = 'monaco-editor rename-box';

      this._domNode.appendChild(this._inputField);

      this.updateFont();
      this.updateStyles(this.themeService.getTheme());
    }

    return this._domNode;
  };

  RenameInputField.prototype.updateStyles = function (theme) {
    if (!this._inputField) {
      return;
    }

    var background = theme.getColor(_colorRegistry.inputBackground);
    var foreground = theme.getColor(_colorRegistry.inputForeground);
    var widgetShadowColor = theme.getColor(_colorRegistry.widgetShadow);
    var border = theme.getColor(_colorRegistry.inputBorder);
    this._inputField.style.backgroundColor = background ? background.toString() : '';
    this._inputField.style.color = foreground ? foreground.toString() : null;
    this._inputField.style.borderWidth = border ? '1px' : '0px';
    this._inputField.style.borderStyle = border ? 'solid' : 'none';
    this._inputField.style.borderColor = border ? border.toString() : 'none';
    this._domNode.style.boxShadow = widgetShadowColor ? " 0 2px 8px " + widgetShadowColor : '';
  };

  RenameInputField.prototype.updateFont = function () {
    if (!this._inputField) {
      return;
    }

    var fontInfo = this._editor.getOption(32
    /* fontInfo */
    );

    this._inputField.style.fontFamily = fontInfo.fontFamily;
    this._inputField.style.fontWeight = fontInfo.fontWeight;
    this._inputField.style.fontSize = fontInfo.fontSize + "px";
  };

  RenameInputField.prototype.getPosition = function () {
    return this._visible ? {
      position: this._position,
      preference: [2
      /* BELOW */
      , 1
      /* ABOVE */
      ]
    } : null;
  };

  RenameInputField.prototype.acceptInput = function () {
    if (this._currentAcceptInput) {
      this._currentAcceptInput();
    }
  };

  RenameInputField.prototype.cancelInput = function (focusEditor) {
    if (this._currentCancelInput) {
      this._currentCancelInput(focusEditor);
    }
  };

  RenameInputField.prototype.getInput = function (where, value, selectionStart, selectionEnd) {
    var _this = this;

    this._position = new _position.Position(where.startLineNumber, where.startColumn);
    this._inputField.value = value;

    this._inputField.setAttribute('selectionStart', selectionStart.toString());

    this._inputField.setAttribute('selectionEnd', selectionEnd.toString());

    this._inputField.size = Math.max((where.endColumn - where.startColumn) * 1.1, 20);
    var disposeOnDone = new _lifecycle.DisposableStore();

    var always = function () {
      disposeOnDone.dispose();

      _this._hide();
    };

    return new Promise(function (resolve) {
      _this._currentCancelInput = function (focusEditor) {
        _this._currentAcceptInput = null;
        _this._currentCancelInput = null;
        resolve(focusEditor);
        return true;
      };

      _this._currentAcceptInput = function () {
        if (_this._inputField.value.trim().length === 0 || _this._inputField.value === value) {
          // empty or whitespace only or not changed
          _this.cancelInput(true);

          return;
        }

        _this._currentAcceptInput = null;
        _this._currentCancelInput = null;
        resolve(_this._inputField.value);
      };

      var onCursorChanged = function () {
        var editorPosition = _this._editor.getPosition();

        if (!editorPosition || !_range.Range.containsPosition(where, editorPosition)) {
          _this.cancelInput(true);
        }
      };

      disposeOnDone.add(_this._editor.onDidChangeCursorSelection(onCursorChanged));
      disposeOnDone.add(_this._editor.onDidBlurEditorWidget(function () {
        return _this.cancelInput(false);
      }));

      _this._show();
    }).then(function (newValue) {
      always();
      return newValue;
    }, function (err) {
      always();
      return Promise.reject(err);
    });
  };

  RenameInputField.prototype._show = function () {
    var _this = this;

    this._editor.revealLineInCenterIfOutsideViewport(this._position.lineNumber, 0
    /* Smooth */
    );

    this._visible = true;

    this._visibleContextKey.set(true);

    this._editor.layoutContentWidget(this);

    setTimeout(function () {
      _this._inputField.focus();

      _this._inputField.setSelectionRange(parseInt(_this._inputField.getAttribute('selectionStart')), parseInt(_this._inputField.getAttribute('selectionEnd')));
    }, 100);
  };

  RenameInputField.prototype._hide = function () {
    this._visible = false;

    this._visibleContextKey.reset();

    this._editor.layoutContentWidget(this);
  };

  return RenameInputField;
}();

exports.RenameInputField = RenameInputField;
},{"./renameInputField.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/rename/renameInputField.css","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/rename/rename.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rename = rename;
exports.RenameAction = void 0;

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _errors = require("../../../base/common/errors.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _progress = require("../../../platform/progress/common/progress.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _renameInputField = require("./renameInputField.js");

var _themeService2 = require("../../../platform/theme/common/themeService.js");

var _modes = require("../../common/modes.js");

var _position = require("../../common/core/position.js");

var _aria = require("../../../base/browser/ui/aria/aria.js");

var _range = require("../../common/core/range.js");

var _messageController = require("../message/messageController.js");

var _editorState = require("../../browser/core/editorState.js");

var _notification = require("../../../platform/notification/common/notification.js");

var _bulkEditService2 = require("../../browser/services/bulkEditService.js");

var _uri = require("../../../base/common/uri.js");

var _codeEditorService = require("../../browser/services/codeEditorService.js");

var _cancellation = require("../../../base/common/cancellation.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _async = require("../../../base/common/async.js");

var _types = require("../../../base/common/types.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var RenameSkeleton =
/** @class */
function () {
  function RenameSkeleton(model, position) {
    this.model = model;
    this.position = position;
    this._providers = _modes.RenameProviderRegistry.ordered(model);
  }

  RenameSkeleton.prototype.hasProvider = function () {
    return this._providers.length > 0;
  };

  RenameSkeleton.prototype.resolveRenameLocation = function (token) {
    return __awaiter(this, void 0, void 0, function () {
      var firstProvider, res, _a, word;

      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            firstProvider = this._providers[0];

            if (!firstProvider) {
              return [2
              /*return*/
              , undefined];
            }

            if (!firstProvider.resolveRenameLocation) return [3
            /*break*/
            , 2];
            _a = _types.withNullAsUndefined;
            return [4
            /*yield*/
            , firstProvider.resolveRenameLocation(this.model, this.position, token)];

          case 1:
            res = _a.apply(void 0, [_b.sent()]);
            _b.label = 2;

          case 2:
            if (!res) {
              word = this.model.getWordAtPosition(this.position);

              if (word) {
                return [2
                /*return*/
                , {
                  range: new _range.Range(this.position.lineNumber, word.startColumn, this.position.lineNumber, word.endColumn),
                  text: word.word
                }];
              }
            }

            return [2
            /*return*/
            , res];
        }
      });
    });
  };

  RenameSkeleton.prototype.provideRenameEdits = function (newName, i, rejects, token) {
    return __awaiter(this, void 0, void 0, function () {
      var provider, result;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            provider = this._providers[i];

            if (!provider) {
              return [2
              /*return*/
              , {
                edits: [],
                rejectReason: rejects.join('\n')
              }];
            }

            return [4
            /*yield*/
            , provider.provideRenameEdits(this.model, this.position, newName, token)];

          case 1:
            result = _a.sent();

            if (!result) {
              return [2
              /*return*/
              , this.provideRenameEdits(newName, i + 1, rejects.concat(nls.localize('no result', "No result.")), token)];
            } else if (result.rejectReason) {
              return [2
              /*return*/
              , this.provideRenameEdits(newName, i + 1, rejects.concat(result.rejectReason), token)];
            }

            return [2
            /*return*/
            , result];
        }
      });
    });
  };

  return RenameSkeleton;
}();

function rename(model, position, newName) {
  return __awaiter(this, void 0, void 0, function () {
    return __generator(this, function (_a) {
      return [2
      /*return*/
      , new RenameSkeleton(model, position).provideRenameEdits(newName, 0, [], _cancellation.CancellationToken.None)];
    });
  });
} // ---  register actions and commands


var RenameController =
/** @class */
function () {
  function RenameController(editor, _notificationService, _bulkEditService, _progressService, _contextKeyService, _themeService) {
    var _this = this;

    this.editor = editor;
    this._notificationService = _notificationService;
    this._bulkEditService = _bulkEditService;
    this._progressService = _progressService;
    this._contextKeyService = _contextKeyService;
    this._themeService = _themeService;
    this._dispoableStore = new _lifecycle.DisposableStore();
    this._cts = new _cancellation.CancellationTokenSource();
    this._renameInputField = new _async.IdleValue(function () {
      return _this._dispoableStore.add(new _renameInputField.RenameInputField(_this.editor, _this._themeService, _this._contextKeyService));
    });
  }

  RenameController.get = function (editor) {
    return editor.getContribution(RenameController.ID);
  };

  RenameController.prototype.dispose = function () {
    this._dispoableStore.dispose();

    this._cts.dispose(true);
  };

  RenameController.prototype.run = function () {
    return __awaiter(this, void 0, void 0, function () {
      var position, skeleton, loc, resolveLocationOperation, e_1, selection, selectionStart, selectionEnd, newNameOrFocusFlag, renameOperation;

      var _this = this;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this._cts.dispose(true);

            if (!this.editor.hasModel()) {
              return [2
              /*return*/
              , undefined];
            }

            position = this.editor.getPosition();
            skeleton = new RenameSkeleton(this.editor.getModel(), position);

            if (!skeleton.hasProvider()) {
              return [2
              /*return*/
              , undefined];
            }

            this._cts = new _editorState.EditorStateCancellationTokenSource(this.editor, 4
            /* Position */
            | 1
            /* Value */
            );
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            resolveLocationOperation = skeleton.resolveRenameLocation(this._cts.token);

            this._progressService.showWhile(resolveLocationOperation, 250);

            return [4
            /*yield*/
            , resolveLocationOperation];

          case 2:
            loc = _a.sent();
            return [3
            /*break*/
            , 4];

          case 3:
            e_1 = _a.sent();

            _messageController.MessageController.get(this.editor).showMessage(e_1 || nls.localize('resolveRenameLocationFailed', "An unknown error occurred while resolving rename location"), position);

            return [2
            /*return*/
            , undefined];

          case 4:
            if (!loc) {
              return [2
              /*return*/
              , undefined];
            }

            if (loc.rejectReason) {
              _messageController.MessageController.get(this.editor).showMessage(loc.rejectReason, position);

              return [2
              /*return*/
              , undefined];
            }

            if (this._cts.token.isCancellationRequested) {
              return [2
              /*return*/
              , undefined];
            }

            selection = this.editor.getSelection();
            selectionStart = 0;
            selectionEnd = loc.text.length;

            if (!_range.Range.isEmpty(selection) && !_range.Range.spansMultipleLines(selection) && _range.Range.containsRange(loc.range, selection)) {
              selectionStart = Math.max(0, selection.startColumn - loc.range.startColumn);
              selectionEnd = Math.min(loc.range.endColumn, selection.endColumn) - loc.range.startColumn;
            }

            return [4
            /*yield*/
            , this._renameInputField.getValue().getInput(loc.range, loc.text, selectionStart, selectionEnd)];

          case 5:
            newNameOrFocusFlag = _a.sent();

            if (typeof newNameOrFocusFlag === 'boolean') {
              if (newNameOrFocusFlag) {
                this.editor.focus();
              }

              return [2
              /*return*/
              , undefined];
            }

            this.editor.focus();
            renameOperation = (0, _async.raceCancellation)(skeleton.provideRenameEdits(newNameOrFocusFlag, 0, [], this._cts.token), this._cts.token).then(function (renameResult) {
              return __awaiter(_this, void 0, void 0, function () {
                var editResult;
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      if (!renameResult || !this.editor.hasModel()) {
                        return [2
                        /*return*/
                        ];
                      }

                      if (renameResult.rejectReason) {
                        this._notificationService.info(renameResult.rejectReason);

                        return [2
                        /*return*/
                        ];
                      }

                      return [4
                      /*yield*/
                      , this._bulkEditService.apply(renameResult, {
                        editor: this.editor
                      })];

                    case 1:
                      editResult = _a.sent(); // alert

                      if (editResult.ariaSummary) {
                        (0, _aria.alert)(nls.localize('aria', "Successfully renamed '{0}' to '{1}'. Summary: {2}", loc.text, newNameOrFocusFlag, editResult.ariaSummary));
                      }

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            }, function (err) {
              _this._notificationService.error(nls.localize('rename.failed', "Rename failed to execute."));

              return Promise.reject(err);
            });

            this._progressService.showWhile(renameOperation, 250);

            return [2
            /*return*/
            , renameOperation];
        }
      });
    });
  };

  RenameController.prototype.acceptRenameInput = function () {
    this._renameInputField.getValue().acceptInput();
  };

  RenameController.prototype.cancelRenameInput = function () {
    this._renameInputField.getValue().cancelInput(true);
  };

  RenameController.ID = 'editor.contrib.renameController';
  RenameController = __decorate([__param(1, _notification.INotificationService), __param(2, _bulkEditService2.IBulkEditService), __param(3, _progress.IEditorProgressService), __param(4, _contextkey.IContextKeyService), __param(5, _themeService2.IThemeService)], RenameController);
  return RenameController;
}(); // ---- action implementation


var RenameAction =
/** @class */
function (_super) {
  __extends(RenameAction, _super);

  function RenameAction() {
    return _super.call(this, {
      id: 'editor.action.rename',
      label: nls.localize('rename.label', "Rename Symbol"),
      alias: 'Rename Symbol',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, _editorContextKeys.EditorContextKeys.hasRenameProvider),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 60
        /* F2 */
        ,
        weight: 100
        /* EditorContrib */

      },
      contextMenuOpts: {
        group: '1_modification',
        order: 1.1
      }
    }) || this;
  }

  RenameAction.prototype.runCommand = function (accessor, args) {
    var _this = this;

    var editorService = accessor.get(_codeEditorService.ICodeEditorService);

    var _a = Array.isArray(args) && args || [undefined, undefined],
        uri = _a[0],
        pos = _a[1];

    if (_uri.URI.isUri(uri) && _position.Position.isIPosition(pos)) {
      return editorService.openCodeEditor({
        resource: uri
      }, editorService.getActiveCodeEditor()).then(function (editor) {
        if (!editor) {
          return;
        }

        editor.setPosition(pos);
        editor.invokeWithinContext(function (accessor) {
          _this.reportTelemetry(accessor, editor);

          return _this.run(accessor, editor);
        });
      }, _errors.onUnexpectedError);
    }

    return _super.prototype.runCommand.call(this, accessor, args);
  };

  RenameAction.prototype.run = function (accessor, editor) {
    var controller = RenameController.get(editor);

    if (controller) {
      return controller.run();
    }

    return Promise.resolve();
  };

  return RenameAction;
}(_editorExtensions.EditorAction);

exports.RenameAction = RenameAction;
(0, _editorExtensions.registerEditorContribution)(RenameController.ID, RenameController);
(0, _editorExtensions.registerEditorAction)(RenameAction);

var RenameCommand = _editorExtensions.EditorCommand.bindToContribution(RenameController.get);

(0, _editorExtensions.registerEditorCommand)(new RenameCommand({
  id: 'acceptRenameInput',
  precondition: _renameInputField.CONTEXT_RENAME_INPUT_VISIBLE,
  handler: function (x) {
    return x.acceptRenameInput();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 99,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: 3
    /* Enter */

  }
}));
(0, _editorExtensions.registerEditorCommand)(new RenameCommand({
  id: 'cancelRenameInput',
  precondition: _renameInputField.CONTEXT_RENAME_INPUT_VISIBLE,
  handler: function (x) {
    return x.cancelRenameInput();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 99,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: 9
    /* Escape */
    ,
    secondary: [1024
    /* Shift */
    | 9
    /* Escape */
    ]
  }
})); // ---- api bridge command

(0, _editorExtensions.registerDefaultLanguageCommand)('_executeDocumentRenameProvider', function (model, position, args) {
  var newName = args.newName;

  if (typeof newName !== 'string') {
    throw (0, _errors.illegalArgument)('newName');
  }

  return rename(model, position, newName);
});
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/progress/common/progress.js":"../node_modules/monaco-editor/esm/vs/platform/progress/common/progress.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","./renameInputField.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/rename/renameInputField.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../../base/browser/ui/aria/aria.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../message/messageController.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/message/messageController.js","../../browser/core/editorState.js":"../node_modules/monaco-editor/esm/vs/editor/browser/core/editorState.js","../../../platform/notification/common/notification.js":"../node_modules/monaco-editor/esm/vs/platform/notification/common/notification.js","../../browser/services/bulkEditService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/bulkEditService.js","../../../base/common/uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js","../../browser/services/codeEditorService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/types.js":"../node_modules/monaco-editor/esm/vs/base/common/types.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/smartSelect/wordSelections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WordSelectionRangeProvider = void 0;

var _range = require("../../common/core/range.js");

var _strings = require("../../../base/common/strings.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var WordSelectionRangeProvider =
/** @class */
function () {
  function WordSelectionRangeProvider() {}

  WordSelectionRangeProvider.prototype.provideSelectionRanges = function (model, positions) {
    var result = [];

    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
      var position = positions_1[_i];
      var bucket = [];
      result.push(bucket);

      this._addInWordRanges(bucket, model, position);

      this._addWordRanges(bucket, model, position);

      this._addWhitespaceLine(bucket, model, position);

      bucket.push({
        range: model.getFullModelRange()
      });
    }

    return result;
  };

  WordSelectionRangeProvider.prototype._addInWordRanges = function (bucket, model, pos) {
    var obj = model.getWordAtPosition(pos);

    if (!obj) {
      return;
    }

    var word = obj.word,
        startColumn = obj.startColumn;
    var offset = pos.column - startColumn;
    var start = offset;
    var end = offset;
    var lastCh = 0; // LEFT anchor (start)

    for (; start >= 0; start--) {
      var ch = word.charCodeAt(start);

      if (ch === 95
      /* Underline */
      || ch === 45
      /* Dash */
      ) {
          // foo-bar OR foo_bar
          break;
        } else if ((0, _strings.isLowerAsciiLetter)(ch) && (0, _strings.isUpperAsciiLetter)(lastCh)) {
        // fooBar
        break;
      }

      lastCh = ch;
    }

    start += 1; // RIGHT anchor (end)

    for (; end < word.length; end++) {
      var ch = word.charCodeAt(end);

      if ((0, _strings.isUpperAsciiLetter)(ch) && (0, _strings.isLowerAsciiLetter)(lastCh)) {
        // fooBar
        break;
      } else if (ch === 95
      /* Underline */
      || ch === 45
      /* Dash */
      ) {
          // foo-bar OR foo_bar
          break;
        }

      lastCh = ch;
    }

    if (start < end) {
      bucket.push({
        range: new _range.Range(pos.lineNumber, startColumn + start, pos.lineNumber, startColumn + end)
      });
    }
  };

  WordSelectionRangeProvider.prototype._addWordRanges = function (bucket, model, pos) {
    var word = model.getWordAtPosition(pos);

    if (word) {
      bucket.push({
        range: new _range.Range(pos.lineNumber, word.startColumn, pos.lineNumber, word.endColumn)
      });
    }
  };

  WordSelectionRangeProvider.prototype._addWhitespaceLine = function (bucket, model, pos) {
    if (model.getLineLength(pos.lineNumber) > 0 && model.getLineFirstNonWhitespaceColumn(pos.lineNumber) === 0 && model.getLineLastNonWhitespaceColumn(pos.lineNumber) === 0) {
      bucket.push({
        range: new _range.Range(pos.lineNumber, 1, pos.lineNumber, model.getLineMaxColumn(pos.lineNumber))
      });
    }
  };

  return WordSelectionRangeProvider;
}();

exports.WordSelectionRangeProvider = WordSelectionRangeProvider;
},{"../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/smartSelect/bracketSelections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BracketSelectionRangeProvider = void 0;

var _position = require("../../common/core/position.js");

var _range = require("../../common/core/range.js");

var _linkedList = require("../../../base/common/linkedList.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var BracketSelectionRangeProvider =
/** @class */
function () {
  function BracketSelectionRangeProvider() {}

  BracketSelectionRangeProvider.prototype.provideSelectionRanges = function (model, positions) {
    return __awaiter(this, void 0, void 0, function () {
      var result, _loop_1, _i, positions_1, position;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            result = [];

            _loop_1 = function (position) {
              var bucket, ranges;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    bucket = [];
                    result.push(bucket);
                    ranges = new Map();
                    return [4
                    /*yield*/
                    , new Promise(function (resolve) {
                      return BracketSelectionRangeProvider._bracketsRightYield(resolve, 0, model, position, ranges);
                    })];

                  case 1:
                    _a.sent();

                    return [4
                    /*yield*/
                    , new Promise(function (resolve) {
                      return BracketSelectionRangeProvider._bracketsLeftYield(resolve, 0, model, position, ranges, bucket);
                    })];

                  case 2:
                    _a.sent();

                    return [2
                    /*return*/
                    ];
                }
              });
            };

            _i = 0, positions_1 = positions;
            _a.label = 1;

          case 1:
            if (!(_i < positions_1.length)) return [3
            /*break*/
            , 4];
            position = positions_1[_i];
            return [5
            /*yield**/
            , _loop_1(position)];

          case 2:
            _a.sent();

            _a.label = 3;

          case 3:
            _i++;
            return [3
            /*break*/
            , 1];

          case 4:
            return [2
            /*return*/
            , result];
        }
      });
    });
  };

  BracketSelectionRangeProvider._bracketsRightYield = function (resolve, round, model, pos, ranges) {
    var counts = new Map();
    var t1 = Date.now();

    while (true) {
      if (round >= BracketSelectionRangeProvider._maxRounds) {
        resolve();
        break;
      }

      if (!pos) {
        resolve();
        break;
      }

      var bracket = model.findNextBracket(pos);

      if (!bracket) {
        resolve();
        break;
      }

      var d = Date.now() - t1;

      if (d > BracketSelectionRangeProvider._maxDuration) {
        setTimeout(function () {
          return BracketSelectionRangeProvider._bracketsRightYield(resolve, round + 1, model, pos, ranges);
        });
        break;
      }

      var key = bracket.close[0];

      if (bracket.isOpen) {
        // wait for closing
        var val = counts.has(key) ? counts.get(key) : 0;
        counts.set(key, val + 1);
      } else {
        // process closing
        var val = counts.has(key) ? counts.get(key) : 0;
        val -= 1;
        counts.set(key, Math.max(0, val));

        if (val < 0) {
          var list = ranges.get(key);

          if (!list) {
            list = new _linkedList.LinkedList();
            ranges.set(key, list);
          }

          list.push(bracket.range);
        }
      }

      pos = bracket.range.getEndPosition();
    }
  };

  BracketSelectionRangeProvider._bracketsLeftYield = function (resolve, round, model, pos, ranges, bucket) {
    var counts = new Map();
    var t1 = Date.now();

    while (true) {
      if (round >= BracketSelectionRangeProvider._maxRounds && ranges.size === 0) {
        resolve();
        break;
      }

      if (!pos) {
        resolve();
        break;
      }

      var bracket = model.findPrevBracket(pos);

      if (!bracket) {
        resolve();
        break;
      }

      var d = Date.now() - t1;

      if (d > BracketSelectionRangeProvider._maxDuration) {
        setTimeout(function () {
          return BracketSelectionRangeProvider._bracketsLeftYield(resolve, round + 1, model, pos, ranges, bucket);
        });
        break;
      }

      var key = bracket.close[0];

      if (!bracket.isOpen) {
        // wait for opening
        var val = counts.has(key) ? counts.get(key) : 0;
        counts.set(key, val + 1);
      } else {
        // opening
        var val = counts.has(key) ? counts.get(key) : 0;
        val -= 1;
        counts.set(key, Math.max(0, val));

        if (val < 0) {
          var list = ranges.get(key);

          if (list) {
            var closing = list.shift();

            if (list.size === 0) {
              ranges.delete(key);
            }

            var innerBracket = _range.Range.fromPositions(bracket.range.getEndPosition(), closing.getStartPosition());

            var outerBracket = _range.Range.fromPositions(bracket.range.getStartPosition(), closing.getEndPosition());

            bucket.push({
              range: innerBracket
            });
            bucket.push({
              range: outerBracket
            });

            BracketSelectionRangeProvider._addBracketLeading(model, outerBracket, bucket);
          }
        }
      }

      pos = bracket.range.getStartPosition();
    }
  };

  BracketSelectionRangeProvider._addBracketLeading = function (model, bracket, bucket) {
    if (bracket.startLineNumber === bracket.endLineNumber) {
      return;
    } // xxxxxxxx {
    //
    // }


    var startLine = bracket.startLineNumber;
    var column = model.getLineFirstNonWhitespaceColumn(startLine);

    if (column !== 0 && column !== bracket.startColumn) {
      bucket.push({
        range: _range.Range.fromPositions(new _position.Position(startLine, column), bracket.getEndPosition())
      });
      bucket.push({
        range: _range.Range.fromPositions(new _position.Position(startLine, 1), bracket.getEndPosition())
      });
    } // xxxxxxxx
    // {
    //
    // }


    var aboveLine = startLine - 1;

    if (aboveLine > 0) {
      var column_1 = model.getLineFirstNonWhitespaceColumn(aboveLine);

      if (column_1 === bracket.startColumn && column_1 !== model.getLineLastNonWhitespaceColumn(aboveLine)) {
        bucket.push({
          range: _range.Range.fromPositions(new _position.Position(aboveLine, column_1), bracket.getEndPosition())
        });
        bucket.push({
          range: _range.Range.fromPositions(new _position.Position(aboveLine, 1), bracket.getEndPosition())
        });
      }
    }
  };

  BracketSelectionRangeProvider._maxDuration = 30;
  BracketSelectionRangeProvider._maxRounds = 2;
  return BracketSelectionRangeProvider;
}();

exports.BracketSelectionRangeProvider = BracketSelectionRangeProvider;
},{"../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../base/common/linkedList.js":"../node_modules/monaco-editor/esm/vs/base/common/linkedList.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/smartSelect/smartSelect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.provideSelectionRanges = provideSelectionRanges;

var arrays = _interopRequireWildcard(require("../../../base/common/arrays.js"));

var _cancellation = require("../../../base/common/cancellation.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _position2 = require("../../common/core/position.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var modes = _interopRequireWildcard(require("../../common/modes.js"));

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _lifecycle = require("../../../base/common/lifecycle.js");

var _wordSelections = require("./wordSelections.js");

var _bracketSelections = require("./bracketSelections.js");

var _commands = require("../../../platform/commands/common/commands.js");

var _errors = require("../../../base/common/errors.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var SelectionRanges =
/** @class */
function () {
  function SelectionRanges(index, ranges) {
    this.index = index;
    this.ranges = ranges;
  }

  SelectionRanges.prototype.mov = function (fwd) {
    var index = this.index + (fwd ? 1 : -1);

    if (index < 0 || index >= this.ranges.length) {
      return this;
    }

    var res = new SelectionRanges(index, this.ranges);

    if (res.ranges[index].equalsRange(this.ranges[this.index])) {
      // next range equals this range, retry with next-next
      return res.mov(fwd);
    }

    return res;
  };

  return SelectionRanges;
}();

var SmartSelectController =
/** @class */
function () {
  function SmartSelectController(editor) {
    this._ignoreSelection = false;
    this._editor = editor;
  }

  SmartSelectController.get = function (editor) {
    return editor.getContribution(SmartSelectController.ID);
  };

  SmartSelectController.prototype.dispose = function () {
    (0, _lifecycle.dispose)(this._selectionListener);
  };

  SmartSelectController.prototype.run = function (forward) {
    var _this = this;

    if (!this._editor.hasModel()) {
      return;
    }

    var selections = this._editor.getSelections();

    var model = this._editor.getModel();

    if (!modes.SelectionRangeRegistry.has(model)) {
      return;
    }

    var promise = Promise.resolve(undefined);

    if (!this._state) {
      promise = provideSelectionRanges(model, selections.map(function (s) {
        return s.getPosition();
      }), _cancellation.CancellationToken.None).then(function (ranges) {
        if (!arrays.isNonEmptyArray(ranges) || ranges.length !== selections.length) {
          // invalid result
          return;
        }

        if (!_this._editor.hasModel() || !arrays.equals(_this._editor.getSelections(), selections, function (a, b) {
          return a.equalsSelection(b);
        })) {
          // invalid editor state
          return;
        }

        var _loop_1 = function (i) {
          ranges[i] = ranges[i].filter(function (range) {
            // filter ranges inside the selection
            return range.containsPosition(selections[i].getStartPosition()) && range.containsPosition(selections[i].getEndPosition());
          }); // prepend current selection

          ranges[i].unshift(selections[i]);
        };

        for (var i = 0; i < ranges.length; i++) {
          _loop_1(i);
        }

        _this._state = ranges.map(function (ranges) {
          return new SelectionRanges(0, ranges);
        }); // listen to caret move and forget about state

        (0, _lifecycle.dispose)(_this._selectionListener);
        _this._selectionListener = _this._editor.onDidChangeCursorPosition(function () {
          if (!_this._ignoreSelection) {
            (0, _lifecycle.dispose)(_this._selectionListener);
            _this._state = undefined;
          }
        });
      });
    }

    return promise.then(function () {
      if (!_this._state) {
        // no state
        return;
      }

      _this._state = _this._state.map(function (state) {
        return state.mov(forward);
      });

      var selections = _this._state.map(function (state) {
        return _selection.Selection.fromPositions(state.ranges[state.index].getStartPosition(), state.ranges[state.index].getEndPosition());
      });

      _this._ignoreSelection = true;

      try {
        _this._editor.setSelections(selections);
      } finally {
        _this._ignoreSelection = false;
      }
    });
  };

  SmartSelectController.ID = 'editor.contrib.smartSelectController';
  return SmartSelectController;
}();

var AbstractSmartSelect =
/** @class */
function (_super) {
  __extends(AbstractSmartSelect, _super);

  function AbstractSmartSelect(forward, opts) {
    var _this = _super.call(this, opts) || this;

    _this._forward = forward;
    return _this;
  }

  AbstractSmartSelect.prototype.run = function (_accessor, editor) {
    return __awaiter(this, void 0, void 0, function () {
      var controller;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            controller = SmartSelectController.get(editor);
            if (!controller) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , controller.run(this._forward)];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return AbstractSmartSelect;
}(_editorExtensions.EditorAction);

var GrowSelectionAction =
/** @class */
function (_super) {
  __extends(GrowSelectionAction, _super);

  function GrowSelectionAction() {
    return _super.call(this, true, {
      id: 'editor.action.smartSelect.expand',
      label: nls.localize('smartSelect.expand', "Expand Selection"),
      alias: 'Expand Selection',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 1024
        /* Shift */
        | 512
        /* Alt */
        | 17
        /* RightArrow */
        ,
        mac: {
          primary: 2048
          /* CtrlCmd */
          | 256
          /* WinCtrl */
          | 1024
          /* Shift */
          | 17
          /* RightArrow */
          ,
          secondary: [256
          /* WinCtrl */
          | 1024
          /* Shift */
          | 17
          /* RightArrow */
          ]
        },
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '1_basic',
        title: nls.localize({
          key: 'miSmartSelectGrow',
          comment: ['&& denotes a mnemonic']
        }, "&&Expand Selection"),
        order: 2
      }
    }) || this;
  }

  return GrowSelectionAction;
}(AbstractSmartSelect); // renamed command id


_commands.CommandsRegistry.registerCommandAlias('editor.action.smartSelect.grow', 'editor.action.smartSelect.expand');

var ShrinkSelectionAction =
/** @class */
function (_super) {
  __extends(ShrinkSelectionAction, _super);

  function ShrinkSelectionAction() {
    return _super.call(this, false, {
      id: 'editor.action.smartSelect.shrink',
      label: nls.localize('smartSelect.shrink', "Shrink Selection"),
      alias: 'Shrink Selection',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 1024
        /* Shift */
        | 512
        /* Alt */
        | 15
        /* LeftArrow */
        ,
        mac: {
          primary: 2048
          /* CtrlCmd */
          | 256
          /* WinCtrl */
          | 1024
          /* Shift */
          | 15
          /* LeftArrow */
          ,
          secondary: [256
          /* WinCtrl */
          | 1024
          /* Shift */
          | 15
          /* LeftArrow */
          ]
        },
        weight: 100
        /* EditorContrib */

      },
      menuOpts: {
        menuId: 23
        /* MenubarSelectionMenu */
        ,
        group: '1_basic',
        title: nls.localize({
          key: 'miSmartSelectShrink',
          comment: ['&& denotes a mnemonic']
        }, "&&Shrink Selection"),
        order: 3
      }
    }) || this;
  }

  return ShrinkSelectionAction;
}(AbstractSmartSelect);

(0, _editorExtensions.registerEditorContribution)(SmartSelectController.ID, SmartSelectController);
(0, _editorExtensions.registerEditorAction)(GrowSelectionAction);
(0, _editorExtensions.registerEditorAction)(ShrinkSelectionAction); // word selection

modes.SelectionRangeRegistry.register('*', new _wordSelections.WordSelectionRangeProvider());

function provideSelectionRanges(model, positions, token) {
  var providers = modes.SelectionRangeRegistry.all(model);

  if (providers.length === 1) {
    // add word selection and bracket selection when no provider exists
    providers.unshift(new _bracketSelections.BracketSelectionRangeProvider());
  }

  var work = [];
  var allRawRanges = [];

  for (var _i = 0, providers_1 = providers; _i < providers_1.length; _i++) {
    var provider = providers_1[_i];
    work.push(Promise.resolve(provider.provideSelectionRanges(model, positions, token)).then(function (allProviderRanges) {
      if (arrays.isNonEmptyArray(allProviderRanges) && allProviderRanges.length === positions.length) {
        for (var i = 0; i < positions.length; i++) {
          if (!allRawRanges[i]) {
            allRawRanges[i] = [];
          }

          for (var _i = 0, _a = allProviderRanges[i]; _i < _a.length; _i++) {
            var oneProviderRanges = _a[_i];

            if (_range.Range.isIRange(oneProviderRanges.range) && _range.Range.containsPosition(oneProviderRanges.range, positions[i])) {
              allRawRanges[i].push(_range.Range.lift(oneProviderRanges.range));
            }
          }
        }
      }
    }, _errors.onUnexpectedExternalError));
  }

  return Promise.all(work).then(function () {
    return allRawRanges.map(function (oneRawRanges) {
      if (oneRawRanges.length === 0) {
        return [];
      } // sort all by start/end position


      oneRawRanges.sort(function (a, b) {
        if (_position2.Position.isBefore(a.getStartPosition(), b.getStartPosition())) {
          return 1;
        } else if (_position2.Position.isBefore(b.getStartPosition(), a.getStartPosition())) {
          return -1;
        } else if (_position2.Position.isBefore(a.getEndPosition(), b.getEndPosition())) {
          return -1;
        } else if (_position2.Position.isBefore(b.getEndPosition(), a.getEndPosition())) {
          return 1;
        } else {
          return 0;
        }
      }); // remove ranges that don't contain the former range or that are equal to the
      // former range

      var oneRanges = [];
      var last;

      for (var _i = 0, oneRawRanges_1 = oneRawRanges; _i < oneRawRanges_1.length; _i++) {
        var range = oneRawRanges_1[_i];

        if (!last || _range.Range.containsRange(range, last) && !_range.Range.equalsRange(range, last)) {
          oneRanges.push(range);
          last = range;
        }
      } // add ranges that expand trivia at line starts and ends whenever a range
      // wraps onto the a new line


      var oneRangesWithTrivia = [oneRanges[0]];

      for (var i = 1; i < oneRanges.length; i++) {
        var prev = oneRanges[i - 1];
        var cur = oneRanges[i];

        if (cur.startLineNumber !== prev.startLineNumber || cur.endLineNumber !== prev.endLineNumber) {
          // add line/block range without leading/failing whitespace
          var rangeNoWhitespace = new _range.Range(prev.startLineNumber, model.getLineFirstNonWhitespaceColumn(prev.startLineNumber), prev.endLineNumber, model.getLineLastNonWhitespaceColumn(prev.endLineNumber));

          if (rangeNoWhitespace.containsRange(prev) && !rangeNoWhitespace.equalsRange(prev) && cur.containsRange(rangeNoWhitespace) && !cur.equalsRange(rangeNoWhitespace)) {
            oneRangesWithTrivia.push(rangeNoWhitespace);
          } // add line/block range


          var rangeFull = new _range.Range(prev.startLineNumber, 1, prev.endLineNumber, model.getLineMaxColumn(prev.endLineNumber));

          if (rangeFull.containsRange(prev) && !rangeFull.equalsRange(rangeNoWhitespace) && cur.containsRange(rangeFull) && !cur.equalsRange(rangeFull)) {
            oneRangesWithTrivia.push(rangeFull);
          }
        }

        oneRangesWithTrivia.push(cur);
      }

      return oneRangesWithTrivia;
    });
  });
}

(0, _editorExtensions.registerDefaultLanguageCommand)('_executeSelectionRangeProvider', function (model, _position, args) {
  return provideSelectionRanges(model, args.positions, _cancellation.CancellationToken.None);
});
},{"../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","./wordSelections.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/smartSelect/wordSelections.js","./bracketSelections.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/smartSelect/bracketSelections.js","../../../platform/commands/common/commands.js":"../node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggest.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSnippetSuggestSupport = getSnippetSuggestSupport;
exports.provideSuggestionItems = provideSuggestionItems;
exports.getSuggestionComparator = getSuggestionComparator;
exports.showSimpleSuggestions = showSimpleSuggestions;
exports.CompletionOptions = exports.CompletionItem = exports.Context = void 0;

var _async = require("../../../base/common/async.js");

var _objects = require("../../../base/common/objects.js");

var _errors = require("../../../base/common/errors.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var modes = _interopRequireWildcard(require("../../common/modes.js"));

var _position = require("../../common/core/position.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _cancellation = require("../../../base/common/cancellation.js");

var _range = require("../../common/core/range.js");

var _filters = require("../../../base/common/filters.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var Context = {
  Visible: new _contextkey.RawContextKey('suggestWidgetVisible', false),
  MultipleSuggestions: new _contextkey.RawContextKey('suggestWidgetMultipleSuggestions', false),
  MakesTextEdit: new _contextkey.RawContextKey('suggestionMakesTextEdit', true),
  AcceptSuggestionsOnEnter: new _contextkey.RawContextKey('acceptSuggestionOnEnter', true)
};
exports.Context = Context;

var CompletionItem =
/** @class */
function () {
  function CompletionItem(position, completion, container, provider, model) {
    this.position = position;
    this.completion = completion;
    this.container = container;
    this.provider = provider; // sorting, filtering

    this.score = _filters.FuzzyScore.Default;
    this.distance = 0; // ensure lower-variants (perf)

    this.labelLow = completion.label.toLowerCase();
    this.sortTextLow = completion.sortText && completion.sortText.toLowerCase();
    this.filterTextLow = completion.filterText && completion.filterText.toLowerCase(); // normalize ranges

    if (_range.Range.isIRange(completion.range)) {
      this.editStart = new _position.Position(completion.range.startLineNumber, completion.range.startColumn);
      this.editInsertEnd = new _position.Position(completion.range.endLineNumber, completion.range.endColumn);
      this.editReplaceEnd = new _position.Position(completion.range.endLineNumber, completion.range.endColumn);
    } else {
      this.editStart = new _position.Position(completion.range.insert.startLineNumber, completion.range.insert.startColumn);
      this.editInsertEnd = new _position.Position(completion.range.insert.endLineNumber, completion.range.insert.endColumn);
      this.editReplaceEnd = new _position.Position(completion.range.replace.endLineNumber, completion.range.replace.endColumn);
    } // create the suggestion resolver


    var resolveCompletionItem = provider.resolveCompletionItem;

    if (typeof resolveCompletionItem !== 'function') {
      this.resolve = function () {
        return Promise.resolve();
      };
    } else {
      var cached_1;

      this.resolve = function (token) {
        if (!cached_1) {
          var isDone_1 = false;
          cached_1 = Promise.resolve(resolveCompletionItem.call(provider, model, position, completion, token)).then(function (value) {
            (0, _objects.assign)(completion, value);
            isDone_1 = true;
          }, function (err) {
            if ((0, _errors.isPromiseCanceledError)(err)) {
              // the IPC queue will reject the request with the
              // cancellation error -> reset cached
              cached_1 = undefined;
            }
          });
          token.onCancellationRequested(function () {
            if (!isDone_1) {
              // cancellation after the request has been
              // dispatched -> reset cache
              cached_1 = undefined;
            }
          });
        }

        return cached_1;
      };
    }
  }

  return CompletionItem;
}();

exports.CompletionItem = CompletionItem;

var CompletionOptions =
/** @class */
function () {
  function CompletionOptions(snippetSortOrder, kindFilter, providerFilter) {
    if (snippetSortOrder === void 0) {
      snippetSortOrder = 2
      /* Bottom */
      ;
    }

    if (kindFilter === void 0) {
      kindFilter = new Set();
    }

    if (providerFilter === void 0) {
      providerFilter = new Set();
    }

    this.snippetSortOrder = snippetSortOrder;
    this.kindFilter = kindFilter;
    this.providerFilter = providerFilter;
  }

  CompletionOptions.default = new CompletionOptions();
  return CompletionOptions;
}();

exports.CompletionOptions = CompletionOptions;

var _snippetSuggestSupport;

function getSnippetSuggestSupport() {
  return _snippetSuggestSupport;
}

function provideSuggestionItems(model, position, options, context, token) {
  if (options === void 0) {
    options = CompletionOptions.default;
  }

  if (context === void 0) {
    context = {
      triggerKind: 0
      /* Invoke */

    };
  }

  if (token === void 0) {
    token = _cancellation.CancellationToken.None;
  }

  var word = model.getWordAtPosition(position);
  var defaultReplaceRange = word ? new _range.Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn) : _range.Range.fromPositions(position);
  var defaultInsertRange = defaultReplaceRange.setEndPosition(position.lineNumber, position.column); // const wordUntil = model.getWordUntilPosition(position);
  // const defaultRange = new Range(position.lineNumber, wordUntil.startColumn, position.lineNumber, wordUntil.endColumn);

  position = position.clone(); // get provider groups, always add snippet suggestion provider

  var supports = modes.CompletionProviderRegistry.orderedGroups(model); // add snippets provider unless turned off

  if (!options.kindFilter.has(25
  /* Snippet */
  ) && _snippetSuggestSupport) {
    supports.unshift([_snippetSuggestSupport]);
  }

  var allSuggestions = [];
  var disposables = new _lifecycle.DisposableStore();
  var hasResult = false; // add suggestions from contributed providers - providers are ordered in groups of
  // equal score and once a group produces a result the process stops

  var factory = supports.map(function (supports) {
    return function () {
      // for each support in the group ask for suggestions
      return Promise.all(supports.map(function (provider) {
        if (options.providerFilter.size > 0 && !options.providerFilter.has(provider)) {
          return undefined;
        }

        return Promise.resolve(provider.provideCompletionItems(model, position, context, token)).then(function (container) {
          var len = allSuggestions.length;

          if (container) {
            for (var _i = 0, _a = container.suggestions || []; _i < _a.length; _i++) {
              var suggestion = _a[_i];

              if (!options.kindFilter.has(suggestion.kind)) {
                // fill in default range when missing
                if (!suggestion.range) {
                  suggestion.range = {
                    insert: defaultInsertRange,
                    replace: defaultReplaceRange
                  };
                } // fill in default sortText when missing


                if (!suggestion.sortText) {
                  suggestion.sortText = suggestion.label;
                }

                allSuggestions.push(new CompletionItem(position, suggestion, container, provider, model));
              }
            }

            if ((0, _lifecycle.isDisposable)(container)) {
              disposables.add(container);
            }
          }

          if (len !== allSuggestions.length && provider !== _snippetSuggestSupport) {
            hasResult = true;
          }
        }, _errors.onUnexpectedExternalError);
      }));
    };
  });
  var result = (0, _async.first)(factory, function () {
    // stop on result or cancellation
    return hasResult || token.isCancellationRequested;
  }).then(function () {
    if (token.isCancellationRequested) {
      disposables.dispose();
      return Promise.reject((0, _errors.canceled)());
    }

    return allSuggestions.sort(getSuggestionComparator(options.snippetSortOrder));
  }); // result.then(items => {
  // 	console.log(model.getWordUntilPosition(position), items.map(item => `${item.suggestion.label}, type=${item.suggestion.type}, incomplete?${item.container.incomplete}, overwriteBefore=${item.suggestion.overwriteBefore}`));
  // 	return items;
  // }, err => {
  // 	console.warn(model.getWordUntilPosition(position), err);
  // });

  return result;
}

function defaultComparator(a, b) {
  // check with 'sortText'
  if (a.sortTextLow && b.sortTextLow) {
    if (a.sortTextLow < b.sortTextLow) {
      return -1;
    } else if (a.sortTextLow > b.sortTextLow) {
      return 1;
    }
  } // check with 'label'


  if (a.completion.label < b.completion.label) {
    return -1;
  } else if (a.completion.label > b.completion.label) {
    return 1;
  } // check with 'type'


  return a.completion.kind - b.completion.kind;
}

function snippetUpComparator(a, b) {
  if (a.completion.kind !== b.completion.kind) {
    if (a.completion.kind === 25
    /* Snippet */
    ) {
        return -1;
      } else if (b.completion.kind === 25
    /* Snippet */
    ) {
        return 1;
      }
  }

  return defaultComparator(a, b);
}

function snippetDownComparator(a, b) {
  if (a.completion.kind !== b.completion.kind) {
    if (a.completion.kind === 25
    /* Snippet */
    ) {
        return 1;
      } else if (b.completion.kind === 25
    /* Snippet */
    ) {
        return -1;
      }
  }

  return defaultComparator(a, b);
}

var _snippetComparators = new Map();

_snippetComparators.set(0
/* Top */
, snippetUpComparator);

_snippetComparators.set(2
/* Bottom */
, snippetDownComparator);

_snippetComparators.set(1
/* Inline */
, defaultComparator);

function getSuggestionComparator(snippetConfig) {
  return _snippetComparators.get(snippetConfig);
}

(0, _editorExtensions.registerDefaultLanguageCommand)('_executeCompletionItemProvider', function (model, position, args) {
  return __awaiter(void 0, void 0, void 0, function () {
    var result, disposables, resolving, maxItemsToResolve, items, _i, items_1, item;

    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          result = {
            incomplete: false,
            suggestions: []
          };
          disposables = new _lifecycle.DisposableStore();
          resolving = [];
          maxItemsToResolve = args['maxItemsToResolve'] || 0;
          return [4
          /*yield*/
          , provideSuggestionItems(model, position)];

        case 1:
          items = _a.sent();

          for (_i = 0, items_1 = items; _i < items_1.length; _i++) {
            item = items_1[_i];

            if (resolving.length < maxItemsToResolve) {
              resolving.push(item.resolve(_cancellation.CancellationToken.None));
            }

            result.incomplete = result.incomplete || item.container.incomplete;
            result.suggestions.push(item.completion);

            if ((0, _lifecycle.isDisposable)(item.container)) {
              disposables.add(item.container);
            }
          }

          _a.label = 2;

        case 2:
          _a.trys.push([2,, 4, 5]);

          return [4
          /*yield*/
          , Promise.all(resolving)];

        case 3:
          _a.sent();

          return [2
          /*return*/
          , result];

        case 4:
          setTimeout(function () {
            return disposables.dispose();
          }, 100);
          return [7
          /*endfinally*/
          ];

        case 5:
          return [2
          /*return*/
          ];
      }
    });
  });
});

var _provider = new (
/** @class */
function () {
  function class_1() {
    this.onlyOnceSuggestions = [];
  }

  class_1.prototype.provideCompletionItems = function () {
    var suggestions = this.onlyOnceSuggestions.slice(0);
    var result = {
      suggestions: suggestions
    };
    this.onlyOnceSuggestions.length = 0;
    return result;
  };

  return class_1;
}())();

modes.CompletionProviderRegistry.register('*', _provider);

function showSimpleSuggestions(editor, suggestions) {
  setTimeout(function () {
    var _a;

    (_a = _provider.onlyOnceSuggestions).push.apply(_a, suggestions);

    editor.getContribution('editor.contrib.suggestController').triggerSuggest(new Set().add(_provider));
  }, 0);
}
},{"../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../base/common/filters.js":"../node_modules/monaco-editor/esm/vs/base/common/filters.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetSession.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetParser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SnippetParser = exports.TextmateSnippet = exports.Variable = exports.FormatString = exports.Transform = exports.Choice = exports.Placeholder = exports.TransformableMarker = exports.Text = exports.Marker = exports.Scanner = void 0;

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __spreadArrays = void 0 && (void 0).__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
};

var _a;

var Scanner =
/** @class */
function () {
  function Scanner() {
    this.value = '';
    this.pos = 0;
  }

  Scanner.isDigitCharacter = function (ch) {
    return ch >= 48
    /* Digit0 */
    && ch <= 57
    /* Digit9 */
    ;
  };

  Scanner.isVariableCharacter = function (ch) {
    return ch === 95
    /* Underline */
    || ch >= 97
    /* a */
    && ch <= 122
    /* z */
    || ch >= 65
    /* A */
    && ch <= 90
    /* Z */
    ;
  };

  Scanner.prototype.text = function (value) {
    this.value = value;
    this.pos = 0;
  };

  Scanner.prototype.tokenText = function (token) {
    return this.value.substr(token.pos, token.len);
  };

  Scanner.prototype.next = function () {
    if (this.pos >= this.value.length) {
      return {
        type: 14
        /* EOF */
        ,
        pos: this.pos,
        len: 0
      };
    }

    var pos = this.pos;
    var len = 0;
    var ch = this.value.charCodeAt(pos);
    var type; // static types

    type = Scanner._table[ch];

    if (typeof type === 'number') {
      this.pos += 1;
      return {
        type: type,
        pos: pos,
        len: 1
      };
    } // number


    if (Scanner.isDigitCharacter(ch)) {
      type = 8
      /* Int */
      ;

      do {
        len += 1;
        ch = this.value.charCodeAt(pos + len);
      } while (Scanner.isDigitCharacter(ch));

      this.pos += len;
      return {
        type: type,
        pos: pos,
        len: len
      };
    } // variable name


    if (Scanner.isVariableCharacter(ch)) {
      type = 9
      /* VariableName */
      ;

      do {
        ch = this.value.charCodeAt(pos + ++len);
      } while (Scanner.isVariableCharacter(ch) || Scanner.isDigitCharacter(ch));

      this.pos += len;
      return {
        type: type,
        pos: pos,
        len: len
      };
    } // format


    type = 10
    /* Format */
    ;

    do {
      len += 1;
      ch = this.value.charCodeAt(pos + len);
    } while (!isNaN(ch) && typeof Scanner._table[ch] === 'undefined' // not static token
    && !Scanner.isDigitCharacter(ch) // not number
    && !Scanner.isVariableCharacter(ch) // not variable
    );

    this.pos += len;
    return {
      type: type,
      pos: pos,
      len: len
    };
  };

  Scanner._table = (_a = {}, _a[36
  /* DollarSign */
  ] = 0
  /* Dollar */
  , _a[58
  /* Colon */
  ] = 1
  /* Colon */
  , _a[44
  /* Comma */
  ] = 2
  /* Comma */
  , _a[123
  /* OpenCurlyBrace */
  ] = 3
  /* CurlyOpen */
  , _a[125
  /* CloseCurlyBrace */
  ] = 4
  /* CurlyClose */
  , _a[92
  /* Backslash */
  ] = 5
  /* Backslash */
  , _a[47
  /* Slash */
  ] = 6
  /* Forwardslash */
  , _a[124
  /* Pipe */
  ] = 7
  /* Pipe */
  , _a[43
  /* Plus */
  ] = 11
  /* Plus */
  , _a[45
  /* Dash */
  ] = 12
  /* Dash */
  , _a[63
  /* QuestionMark */
  ] = 13
  /* QuestionMark */
  , _a);
  return Scanner;
}();

exports.Scanner = Scanner;

var Marker =
/** @class */
function () {
  function Marker() {
    this._children = [];
  }

  Marker.prototype.appendChild = function (child) {
    if (child instanceof Text && this._children[this._children.length - 1] instanceof Text) {
      // this and previous child are text -> merge them
      this._children[this._children.length - 1].value += child.value;
    } else {
      // normal adoption of child
      child.parent = this;

      this._children.push(child);
    }

    return this;
  };

  Marker.prototype.replace = function (child, others) {
    var parent = child.parent;
    var idx = parent.children.indexOf(child);
    var newChildren = parent.children.slice(0);
    newChildren.splice.apply(newChildren, __spreadArrays([idx, 1], others));
    parent._children = newChildren;

    (function _fixParent(children, parent) {
      for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
        var child_1 = children_1[_i];
        child_1.parent = parent;

        _fixParent(child_1.children, child_1);
      }
    })(others, parent);
  };

  Object.defineProperty(Marker.prototype, "children", {
    get: function () {
      return this._children;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Marker.prototype, "snippet", {
    get: function () {
      var candidate = this;

      while (true) {
        if (!candidate) {
          return undefined;
        }

        if (candidate instanceof TextmateSnippet) {
          return candidate;
        }

        candidate = candidate.parent;
      }
    },
    enumerable: true,
    configurable: true
  });

  Marker.prototype.toString = function () {
    return this.children.reduce(function (prev, cur) {
      return prev + cur.toString();
    }, '');
  };

  Marker.prototype.len = function () {
    return 0;
  };

  return Marker;
}();

exports.Marker = Marker;

var Text =
/** @class */
function (_super) {
  __extends(Text, _super);

  function Text(value) {
    var _this_1 = _super.call(this) || this;

    _this_1.value = value;
    return _this_1;
  }

  Text.prototype.toString = function () {
    return this.value;
  };

  Text.prototype.len = function () {
    return this.value.length;
  };

  Text.prototype.clone = function () {
    return new Text(this.value);
  };

  return Text;
}(Marker);

exports.Text = Text;

var TransformableMarker =
/** @class */
function (_super) {
  __extends(TransformableMarker, _super);

  function TransformableMarker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return TransformableMarker;
}(Marker);

exports.TransformableMarker = TransformableMarker;

var Placeholder =
/** @class */
function (_super) {
  __extends(Placeholder, _super);

  function Placeholder(index) {
    var _this_1 = _super.call(this) || this;

    _this_1.index = index;
    return _this_1;
  }

  Placeholder.compareByIndex = function (a, b) {
    if (a.index === b.index) {
      return 0;
    } else if (a.isFinalTabstop) {
      return 1;
    } else if (b.isFinalTabstop) {
      return -1;
    } else if (a.index < b.index) {
      return -1;
    } else if (a.index > b.index) {
      return 1;
    } else {
      return 0;
    }
  };

  Object.defineProperty(Placeholder.prototype, "isFinalTabstop", {
    get: function () {
      return this.index === 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Placeholder.prototype, "choice", {
    get: function () {
      return this._children.length === 1 && this._children[0] instanceof Choice ? this._children[0] : undefined;
    },
    enumerable: true,
    configurable: true
  });

  Placeholder.prototype.clone = function () {
    var ret = new Placeholder(this.index);

    if (this.transform) {
      ret.transform = this.transform.clone();
    }

    ret._children = this.children.map(function (child) {
      return child.clone();
    });
    return ret;
  };

  return Placeholder;
}(TransformableMarker);

exports.Placeholder = Placeholder;

var Choice =
/** @class */
function (_super) {
  __extends(Choice, _super);

  function Choice() {
    var _this_1 = _super !== null && _super.apply(this, arguments) || this;

    _this_1.options = [];
    return _this_1;
  }

  Choice.prototype.appendChild = function (marker) {
    if (marker instanceof Text) {
      marker.parent = this;
      this.options.push(marker);
    }

    return this;
  };

  Choice.prototype.toString = function () {
    return this.options[0].value;
  };

  Choice.prototype.len = function () {
    return this.options[0].len();
  };

  Choice.prototype.clone = function () {
    var ret = new Choice();
    this.options.forEach(ret.appendChild, ret);
    return ret;
  };

  return Choice;
}(Marker);

exports.Choice = Choice;

var Transform =
/** @class */
function (_super) {
  __extends(Transform, _super);

  function Transform() {
    var _this_1 = _super !== null && _super.apply(this, arguments) || this;

    _this_1.regexp = new RegExp('');
    return _this_1;
  }

  Transform.prototype.resolve = function (value) {
    var _this = this;

    var didMatch = false;
    var ret = value.replace(this.regexp, function () {
      didMatch = true;
      return _this._replace(Array.prototype.slice.call(arguments, 0, -2));
    }); // when the regex didn't match and when the transform has
    // else branches, then run those

    if (!didMatch && this._children.some(function (child) {
      return child instanceof FormatString && Boolean(child.elseValue);
    })) {
      ret = this._replace([]);
    }

    return ret;
  };

  Transform.prototype._replace = function (groups) {
    var ret = '';

    for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
      var marker = _a[_i];

      if (marker instanceof FormatString) {
        var value = groups[marker.index] || '';
        value = marker.resolve(value);
        ret += value;
      } else {
        ret += marker.toString();
      }
    }

    return ret;
  };

  Transform.prototype.toString = function () {
    return '';
  };

  Transform.prototype.clone = function () {
    var ret = new Transform();
    ret.regexp = new RegExp(this.regexp.source, '' + (this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : ''));
    ret._children = this.children.map(function (child) {
      return child.clone();
    });
    return ret;
  };

  return Transform;
}(Marker);

exports.Transform = Transform;

var FormatString =
/** @class */
function (_super) {
  __extends(FormatString, _super);

  function FormatString(index, shorthandName, ifValue, elseValue) {
    var _this_1 = _super.call(this) || this;

    _this_1.index = index;
    _this_1.shorthandName = shorthandName;
    _this_1.ifValue = ifValue;
    _this_1.elseValue = elseValue;
    return _this_1;
  }

  FormatString.prototype.resolve = function (value) {
    if (this.shorthandName === 'upcase') {
      return !value ? '' : value.toLocaleUpperCase();
    } else if (this.shorthandName === 'downcase') {
      return !value ? '' : value.toLocaleLowerCase();
    } else if (this.shorthandName === 'capitalize') {
      return !value ? '' : value[0].toLocaleUpperCase() + value.substr(1);
    } else if (this.shorthandName === 'pascalcase') {
      return !value ? '' : this._toPascalCase(value);
    } else if (Boolean(value) && typeof this.ifValue === 'string') {
      return this.ifValue;
    } else if (!Boolean(value) && typeof this.elseValue === 'string') {
      return this.elseValue;
    } else {
      return value || '';
    }
  };

  FormatString.prototype._toPascalCase = function (value) {
    var match = value.match(/[a-z]+/gi);

    if (!match) {
      return value;
    }

    return match.map(function (word) {
      return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
    }).join('');
  };

  FormatString.prototype.clone = function () {
    var ret = new FormatString(this.index, this.shorthandName, this.ifValue, this.elseValue);
    return ret;
  };

  return FormatString;
}(Marker);

exports.FormatString = FormatString;

var Variable =
/** @class */
function (_super) {
  __extends(Variable, _super);

  function Variable(name) {
    var _this_1 = _super.call(this) || this;

    _this_1.name = name;
    return _this_1;
  }

  Variable.prototype.resolve = function (resolver) {
    var value = resolver.resolve(this);

    if (this.transform) {
      value = this.transform.resolve(value || '');
    }

    if (value !== undefined) {
      this._children = [new Text(value)];
      return true;
    }

    return false;
  };

  Variable.prototype.clone = function () {
    var ret = new Variable(this.name);

    if (this.transform) {
      ret.transform = this.transform.clone();
    }

    ret._children = this.children.map(function (child) {
      return child.clone();
    });
    return ret;
  };

  return Variable;
}(TransformableMarker);

exports.Variable = Variable;

function walk(marker, visitor) {
  var stack = __spreadArrays(marker);

  while (stack.length > 0) {
    var marker_1 = stack.shift();
    var recurse = visitor(marker_1);

    if (!recurse) {
      break;
    }

    stack.unshift.apply(stack, marker_1.children);
  }
}

var TextmateSnippet =
/** @class */
function (_super) {
  __extends(TextmateSnippet, _super);

  function TextmateSnippet() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(TextmateSnippet.prototype, "placeholderInfo", {
    get: function () {
      if (!this._placeholders) {
        // fill in placeholders
        var all_1 = [];
        var last_1;
        this.walk(function (candidate) {
          if (candidate instanceof Placeholder) {
            all_1.push(candidate);
            last_1 = !last_1 || last_1.index < candidate.index ? candidate : last_1;
          }

          return true;
        });
        this._placeholders = {
          all: all_1,
          last: last_1
        };
      }

      return this._placeholders;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextmateSnippet.prototype, "placeholders", {
    get: function () {
      var all = this.placeholderInfo.all;
      return all;
    },
    enumerable: true,
    configurable: true
  });

  TextmateSnippet.prototype.offset = function (marker) {
    var pos = 0;
    var found = false;
    this.walk(function (candidate) {
      if (candidate === marker) {
        found = true;
        return false;
      }

      pos += candidate.len();
      return true;
    });

    if (!found) {
      return -1;
    }

    return pos;
  };

  TextmateSnippet.prototype.fullLen = function (marker) {
    var ret = 0;
    walk([marker], function (marker) {
      ret += marker.len();
      return true;
    });
    return ret;
  };

  TextmateSnippet.prototype.enclosingPlaceholders = function (placeholder) {
    var ret = [];
    var parent = placeholder.parent;

    while (parent) {
      if (parent instanceof Placeholder) {
        ret.push(parent);
      }

      parent = parent.parent;
    }

    return ret;
  };

  TextmateSnippet.prototype.resolveVariables = function (resolver) {
    var _this_1 = this;

    this.walk(function (candidate) {
      if (candidate instanceof Variable) {
        if (candidate.resolve(resolver)) {
          _this_1._placeholders = undefined;
        }
      }

      return true;
    });
    return this;
  };

  TextmateSnippet.prototype.appendChild = function (child) {
    this._placeholders = undefined;
    return _super.prototype.appendChild.call(this, child);
  };

  TextmateSnippet.prototype.replace = function (child, others) {
    this._placeholders = undefined;
    return _super.prototype.replace.call(this, child, others);
  };

  TextmateSnippet.prototype.clone = function () {
    var ret = new TextmateSnippet();
    this._children = this.children.map(function (child) {
      return child.clone();
    });
    return ret;
  };

  TextmateSnippet.prototype.walk = function (visitor) {
    walk(this.children, visitor);
  };

  return TextmateSnippet;
}(Marker);

exports.TextmateSnippet = TextmateSnippet;

var SnippetParser =
/** @class */
function () {
  function SnippetParser() {
    this._scanner = new Scanner();
    this._token = {
      type: 14
      /* EOF */
      ,
      pos: 0,
      len: 0
    };
  }

  SnippetParser.escape = function (value) {
    return value.replace(/\$|}|\\/g, '\\$&');
  };

  SnippetParser.prototype.parse = function (value, insertFinalTabstop, enforceFinalTabstop) {
    this._scanner.text(value);

    this._token = this._scanner.next();
    var snippet = new TextmateSnippet();

    while (this._parse(snippet)) {} // nothing
    // fill in values for placeholders. the first placeholder of an index
    // that has a value defines the value for all placeholders with that index


    var placeholderDefaultValues = new Map();
    var incompletePlaceholders = [];
    var placeholderCount = 0;
    snippet.walk(function (marker) {
      if (marker instanceof Placeholder) {
        placeholderCount += 1;

        if (marker.isFinalTabstop) {
          placeholderDefaultValues.set(0, undefined);
        } else if (!placeholderDefaultValues.has(marker.index) && marker.children.length > 0) {
          placeholderDefaultValues.set(marker.index, marker.children);
        } else {
          incompletePlaceholders.push(marker);
        }
      }

      return true;
    });

    for (var _i = 0, incompletePlaceholders_1 = incompletePlaceholders; _i < incompletePlaceholders_1.length; _i++) {
      var placeholder = incompletePlaceholders_1[_i];
      var defaultValues = placeholderDefaultValues.get(placeholder.index);

      if (defaultValues) {
        var clone = new Placeholder(placeholder.index);
        clone.transform = placeholder.transform;

        for (var _a = 0, defaultValues_1 = defaultValues; _a < defaultValues_1.length; _a++) {
          var child = defaultValues_1[_a];
          clone.appendChild(child.clone());
        }

        snippet.replace(placeholder, [clone]);
      }
    }

    if (!enforceFinalTabstop) {
      enforceFinalTabstop = placeholderCount > 0 && insertFinalTabstop;
    }

    if (!placeholderDefaultValues.has(0) && enforceFinalTabstop) {
      // the snippet uses placeholders but has no
      // final tabstop defined -> insert at the end
      snippet.appendChild(new Placeholder(0));
    }

    return snippet;
  };

  SnippetParser.prototype._accept = function (type, value) {
    if (type === undefined || this._token.type === type) {
      var ret = !value ? true : this._scanner.tokenText(this._token);
      this._token = this._scanner.next();
      return ret;
    }

    return false;
  };

  SnippetParser.prototype._backTo = function (token) {
    this._scanner.pos = token.pos + token.len;
    this._token = token;
    return false;
  };

  SnippetParser.prototype._until = function (type) {
    var start = this._token;

    while (this._token.type !== type) {
      if (this._token.type === 14
      /* EOF */
      ) {
          return false;
        } else if (this._token.type === 5
      /* Backslash */
      ) {
          var nextToken = this._scanner.next();

          if (nextToken.type !== 0
          /* Dollar */
          && nextToken.type !== 4
          /* CurlyClose */
          && nextToken.type !== 5
          /* Backslash */
          ) {
              return false;
            }
        }

      this._token = this._scanner.next();
    }

    var value = this._scanner.value.substring(start.pos, this._token.pos).replace(/\\(\$|}|\\)/g, '$1');

    this._token = this._scanner.next();
    return value;
  };

  SnippetParser.prototype._parse = function (marker) {
    return this._parseEscaped(marker) || this._parseTabstopOrVariableName(marker) || this._parseComplexPlaceholder(marker) || this._parseComplexVariable(marker) || this._parseAnything(marker);
  }; // \$, \\, \} -> just text


  SnippetParser.prototype._parseEscaped = function (marker) {
    var value;

    if (value = this._accept(5
    /* Backslash */
    , true)) {
      // saw a backslash, append escaped token or that backslash
      value = this._accept(0
      /* Dollar */
      , true) || this._accept(4
      /* CurlyClose */
      , true) || this._accept(5
      /* Backslash */
      , true) || value;
      marker.appendChild(new Text(value));
      return true;
    }

    return false;
  }; // $foo -> variable, $1 -> tabstop


  SnippetParser.prototype._parseTabstopOrVariableName = function (parent) {
    var value;
    var token = this._token;

    var match = this._accept(0
    /* Dollar */
    ) && (value = this._accept(9
    /* VariableName */
    , true) || this._accept(8
    /* Int */
    , true));

    if (!match) {
      return this._backTo(token);
    }

    parent.appendChild(/^\d+$/.test(value) ? new Placeholder(Number(value)) : new Variable(value));
    return true;
  }; // ${1:<children>}, ${1} -> placeholder


  SnippetParser.prototype._parseComplexPlaceholder = function (parent) {
    var index;
    var token = this._token;

    var match = this._accept(0
    /* Dollar */
    ) && this._accept(3
    /* CurlyOpen */
    ) && (index = this._accept(8
    /* Int */
    , true));

    if (!match) {
      return this._backTo(token);
    }

    var placeholder = new Placeholder(Number(index));

    if (this._accept(1
    /* Colon */
    )) {
      // ${1:<children>}
      while (true) {
        // ...} -> done
        if (this._accept(4
        /* CurlyClose */
        )) {
          parent.appendChild(placeholder);
          return true;
        }

        if (this._parse(placeholder)) {
          continue;
        } // fallback


        parent.appendChild(new Text('${' + index + ':'));
        placeholder.children.forEach(parent.appendChild, parent);
        return true;
      }
    } else if (placeholder.index > 0 && this._accept(7
    /* Pipe */
    )) {
      // ${1|one,two,three|}
      var choice = new Choice();

      while (true) {
        if (this._parseChoiceElement(choice)) {
          if (this._accept(2
          /* Comma */
          )) {
            // opt, -> more
            continue;
          }

          if (this._accept(7
          /* Pipe */
          )) {
            placeholder.appendChild(choice);

            if (this._accept(4
            /* CurlyClose */
            )) {
              // ..|} -> done
              parent.appendChild(placeholder);
              return true;
            }
          }
        }

        this._backTo(token);

        return false;
      }
    } else if (this._accept(6
    /* Forwardslash */
    )) {
      // ${1/<regex>/<format>/<options>}
      if (this._parseTransform(placeholder)) {
        parent.appendChild(placeholder);
        return true;
      }

      this._backTo(token);

      return false;
    } else if (this._accept(4
    /* CurlyClose */
    )) {
      // ${1}
      parent.appendChild(placeholder);
      return true;
    } else {
      // ${1 <- missing curly or colon
      return this._backTo(token);
    }
  };

  SnippetParser.prototype._parseChoiceElement = function (parent) {
    var token = this._token;
    var values = [];

    while (true) {
      if (this._token.type === 2
      /* Comma */
      || this._token.type === 7
      /* Pipe */
      ) {
          break;
        }

      var value = void 0;

      if (value = this._accept(5
      /* Backslash */
      , true)) {
        // \, \|, or \\
        value = this._accept(2
        /* Comma */
        , true) || this._accept(7
        /* Pipe */
        , true) || this._accept(5
        /* Backslash */
        , true) || value;
      } else {
        value = this._accept(undefined, true);
      }

      if (!value) {
        // EOF
        this._backTo(token);

        return false;
      }

      values.push(value);
    }

    if (values.length === 0) {
      this._backTo(token);

      return false;
    }

    parent.appendChild(new Text(values.join('')));
    return true;
  }; // ${foo:<children>}, ${foo} -> variable


  SnippetParser.prototype._parseComplexVariable = function (parent) {
    var name;
    var token = this._token;

    var match = this._accept(0
    /* Dollar */
    ) && this._accept(3
    /* CurlyOpen */
    ) && (name = this._accept(9
    /* VariableName */
    , true));

    if (!match) {
      return this._backTo(token);
    }

    var variable = new Variable(name);

    if (this._accept(1
    /* Colon */
    )) {
      // ${foo:<children>}
      while (true) {
        // ...} -> done
        if (this._accept(4
        /* CurlyClose */
        )) {
          parent.appendChild(variable);
          return true;
        }

        if (this._parse(variable)) {
          continue;
        } // fallback


        parent.appendChild(new Text('${' + name + ':'));
        variable.children.forEach(parent.appendChild, parent);
        return true;
      }
    } else if (this._accept(6
    /* Forwardslash */
    )) {
      // ${foo/<regex>/<format>/<options>}
      if (this._parseTransform(variable)) {
        parent.appendChild(variable);
        return true;
      }

      this._backTo(token);

      return false;
    } else if (this._accept(4
    /* CurlyClose */
    )) {
      // ${foo}
      parent.appendChild(variable);
      return true;
    } else {
      // ${foo <- missing curly or colon
      return this._backTo(token);
    }
  };

  SnippetParser.prototype._parseTransform = function (parent) {
    // ...<regex>/<format>/<options>}
    var transform = new Transform();
    var regexValue = '';
    var regexOptions = ''; // (1) /regex

    while (true) {
      if (this._accept(6
      /* Forwardslash */
      )) {
        break;
      }

      var escaped = void 0;

      if (escaped = this._accept(5
      /* Backslash */
      , true)) {
        escaped = this._accept(6
        /* Forwardslash */
        , true) || escaped;
        regexValue += escaped;
        continue;
      }

      if (this._token.type !== 14
      /* EOF */
      ) {
          regexValue += this._accept(undefined, true);
          continue;
        }

      return false;
    } // (2) /format


    while (true) {
      if (this._accept(6
      /* Forwardslash */
      )) {
        break;
      }

      var escaped = void 0;

      if (escaped = this._accept(5
      /* Backslash */
      , true)) {
        escaped = this._accept(5
        /* Backslash */
        , true) || this._accept(6
        /* Forwardslash */
        , true) || escaped;
        transform.appendChild(new Text(escaped));
        continue;
      }

      if (this._parseFormatString(transform) || this._parseAnything(transform)) {
        continue;
      }

      return false;
    } // (3) /option


    while (true) {
      if (this._accept(4
      /* CurlyClose */
      )) {
        break;
      }

      if (this._token.type !== 14
      /* EOF */
      ) {
          regexOptions += this._accept(undefined, true);
          continue;
        }

      return false;
    }

    try {
      transform.regexp = new RegExp(regexValue, regexOptions);
    } catch (e) {
      // invalid regexp
      return false;
    }

    parent.transform = transform;
    return true;
  };

  SnippetParser.prototype._parseFormatString = function (parent) {
    var token = this._token;

    if (!this._accept(0
    /* Dollar */
    )) {
      return false;
    }

    var complex = false;

    if (this._accept(3
    /* CurlyOpen */
    )) {
      complex = true;
    }

    var index = this._accept(8
    /* Int */
    , true);

    if (!index) {
      this._backTo(token);

      return false;
    } else if (!complex) {
      // $1
      parent.appendChild(new FormatString(Number(index)));
      return true;
    } else if (this._accept(4
    /* CurlyClose */
    )) {
      // ${1}
      parent.appendChild(new FormatString(Number(index)));
      return true;
    } else if (!this._accept(1
    /* Colon */
    )) {
      this._backTo(token);

      return false;
    }

    if (this._accept(6
    /* Forwardslash */
    )) {
      // ${1:/upcase}
      var shorthand = this._accept(9
      /* VariableName */
      , true);

      if (!shorthand || !this._accept(4
      /* CurlyClose */
      )) {
        this._backTo(token);

        return false;
      } else {
        parent.appendChild(new FormatString(Number(index), shorthand));
        return true;
      }
    } else if (this._accept(11
    /* Plus */
    )) {
      // ${1:+<if>}
      var ifValue = this._until(4
      /* CurlyClose */
      );

      if (ifValue) {
        parent.appendChild(new FormatString(Number(index), undefined, ifValue, undefined));
        return true;
      }
    } else if (this._accept(12
    /* Dash */
    )) {
      // ${2:-<else>}
      var elseValue = this._until(4
      /* CurlyClose */
      );

      if (elseValue) {
        parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));
        return true;
      }
    } else if (this._accept(13
    /* QuestionMark */
    )) {
      // ${2:?<if>:<else>}
      var ifValue = this._until(1
      /* Colon */
      );

      if (ifValue) {
        var elseValue = this._until(4
        /* CurlyClose */
        );

        if (elseValue) {
          parent.appendChild(new FormatString(Number(index), undefined, ifValue, elseValue));
          return true;
        }
      }
    } else {
      // ${1:<else>}
      var elseValue = this._until(4
      /* CurlyClose */
      );

      if (elseValue) {
        parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));
        return true;
      }
    }

    this._backTo(token);

    return false;
  };

  SnippetParser.prototype._parseAnything = function (marker) {
    if (this._token.type !== 14
    /* EOF */
    ) {
        marker.appendChild(new Text(this._scanner.tokenText(this._token)));

        this._accept(undefined);

        return true;
      }

    return false;
  };

  return SnippetParser;
}();

exports.SnippetParser = SnippetParser;
},{}],"../node_modules/monaco-editor/esm/vs/platform/workspaces/common/workspaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSingleFolderWorkspaceIdentifier = isSingleFolderWorkspaceIdentifier;
exports.toWorkspaceIdentifier = toWorkspaceIdentifier;
exports.WORKSPACE_EXTENSION = void 0;

var _uri = require("../../../base/common/uri.js");

var WORKSPACE_EXTENSION = 'code-workspace';
exports.WORKSPACE_EXTENSION = WORKSPACE_EXTENSION;

function isSingleFolderWorkspaceIdentifier(obj) {
  return obj instanceof _uri.URI;
}

function toWorkspaceIdentifier(workspace) {
  if (workspace.configuration) {
    return {
      configPath: workspace.configuration,
      id: workspace.id
    };
  }

  if (workspace.folders.length === 1) {
    return workspace.folders[0].uri;
  } // Empty workspace


  return undefined;
} //#endregion
},{"../../../base/common/uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetVariables.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RandomBasedVariableResolver = exports.WorkspaceBasedVariableResolver = exports.TimeBasedVariableResolver = exports.CommentBasedVariableResolver = exports.ClipboardBasedVariableResolver = exports.ModelBasedVariableResolver = exports.SelectionBasedVariableResolver = exports.CompositeSnippetVariableResolver = void 0;

var nls = _interopRequireWildcard(require("../../../nls.js"));

var path = _interopRequireWildcard(require("../../../base/common/path.js"));

var _resources = require("../../../base/common/resources.js");

var _snippetParser = require("./snippetParser.js");

var _languageConfigurationRegistry = require("../../common/modes/languageConfigurationRegistry.js");

var _strings = require("../../../base/common/strings.js");

var _workspaces = require("../../../platform/workspaces/common/workspaces.js");

var _labels = require("../../../base/common/labels.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var CompositeSnippetVariableResolver =
/** @class */
function () {
  function CompositeSnippetVariableResolver(_delegates) {
    this._delegates = _delegates; //
  }

  CompositeSnippetVariableResolver.prototype.resolve = function (variable) {
    for (var _i = 0, _a = this._delegates; _i < _a.length; _i++) {
      var delegate = _a[_i];
      var value = delegate.resolve(variable);

      if (value !== undefined) {
        return value;
      }
    }

    return undefined;
  };

  return CompositeSnippetVariableResolver;
}();

exports.CompositeSnippetVariableResolver = CompositeSnippetVariableResolver;

var SelectionBasedVariableResolver =
/** @class */
function () {
  function SelectionBasedVariableResolver(_model, _selection) {
    this._model = _model;
    this._selection = _selection; //
  }

  SelectionBasedVariableResolver.prototype.resolve = function (variable) {
    var name = variable.name;

    if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {
      var value = this._model.getValueInRange(this._selection) || undefined;

      if (value && this._selection.startLineNumber !== this._selection.endLineNumber && variable.snippet) {
        // Selection is a multiline string which we indentation we now
        // need to adjust. We compare the indentation of this variable
        // with the indentation at the editor position and add potential
        // extra indentation to the value
        var line = this._model.getLineContent(this._selection.startLineNumber);

        var lineLeadingWhitespace = (0, _strings.getLeadingWhitespace)(line, 0, this._selection.startColumn - 1);
        var varLeadingWhitespace_1 = lineLeadingWhitespace;
        variable.snippet.walk(function (marker) {
          if (marker === variable) {
            return false;
          }

          if (marker instanceof _snippetParser.Text) {
            varLeadingWhitespace_1 = (0, _strings.getLeadingWhitespace)(marker.value.split(/\r\n|\r|\n/).pop());
          }

          return true;
        });
        var whitespaceCommonLength_1 = (0, _strings.commonPrefixLength)(varLeadingWhitespace_1, lineLeadingWhitespace);
        value = value.replace(/(\r\n|\r|\n)(.*)/g, function (m, newline, rest) {
          return "" + newline + varLeadingWhitespace_1.substr(whitespaceCommonLength_1) + rest;
        });
      }

      return value;
    } else if (name === 'TM_CURRENT_LINE') {
      return this._model.getLineContent(this._selection.positionLineNumber);
    } else if (name === 'TM_CURRENT_WORD') {
      var info = this._model.getWordAtPosition({
        lineNumber: this._selection.positionLineNumber,
        column: this._selection.positionColumn
      });

      return info && info.word || undefined;
    } else if (name === 'TM_LINE_INDEX') {
      return String(this._selection.positionLineNumber - 1);
    } else if (name === 'TM_LINE_NUMBER') {
      return String(this._selection.positionLineNumber);
    }

    return undefined;
  };

  return SelectionBasedVariableResolver;
}();

exports.SelectionBasedVariableResolver = SelectionBasedVariableResolver;

var ModelBasedVariableResolver =
/** @class */
function () {
  function ModelBasedVariableResolver(_labelService, _model) {
    this._labelService = _labelService;
    this._model = _model; //
  }

  ModelBasedVariableResolver.prototype.resolve = function (variable) {
    var name = variable.name;

    if (name === 'TM_FILENAME') {
      return path.basename(this._model.uri.fsPath);
    } else if (name === 'TM_FILENAME_BASE') {
      var name_1 = path.basename(this._model.uri.fsPath);
      var idx = name_1.lastIndexOf('.');

      if (idx <= 0) {
        return name_1;
      } else {
        return name_1.slice(0, idx);
      }
    } else if (name === 'TM_DIRECTORY' && this._labelService) {
      if (path.dirname(this._model.uri.fsPath) === '.') {
        return '';
      }

      return this._labelService.getUriLabel((0, _resources.dirname)(this._model.uri));
    } else if (name === 'TM_FILEPATH' && this._labelService) {
      return this._labelService.getUriLabel(this._model.uri);
    }

    return undefined;
  };

  return ModelBasedVariableResolver;
}();

exports.ModelBasedVariableResolver = ModelBasedVariableResolver;

var ClipboardBasedVariableResolver =
/** @class */
function () {
  function ClipboardBasedVariableResolver(_readClipboardText, _selectionIdx, _selectionCount, _spread) {
    this._readClipboardText = _readClipboardText;
    this._selectionIdx = _selectionIdx;
    this._selectionCount = _selectionCount;
    this._spread = _spread; //
  }

  ClipboardBasedVariableResolver.prototype.resolve = function (variable) {
    if (variable.name !== 'CLIPBOARD') {
      return undefined;
    }

    var clipboardText = this._readClipboardText();

    if (!clipboardText) {
      return undefined;
    } // `spread` is assigning each cursor a line of the clipboard
    // text whenever there the line count equals the cursor count
    // and when enabled


    if (this._spread) {
      var lines = clipboardText.split(/\r\n|\n|\r/).filter(function (s) {
        return !(0, _strings.isFalsyOrWhitespace)(s);
      });

      if (lines.length === this._selectionCount) {
        return lines[this._selectionIdx];
      }
    }

    return clipboardText;
  };

  return ClipboardBasedVariableResolver;
}();

exports.ClipboardBasedVariableResolver = ClipboardBasedVariableResolver;

var CommentBasedVariableResolver =
/** @class */
function () {
  function CommentBasedVariableResolver(_model) {
    this._model = _model; //
  }

  CommentBasedVariableResolver.prototype.resolve = function (variable) {
    var name = variable.name;

    var language = this._model.getLanguageIdentifier();

    var config = _languageConfigurationRegistry.LanguageConfigurationRegistry.getComments(language.id);

    if (!config) {
      return undefined;
    }

    if (name === 'LINE_COMMENT') {
      return config.lineCommentToken || undefined;
    } else if (name === 'BLOCK_COMMENT_START') {
      return config.blockCommentStartToken || undefined;
    } else if (name === 'BLOCK_COMMENT_END') {
      return config.blockCommentEndToken || undefined;
    }

    return undefined;
  };

  return CommentBasedVariableResolver;
}();

exports.CommentBasedVariableResolver = CommentBasedVariableResolver;

var TimeBasedVariableResolver =
/** @class */
function () {
  function TimeBasedVariableResolver() {}

  TimeBasedVariableResolver.prototype.resolve = function (variable) {
    var name = variable.name;

    if (name === 'CURRENT_YEAR') {
      return String(new Date().getFullYear());
    } else if (name === 'CURRENT_YEAR_SHORT') {
      return String(new Date().getFullYear()).slice(-2);
    } else if (name === 'CURRENT_MONTH') {
      return (0, _strings.pad)(new Date().getMonth().valueOf() + 1, 2);
    } else if (name === 'CURRENT_DATE') {
      return (0, _strings.pad)(new Date().getDate().valueOf(), 2);
    } else if (name === 'CURRENT_HOUR') {
      return (0, _strings.pad)(new Date().getHours().valueOf(), 2);
    } else if (name === 'CURRENT_MINUTE') {
      return (0, _strings.pad)(new Date().getMinutes().valueOf(), 2);
    } else if (name === 'CURRENT_SECOND') {
      return (0, _strings.pad)(new Date().getSeconds().valueOf(), 2);
    } else if (name === 'CURRENT_DAY_NAME') {
      return TimeBasedVariableResolver.dayNames[new Date().getDay()];
    } else if (name === 'CURRENT_DAY_NAME_SHORT') {
      return TimeBasedVariableResolver.dayNamesShort[new Date().getDay()];
    } else if (name === 'CURRENT_MONTH_NAME') {
      return TimeBasedVariableResolver.monthNames[new Date().getMonth()];
    } else if (name === 'CURRENT_MONTH_NAME_SHORT') {
      return TimeBasedVariableResolver.monthNamesShort[new Date().getMonth()];
    } else if (name === 'CURRENT_SECONDS_UNIX') {
      return String(Math.floor(Date.now() / 1000));
    }

    return undefined;
  };

  TimeBasedVariableResolver.dayNames = [nls.localize('Sunday', "Sunday"), nls.localize('Monday', "Monday"), nls.localize('Tuesday', "Tuesday"), nls.localize('Wednesday', "Wednesday"), nls.localize('Thursday', "Thursday"), nls.localize('Friday', "Friday"), nls.localize('Saturday', "Saturday")];
  TimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', "Sun"), nls.localize('MondayShort', "Mon"), nls.localize('TuesdayShort', "Tue"), nls.localize('WednesdayShort', "Wed"), nls.localize('ThursdayShort', "Thu"), nls.localize('FridayShort', "Fri"), nls.localize('SaturdayShort', "Sat")];
  TimeBasedVariableResolver.monthNames = [nls.localize('January', "January"), nls.localize('February', "February"), nls.localize('March', "March"), nls.localize('April', "April"), nls.localize('May', "May"), nls.localize('June', "June"), nls.localize('July', "July"), nls.localize('August', "August"), nls.localize('September', "September"), nls.localize('October', "October"), nls.localize('November', "November"), nls.localize('December', "December")];
  TimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', "Jan"), nls.localize('FebruaryShort', "Feb"), nls.localize('MarchShort', "Mar"), nls.localize('AprilShort', "Apr"), nls.localize('MayShort', "May"), nls.localize('JuneShort', "Jun"), nls.localize('JulyShort', "Jul"), nls.localize('AugustShort', "Aug"), nls.localize('SeptemberShort', "Sep"), nls.localize('OctoberShort', "Oct"), nls.localize('NovemberShort', "Nov"), nls.localize('DecemberShort', "Dec")];
  return TimeBasedVariableResolver;
}();

exports.TimeBasedVariableResolver = TimeBasedVariableResolver;

var WorkspaceBasedVariableResolver =
/** @class */
function () {
  function WorkspaceBasedVariableResolver(_workspaceService) {
    this._workspaceService = _workspaceService; //
  }

  WorkspaceBasedVariableResolver.prototype.resolve = function (variable) {
    if (!this._workspaceService) {
      return undefined;
    }

    var workspaceIdentifier = (0, _workspaces.toWorkspaceIdentifier)(this._workspaceService.getWorkspace());

    if (!workspaceIdentifier) {
      return undefined;
    }

    if (variable.name === 'WORKSPACE_NAME') {
      return this._resolveWorkspaceName(workspaceIdentifier);
    } else if (variable.name === 'WORKSPACE_FOLDER') {
      return this._resoveWorkspacePath(workspaceIdentifier);
    }

    return undefined;
  };

  WorkspaceBasedVariableResolver.prototype._resolveWorkspaceName = function (workspaceIdentifier) {
    if ((0, _workspaces.isSingleFolderWorkspaceIdentifier)(workspaceIdentifier)) {
      return path.basename(workspaceIdentifier.path);
    }

    var filename = path.basename(workspaceIdentifier.configPath.path);

    if ((0, _strings.endsWith)(filename, _workspaces.WORKSPACE_EXTENSION)) {
      filename = filename.substr(0, filename.length - _workspaces.WORKSPACE_EXTENSION.length - 1);
    }

    return filename;
  };

  WorkspaceBasedVariableResolver.prototype._resoveWorkspacePath = function (workspaceIdentifier) {
    if ((0, _workspaces.isSingleFolderWorkspaceIdentifier)(workspaceIdentifier)) {
      return (0, _labels.normalizeDriveLetter)(workspaceIdentifier.fsPath);
    }

    var filename = path.basename(workspaceIdentifier.configPath.path);
    var folderpath = workspaceIdentifier.configPath.fsPath;

    if ((0, _strings.endsWith)(folderpath, filename)) {
      folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);
    }

    return folderpath ? (0, _labels.normalizeDriveLetter)(folderpath) : '/';
  };

  return WorkspaceBasedVariableResolver;
}();

exports.WorkspaceBasedVariableResolver = WorkspaceBasedVariableResolver;

var RandomBasedVariableResolver =
/** @class */
function () {
  function RandomBasedVariableResolver() {}

  RandomBasedVariableResolver.prototype.resolve = function (variable) {
    var name = variable.name;

    if (name === 'RANDOM') {
      return Math.random().toString().slice(-6);
    } else if (name === 'RANDOM_HEX') {
      return Math.random().toString(16).slice(-6);
    }

    return undefined;
  };

  return RandomBasedVariableResolver;
}();

exports.RandomBasedVariableResolver = RandomBasedVariableResolver;
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/path.js":"../node_modules/monaco-editor/esm/vs/base/common/path.js","../../../base/common/resources.js":"../node_modules/monaco-editor/esm/vs/base/common/resources.js","./snippetParser.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetParser.js","../../common/modes/languageConfigurationRegistry.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes/languageConfigurationRegistry.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../../platform/workspaces/common/workspaces.js":"../node_modules/monaco-editor/esm/vs/platform/workspaces/common/workspaces.js","../../../base/common/labels.js":"../node_modules/monaco-editor/esm/vs/base/common/labels.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetSession.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SnippetSession = exports.OneSnippet = void 0;

var _arrays = require("../../../base/common/arrays.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _strings = require("../../../base/common/strings.js");

require("./snippetSession.css");

var _editOperation = require("../../common/core/editOperation.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _textModel = require("../../common/model/textModel.js");

var _clipboardService = require("../../../platform/clipboard/common/clipboardService.js");

var _workspace = require("../../../platform/workspace/common/workspace.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _snippetParser = require("./snippetParser.js");

var _snippetVariables = require("./snippetVariables.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

var colors = _interopRequireWildcard(require("../../../platform/theme/common/colorRegistry.js"));

var _label = require("../../../platform/label/common/label.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  function getColorGraceful(name) {
    var color = theme.getColor(name);
    return color ? color.toString() : 'transparent';
  }

  collector.addRule(".monaco-editor .snippet-placeholder { background-color: " + getColorGraceful(colors.snippetTabstopHighlightBackground) + "; outline-color: " + getColorGraceful(colors.snippetTabstopHighlightBorder) + "; }");
  collector.addRule(".monaco-editor .finish-snippet-placeholder { background-color: " + getColorGraceful(colors.snippetFinalTabstopHighlightBackground) + "; outline-color: " + getColorGraceful(colors.snippetFinalTabstopHighlightBorder) + "; }");
});

var OneSnippet =
/** @class */
function () {
  function OneSnippet(editor, snippet, offset) {
    this._nestingLevel = 1;
    this._editor = editor;
    this._snippet = snippet;
    this._offset = offset;
    this._placeholderGroups = (0, _arrays.groupBy)(snippet.placeholders, _snippetParser.Placeholder.compareByIndex);
    this._placeholderGroupsIdx = -1;
  }

  OneSnippet.prototype.dispose = function () {
    if (this._placeholderDecorations) {
      var toRemove_1 = [];

      this._placeholderDecorations.forEach(function (handle) {
        return toRemove_1.push(handle);
      });

      this._editor.deltaDecorations(toRemove_1, []);
    }

    this._placeholderGroups.length = 0;
  };

  OneSnippet.prototype._initDecorations = function () {
    var _this = this;

    if (this._placeholderDecorations) {
      // already initialized
      return;
    }

    this._placeholderDecorations = new Map();

    var model = this._editor.getModel();

    this._editor.changeDecorations(function (accessor) {
      // create a decoration for each placeholder
      for (var _i = 0, _a = _this._snippet.placeholders; _i < _a.length; _i++) {
        var placeholder = _a[_i];

        var placeholderOffset = _this._snippet.offset(placeholder);

        var placeholderLen = _this._snippet.fullLen(placeholder);

        var range = _range.Range.fromPositions(model.getPositionAt(_this._offset + placeholderOffset), model.getPositionAt(_this._offset + placeholderOffset + placeholderLen));

        var options = placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive;
        var handle = accessor.addDecoration(range, options);

        _this._placeholderDecorations.set(placeholder, handle);
      }
    });
  };

  OneSnippet.prototype.move = function (fwd) {
    var _this = this;

    if (!this._editor.hasModel()) {
      return [];
    }

    this._initDecorations(); // Transform placeholder text if necessary


    if (this._placeholderGroupsIdx >= 0) {
      var operations = [];

      for (var _i = 0, _a = this._placeholderGroups[this._placeholderGroupsIdx]; _i < _a.length; _i++) {
        var placeholder = _a[_i]; // Check if the placeholder has a transformation

        if (placeholder.transform) {
          var id = this._placeholderDecorations.get(placeholder);

          var range = this._editor.getModel().getDecorationRange(id);

          var currentValue = this._editor.getModel().getValueInRange(range);

          operations.push(_editOperation.EditOperation.replaceMove(range, placeholder.transform.resolve(currentValue)));
        }
      }

      if (operations.length > 0) {
        this._editor.executeEdits('snippet.placeholderTransform', operations);
      }
    }

    var couldSkipThisPlaceholder = false;

    if (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {
      this._placeholderGroupsIdx += 1;
      couldSkipThisPlaceholder = true;
    } else if (fwd === false && this._placeholderGroupsIdx > 0) {
      this._placeholderGroupsIdx -= 1;
      couldSkipThisPlaceholder = true;
    } else {// the selection of the current placeholder might
      // not acurate any more -> simply restore it
    }

    var newSelections = this._editor.getModel().changeDecorations(function (accessor) {
      var activePlaceholders = new Set(); // change stickiness to always grow when typing at its edges
      // because these decorations represent the currently active
      // tabstop.
      // Special case #1: reaching the final tabstop
      // Special case #2: placeholders enclosing active placeholders

      var selections = [];

      for (var _i = 0, _a = _this._placeholderGroups[_this._placeholderGroupsIdx]; _i < _a.length; _i++) {
        var placeholder = _a[_i];

        var id = _this._placeholderDecorations.get(placeholder);

        var range = _this._editor.getModel().getDecorationRange(id);

        selections.push(new _selection.Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)); // consider to skip this placeholder index when the decoration
        // range is empty but when the placeholder wasn't. that's a strong
        // hint that the placeholder has been deleted. (all placeholder must match this)

        couldSkipThisPlaceholder = couldSkipThisPlaceholder && _this._hasPlaceholderBeenCollapsed(placeholder);
        accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);
        activePlaceholders.add(placeholder);

        for (var _b = 0, _c = _this._snippet.enclosingPlaceholders(placeholder); _b < _c.length; _b++) {
          var enclosingPlaceholder = _c[_b];

          var id_1 = _this._placeholderDecorations.get(enclosingPlaceholder);

          accessor.changeDecorationOptions(id_1, enclosingPlaceholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);
          activePlaceholders.add(enclosingPlaceholder);
        }
      } // change stickness to never grow when typing at its edges
      // so that in-active tabstops never grow


      _this._placeholderDecorations.forEach(function (id, placeholder) {
        if (!activePlaceholders.has(placeholder)) {
          accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive);
        }
      });

      return selections;
    });

    return !couldSkipThisPlaceholder ? newSelections : this.move(fwd);
  };

  OneSnippet.prototype._hasPlaceholderBeenCollapsed = function (placeholder) {
    // A placeholder is empty when it wasn't empty when authored but
    // when its tracking decoration is empty. This also applies to all
    // potential parent placeholders
    var marker = placeholder;

    while (marker) {
      if (marker instanceof _snippetParser.Placeholder) {
        var id = this._placeholderDecorations.get(marker);

        var range = this._editor.getModel().getDecorationRange(id);

        if (range.isEmpty() && marker.toString().length > 0) {
          return true;
        }
      }

      marker = marker.parent;
    }

    return false;
  };

  Object.defineProperty(OneSnippet.prototype, "isAtFirstPlaceholder", {
    get: function () {
      return this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(OneSnippet.prototype, "isAtLastPlaceholder", {
    get: function () {
      return this._placeholderGroupsIdx === this._placeholderGroups.length - 1;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(OneSnippet.prototype, "hasPlaceholder", {
    get: function () {
      return this._snippet.placeholders.length > 0;
    },
    enumerable: true,
    configurable: true
  });

  OneSnippet.prototype.computePossibleSelections = function () {
    var result = new Map();

    for (var _i = 0, _a = this._placeholderGroups; _i < _a.length; _i++) {
      var placeholdersWithEqualIndex = _a[_i];
      var ranges = void 0;

      for (var _b = 0, placeholdersWithEqualIndex_1 = placeholdersWithEqualIndex; _b < placeholdersWithEqualIndex_1.length; _b++) {
        var placeholder = placeholdersWithEqualIndex_1[_b];

        if (placeholder.isFinalTabstop) {
          // ignore those
          break;
        }

        if (!ranges) {
          ranges = [];
          result.set(placeholder.index, ranges);
        }

        var id = this._placeholderDecorations.get(placeholder);

        var range = this._editor.getModel().getDecorationRange(id);

        if (!range) {
          // one of the placeholder lost its decoration and
          // therefore we bail out and pretend the placeholder
          // (with its mirrors) doesn't exist anymore.
          result.delete(placeholder.index);
          break;
        }

        ranges.push(range);
      }
    }

    return result;
  };

  Object.defineProperty(OneSnippet.prototype, "choice", {
    get: function () {
      return this._placeholderGroups[this._placeholderGroupsIdx][0].choice;
    },
    enumerable: true,
    configurable: true
  });

  OneSnippet.prototype.merge = function (others) {
    var _this = this;

    var model = this._editor.getModel();

    this._nestingLevel *= 10;

    this._editor.changeDecorations(function (accessor) {
      // For each active placeholder take one snippet and merge it
      // in that the placeholder (can be many for `$1foo$1foo`). Because
      // everything is sorted by editor selection we can simply remove
      // elements from the beginning of the array
      for (var _i = 0, _a = _this._placeholderGroups[_this._placeholderGroupsIdx]; _i < _a.length; _i++) {
        var placeholder = _a[_i];
        var nested = others.shift();
        console.assert(!nested._placeholderDecorations); // Massage placeholder-indicies of the nested snippet to be
        // sorted right after the insertion point. This ensures we move
        // through the placeholders in the correct order

        var indexLastPlaceholder = nested._snippet.placeholderInfo.last.index;

        for (var _b = 0, _c = nested._snippet.placeholderInfo.all; _b < _c.length; _b++) {
          var nestedPlaceholder = _c[_b];

          if (nestedPlaceholder.isFinalTabstop) {
            nestedPlaceholder.index = placeholder.index + (indexLastPlaceholder + 1) / _this._nestingLevel;
          } else {
            nestedPlaceholder.index = placeholder.index + nestedPlaceholder.index / _this._nestingLevel;
          }
        }

        _this._snippet.replace(placeholder, nested._snippet.children); // Remove the placeholder at which position are inserting
        // the snippet and also remove its decoration.


        var id = _this._placeholderDecorations.get(placeholder);

        accessor.removeDecoration(id);

        _this._placeholderDecorations.delete(placeholder); // For each *new* placeholder we create decoration to monitor
        // how and if it grows/shrinks.


        for (var _d = 0, _e = nested._snippet.placeholders; _d < _e.length; _d++) {
          var placeholder_1 = _e[_d];

          var placeholderOffset = nested._snippet.offset(placeholder_1);

          var placeholderLen = nested._snippet.fullLen(placeholder_1);

          var range = _range.Range.fromPositions(model.getPositionAt(nested._offset + placeholderOffset), model.getPositionAt(nested._offset + placeholderOffset + placeholderLen));

          var handle = accessor.addDecoration(range, OneSnippet._decor.inactive);

          _this._placeholderDecorations.set(placeholder_1, handle);
        }
      } // Last, re-create the placeholder groups by sorting placeholders by their index.


      _this._placeholderGroups = (0, _arrays.groupBy)(_this._snippet.placeholders, _snippetParser.Placeholder.compareByIndex);
    });
  };

  OneSnippet._decor = {
    active: _textModel.ModelDecorationOptions.register({
      stickiness: 0
      /* AlwaysGrowsWhenTypingAtEdges */
      ,
      className: 'snippet-placeholder'
    }),
    inactive: _textModel.ModelDecorationOptions.register({
      stickiness: 1
      /* NeverGrowsWhenTypingAtEdges */
      ,
      className: 'snippet-placeholder'
    }),
    activeFinal: _textModel.ModelDecorationOptions.register({
      stickiness: 1
      /* NeverGrowsWhenTypingAtEdges */
      ,
      className: 'finish-snippet-placeholder'
    }),
    inactiveFinal: _textModel.ModelDecorationOptions.register({
      stickiness: 1
      /* NeverGrowsWhenTypingAtEdges */
      ,
      className: 'finish-snippet-placeholder'
    })
  };
  return OneSnippet;
}();

exports.OneSnippet = OneSnippet;
var _defaultOptions = {
  overwriteBefore: 0,
  overwriteAfter: 0,
  adjustWhitespace: true,
  clipboardText: undefined
};

var SnippetSession =
/** @class */
function () {
  function SnippetSession(editor, template, options) {
    if (options === void 0) {
      options = _defaultOptions;
    }

    this._templateMerges = [];
    this._snippets = [];
    this._editor = editor;
    this._template = template;
    this._options = options;
  }

  SnippetSession.adjustWhitespace = function (model, position, snippet, adjustIndentation, adjustNewlines) {
    var line = model.getLineContent(position.lineNumber);
    var lineLeadingWhitespace = (0, _strings.getLeadingWhitespace)(line, 0, position.column - 1);
    snippet.walk(function (marker) {
      if (marker instanceof _snippetParser.Text && !(marker.parent instanceof _snippetParser.Choice)) {
        // adjust indentation of text markers, except for choise elements
        // which get adjusted when being selected
        var lines = marker.value.split(/\r\n|\r|\n/);

        if (adjustIndentation) {
          for (var i = 1; i < lines.length; i++) {
            var templateLeadingWhitespace = (0, _strings.getLeadingWhitespace)(lines[i]);
            lines[i] = model.normalizeIndentation(lineLeadingWhitespace + templateLeadingWhitespace) + lines[i].substr(templateLeadingWhitespace.length);
          }
        }

        if (adjustNewlines) {
          var newValue = lines.join(model.getEOL());

          if (newValue !== marker.value) {
            marker.parent.replace(marker, [new _snippetParser.Text(newValue)]);
          }
        }
      }

      return true;
    });
  };

  SnippetSession.adjustSelection = function (model, selection, overwriteBefore, overwriteAfter) {
    if (overwriteBefore !== 0 || overwriteAfter !== 0) {
      // overwrite[Before|After] is compute using the position, not the whole
      // selection. therefore we adjust the selection around that position
      var positionLineNumber = selection.positionLineNumber,
          positionColumn = selection.positionColumn;
      var positionColumnBefore = positionColumn - overwriteBefore;
      var positionColumnAfter = positionColumn + overwriteAfter;
      var range = model.validateRange({
        startLineNumber: positionLineNumber,
        startColumn: positionColumnBefore,
        endLineNumber: positionLineNumber,
        endColumn: positionColumnAfter
      });
      selection = _selection.Selection.createWithDirection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn, selection.getDirection());
    }

    return selection;
  };

  SnippetSession.createEditsAndSnippets = function (editor, template, overwriteBefore, overwriteAfter, enforceFinalTabstop, adjustWhitespace, clipboardText) {
    var edits = [];
    var snippets = [];

    if (!editor.hasModel()) {
      return {
        edits: edits,
        snippets: snippets
      };
    }

    var model = editor.getModel();
    var workspaceService = editor.invokeWithinContext(function (accessor) {
      return accessor.get(_workspace.IWorkspaceContextService, _instantiation.optional);
    });
    var modelBasedVariableResolver = editor.invokeWithinContext(function (accessor) {
      return new _snippetVariables.ModelBasedVariableResolver(accessor.get(_label.ILabelService, _instantiation.optional), model);
    });
    var clipboardService = editor.invokeWithinContext(function (accessor) {
      return accessor.get(_clipboardService.IClipboardService, _instantiation.optional);
    });

    var readClipboardText = function () {
      return clipboardText || clipboardService && clipboardService.readTextSync();
    };

    var delta = 0; // know what text the overwrite[Before|After] extensions
    // of the primary curser have selected because only when
    // secondary selections extend to the same text we can grow them

    var firstBeforeText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));
    var firstAfterText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), 0, overwriteAfter)); // remember the first non-whitespace column to decide if
    // `keepWhitespace` should be overruled for secondary selections

    var firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber); // sort selections by their start position but remeber
    // the original index. that allows you to create correct
    // offset-based selection logic without changing the
    // primary selection

    var indexedSelections = editor.getSelections().map(function (selection, idx) {
      return {
        selection: selection,
        idx: idx
      };
    }).sort(function (a, b) {
      return _range.Range.compareRangesUsingStarts(a.selection, b.selection);
    });

    for (var _i = 0, indexedSelections_1 = indexedSelections; _i < indexedSelections_1.length; _i++) {
      var _a = indexedSelections_1[_i],
          selection = _a.selection,
          idx = _a.idx; // extend selection with the `overwriteBefore` and `overwriteAfter` and then
      // compare if this matches the extensions of the primary selection

      var extensionBefore = SnippetSession.adjustSelection(model, selection, overwriteBefore, 0);
      var extensionAfter = SnippetSession.adjustSelection(model, selection, 0, overwriteAfter);

      if (firstBeforeText !== model.getValueInRange(extensionBefore)) {
        extensionBefore = selection;
      }

      if (firstAfterText !== model.getValueInRange(extensionAfter)) {
        extensionAfter = selection;
      } // merge the before and after selection into one


      var snippetSelection = selection.setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn).setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);
      var snippet = new _snippetParser.SnippetParser().parse(template, true, enforceFinalTabstop); // adjust the template string to match the indentation and
      // whitespace rules of this insert location (can be different for each cursor)
      // happens when being asked for (default) or when this is a secondary
      // cursor and the leading whitespace is different

      var start = snippetSelection.getStartPosition();
      SnippetSession.adjustWhitespace(model, start, snippet, adjustWhitespace || idx > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber), true);
      snippet.resolveVariables(new _snippetVariables.CompositeSnippetVariableResolver([modelBasedVariableResolver, new _snippetVariables.ClipboardBasedVariableResolver(readClipboardText, idx, indexedSelections.length, editor.getOption(58
      /* multiCursorPaste */
      ) === 'spread'), new _snippetVariables.SelectionBasedVariableResolver(model, selection), new _snippetVariables.CommentBasedVariableResolver(model), new _snippetVariables.TimeBasedVariableResolver(), new _snippetVariables.WorkspaceBasedVariableResolver(workspaceService), new _snippetVariables.RandomBasedVariableResolver()]));
      var offset = model.getOffsetAt(start) + delta;
      delta += snippet.toString().length - model.getValueLengthInRange(snippetSelection); // store snippets with the index of their originating selection.
      // that ensures the primiary cursor stays primary despite not being
      // the one with lowest start position

      edits[idx] = _editOperation.EditOperation.replace(snippetSelection, snippet.toString());
      snippets[idx] = new OneSnippet(editor, snippet, offset);
    }

    return {
      edits: edits,
      snippets: snippets
    };
  };

  SnippetSession.prototype.dispose = function () {
    (0, _lifecycle.dispose)(this._snippets);
  };

  SnippetSession.prototype._logInfo = function () {
    return "template=\"" + this._template + "\", merged_templates=\"" + this._templateMerges.join(' -> ') + "\"";
  };

  SnippetSession.prototype.insert = function () {
    var _this = this;

    if (!this._editor.hasModel()) {
      return;
    } // make insert edit and start with first selections


    var _a = SnippetSession.createEditsAndSnippets(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText),
        edits = _a.edits,
        snippets = _a.snippets;

    this._snippets = snippets;

    this._editor.executeEdits('snippet', edits, function (undoEdits) {
      if (_this._snippets[0].hasPlaceholder) {
        return _this._move(true);
      } else {
        return undoEdits.map(function (edit) {
          return _selection.Selection.fromPositions(edit.range.getEndPosition());
        });
      }
    });

    this._editor.revealRange(this._editor.getSelections()[0]);
  };

  SnippetSession.prototype.merge = function (template, options) {
    var _this = this;

    if (options === void 0) {
      options = _defaultOptions;
    }

    if (!this._editor.hasModel()) {
      return;
    }

    this._templateMerges.push([this._snippets[0]._nestingLevel, this._snippets[0]._placeholderGroupsIdx, template]);

    var _a = SnippetSession.createEditsAndSnippets(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText),
        edits = _a.edits,
        snippets = _a.snippets;

    this._editor.executeEdits('snippet', edits, function (undoEdits) {
      for (var _i = 0, _a = _this._snippets; _i < _a.length; _i++) {
        var snippet = _a[_i];
        snippet.merge(snippets);
      }

      console.assert(snippets.length === 0);

      if (_this._snippets[0].hasPlaceholder) {
        return _this._move(undefined);
      } else {
        return undoEdits.map(function (edit) {
          return _selection.Selection.fromPositions(edit.range.getEndPosition());
        });
      }
    });
  };

  SnippetSession.prototype.next = function () {
    var newSelections = this._move(true);

    this._editor.setSelections(newSelections);

    this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());
  };

  SnippetSession.prototype.prev = function () {
    var newSelections = this._move(false);

    this._editor.setSelections(newSelections);

    this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());
  };

  SnippetSession.prototype._move = function (fwd) {
    var selections = [];

    for (var _i = 0, _a = this._snippets; _i < _a.length; _i++) {
      var snippet = _a[_i];
      var oneSelection = snippet.move(fwd);
      selections.push.apply(selections, oneSelection);
    }

    return selections;
  };

  Object.defineProperty(SnippetSession.prototype, "isAtFirstPlaceholder", {
    get: function () {
      return this._snippets[0].isAtFirstPlaceholder;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(SnippetSession.prototype, "isAtLastPlaceholder", {
    get: function () {
      return this._snippets[0].isAtLastPlaceholder;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(SnippetSession.prototype, "hasPlaceholder", {
    get: function () {
      return this._snippets[0].hasPlaceholder;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(SnippetSession.prototype, "choice", {
    get: function () {
      return this._snippets[0].choice;
    },
    enumerable: true,
    configurable: true
  });

  SnippetSession.prototype.isSelectionWithinPlaceholders = function () {
    if (!this.hasPlaceholder) {
      return false;
    }

    var selections = this._editor.getSelections();

    if (selections.length < this._snippets.length) {
      // this means we started snippet mode with N
      // selections and have M (N > M) selections.
      // So one snippet is without selection -> cancel
      return false;
    }

    var allPossibleSelections = new Map();

    var _loop_1 = function (snippet) {
      var possibleSelections = snippet.computePossibleSelections(); // for the first snippet find the placeholder (and its ranges)
      // that contain at least one selection. for all remaining snippets
      // the same placeholder (and their ranges) must be used.

      if (allPossibleSelections.size === 0) {
        possibleSelections.forEach(function (ranges, index) {
          ranges.sort(_range.Range.compareRangesUsingStarts);

          for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {
            var selection = selections_1[_i];

            if (ranges[0].containsRange(selection)) {
              allPossibleSelections.set(index, []);
              break;
            }
          }
        });
      }

      if (allPossibleSelections.size === 0) {
        return {
          value: false
        };
      } // add selections from 'this' snippet so that we know all
      // selections for this placeholder


      allPossibleSelections.forEach(function (array, index) {
        array.push.apply(array, possibleSelections.get(index));
      });
    };

    for (var _i = 0, _a = this._snippets; _i < _a.length; _i++) {
      var snippet = _a[_i];

      var state_1 = _loop_1(snippet);

      if (typeof state_1 === "object") return state_1.value;
    } // sort selections (and later placeholder-ranges). then walk both
    // arrays and make sure the placeholder-ranges contain the corresponding
    // selection


    selections.sort(_range.Range.compareRangesUsingStarts);
    allPossibleSelections.forEach(function (ranges, index) {
      if (ranges.length !== selections.length) {
        allPossibleSelections.delete(index);
        return;
      }

      ranges.sort(_range.Range.compareRangesUsingStarts);

      for (var i = 0; i < ranges.length; i++) {
        if (!ranges[i].containsRange(selections[i])) {
          allPossibleSelections.delete(index);
          return;
        }
      }
    }); // from all possible selections we have deleted those
    // that don't match with the current selection. if we don't
    // have any left, we don't have a selection anymore

    return allPossibleSelections.size > 0;
  };

  return SnippetSession;
}();

exports.SnippetSession = SnippetSession;
},{"../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","./snippetSession.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetSession.css","../../common/core/editOperation.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/editOperation.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../../platform/clipboard/common/clipboardService.js":"../node_modules/monaco-editor/esm/vs/platform/clipboard/common/clipboardService.js","../../../platform/workspace/common/workspace.js":"../node_modules/monaco-editor/esm/vs/platform/workspace/common/workspace.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","./snippetParser.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetParser.js","./snippetVariables.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetVariables.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/label/common/label.js":"../node_modules/monaco-editor/esm/vs/platform/label/common/label.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetController2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SnippetController2 = void 0;

var _lifecycle = require("../../../base/common/lifecycle.js");

var _strings = require("../../../base/common/strings.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _suggest = require("../suggest/suggest.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _log = require("../../../platform/log/common/log.js");

var _snippetSession = require("./snippetSession.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var _defaultOptions = {
  overwriteBefore: 0,
  overwriteAfter: 0,
  undoStopBefore: true,
  undoStopAfter: true,
  adjustWhitespace: true,
  clipboardText: undefined
};

var SnippetController2 =
/** @class */
function () {
  function SnippetController2(_editor, _logService, contextKeyService) {
    this._editor = _editor;
    this._logService = _logService;
    this._snippetListener = new _lifecycle.DisposableStore();
    this._modelVersionId = -1;
    this._inSnippet = SnippetController2.InSnippetMode.bindTo(contextKeyService);
    this._hasNextTabstop = SnippetController2.HasNextTabstop.bindTo(contextKeyService);
    this._hasPrevTabstop = SnippetController2.HasPrevTabstop.bindTo(contextKeyService);
  }

  SnippetController2.get = function (editor) {
    return editor.getContribution(SnippetController2.ID);
  };

  SnippetController2.prototype.dispose = function () {
    this._inSnippet.reset();

    this._hasPrevTabstop.reset();

    this._hasNextTabstop.reset();

    (0, _lifecycle.dispose)(this._session);

    this._snippetListener.dispose();
  };

  SnippetController2.prototype.insert = function (template, opts) {
    // this is here to find out more about the yet-not-understood
    // error that sometimes happens when we fail to inserted a nested
    // snippet
    try {
      this._doInsert(template, typeof opts === 'undefined' ? _defaultOptions : __assign(__assign({}, _defaultOptions), opts));
    } catch (e) {
      this.cancel();

      this._logService.error(e);

      this._logService.error('snippet_error');

      this._logService.error('insert_template=', template);

      this._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');
    }
  };

  SnippetController2.prototype._doInsert = function (template, opts) {
    var _this = this;

    if (!this._editor.hasModel()) {
      return;
    } // don't listen while inserting the snippet
    // as that is the inflight state causing cancelation


    this._snippetListener.clear();

    if (opts.undoStopBefore) {
      this._editor.getModel().pushStackElement();
    }

    if (!this._session) {
      this._modelVersionId = this._editor.getModel().getAlternativeVersionId();
      this._session = new _snippetSession.SnippetSession(this._editor, template, opts);

      this._session.insert();
    } else {
      this._session.merge(template, opts);
    }

    if (opts.undoStopAfter) {
      this._editor.getModel().pushStackElement();
    }

    this._updateState();

    this._snippetListener.add(this._editor.onDidChangeModelContent(function (e) {
      return e.isFlush && _this.cancel();
    }));

    this._snippetListener.add(this._editor.onDidChangeModel(function () {
      return _this.cancel();
    }));

    this._snippetListener.add(this._editor.onDidChangeCursorSelection(function () {
      return _this._updateState();
    }));
  };

  SnippetController2.prototype._updateState = function () {
    if (!this._session || !this._editor.hasModel()) {
      // canceled in the meanwhile
      return;
    }

    if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {
      // undo until the 'before' state happened
      // and makes use cancel snippet mode
      return this.cancel();
    }

    if (!this._session.hasPlaceholder) {
      // don't listen for selection changes and don't
      // update context keys when the snippet is plain text
      return this.cancel();
    }

    if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {
      return this.cancel();
    }

    this._inSnippet.set(true);

    this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);

    this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);

    this._handleChoice();
  };

  SnippetController2.prototype._handleChoice = function () {
    var _this = this;

    if (!this._session || !this._editor.hasModel()) {
      this._currentChoice = undefined;
      return;
    }

    var choice = this._session.choice;

    if (!choice) {
      this._currentChoice = undefined;
      return;
    }

    if (this._currentChoice !== choice) {
      this._currentChoice = choice;

      this._editor.setSelections(this._editor.getSelections().map(function (s) {
        return _selection.Selection.fromPositions(s.getStartPosition());
      }));

      var first_1 = choice.options[0];
      (0, _suggest.showSimpleSuggestions)(this._editor, choice.options.map(function (option, i) {
        // let before = choice.options.slice(0, i);
        // let after = choice.options.slice(i);
        return {
          kind: 13
          /* Value */
          ,
          label: option.value,
          insertText: option.value,
          // insertText: `\${1|${after.concat(before).join(',')}|}$0`,
          // snippetType: 'textmate',
          sortText: (0, _strings.repeat)('a', i + 1),
          range: _range.Range.fromPositions(_this._editor.getPosition(), _this._editor.getPosition().delta(0, first_1.value.length))
        };
      }));
    }
  };

  SnippetController2.prototype.finish = function () {
    while (this._inSnippet.get()) {
      this.next();
    }
  };

  SnippetController2.prototype.cancel = function (resetSelection) {
    if (resetSelection === void 0) {
      resetSelection = false;
    }

    this._inSnippet.reset();

    this._hasPrevTabstop.reset();

    this._hasNextTabstop.reset();

    this._snippetListener.clear();

    (0, _lifecycle.dispose)(this._session);
    this._session = undefined;
    this._modelVersionId = -1;

    if (resetSelection) {
      // reset selection to the primary cursor when being asked
      // for. this happens when explicitly cancelling snippet mode,
      // e.g. when pressing ESC
      this._editor.setSelections([this._editor.getSelection()]);
    }
  };

  SnippetController2.prototype.prev = function () {
    if (this._session) {
      this._session.prev();
    }

    this._updateState();
  };

  SnippetController2.prototype.next = function () {
    if (this._session) {
      this._session.next();
    }

    this._updateState();
  };

  SnippetController2.prototype.isInSnippet = function () {
    return Boolean(this._inSnippet.get());
  };

  SnippetController2.ID = 'snippetController2';
  SnippetController2.InSnippetMode = new _contextkey.RawContextKey('inSnippetMode', false);
  SnippetController2.HasNextTabstop = new _contextkey.RawContextKey('hasNextTabstop', false);
  SnippetController2.HasPrevTabstop = new _contextkey.RawContextKey('hasPrevTabstop', false);
  SnippetController2 = __decorate([__param(1, _log.ILogService), __param(2, _contextkey.IContextKeyService)], SnippetController2);
  return SnippetController2;
}();

exports.SnippetController2 = SnippetController2;
(0, _editorExtensions.registerEditorContribution)(SnippetController2.ID, SnippetController2);

var CommandCtor = _editorExtensions.EditorCommand.bindToContribution(SnippetController2.get);

(0, _editorExtensions.registerEditorCommand)(new CommandCtor({
  id: 'jumpToNextSnippetPlaceholder',
  precondition: _contextkey.ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),
  handler: function (ctrl) {
    return ctrl.next();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 30,
    kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
    primary: 2
    /* Tab */

  }
}));
(0, _editorExtensions.registerEditorCommand)(new CommandCtor({
  id: 'jumpToPrevSnippetPlaceholder',
  precondition: _contextkey.ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),
  handler: function (ctrl) {
    return ctrl.prev();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 30,
    kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
    primary: 1024
    /* Shift */
    | 2
    /* Tab */

  }
}));
(0, _editorExtensions.registerEditorCommand)(new CommandCtor({
  id: 'leaveSnippet',
  precondition: SnippetController2.InSnippetMode,
  handler: function (ctrl) {
    return ctrl.cancel(true);
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 30,
    kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
    primary: 9
    /* Escape */
    ,
    secondary: [1024
    /* Shift */
    | 9
    /* Escape */
    ]
  }
}));
(0, _editorExtensions.registerEditorCommand)(new CommandCtor({
  id: 'acceptSnippet',
  precondition: SnippetController2.InSnippetMode,
  handler: function (ctrl) {
    return ctrl.finish();
  }
}));
},{"../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../suggest/suggest.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggest.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/log/common/log.js":"../node_modules/monaco-editor/esm/vs/platform/log/common/log.js","./snippetSession.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetSession.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestMemory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ISuggestMemoryService = exports.SuggestMemoryService = exports.PrefixMemory = exports.LRUMemory = exports.NoMemory = exports.Memory = void 0;

var _map = require("../../../base/common/map.js");

var _storage = require("../../../platform/storage/common/storage.js");

var _modes = require("../../common/modes.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _async = require("../../../base/common/async.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _configuration = require("../../../platform/configuration/common/configuration.js");

var _extensions = require("../../../platform/instantiation/common/extensions.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var Memory =
/** @class */
function () {
  function Memory() {}

  Memory.prototype.select = function (model, pos, items) {
    if (items.length === 0) {
      return 0;
    }

    var topScore = items[0].score[0];

    for (var i = 1; i < items.length; i++) {
      var _a = items[i],
          score = _a.score,
          suggestion = _a.completion;

      if (score[0] !== topScore) {
        // stop when leaving the group of top matches
        break;
      }

      if (suggestion.preselect) {
        // stop when seeing an auto-select-item
        return i;
      }
    }

    return 0;
  };

  return Memory;
}();

exports.Memory = Memory;

var NoMemory =
/** @class */
function (_super) {
  __extends(NoMemory, _super);

  function NoMemory() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NoMemory.prototype.memorize = function (model, pos, item) {// no-op
  };

  NoMemory.prototype.toJSON = function () {
    return undefined;
  };

  NoMemory.prototype.fromJSON = function () {//
  };

  return NoMemory;
}(Memory);

exports.NoMemory = NoMemory;

var LRUMemory =
/** @class */
function (_super) {
  __extends(LRUMemory, _super);

  function LRUMemory() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._cache = new _map.LRUCache(300, 0.66);
    _this._seq = 0;
    return _this;
  }

  LRUMemory.prototype.memorize = function (model, pos, item) {
    var label = item.completion.label;
    var key = model.getLanguageIdentifier().language + "/" + label;

    this._cache.set(key, {
      touch: this._seq++,
      type: item.completion.kind,
      insertText: item.completion.insertText
    });
  };

  LRUMemory.prototype.select = function (model, pos, items) {
    if (items.length === 0) {
      return 0;
    }

    var lineSuffix = model.getLineContent(pos.lineNumber).substr(pos.column - 10, pos.column - 1);

    if (/\s$/.test(lineSuffix)) {
      return _super.prototype.select.call(this, model, pos, items);
    }

    var topScore = items[0].score[0];
    var indexPreselect = -1;
    var indexRecency = -1;
    var seq = -1;

    for (var i = 0; i < items.length; i++) {
      if (items[i].score[0] !== topScore) {
        // consider only top items
        break;
      }

      var key = model.getLanguageIdentifier().language + "/" + items[i].completion.label;

      var item = this._cache.peek(key);

      if (item && item.touch > seq && item.type === items[i].completion.kind && item.insertText === items[i].completion.insertText) {
        seq = item.touch;
        indexRecency = i;
      }

      if (items[i].completion.preselect && indexPreselect === -1) {
        // stop when seeing an auto-select-item
        return indexPreselect = i;
      }
    }

    if (indexRecency !== -1) {
      return indexRecency;
    } else if (indexPreselect !== -1) {
      return indexPreselect;
    } else {
      return 0;
    }
  };

  LRUMemory.prototype.toJSON = function () {
    var data = [];

    this._cache.forEach(function (value, key) {
      data.push([key, value]);
    });

    return data;
  };

  LRUMemory.prototype.fromJSON = function (data) {
    this._cache.clear();

    var seq = 0;

    for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
      var _a = data_1[_i],
          key = _a[0],
          value = _a[1];
      value.touch = seq;
      value.type = typeof value.type === 'number' ? value.type : (0, _modes.completionKindFromString)(value.type);

      this._cache.set(key, value);
    }

    this._seq = this._cache.size;
  };

  return LRUMemory;
}(Memory);

exports.LRUMemory = LRUMemory;

var PrefixMemory =
/** @class */
function (_super) {
  __extends(PrefixMemory, _super);

  function PrefixMemory() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._trie = _map.TernarySearchTree.forStrings();
    _this._seq = 0;
    return _this;
  }

  PrefixMemory.prototype.memorize = function (model, pos, item) {
    var word = model.getWordUntilPosition(pos).word;
    var key = model.getLanguageIdentifier().language + "/" + word;

    this._trie.set(key, {
      type: item.completion.kind,
      insertText: item.completion.insertText,
      touch: this._seq++
    });
  };

  PrefixMemory.prototype.select = function (model, pos, items) {
    var word = model.getWordUntilPosition(pos).word;

    if (!word) {
      return _super.prototype.select.call(this, model, pos, items);
    }

    var key = model.getLanguageIdentifier().language + "/" + word;

    var item = this._trie.get(key);

    if (!item) {
      item = this._trie.findSubstr(key);
    }

    if (item) {
      for (var i = 0; i < items.length; i++) {
        var _a = items[i].completion,
            kind = _a.kind,
            insertText = _a.insertText;

        if (kind === item.type && insertText === item.insertText) {
          return i;
        }
      }
    }

    return _super.prototype.select.call(this, model, pos, items);
  };

  PrefixMemory.prototype.toJSON = function () {
    var entries = [];

    this._trie.forEach(function (value, key) {
      return entries.push([key, value]);
    }); // sort by last recently used (touch), then
    // take the top 200 item and normalize their
    // touch


    entries.sort(function (a, b) {
      return -(a[1].touch - b[1].touch);
    }).forEach(function (value, i) {
      return value[1].touch = i;
    });
    return entries.slice(0, 200);
  };

  PrefixMemory.prototype.fromJSON = function (data) {
    this._trie.clear();

    if (data.length > 0) {
      this._seq = data[0][1].touch + 1;

      for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
        var _a = data_2[_i],
            key = _a[0],
            value = _a[1];
        value.type = typeof value.type === 'number' ? value.type : (0, _modes.completionKindFromString)(value.type);

        this._trie.set(key, value);
      }
    }
  };

  return PrefixMemory;
}(Memory);

exports.PrefixMemory = PrefixMemory;

var SuggestMemoryService =
/** @class */
function (_super) {
  __extends(SuggestMemoryService, _super);

  function SuggestMemoryService(_storageService, _configService) {
    var _this = _super.call(this) || this;

    _this._storageService = _storageService;
    _this._configService = _configService;
    _this._storagePrefix = 'suggest/memories';

    var update = function () {
      var mode = _this._configService.getValue('editor.suggestSelection');

      var share = _this._configService.getValue('editor.suggest.shareSuggestSelections');

      _this._update(mode, share, false);
    };

    _this._persistSoon = _this._register(new _async.RunOnceScheduler(function () {
      return _this._saveState();
    }, 500));

    _this._register(_storageService.onWillSaveState(function (e) {
      if (e.reason === _storage.WillSaveStateReason.SHUTDOWN) {
        _this._saveState();
      }
    }));

    _this._register(_this._configService.onDidChangeConfiguration(function (e) {
      if (e.affectsConfiguration('editor.suggestSelection') || e.affectsConfiguration('editor.suggest.shareSuggestSelections')) {
        update();
      }
    }));

    _this._register(_this._storageService.onDidChangeStorage(function (e) {
      if (e.scope === 0
      /* GLOBAL */
      && e.key.indexOf(_this._storagePrefix) === 0) {
        if (!document.hasFocus()) {
          // windows that aren't focused have to drop their current
          // storage value and accept what's stored now
          _this._update(_this._mode, _this._shareMem, true);
        }
      }
    }));

    update();
    return _this;
  }

  SuggestMemoryService.prototype._update = function (mode, shareMem, force) {
    if (!force && this._mode === mode && this._shareMem === shareMem) {
      return;
    }

    this._shareMem = shareMem;
    this._mode = mode;
    this._strategy = mode === 'recentlyUsedByPrefix' ? new PrefixMemory() : mode === 'recentlyUsed' ? new LRUMemory() : new NoMemory();

    try {
      var scope = shareMem ? 0
      /* GLOBAL */
      : 1
      /* WORKSPACE */
      ;

      var raw = this._storageService.get(this._storagePrefix + "/" + this._mode, scope);

      if (raw) {
        this._strategy.fromJSON(JSON.parse(raw));
      }
    } catch (e) {// things can go wrong with JSON...
    }
  };

  SuggestMemoryService.prototype.memorize = function (model, pos, item) {
    this._strategy.memorize(model, pos, item);

    this._persistSoon.schedule();
  };

  SuggestMemoryService.prototype.select = function (model, pos, items) {
    return this._strategy.select(model, pos, items);
  };

  SuggestMemoryService.prototype._saveState = function () {
    var raw = JSON.stringify(this._strategy);
    var scope = this._shareMem ? 0
    /* GLOBAL */
    : 1
    /* WORKSPACE */
    ;

    this._storageService.store(this._storagePrefix + "/" + this._mode, raw, scope);
  };

  SuggestMemoryService = __decorate([__param(0, _storage.IStorageService), __param(1, _configuration.IConfigurationService)], SuggestMemoryService);
  return SuggestMemoryService;
}(_lifecycle.Disposable);

exports.SuggestMemoryService = SuggestMemoryService;
var ISuggestMemoryService = (0, _instantiation.createDecorator)('ISuggestMemories');
exports.ISuggestMemoryService = ISuggestMemoryService;
(0, _extensions.registerSingleton)(ISuggestMemoryService, SuggestMemoryService, true);
},{"../../../base/common/map.js":"../node_modules/monaco-editor/esm/vs/base/common/map.js","../../../platform/storage/common/storage.js":"../node_modules/monaco-editor/esm/vs/platform/storage/common/storage.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../platform/configuration/common/configuration.js":"../node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js","../../../platform/instantiation/common/extensions.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/extensions.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestAlternatives.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuggestAlternatives = void 0;

var _lifecycle = require("../../../base/common/lifecycle.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var SuggestAlternatives =
/** @class */
function () {
  function SuggestAlternatives(_editor, contextKeyService) {
    this._editor = _editor;
    this._index = 0;
    this._ckOtherSuggestions = SuggestAlternatives.OtherSuggestions.bindTo(contextKeyService);
  }

  SuggestAlternatives.prototype.dispose = function () {
    this.reset();
  };

  SuggestAlternatives.prototype.reset = function () {
    this._ckOtherSuggestions.reset();

    (0, _lifecycle.dispose)(this._listener);
    this._model = undefined;
    this._acceptNext = undefined;
    this._ignore = false;
  };

  SuggestAlternatives.prototype.set = function (_a, acceptNext) {
    var _this = this;

    var model = _a.model,
        index = _a.index; // no suggestions -> nothing to do

    if (model.items.length === 0) {
      this.reset();
      return;
    } // no alternative suggestions -> nothing to do


    var nextIndex = SuggestAlternatives._moveIndex(true, model, index);

    if (nextIndex === index) {
      this.reset();
      return;
    }

    this._acceptNext = acceptNext;
    this._model = model;
    this._index = index;
    this._listener = this._editor.onDidChangeCursorPosition(function () {
      if (!_this._ignore) {
        _this.reset();
      }
    });

    this._ckOtherSuggestions.set(true);
  };

  SuggestAlternatives._moveIndex = function (fwd, model, index) {
    var newIndex = index;

    while (true) {
      newIndex = (newIndex + model.items.length + (fwd ? +1 : -1)) % model.items.length;

      if (newIndex === index) {
        break;
      }

      if (!model.items[newIndex].completion.additionalTextEdits) {
        break;
      }
    }

    return newIndex;
  };

  SuggestAlternatives.prototype.next = function () {
    this._move(true);
  };

  SuggestAlternatives.prototype.prev = function () {
    this._move(false);
  };

  SuggestAlternatives.prototype._move = function (fwd) {
    if (!this._model) {
      // nothing to reason about
      return;
    }

    try {
      this._ignore = true;
      this._index = SuggestAlternatives._moveIndex(fwd, this._model, this._index);

      this._acceptNext({
        index: this._index,
        item: this._model.items[this._index],
        model: this._model
      });
    } finally {
      this._ignore = false;
    }
  };

  SuggestAlternatives.OtherSuggestions = new _contextkey.RawContextKey('hasOtherSuggestions', false);
  SuggestAlternatives = __decorate([__param(1, _contextkey.IContextKeyService)], SuggestAlternatives);
  return SuggestAlternatives;
}();

exports.SuggestAlternatives = SuggestAlternatives;
},{"../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/completionModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompletionModel = exports.LineContext = void 0;

var _filters = require("../../../base/common/filters.js");

var _strings = require("../../../base/common/strings.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var LineContext =
/** @class */
function () {
  function LineContext(leadingLineContent, characterCountDelta) {
    this.leadingLineContent = leadingLineContent;
    this.characterCountDelta = characterCountDelta;
  }

  return LineContext;
}();

exports.LineContext = LineContext;

var CompletionModel =
/** @class */
function () {
  function CompletionModel(items, column, lineContext, wordDistance, options, snippetSuggestions) {
    this._snippetCompareFn = CompletionModel._compareCompletionItems;
    this._items = items;
    this._column = column;
    this._wordDistance = wordDistance;
    this._options = options;
    this._refilterKind = 1
    /* All */
    ;
    this._lineContext = lineContext;

    if (snippetSuggestions === 'top') {
      this._snippetCompareFn = CompletionModel._compareCompletionItemsSnippetsUp;
    } else if (snippetSuggestions === 'bottom') {
      this._snippetCompareFn = CompletionModel._compareCompletionItemsSnippetsDown;
    }
  }

  Object.defineProperty(CompletionModel.prototype, "lineContext", {
    get: function () {
      return this._lineContext;
    },
    set: function (value) {
      if (this._lineContext.leadingLineContent !== value.leadingLineContent || this._lineContext.characterCountDelta !== value.characterCountDelta) {
        this._refilterKind = this._lineContext.characterCountDelta < value.characterCountDelta && this._filteredItems ? 2
        /* Incr */
        : 1
        /* All */
        ;
        this._lineContext = value;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(CompletionModel.prototype, "items", {
    get: function () {
      this._ensureCachedState();

      return this._filteredItems;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(CompletionModel.prototype, "incomplete", {
    get: function () {
      this._ensureCachedState();

      return this._isIncomplete;
    },
    enumerable: true,
    configurable: true
  });

  CompletionModel.prototype.adopt = function (except) {
    var res = new Array();

    for (var i = 0; i < this._items.length;) {
      if (!except.has(this._items[i].provider)) {
        res.push(this._items[i]); // unordered removed

        this._items[i] = this._items[this._items.length - 1];

        this._items.pop();
      } else {
        // continue with next item
        i++;
      }
    }

    this._refilterKind = 1
    /* All */
    ;
    return res;
  };

  Object.defineProperty(CompletionModel.prototype, "stats", {
    get: function () {
      this._ensureCachedState();

      return this._stats;
    },
    enumerable: true,
    configurable: true
  });

  CompletionModel.prototype._ensureCachedState = function () {
    if (this._refilterKind !== 0
    /* Nothing */
    ) {
        this._createCachedState();
      }
  };

  CompletionModel.prototype._createCachedState = function () {
    this._isIncomplete = new Set();
    this._stats = {
      suggestionCount: 0,
      snippetCount: 0,
      textCount: 0
    };
    var _a = this._lineContext,
        leadingLineContent = _a.leadingLineContent,
        characterCountDelta = _a.characterCountDelta;
    var word = '';
    var wordLow = ''; // incrementally filter less

    var source = this._refilterKind === 1
    /* All */
    ? this._items : this._filteredItems;
    var target = []; // picks a score function based on the number of
    // items that we have to score/filter and based on the
    // user-configuration

    var scoreFn = !this._options.filterGraceful || source.length > 2000 ? _filters.fuzzyScore : _filters.fuzzyScoreGracefulAggressive;

    for (var i = 0; i < source.length; i++) {
      var item = source[i]; // collect those supports that signaled having
      // an incomplete result

      if (item.container.incomplete) {
        this._isIncomplete.add(item.provider);
      } // 'word' is that remainder of the current line that we
      // filter and score against. In theory each suggestion uses a
      // different word, but in practice not - that's why we cache


      var overwriteBefore = item.position.column - item.editStart.column;
      var wordLen = overwriteBefore + characterCountDelta - (item.position.column - this._column);

      if (word.length !== wordLen) {
        word = wordLen === 0 ? '' : leadingLineContent.slice(-wordLen);
        wordLow = word.toLowerCase();
      } // remember the word against which this item was
      // scored


      item.word = word;

      if (wordLen === 0) {
        // when there is nothing to score against, don't
        // event try to do. Use a const rank and rely on
        // the fallback-sort using the initial sort order.
        // use a score of `-100` because that is out of the
        // bound of values `fuzzyScore` will return
        item.score = _filters.FuzzyScore.Default;
      } else {
        // skip word characters that are whitespace until
        // we have hit the replace range (overwriteBefore)
        var wordPos = 0;

        while (wordPos < overwriteBefore) {
          var ch = word.charCodeAt(wordPos);

          if (ch === 32
          /* Space */
          || ch === 9
          /* Tab */
          ) {
              wordPos += 1;
            } else {
            break;
          }
        }

        if (wordPos >= wordLen) {
          // the wordPos at which scoring starts is the whole word
          // and therefore the same rules as not having a word apply
          item.score = _filters.FuzzyScore.Default;
        } else if (typeof item.completion.filterText === 'string') {
          // when there is a `filterText` it must match the `word`.
          // if it matches we check with the label to compute highlights
          // and if that doesn't yield a result we have no highlights,
          // despite having the match
          var match = scoreFn(word, wordLow, wordPos, item.completion.filterText, item.filterTextLow, 0, false);

          if (!match) {
            continue; // NO match
          }

          if ((0, _strings.compareIgnoreCase)(item.completion.filterText, item.completion.label) === 0) {
            // filterText and label are actually the same -> use good highlights
            item.score = match;
          } else {
            // re-run the scorer on the label in the hope of a result BUT use the rank
            // of the filterText-match
            item.score = (0, _filters.anyScore)(word, wordLow, wordPos, item.completion.label, item.labelLow, 0);
            item.score[0] = match[0]; // use score from filterText
          }
        } else {
          // by default match `word` against the `label`
          var match = scoreFn(word, wordLow, wordPos, item.completion.label, item.labelLow, 0, false);

          if (!match) {
            continue; // NO match
          }

          item.score = match;
        }
      }

      item.idx = i;
      item.distance = this._wordDistance.distance(item.position, item.completion);
      target.push(item); // update stats

      this._stats.suggestionCount++;

      switch (item.completion.kind) {
        case 25
        /* Snippet */
        :
          this._stats.snippetCount++;
          break;

        case 18
        /* Text */
        :
          this._stats.textCount++;
          break;
      }
    }

    this._filteredItems = target.sort(this._snippetCompareFn);
    this._refilterKind = 0
    /* Nothing */
    ;
  };

  CompletionModel._compareCompletionItems = function (a, b) {
    if (a.score[0] > b.score[0]) {
      return -1;
    } else if (a.score[0] < b.score[0]) {
      return 1;
    } else if (a.distance < b.distance) {
      return -1;
    } else if (a.distance > b.distance) {
      return 1;
    } else if (a.idx < b.idx) {
      return -1;
    } else if (a.idx > b.idx) {
      return 1;
    } else {
      return 0;
    }
  };

  CompletionModel._compareCompletionItemsSnippetsDown = function (a, b) {
    if (a.completion.kind !== b.completion.kind) {
      if (a.completion.kind === 25
      /* Snippet */
      ) {
          return 1;
        } else if (b.completion.kind === 25
      /* Snippet */
      ) {
          return -1;
        }
    }

    return CompletionModel._compareCompletionItems(a, b);
  };

  CompletionModel._compareCompletionItemsSnippetsUp = function (a, b) {
    if (a.completion.kind !== b.completion.kind) {
      if (a.completion.kind === 25
      /* Snippet */
      ) {
          return -1;
        } else if (b.completion.kind === 25
      /* Snippet */
      ) {
          return 1;
        }
    }

    return CompletionModel._compareCompletionItems(a, b);
  };

  return CompletionModel;
}();

exports.CompletionModel = CompletionModel;
},{"../../../base/common/filters.js":"../node_modules/monaco-editor/esm/vs/base/common/filters.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/wordDistance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WordDistance = void 0;

var _arrays = require("../../../base/common/arrays.js");

var _range = require("../../common/core/range.js");

var _bracketSelections = require("../smartSelect/bracketSelections.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var WordDistance =
/** @class */
function () {
  function WordDistance() {}

  WordDistance.create = function (service, editor) {
    return __awaiter(this, void 0, void 0, function () {
      var model, position, ranges, wordRanges;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!editor.getOption(85
            /* suggest */
            ).localityBonus) {
              return [2
              /*return*/
              , WordDistance.None];
            }

            if (!editor.hasModel()) {
              return [2
              /*return*/
              , WordDistance.None];
            }

            model = editor.getModel();
            position = editor.getPosition();

            if (!service.canComputeWordRanges(model.uri)) {
              return [2
              /*return*/
              , WordDistance.None];
            }

            return [4
            /*yield*/
            , new _bracketSelections.BracketSelectionRangeProvider().provideSelectionRanges(model, [position])];

          case 1:
            ranges = _a.sent();

            if (!ranges || ranges.length === 0 || ranges[0].length === 0) {
              return [2
              /*return*/
              , WordDistance.None];
            }

            return [4
            /*yield*/
            , service.computeWordRanges(model.uri, ranges[0][0].range)];

          case 2:
            wordRanges = _a.sent();
            return [2
            /*return*/
            , new (
            /** @class */
            function (_super) {
              __extends(class_1, _super);

              function class_1() {
                return _super !== null && _super.apply(this, arguments) || this;
              }

              class_1.prototype.distance = function (anchor, suggestion) {
                if (!wordRanges || !position.equals(editor.getPosition())) {
                  return 0;
                }

                if (suggestion.kind === 17
                /* Keyword */
                ) {
                    return 2 << 20;
                  }

                var word = suggestion.label;
                var wordLines = wordRanges[word];

                if ((0, _arrays.isFalsyOrEmpty)(wordLines)) {
                  return 2 << 20;
                }

                var idx = (0, _arrays.binarySearch)(wordLines, _range.Range.fromPositions(anchor), _range.Range.compareRangesUsingStarts);
                var bestWordRange = idx >= 0 ? wordLines[idx] : wordLines[Math.max(0, ~idx - 1)];
                var blockDistance = ranges.length;

                for (var _i = 0, _a = ranges[0]; _i < _a.length; _i++) {
                  var range = _a[_i];

                  if (!_range.Range.containsRange(range.range, bestWordRange)) {
                    break;
                  }

                  blockDistance -= 1;
                }

                return blockDistance;
              };

              return class_1;
            }(WordDistance))()];
        }
      });
    });
  };

  WordDistance.None = new (
  /** @class */
  function (_super) {
    __extends(class_2, _super);

    function class_2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    class_2.prototype.distance = function () {
      return 0;
    };

    return class_2;
  }(WordDistance))();
  return WordDistance;
}();

exports.WordDistance = WordDistance;
},{"../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../smartSelect/bracketSelections.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/smartSelect/bracketSelections.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuggestModel = exports.LineContext = void 0;

var _arrays = require("../../../base/common/arrays.js");

var _async = require("../../../base/common/async.js");

var _errors = require("../../../base/common/errors.js");

var _event = require("../../../base/common/event.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _selection = require("../../common/core/selection.js");

var _modes = require("../../common/modes.js");

var _completionModel = require("./completionModel.js");

var _suggest = require("./suggest.js");

var _snippetController = require("../snippet/snippetController2.js");

var _cancellation = require("../../../base/common/cancellation.js");

var _wordDistance = require("./wordDistance.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var LineContext =
/** @class */
function () {
  function LineContext(model, position, auto, shy) {
    this.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);
    this.leadingWord = model.getWordUntilPosition(position);
    this.lineNumber = position.lineNumber;
    this.column = position.column;
    this.auto = auto;
    this.shy = shy;
  }

  LineContext.shouldAutoTrigger = function (editor) {
    if (!editor.hasModel()) {
      return false;
    }

    var model = editor.getModel();
    var pos = editor.getPosition();
    model.tokenizeIfCheap(pos.lineNumber);
    var word = model.getWordAtPosition(pos);

    if (!word) {
      return false;
    }

    if (word.endColumn !== pos.column) {
      return false;
    }

    if (!isNaN(Number(word.word))) {
      return false;
    }

    return true;
  };

  return LineContext;
}();

exports.LineContext = LineContext;

var SuggestModel =
/** @class */
function () {
  function SuggestModel(_editor, _editorWorker) {
    var _this = this;

    this._editor = _editor;
    this._editorWorker = _editorWorker;
    this._toDispose = new _lifecycle.DisposableStore();
    this._quickSuggestDelay = 10;
    this._triggerQuickSuggest = new _async.TimeoutTimer();
    this._state = 0
    /* Idle */
    ;
    this._completionDisposables = new _lifecycle.DisposableStore();
    this._onDidCancel = new _event.Emitter();
    this._onDidTrigger = new _event.Emitter();
    this._onDidSuggest = new _event.Emitter();
    this.onDidCancel = this._onDidCancel.event;
    this.onDidTrigger = this._onDidTrigger.event;
    this.onDidSuggest = this._onDidSuggest.event;
    this._currentSelection = this._editor.getSelection() || new _selection.Selection(1, 1, 1, 1); // wire up various listeners

    this._toDispose.add(this._editor.onDidChangeModel(function () {
      _this._updateTriggerCharacters();

      _this.cancel();
    }));

    this._toDispose.add(this._editor.onDidChangeModelLanguage(function () {
      _this._updateTriggerCharacters();

      _this.cancel();
    }));

    this._toDispose.add(this._editor.onDidChangeConfiguration(function () {
      _this._updateTriggerCharacters();

      _this._updateQuickSuggest();
    }));

    this._toDispose.add(_modes.CompletionProviderRegistry.onDidChange(function () {
      _this._updateTriggerCharacters();

      _this._updateActiveSuggestSession();
    }));

    this._toDispose.add(this._editor.onDidChangeCursorSelection(function (e) {
      _this._onCursorChange(e);
    }));

    var editorIsComposing = false;

    this._toDispose.add(this._editor.onCompositionStart(function () {
      editorIsComposing = true;
    }));

    this._toDispose.add(this._editor.onCompositionEnd(function () {
      // refilter when composition ends
      editorIsComposing = false;

      _this._refilterCompletionItems();
    }));

    this._toDispose.add(this._editor.onDidChangeModelContent(function () {
      // only filter completions when the editor isn't
      // composing a character, e.g. ¨ + u makes ü but just
      // ¨ cannot be used for filtering
      if (!editorIsComposing) {
        _this._refilterCompletionItems();
      }
    }));

    this._updateTriggerCharacters();

    this._updateQuickSuggest();
  }

  SuggestModel.prototype.dispose = function () {
    (0, _lifecycle.dispose)(this._triggerCharacterListener);
    (0, _lifecycle.dispose)([this._onDidCancel, this._onDidSuggest, this._onDidTrigger, this._triggerQuickSuggest]);

    this._toDispose.dispose();

    this._completionDisposables.dispose();

    this.cancel();
  }; // --- handle configuration & precondition changes


  SuggestModel.prototype._updateQuickSuggest = function () {
    this._quickSuggestDelay = this._editor.getOption(64
    /* quickSuggestionsDelay */
    );

    if (isNaN(this._quickSuggestDelay) || !this._quickSuggestDelay && this._quickSuggestDelay !== 0 || this._quickSuggestDelay < 0) {
      this._quickSuggestDelay = 10;
    }
  };

  SuggestModel.prototype._updateTriggerCharacters = function () {
    var _this = this;

    (0, _lifecycle.dispose)(this._triggerCharacterListener);

    if (this._editor.getOption(65
    /* readOnly */
    ) || !this._editor.hasModel() || !this._editor.getOption(88
    /* suggestOnTriggerCharacters */
    )) {
      return;
    }

    var supportsByTriggerCharacter = Object.create(null);

    for (var _i = 0, _a = _modes.CompletionProviderRegistry.all(this._editor.getModel()); _i < _a.length; _i++) {
      var support = _a[_i];

      for (var _b = 0, _c = support.triggerCharacters || []; _b < _c.length; _b++) {
        var ch = _c[_b];
        var set = supportsByTriggerCharacter[ch];

        if (!set) {
          set = supportsByTriggerCharacter[ch] = new Set();
          set.add((0, _suggest.getSnippetSuggestSupport)());
        }

        set.add(support);
      }
    }

    this._triggerCharacterListener = this._editor.onDidType(function (text) {
      var lastChar = text.charAt(text.length - 1);
      var supports = supportsByTriggerCharacter[lastChar];

      if (supports) {
        // keep existing items that where not computed by the
        // supports/providers that want to trigger now
        var items = _this._completionModel ? _this._completionModel.adopt(supports) : undefined;

        _this.trigger({
          auto: true,
          shy: false,
          triggerCharacter: lastChar
        }, Boolean(_this._completionModel), supports, items);
      }
    });
  };

  Object.defineProperty(SuggestModel.prototype, "state", {
    // --- trigger/retrigger/cancel suggest
    get: function () {
      return this._state;
    },
    enumerable: true,
    configurable: true
  });

  SuggestModel.prototype.cancel = function (retrigger) {
    if (retrigger === void 0) {
      retrigger = false;
    }

    if (this._state !== 0
    /* Idle */
    ) {
        this._triggerQuickSuggest.cancel();

        if (this._requestToken) {
          this._requestToken.cancel();

          this._requestToken = undefined;
        }

        this._state = 0
        /* Idle */
        ;
        this._completionModel = undefined;
        this._context = undefined;

        this._onDidCancel.fire({
          retrigger: retrigger
        });
      }
  };

  SuggestModel.prototype.clear = function () {
    this._completionDisposables.clear();
  };

  SuggestModel.prototype._updateActiveSuggestSession = function () {
    if (this._state !== 0
    /* Idle */
    ) {
        if (!this._editor.hasModel() || !_modes.CompletionProviderRegistry.has(this._editor.getModel())) {
          this.cancel();
        } else {
          this.trigger({
            auto: this._state === 2
            /* Auto */
            ,
            shy: false
          }, true);
        }
      }
  };

  SuggestModel.prototype._onCursorChange = function (e) {
    var _this = this;

    if (!this._editor.hasModel()) {
      return;
    }

    var model = this._editor.getModel();

    var prevSelection = this._currentSelection;
    this._currentSelection = this._editor.getSelection();

    if (!e.selection.isEmpty() || e.reason !== 0
    /* NotSet */
    || e.source !== 'keyboard' && e.source !== 'deleteLeft') {
      // Early exit if nothing needs to be done!
      // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)
      if (this._state !== 0
      /* Idle */
      ) {
          this.cancel();
        }

      return;
    }

    if (!_modes.CompletionProviderRegistry.has(model)) {
      return;
    }

    if (this._state === 0
    /* Idle */
    ) {
        if (this._editor.getOption(63
        /* quickSuggestions */
        ) === false) {
          // not enabled
          return;
        }

        if (!prevSelection.containsRange(this._currentSelection) && !prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) {
          // cursor didn't move RIGHT
          return;
        }

        if (this._editor.getOption(85
        /* suggest */
        ).snippetsPreventQuickSuggestions && _snippetController.SnippetController2.get(this._editor).isInSnippet()) {
          // no quick suggestion when in snippet mode
          return;
        }

        this.cancel();

        this._triggerQuickSuggest.cancelAndSet(function () {
          if (_this._state !== 0
          /* Idle */
          ) {
              return;
            }

          if (!LineContext.shouldAutoTrigger(_this._editor)) {
            return;
          }

          if (!_this._editor.hasModel()) {
            return;
          }

          var model = _this._editor.getModel();

          var pos = _this._editor.getPosition(); // validate enabled now


          var quickSuggestions = _this._editor.getOption(63
          /* quickSuggestions */
          );

          if (quickSuggestions === false) {
            return;
          } else if (quickSuggestions === true) {// all good
          } else {
            // Check the type of the token that triggered this
            model.tokenizeIfCheap(pos.lineNumber);
            var lineTokens = model.getLineTokens(pos.lineNumber);
            var tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));
            var inValidScope = quickSuggestions.other && tokenType === 0
            /* Other */
            || quickSuggestions.comments && tokenType === 1
            /* Comment */
            || quickSuggestions.strings && tokenType === 2
            /* String */
            ;

            if (!inValidScope) {
              return;
            }
          } // we made it till here -> trigger now


          _this.trigger({
            auto: true,
            shy: false
          });
        }, this._quickSuggestDelay);
      }
  };

  SuggestModel.prototype._refilterCompletionItems = function () {
    var _this = this; // Re-filter suggestions. This MUST run async because filtering/scoring
    // uses the model content AND the cursor position. The latter is NOT
    // updated when the document has changed (the event which drives this method)
    // and therefore a little pause (next mirco task) is needed. See:
    // https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context#25933985


    Promise.resolve().then(function () {
      if (_this._state === 0
      /* Idle */
      ) {
          return;
        }

      if (!_this._editor.hasModel()) {
        return;
      }

      var model = _this._editor.getModel();

      var position = _this._editor.getPosition();

      var ctx = new LineContext(model, position, _this._state === 2
      /* Auto */
      , false);

      _this._onNewContext(ctx);
    });
  };

  SuggestModel.prototype.trigger = function (context, retrigger, onlyFrom, existingItems) {
    var _this = this;

    if (retrigger === void 0) {
      retrigger = false;
    }

    if (!this._editor.hasModel()) {
      return;
    }

    var model = this._editor.getModel();

    var auto = context.auto;
    var ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy); // Cancel previous requests, change state & update UI

    this.cancel(retrigger);
    this._state = auto ? 2
    /* Auto */
    : 1
    /* Manual */
    ;

    this._onDidTrigger.fire({
      auto: auto,
      shy: context.shy,
      position: this._editor.getPosition()
    }); // Capture context when request was sent


    this._context = ctx; // Build context for request

    var suggestCtx;

    if (context.triggerCharacter) {
      suggestCtx = {
        triggerKind: 1
        /* TriggerCharacter */
        ,
        triggerCharacter: context.triggerCharacter
      };
    } else if (onlyFrom && onlyFrom.size > 0) {
      suggestCtx = {
        triggerKind: 2
        /* TriggerForIncompleteCompletions */

      };
    } else {
      suggestCtx = {
        triggerKind: 0
        /* Invoke */

      };
    }

    this._requestToken = new _cancellation.CancellationTokenSource(); // kind filter and snippet sort rules

    var snippetSuggestions = this._editor.getOption(82
    /* snippetSuggestions */
    );

    var snippetSortOrder = 1
    /* Inline */
    ;

    switch (snippetSuggestions) {
      case 'top':
        snippetSortOrder = 0
        /* Top */
        ;
        break;
      // 	↓ that's the default anyways...
      // case 'inline':
      // 	snippetSortOrder = SnippetSortOrder.Inline;
      // 	break;

      case 'bottom':
        snippetSortOrder = 2
        /* Bottom */
        ;
        break;
    }

    var itemKindFilter = SuggestModel._createItemKindFilter(this._editor);

    var wordDistance = _wordDistance.WordDistance.create(this._editorWorker, this._editor);

    var items = (0, _suggest.provideSuggestionItems)(model, this._editor.getPosition(), new _suggest.CompletionOptions(snippetSortOrder, itemKindFilter, onlyFrom), suggestCtx, this._requestToken.token);
    Promise.all([items, wordDistance]).then(function (_a) {
      var items = _a[0],
          wordDistance = _a[1];
      (0, _lifecycle.dispose)(_this._requestToken);

      if (_this._state === 0
      /* Idle */
      ) {
          return;
        }

      if (!_this._editor.hasModel()) {
        return;
      }

      var model = _this._editor.getModel();

      if ((0, _arrays.isNonEmptyArray)(existingItems)) {
        var cmpFn = (0, _suggest.getSuggestionComparator)(snippetSortOrder);
        items = items.concat(existingItems).sort(cmpFn);
      }

      var ctx = new LineContext(model, _this._editor.getPosition(), auto, context.shy);
      _this._completionModel = new _completionModel.CompletionModel(items, _this._context.column, {
        leadingLineContent: ctx.leadingLineContent,
        characterCountDelta: ctx.column - _this._context.column
      }, wordDistance, _this._editor.getOption(85
      /* suggest */
      ), _this._editor.getOption(82
      /* snippetSuggestions */
      )); // store containers so that they can be disposed later

      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];

        if ((0, _lifecycle.isDisposable)(item.container)) {
          _this._completionDisposables.add(item.container);
        }
      }

      _this._onNewContext(ctx);
    }).catch(_errors.onUnexpectedError);
  };

  SuggestModel._createItemKindFilter = function (editor) {
    // kind filter and snippet sort rules
    var result = new Set(); // snippet setting

    var snippetSuggestions = editor.getOption(82
    /* snippetSuggestions */
    );

    if (snippetSuggestions === 'none') {
      result.add(25
      /* Snippet */
      );
    } // type setting


    var suggestOptions = editor.getOption(85
    /* suggest */
    );

    if (!suggestOptions.showMethods) {
      result.add(0
      /* Method */
      );
    }

    if (!suggestOptions.showFunctions) {
      result.add(1
      /* Function */
      );
    }

    if (!suggestOptions.showConstructors) {
      result.add(2
      /* Constructor */
      );
    }

    if (!suggestOptions.showFields) {
      result.add(3
      /* Field */
      );
    }

    if (!suggestOptions.showVariables) {
      result.add(4
      /* Variable */
      );
    }

    if (!suggestOptions.showClasses) {
      result.add(5
      /* Class */
      );
    }

    if (!suggestOptions.showStructs) {
      result.add(6
      /* Struct */
      );
    }

    if (!suggestOptions.showInterfaces) {
      result.add(7
      /* Interface */
      );
    }

    if (!suggestOptions.showModules) {
      result.add(8
      /* Module */
      );
    }

    if (!suggestOptions.showProperties) {
      result.add(9
      /* Property */
      );
    }

    if (!suggestOptions.showEvents) {
      result.add(10
      /* Event */
      );
    }

    if (!suggestOptions.showOperators) {
      result.add(11
      /* Operator */
      );
    }

    if (!suggestOptions.showUnits) {
      result.add(12
      /* Unit */
      );
    }

    if (!suggestOptions.showValues) {
      result.add(13
      /* Value */
      );
    }

    if (!suggestOptions.showConstants) {
      result.add(14
      /* Constant */
      );
    }

    if (!suggestOptions.showEnums) {
      result.add(15
      /* Enum */
      );
    }

    if (!suggestOptions.showEnumMembers) {
      result.add(16
      /* EnumMember */
      );
    }

    if (!suggestOptions.showKeywords) {
      result.add(17
      /* Keyword */
      );
    }

    if (!suggestOptions.showWords) {
      result.add(18
      /* Text */
      );
    }

    if (!suggestOptions.showColors) {
      result.add(19
      /* Color */
      );
    }

    if (!suggestOptions.showFiles) {
      result.add(20
      /* File */
      );
    }

    if (!suggestOptions.showReferences) {
      result.add(21
      /* Reference */
      );
    }

    if (!suggestOptions.showColors) {
      result.add(22
      /* Customcolor */
      );
    }

    if (!suggestOptions.showFolders) {
      result.add(23
      /* Folder */
      );
    }

    if (!suggestOptions.showTypeParameters) {
      result.add(24
      /* TypeParameter */
      );
    }

    if (!suggestOptions.showSnippets) {
      result.add(25
      /* Snippet */
      );
    }

    return result;
  };

  SuggestModel.prototype._onNewContext = function (ctx) {
    if (!this._context) {
      // happens when 24x7 IntelliSense is enabled and still in its delay
      return;
    }

    if (ctx.lineNumber !== this._context.lineNumber) {
      // e.g. happens when pressing Enter while IntelliSense is computed
      this.cancel();
      return;
    }

    if (ctx.leadingWord.startColumn < this._context.leadingWord.startColumn) {
      // happens when the current word gets outdented
      this.cancel();
      return;
    }

    if (ctx.column < this._context.column) {
      // typed -> moved cursor LEFT -> retrigger if still on a word
      if (ctx.leadingWord.word) {
        this.trigger({
          auto: this._context.auto,
          shy: false
        }, true);
      } else {
        this.cancel();
      }

      return;
    }

    if (!this._completionModel) {
      // happens when IntelliSense is not yet computed
      return;
    }

    if (ctx.column > this._context.column && this._completionModel.incomplete.size > 0 && ctx.leadingWord.word.length !== 0) {
      // typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger
      var incomplete = this._completionModel.incomplete;

      var adopted = this._completionModel.adopt(incomplete);

      this.trigger({
        auto: this._state === 2
        /* Auto */
        ,
        shy: false
      }, true, incomplete, adopted);
    } else {
      // typed -> moved cursor RIGHT -> update UI
      var oldLineContext = this._completionModel.lineContext;
      var isFrozen = false;
      this._completionModel.lineContext = {
        leadingLineContent: ctx.leadingLineContent,
        characterCountDelta: ctx.column - this._context.column
      };

      if (this._completionModel.items.length === 0) {
        if (LineContext.shouldAutoTrigger(this._editor) && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {
          // retrigger when heading into a new word
          this.trigger({
            auto: this._context.auto,
            shy: false
          }, true);
          return;
        }

        if (!this._context.auto) {
          // freeze when IntelliSense was manually requested
          this._completionModel.lineContext = oldLineContext;
          isFrozen = this._completionModel.items.length > 0;

          if (isFrozen && ctx.leadingWord.word.length === 0) {
            // there were results before but now there aren't
            // and also we are not on a word anymore -> cancel
            this.cancel();
            return;
          }
        } else {
          // nothing left
          this.cancel();
          return;
        }
      }

      this._onDidSuggest.fire({
        completionModel: this._completionModel,
        auto: this._context.auto,
        shy: this._context.shy,
        isFrozen: isFrozen
      });
    }
  };

  return SuggestModel;
}();

exports.SuggestModel = SuggestModel;
},{"../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","./completionModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/completionModel.js","./suggest.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggest.js","../snippet/snippetController2.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetController2.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","./wordDistance.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/wordDistance.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/media/suggest.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/documentSymbols/media/outlineTree.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/documentSymbols/media/symbol-icons.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/documentSymbols/outlineTree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SYMBOL_ICON_VARIABLE_FOREGROUND = exports.SYMBOL_ICON_UNIT_FOREGROUND = exports.SYMBOL_ICON_TYPEPARAMETER_FOREGROUND = exports.SYMBOL_ICON_TEXT_FOREGROUND = exports.SYMBOL_ICON_STRUCT_FOREGROUND = exports.SYMBOL_ICON_STRING_FOREGROUND = exports.SYMBOL_ICON_SNIPPET_FOREGROUND = exports.SYMBOL_ICON_REFERENCE_FOREGROUND = exports.SYMBOL_ICON_PROPERTY_FOREGROUND = exports.SYMBOL_ICON_PACKAGE_FOREGROUND = exports.SYMBOL_ICON_OPERATOR_FOREGROUND = exports.SYMBOL_ICON_OBJECT_FOREGROUND = exports.SYMBOL_ICON_NUMBER_FOREGROUND = exports.SYMBOL_ICON_NULL_FOREGROUND = exports.SYMBOL_ICON_NAMESPACE_FOREGROUND = exports.SYMBOL_ICON_MODULE_FOREGROUND = exports.SYMBOL_ICON_METHOD_FOREGROUND = exports.SYMBOL_ICON_KEYWORD_FOREGROUND = exports.SYMBOL_ICON_KEY_FOREGROUND = exports.SYMBOL_ICON_INTERFACE_FOREGROUND = exports.SYMBOL_ICON_FUNCTION_FOREGROUND = exports.SYMBOL_ICON_FOLDER_FOREGROUND = exports.SYMBOL_ICON_FILE_FOREGROUND = exports.SYMBOL_ICON_FIELD_FOREGROUND = exports.SYMBOL_ICON_EVENT_FOREGROUND = exports.SYMBOL_ICON_ENUMERATOR_MEMBER_FOREGROUND = exports.SYMBOL_ICON_ENUMERATOR_FOREGROUND = exports.SYMBOL_ICON_CONSTRUCTOR_FOREGROUND = exports.SYMBOL_ICON_CONSTANT_FOREGROUND = exports.SYMBOL_ICON_COLOR_FOREGROUND = exports.SYMBOL_ICON_CLASS_FOREGROUND = exports.SYMBOL_ICON_BOOLEAN_FOREGROUND = exports.SYMBOL_ICON_ARRAY_FOREGROUND = void 0;

require("./media/outlineTree.css");

require("./media/symbol-icons.css");

var _nls = require("../../../nls.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var SYMBOL_ICON_ARRAY_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.arrayForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.arrayForeground', 'The foreground color for array symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_ARRAY_FOREGROUND = SYMBOL_ICON_ARRAY_FOREGROUND;
var SYMBOL_ICON_BOOLEAN_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.booleanForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.booleanForeground', 'The foreground color for boolean symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_BOOLEAN_FOREGROUND = SYMBOL_ICON_BOOLEAN_FOREGROUND;
var SYMBOL_ICON_CLASS_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.classForeground', {
  dark: '#EE9D28',
  light: '#D67E00',
  hc: '#EE9D28'
}, (0, _nls.localize)('symbolIcon.classForeground', 'The foreground color for class symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_CLASS_FOREGROUND = SYMBOL_ICON_CLASS_FOREGROUND;
var SYMBOL_ICON_COLOR_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.colorForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.colorForeground', 'The foreground color for color symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_COLOR_FOREGROUND = SYMBOL_ICON_COLOR_FOREGROUND;
var SYMBOL_ICON_CONSTANT_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.constantForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.constantForeground', 'The foreground color for constant symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_CONSTANT_FOREGROUND = SYMBOL_ICON_CONSTANT_FOREGROUND;
var SYMBOL_ICON_CONSTRUCTOR_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.constructorForeground', {
  dark: '#B180D7',
  light: '#652D90',
  hc: '#B180D7'
}, (0, _nls.localize)('symbolIcon.constructorForeground', 'The foreground color for constructor symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_CONSTRUCTOR_FOREGROUND = SYMBOL_ICON_CONSTRUCTOR_FOREGROUND;
var SYMBOL_ICON_ENUMERATOR_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.enumeratorForeground', {
  dark: '#EE9D28',
  light: '#D67E00',
  hc: '#EE9D28'
}, (0, _nls.localize)('symbolIcon.enumeratorForeground', 'The foreground color for enumerator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_ENUMERATOR_FOREGROUND = SYMBOL_ICON_ENUMERATOR_FOREGROUND;
var SYMBOL_ICON_ENUMERATOR_MEMBER_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.enumeratorMemberForeground', {
  dark: '#75BEFF',
  light: '#007ACC',
  hc: '#75BEFF'
}, (0, _nls.localize)('symbolIcon.enumeratorMemberForeground', 'The foreground color for enumerator member symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_ENUMERATOR_MEMBER_FOREGROUND = SYMBOL_ICON_ENUMERATOR_MEMBER_FOREGROUND;
var SYMBOL_ICON_EVENT_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.eventForeground', {
  dark: '#EE9D28',
  light: '#D67E00',
  hc: '#EE9D28'
}, (0, _nls.localize)('symbolIcon.eventForeground', 'The foreground color for event symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_EVENT_FOREGROUND = SYMBOL_ICON_EVENT_FOREGROUND;
var SYMBOL_ICON_FIELD_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.fieldForeground', {
  dark: '#75BEFF',
  light: '#007ACC',
  hc: '#75BEFF'
}, (0, _nls.localize)('symbolIcon.fieldForeground', 'The foreground color for field symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_FIELD_FOREGROUND = SYMBOL_ICON_FIELD_FOREGROUND;
var SYMBOL_ICON_FILE_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.fileForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.fileForeground', 'The foreground color for file symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_FILE_FOREGROUND = SYMBOL_ICON_FILE_FOREGROUND;
var SYMBOL_ICON_FOLDER_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.folderForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.folderForeground', 'The foreground color for folder symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_FOLDER_FOREGROUND = SYMBOL_ICON_FOLDER_FOREGROUND;
var SYMBOL_ICON_FUNCTION_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.functionForeground', {
  dark: '#B180D7',
  light: '#652D90',
  hc: '#B180D7'
}, (0, _nls.localize)('symbolIcon.functionForeground', 'The foreground color for function symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_FUNCTION_FOREGROUND = SYMBOL_ICON_FUNCTION_FOREGROUND;
var SYMBOL_ICON_INTERFACE_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.interfaceForeground', {
  dark: '#75BEFF',
  light: '#007ACC',
  hc: '#75BEFF'
}, (0, _nls.localize)('symbolIcon.interfaceForeground', 'The foreground color for interface symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_INTERFACE_FOREGROUND = SYMBOL_ICON_INTERFACE_FOREGROUND;
var SYMBOL_ICON_KEY_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.keyForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.keyForeground', 'The foreground color for key symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_KEY_FOREGROUND = SYMBOL_ICON_KEY_FOREGROUND;
var SYMBOL_ICON_KEYWORD_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.keywordForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.keywordForeground', 'The foreground color for keyword symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_KEYWORD_FOREGROUND = SYMBOL_ICON_KEYWORD_FOREGROUND;
var SYMBOL_ICON_METHOD_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.methodForeground', {
  dark: '#B180D7',
  light: '#652D90',
  hc: '#B180D7'
}, (0, _nls.localize)('symbolIcon.methodForeground', 'The foreground color for method symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_METHOD_FOREGROUND = SYMBOL_ICON_METHOD_FOREGROUND;
var SYMBOL_ICON_MODULE_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.moduleForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.moduleForeground', 'The foreground color for module symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_MODULE_FOREGROUND = SYMBOL_ICON_MODULE_FOREGROUND;
var SYMBOL_ICON_NAMESPACE_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.namespaceForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.namespaceForeground', 'The foreground color for namespace symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_NAMESPACE_FOREGROUND = SYMBOL_ICON_NAMESPACE_FOREGROUND;
var SYMBOL_ICON_NULL_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.nullForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.nullForeground', 'The foreground color for null symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_NULL_FOREGROUND = SYMBOL_ICON_NULL_FOREGROUND;
var SYMBOL_ICON_NUMBER_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.numberForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.numberForeground', 'The foreground color for number symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_NUMBER_FOREGROUND = SYMBOL_ICON_NUMBER_FOREGROUND;
var SYMBOL_ICON_OBJECT_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.objectForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.objectForeground', 'The foreground color for object symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_OBJECT_FOREGROUND = SYMBOL_ICON_OBJECT_FOREGROUND;
var SYMBOL_ICON_OPERATOR_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.operatorForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.operatorForeground', 'The foreground color for operator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_OPERATOR_FOREGROUND = SYMBOL_ICON_OPERATOR_FOREGROUND;
var SYMBOL_ICON_PACKAGE_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.packageForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.packageForeground', 'The foreground color for package symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_PACKAGE_FOREGROUND = SYMBOL_ICON_PACKAGE_FOREGROUND;
var SYMBOL_ICON_PROPERTY_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.propertyForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.propertyForeground', 'The foreground color for property symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_PROPERTY_FOREGROUND = SYMBOL_ICON_PROPERTY_FOREGROUND;
var SYMBOL_ICON_REFERENCE_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.referenceForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.referenceForeground', 'The foreground color for reference symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_REFERENCE_FOREGROUND = SYMBOL_ICON_REFERENCE_FOREGROUND;
var SYMBOL_ICON_SNIPPET_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.snippetForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.snippetForeground', 'The foreground color for snippet symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_SNIPPET_FOREGROUND = SYMBOL_ICON_SNIPPET_FOREGROUND;
var SYMBOL_ICON_STRING_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.stringForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.stringForeground', 'The foreground color for string symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_STRING_FOREGROUND = SYMBOL_ICON_STRING_FOREGROUND;
var SYMBOL_ICON_STRUCT_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.structForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.structForeground', 'The foreground color for struct symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_STRUCT_FOREGROUND = SYMBOL_ICON_STRUCT_FOREGROUND;
var SYMBOL_ICON_TEXT_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.textForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.textForeground', 'The foreground color for text symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_TEXT_FOREGROUND = SYMBOL_ICON_TEXT_FOREGROUND;
var SYMBOL_ICON_TYPEPARAMETER_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.typeParameterForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.typeParameterForeground', 'The foreground color for type parameter symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_TYPEPARAMETER_FOREGROUND = SYMBOL_ICON_TYPEPARAMETER_FOREGROUND;
var SYMBOL_ICON_UNIT_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.unitForeground', {
  dark: _colorRegistry.foreground,
  light: _colorRegistry.foreground,
  hc: _colorRegistry.foreground
}, (0, _nls.localize)('symbolIcon.unitForeground', 'The foreground color for unit symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_UNIT_FOREGROUND = SYMBOL_ICON_UNIT_FOREGROUND;
var SYMBOL_ICON_VARIABLE_FOREGROUND = (0, _colorRegistry.registerColor)('symbolIcon.variableForeground', {
  dark: '#75BEFF',
  light: '#007ACC',
  hc: '#75BEFF'
}, (0, _nls.localize)('symbolIcon.variableForeground', 'The foreground color for variable symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
exports.SYMBOL_ICON_VARIABLE_FOREGROUND = SYMBOL_ICON_VARIABLE_FOREGROUND;
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var symbolIconArrayColor = theme.getColor(SYMBOL_ICON_ARRAY_FOREGROUND);

  if (symbolIconArrayColor) {
    collector.addRule(".codicon-symbol-array { color: " + symbolIconArrayColor + " !important; }");
  }

  var symbolIconBooleanColor = theme.getColor(SYMBOL_ICON_BOOLEAN_FOREGROUND);

  if (symbolIconBooleanColor) {
    collector.addRule(".codicon-symbol-boolean { color: " + symbolIconBooleanColor + " !important; }");
  }

  var symbolIconClassColor = theme.getColor(SYMBOL_ICON_CLASS_FOREGROUND);

  if (symbolIconClassColor) {
    collector.addRule(".codicon-symbol-class { color: " + symbolIconClassColor + " !important; }");
  }

  var symbolIconMethodColor = theme.getColor(SYMBOL_ICON_METHOD_FOREGROUND);

  if (symbolIconMethodColor) {
    collector.addRule(".codicon-symbol-method { color: " + symbolIconMethodColor + " !important; }");
  }

  var symbolIconColorColor = theme.getColor(SYMBOL_ICON_COLOR_FOREGROUND);

  if (symbolIconColorColor) {
    collector.addRule(".codicon-symbol-color { color: " + symbolIconColorColor + " !important; }");
  }

  var symbolIconConstantColor = theme.getColor(SYMBOL_ICON_CONSTANT_FOREGROUND);

  if (symbolIconConstantColor) {
    collector.addRule(".codicon-symbol-constant { color: " + symbolIconConstantColor + " !important; }");
  }

  var symbolIconConstructorColor = theme.getColor(SYMBOL_ICON_CONSTRUCTOR_FOREGROUND);

  if (symbolIconConstructorColor) {
    collector.addRule(".codicon-symbol-constructor { color: " + symbolIconConstructorColor + " !important; }");
  }

  var symbolIconEnumeratorColor = theme.getColor(SYMBOL_ICON_ENUMERATOR_FOREGROUND);

  if (symbolIconEnumeratorColor) {
    collector.addRule("\n\t\t\t.codicon-symbol-value,.codicon-symbol-enum { color: " + symbolIconEnumeratorColor + " !important; }");
  }

  var symbolIconEnumeratorMemberColor = theme.getColor(SYMBOL_ICON_ENUMERATOR_MEMBER_FOREGROUND);

  if (symbolIconEnumeratorMemberColor) {
    collector.addRule(".codicon-symbol-enum-member { color: " + symbolIconEnumeratorMemberColor + " !important; }");
  }

  var symbolIconEventColor = theme.getColor(SYMBOL_ICON_EVENT_FOREGROUND);

  if (symbolIconEventColor) {
    collector.addRule(".codicon-symbol-event { color: " + symbolIconEventColor + " !important; }");
  }

  var symbolIconFieldColor = theme.getColor(SYMBOL_ICON_FIELD_FOREGROUND);

  if (symbolIconFieldColor) {
    collector.addRule(".codicon-symbol-field { color: " + symbolIconFieldColor + " !important; }");
  }

  var symbolIconFileColor = theme.getColor(SYMBOL_ICON_FILE_FOREGROUND);

  if (symbolIconFileColor) {
    collector.addRule(".codicon-symbol-file { color: " + symbolIconFileColor + " !important; }");
  }

  var symbolIconFolderColor = theme.getColor(SYMBOL_ICON_FOLDER_FOREGROUND);

  if (symbolIconFolderColor) {
    collector.addRule(".codicon-symbol-folder { color: " + symbolIconFolderColor + " !important; }");
  }

  var symbolIconFunctionColor = theme.getColor(SYMBOL_ICON_FUNCTION_FOREGROUND);

  if (symbolIconFunctionColor) {
    collector.addRule(".codicon-symbol-function { color: " + symbolIconFunctionColor + " !important; }");
  }

  var symbolIconInterfaceColor = theme.getColor(SYMBOL_ICON_INTERFACE_FOREGROUND);

  if (symbolIconInterfaceColor) {
    collector.addRule(".codicon-symbol-interface { color: " + symbolIconInterfaceColor + " !important; }");
  }

  var symbolIconKeyColor = theme.getColor(SYMBOL_ICON_KEY_FOREGROUND);

  if (symbolIconKeyColor) {
    collector.addRule(".codicon-symbol-key { color: " + symbolIconKeyColor + " !important; }");
  }

  var symbolIconKeywordColor = theme.getColor(SYMBOL_ICON_KEYWORD_FOREGROUND);

  if (symbolIconKeywordColor) {
    collector.addRule(".codicon-symbol-keyword { color: " + symbolIconKeywordColor + " !important; }");
  }

  var symbolIconModuleColor = theme.getColor(SYMBOL_ICON_MODULE_FOREGROUND);

  if (symbolIconModuleColor) {
    collector.addRule(".codicon-symbol-module { color: " + symbolIconModuleColor + " !important; }");
  }

  var outlineNamespaceColor = theme.getColor(SYMBOL_ICON_NAMESPACE_FOREGROUND);

  if (outlineNamespaceColor) {
    collector.addRule(".codicon-symbol-namespace { color: " + outlineNamespaceColor + " !important; }");
  }

  var symbolIconNullColor = theme.getColor(SYMBOL_ICON_NULL_FOREGROUND);

  if (symbolIconNullColor) {
    collector.addRule(".codicon-symbol-null { color: " + symbolIconNullColor + " !important; }");
  }

  var symbolIconNumberColor = theme.getColor(SYMBOL_ICON_NUMBER_FOREGROUND);

  if (symbolIconNumberColor) {
    collector.addRule(".codicon-symbol-number { color: " + symbolIconNumberColor + " !important; }");
  }

  var symbolIconObjectColor = theme.getColor(SYMBOL_ICON_OBJECT_FOREGROUND);

  if (symbolIconObjectColor) {
    collector.addRule(".codicon-symbol-object { color: " + symbolIconObjectColor + " !important; }");
  }

  var symbolIconOperatorColor = theme.getColor(SYMBOL_ICON_OPERATOR_FOREGROUND);

  if (symbolIconOperatorColor) {
    collector.addRule(".codicon-symbol-operator { color: " + symbolIconOperatorColor + " !important; }");
  }

  var symbolIconPackageColor = theme.getColor(SYMBOL_ICON_PACKAGE_FOREGROUND);

  if (symbolIconPackageColor) {
    collector.addRule(".codicon-symbol-package { color: " + symbolIconPackageColor + " !important; }");
  }

  var symbolIconPropertyColor = theme.getColor(SYMBOL_ICON_PROPERTY_FOREGROUND);

  if (symbolIconPropertyColor) {
    collector.addRule(".codicon-symbol-property { color: " + symbolIconPropertyColor + " !important; }");
  }

  var symbolIconReferenceColor = theme.getColor(SYMBOL_ICON_REFERENCE_FOREGROUND);

  if (symbolIconReferenceColor) {
    collector.addRule(".codicon-symbol-reference { color: " + symbolIconReferenceColor + " !important; }");
  }

  var symbolIconSnippetColor = theme.getColor(SYMBOL_ICON_SNIPPET_FOREGROUND);

  if (symbolIconSnippetColor) {
    collector.addRule(".codicon-symbol-snippet { color: " + symbolIconSnippetColor + " !important; }");
  }

  var symbolIconStringColor = theme.getColor(SYMBOL_ICON_STRING_FOREGROUND);

  if (symbolIconStringColor) {
    collector.addRule(".codicon-symbol-string { color: " + symbolIconStringColor + " !important; }");
  }

  var symbolIconStructColor = theme.getColor(SYMBOL_ICON_STRUCT_FOREGROUND);

  if (symbolIconStructColor) {
    collector.addRule(".codicon-symbol-struct { color: " + symbolIconStructColor + " !important; }");
  }

  var symbolIconTextColor = theme.getColor(SYMBOL_ICON_TEXT_FOREGROUND);

  if (symbolIconTextColor) {
    collector.addRule(".codicon-symbol-text { color: " + symbolIconTextColor + " !important; }");
  }

  var symbolIconTypeParameterColor = theme.getColor(SYMBOL_ICON_TYPEPARAMETER_FOREGROUND);

  if (symbolIconTypeParameterColor) {
    collector.addRule(".codicon-symbol-type-parameter { color: " + symbolIconTypeParameterColor + " !important; }");
  }

  var symbolIconUnitColor = theme.getColor(SYMBOL_ICON_UNIT_FOREGROUND);

  if (symbolIconUnitColor) {
    collector.addRule(".codicon-symbol-unit { color: " + symbolIconUnitColor + " !important; }");
  }

  var symbolIconVariableColor = theme.getColor(SYMBOL_ICON_VARIABLE_FOREGROUND);

  if (symbolIconVariableColor) {
    collector.addRule(".codicon-symbol-variable { color: " + symbolIconVariableColor + " !important; }");
  }
});
},{"./media/outlineTree.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/documentSymbols/media/outlineTree.css","./media/symbol-icons.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/documentSymbols/media/symbol-icons.css","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js"}],"../node_modules/monaco-editor/esm/vs/platform/files/common/files.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileKind = void 0;
var FileKind;
exports.FileKind = FileKind;

(function (FileKind) {
  FileKind[FileKind["FILE"] = 0] = "FILE";
  FileKind[FileKind["FOLDER"] = 1] = "FOLDER";
  FileKind[FileKind["ROOT_FOLDER"] = 2] = "ROOT_FOLDER";
})(FileKind || (exports.FileKind = FileKind = {}));
},{}],"../node_modules/monaco-editor/esm/vs/editor/common/services/getIconClasses.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIconClasses = getIconClasses;
exports.detectModeId = detectModeId;
exports.cssEscape = cssEscape;

var _network = require("../../../base/common/network.js");

var _resources = require("../../../base/common/resources.js");

var _modesRegistry = require("../modes/modesRegistry.js");

var _files = require("../../../platform/files/common/files.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function getIconClasses(modelService, modeService, resource, fileKind) {
  // we always set these base classes even if we do not have a path
  var classes = fileKind === _files.FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === _files.FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];

  if (resource) {
    // Get the path and name of the resource. For data-URIs, we need to parse specially
    var name_1;

    if (resource.scheme === _network.Schemas.data) {
      var metadata = _resources.DataUri.parseMetaData(resource);

      name_1 = metadata.get(_resources.DataUri.META_DATA_LABEL);
    } else {
      name_1 = cssEscape((0, _resources.basenameOrAuthority)(resource).toLowerCase());
    } // Folders


    if (fileKind === _files.FileKind.FOLDER) {
      classes.push(name_1 + "-name-folder-icon");
    } // Files
    else {
        // Name & Extension(s)
        if (name_1) {
          classes.push(name_1 + "-name-file-icon");
          var dotSegments = name_1.split('.');

          for (var i = 1; i < dotSegments.length; i++) {
            classes.push(dotSegments.slice(i).join('.') + "-ext-file-icon"); // add each combination of all found extensions if more than one
          }

          classes.push("ext-file-icon"); // extra segment to increase file-ext score
        } // Detected Mode


        var detectedModeId = detectModeId(modelService, modeService, resource);

        if (detectedModeId) {
          classes.push(cssEscape(detectedModeId) + "-lang-file-icon");
        }
      }
  }

  return classes;
}

function detectModeId(modelService, modeService, resource) {
  if (!resource) {
    return null; // we need a resource at least
  }

  var modeId = null; // Data URI: check for encoded metadata

  if (resource.scheme === _network.Schemas.data) {
    var metadata = _resources.DataUri.parseMetaData(resource);

    var mime = metadata.get(_resources.DataUri.META_DATA_MIME);

    if (mime) {
      modeId = modeService.getModeId(mime);
    }
  } // Any other URI: check for model if existing
  else {
      var model = modelService.getModel(resource);

      if (model) {
        modeId = model.getModeId();
      }
    } // only take if the mode is specific (aka no just plain text)


  if (modeId && modeId !== _modesRegistry.PLAINTEXT_MODE_ID) {
    return modeId;
  } // otherwise fallback to path based detection


  return modeService.getModeIdByFilepathOrFirstLine(resource);
}

function cssEscape(val) {
  return val.replace(/\s/g, '\\$&'); // make sure to not introduce CSS classes from files that contain whitespace
}
},{"../../../base/common/network.js":"../node_modules/monaco-editor/esm/vs/base/common/network.js","../../../base/common/resources.js":"../node_modules/monaco-editor/esm/vs/base/common/resources.js","../modes/modesRegistry.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes/modesRegistry.js","../../../platform/files/common/files.js":"../node_modules/monaco-editor/esm/vs/platform/files/common/files.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuggestWidget = exports.editorSuggestWidgetHighlightForeground = exports.editorSuggestWidgetSelectedBackground = exports.editorSuggestWidgetForeground = exports.editorSuggestWidgetBorder = exports.editorSuggestWidgetBackground = void 0;

require("./media/suggest.css");

require("../../../base/browser/ui/codiconLabel/codiconLabel.js");

require("../documentSymbols/outlineTree.js");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _filters = require("../../../base/common/filters.js");

var strings = _interopRequireWildcard(require("../../../base/common/strings.js"));

var _event = require("../../../base/common/event.js");

var _errors = require("../../../base/common/errors.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _dom = require("../../../base/browser/dom.js");

var _listWidget = require("../../../base/browser/ui/list/listWidget.js");

var _scrollableElement = require("../../../base/browser/ui/scrollbar/scrollableElement.js");

var _keybinding = require("../../../platform/keybinding/common/keybinding.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _suggest2 = require("./suggest.js");

var _aria = require("../../../base/browser/ui/aria/aria.js");

var _telemetry = require("../../../platform/telemetry/common/telemetry.js");

var _styler = require("../../../platform/theme/common/styler.js");

var _themeService2 = require("../../../platform/theme/common/themeService.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _storage = require("../../../platform/storage/common/storage.js");

var _markdownRenderer = require("../markdown/markdownRenderer.js");

var _modeService2 = require("../../common/services/modeService.js");

var _opener = require("../../../platform/opener/common/opener.js");

var _async = require("../../../base/common/async.js");

var _modes = require("../../common/modes.js");

var _iconLabel = require("../../../base/browser/ui/iconLabel/iconLabel.js");

var _getIconClasses = require("../../common/services/getIconClasses.js");

var _modelService2 = require("../../common/services/modelService.js");

var _uri = require("../../../base/common/uri.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _files = require("../../../platform/files/common/files.js");

var _htmlContent = require("../../../base/common/htmlContent.js");

var _arrays = require("../../../base/common/arrays.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var expandSuggestionDocsByDefault = false;
/**
 * Suggest widget colors
 */

var editorSuggestWidgetBackground = (0, _colorRegistry.registerColor)('editorSuggestWidget.background', {
  dark: _colorRegistry.editorWidgetBackground,
  light: _colorRegistry.editorWidgetBackground,
  hc: _colorRegistry.editorWidgetBackground
}, nls.localize('editorSuggestWidgetBackground', 'Background color of the suggest widget.'));
exports.editorSuggestWidgetBackground = editorSuggestWidgetBackground;
var editorSuggestWidgetBorder = (0, _colorRegistry.registerColor)('editorSuggestWidget.border', {
  dark: _colorRegistry.editorWidgetBorder,
  light: _colorRegistry.editorWidgetBorder,
  hc: _colorRegistry.editorWidgetBorder
}, nls.localize('editorSuggestWidgetBorder', 'Border color of the suggest widget.'));
exports.editorSuggestWidgetBorder = editorSuggestWidgetBorder;
var editorSuggestWidgetForeground = (0, _colorRegistry.registerColor)('editorSuggestWidget.foreground', {
  dark: _colorRegistry.editorForeground,
  light: _colorRegistry.editorForeground,
  hc: _colorRegistry.editorForeground
}, nls.localize('editorSuggestWidgetForeground', 'Foreground color of the suggest widget.'));
exports.editorSuggestWidgetForeground = editorSuggestWidgetForeground;
var editorSuggestWidgetSelectedBackground = (0, _colorRegistry.registerColor)('editorSuggestWidget.selectedBackground', {
  dark: _colorRegistry.listFocusBackground,
  light: _colorRegistry.listFocusBackground,
  hc: _colorRegistry.listFocusBackground
}, nls.localize('editorSuggestWidgetSelectedBackground', 'Background color of the selected entry in the suggest widget.'));
exports.editorSuggestWidgetSelectedBackground = editorSuggestWidgetSelectedBackground;
var editorSuggestWidgetHighlightForeground = (0, _colorRegistry.registerColor)('editorSuggestWidget.highlightForeground', {
  dark: _colorRegistry.listHighlightForeground,
  light: _colorRegistry.listHighlightForeground,
  hc: _colorRegistry.listHighlightForeground
}, nls.localize('editorSuggestWidgetHighlightForeground', 'Color of the match highlights in the suggest widget.'));
exports.editorSuggestWidgetHighlightForeground = editorSuggestWidgetHighlightForeground;
var colorRegExp = /^(#([\da-f]{3}){1,2}|(rgb|hsl)a\(\s*(\d{1,3}%?\s*,\s*){3}(1|0?\.\d+)\)|(rgb|hsl)\(\s*\d{1,3}%?(\s*,\s*\d{1,3}%?){2}\s*\))$/i;

function extractColor(item, out) {
  if (item.completion.label.match(colorRegExp)) {
    out[0] = item.completion.label;
    return true;
  }

  if (typeof item.completion.documentation === 'string' && item.completion.documentation.match(colorRegExp)) {
    out[0] = item.completion.documentation;
    return true;
  }

  return false;
}

function canExpandCompletionItem(item) {
  if (!item) {
    return false;
  }

  var suggestion = item.completion;

  if (suggestion.documentation) {
    return true;
  }

  return suggestion.detail && suggestion.detail !== suggestion.label;
}

var Renderer =
/** @class */
function () {
  function Renderer(widget, editor, triggerKeybindingLabel, _modelService, _modeService, _themeService) {
    this.widget = widget;
    this.editor = editor;
    this.triggerKeybindingLabel = triggerKeybindingLabel;
    this._modelService = _modelService;
    this._modeService = _modeService;
    this._themeService = _themeService;
  }

  Object.defineProperty(Renderer.prototype, "templateId", {
    get: function () {
      return 'suggestion';
    },
    enumerable: true,
    configurable: true
  });

  Renderer.prototype.renderTemplate = function (container) {
    var _this = this;

    var data = Object.create(null);
    data.disposables = new _lifecycle.DisposableStore();
    data.root = container;
    (0, _dom.addClass)(data.root, 'show-file-icons');
    data.icon = (0, _dom.append)(container, (0, _dom.$)('.icon'));
    data.colorspan = (0, _dom.append)(data.icon, (0, _dom.$)('span.colorspan'));
    var text = (0, _dom.append)(container, (0, _dom.$)('.contents'));
    var main = (0, _dom.append)(text, (0, _dom.$)('.main'));
    data.iconContainer = (0, _dom.append)(main, (0, _dom.$)('.icon-label.codicon'));
    data.iconLabel = new _iconLabel.IconLabel(main, {
      supportHighlights: true,
      supportCodicons: true
    });
    data.disposables.add(data.iconLabel);
    data.typeLabel = (0, _dom.append)(main, (0, _dom.$)('span.type-label'));
    data.readMore = (0, _dom.append)(main, (0, _dom.$)('span.readMore.codicon.codicon-info'));
    data.readMore.title = nls.localize('readMore', "Read More...{0}", this.triggerKeybindingLabel);

    var configureFont = function () {
      var options = _this.editor.getOptions();

      var fontInfo = options.get(32
      /* fontInfo */
      );
      var fontFamily = fontInfo.fontFamily;
      var fontSize = options.get(86
      /* suggestFontSize */
      ) || fontInfo.fontSize;
      var lineHeight = options.get(87
      /* suggestLineHeight */
      ) || fontInfo.lineHeight;
      var fontWeight = fontInfo.fontWeight;
      var fontSizePx = fontSize + "px";
      var lineHeightPx = lineHeight + "px";
      data.root.style.fontSize = fontSizePx;
      data.root.style.fontWeight = fontWeight;
      main.style.fontFamily = fontFamily;
      main.style.lineHeight = lineHeightPx;
      data.icon.style.height = lineHeightPx;
      data.icon.style.width = lineHeightPx;
      data.readMore.style.height = lineHeightPx;
      data.readMore.style.width = lineHeightPx;
    };

    configureFont();
    data.disposables.add(_event.Event.chain(this.editor.onDidChangeConfiguration.bind(this.editor)).filter(function (e) {
      return e.hasChanged(32
      /* fontInfo */
      ) || e.hasChanged(86
      /* suggestFontSize */
      ) || e.hasChanged(87
      /* suggestLineHeight */
      );
    }).on(configureFont, null));
    return data;
  };

  Renderer.prototype.renderElement = function (element, _index, templateData) {
    var _this = this;

    var data = templateData;
    var suggestion = element.completion;
    data.icon.className = 'icon ' + (0, _modes.completionKindToCssClass)(suggestion.kind);
    data.colorspan.style.backgroundColor = '';
    var labelOptions = {
      labelEscapeNewLines: true,
      matches: (0, _filters.createMatches)(element.score)
    };
    var color = [];

    if (suggestion.kind === 19
    /* Color */
    && extractColor(element, color)) {
      // special logic for 'color' completion items
      data.icon.className = 'icon customcolor';
      data.iconContainer.className = 'icon hide';
      data.colorspan.style.backgroundColor = color[0];
    } else if (suggestion.kind === 20
    /* File */
    && this._themeService.getIconTheme().hasFileIcons) {
      // special logic for 'file' completion items
      data.icon.className = 'icon hide';
      data.iconContainer.className = 'icon hide';
      var labelClasses = (0, _getIconClasses.getIconClasses)(this._modelService, this._modeService, _uri.URI.from({
        scheme: 'fake',
        path: suggestion.label
      }), _files.FileKind.FILE);
      var detailClasses = (0, _getIconClasses.getIconClasses)(this._modelService, this._modeService, _uri.URI.from({
        scheme: 'fake',
        path: suggestion.detail
      }), _files.FileKind.FILE);
      labelOptions.extraClasses = labelClasses.length > detailClasses.length ? labelClasses : detailClasses;
    } else if (suggestion.kind === 23
    /* Folder */
    && this._themeService.getIconTheme().hasFolderIcons) {
      // special logic for 'folder' completion items
      data.icon.className = 'icon hide';
      data.iconContainer.className = 'icon hide';
      labelOptions.extraClasses = (0, _arrays.flatten)([(0, _getIconClasses.getIconClasses)(this._modelService, this._modeService, _uri.URI.from({
        scheme: 'fake',
        path: suggestion.label
      }), _files.FileKind.FOLDER), (0, _getIconClasses.getIconClasses)(this._modelService, this._modeService, _uri.URI.from({
        scheme: 'fake',
        path: suggestion.detail
      }), _files.FileKind.FOLDER)]);
    } else {
      // normal icon
      data.icon.className = 'icon hide';
      data.iconContainer.className = '';
      (0, _dom.addClasses)(data.iconContainer, "suggest-icon codicon codicon-symbol-" + (0, _modes.completionKindToCssClass)(suggestion.kind));
    }

    if (suggestion.tags && suggestion.tags.indexOf(1
    /* Deprecated */
    ) >= 0) {
      labelOptions.extraClasses = (labelOptions.extraClasses || []).concat(['deprecated']);
      labelOptions.matches = [];
    }

    data.iconLabel.setLabel(suggestion.label, undefined, labelOptions);
    data.typeLabel.textContent = (suggestion.detail || '').replace(/\n.*$/m, '');

    if (canExpandCompletionItem(element)) {
      (0, _dom.show)(data.readMore);

      data.readMore.onmousedown = function (e) {
        e.stopPropagation();
        e.preventDefault();
      };

      data.readMore.onclick = function (e) {
        e.stopPropagation();
        e.preventDefault();

        _this.widget.toggleDetails();
      };
    } else {
      (0, _dom.hide)(data.readMore);
      data.readMore.onmousedown = null;
      data.readMore.onclick = null;
    }
  };

  Renderer.prototype.disposeTemplate = function (templateData) {
    templateData.disposables.dispose();
  };

  Renderer = __decorate([__param(3, _modelService2.IModelService), __param(4, _modeService2.IModeService), __param(5, _themeService2.IThemeService)], Renderer);
  return Renderer;
}();

var SuggestionDetails =
/** @class */
function () {
  function SuggestionDetails(container, widget, editor, markdownRenderer, triggerKeybindingLabel) {
    var _this = this;

    this.widget = widget;
    this.editor = editor;
    this.markdownRenderer = markdownRenderer;
    this.triggerKeybindingLabel = triggerKeybindingLabel;
    this.borderWidth = 1;
    this.disposables = new _lifecycle.DisposableStore();
    this.el = (0, _dom.append)(container, (0, _dom.$)('.details'));
    this.disposables.add((0, _lifecycle.toDisposable)(function () {
      return container.removeChild(_this.el);
    }));
    this.body = (0, _dom.$)('.body');
    this.scrollbar = new _scrollableElement.DomScrollableElement(this.body, {});
    (0, _dom.append)(this.el, this.scrollbar.getDomNode());
    this.disposables.add(this.scrollbar);
    this.header = (0, _dom.append)(this.body, (0, _dom.$)('.header'));
    this.close = (0, _dom.append)(this.header, (0, _dom.$)('span.codicon.codicon-close'));
    this.close.title = nls.localize('readLess', "Read less...{0}", this.triggerKeybindingLabel);
    this.type = (0, _dom.append)(this.header, (0, _dom.$)('p.type'));
    this.docs = (0, _dom.append)(this.body, (0, _dom.$)('p.docs'));
    this.ariaLabel = null;
    this.configureFont();

    _event.Event.chain(this.editor.onDidChangeConfiguration.bind(this.editor)).filter(function (e) {
      return e.hasChanged(32
      /* fontInfo */
      );
    }).on(this.configureFont, this, this.disposables);

    markdownRenderer.onDidRenderCodeBlock(function () {
      return _this.scrollbar.scanDomNode();
    }, this, this.disposables);
  }

  Object.defineProperty(SuggestionDetails.prototype, "element", {
    get: function () {
      return this.el;
    },
    enumerable: true,
    configurable: true
  });

  SuggestionDetails.prototype.renderLoading = function () {
    this.type.textContent = nls.localize('loading', "Loading...");
    this.docs.textContent = '';
  };

  SuggestionDetails.prototype.renderItem = function (item, explainMode) {
    var _this = this;

    this.renderDisposeable = (0, _lifecycle.dispose)(this.renderDisposeable);
    var _a = item.completion,
        documentation = _a.documentation,
        detail = _a.detail; // --- documentation

    if (explainMode) {
      var md = '';
      md += "score: " + item.score[0] + (item.word ? ", compared '" + (item.completion.filterText && item.completion.filterText + ' (filterText)' || item.completion.label) + "' with '" + item.word + "'" : ' (no prefix)') + "\n";
      md += "distance: " + item.distance + ", see localityBonus-setting\n";
      md += "index: " + item.idx + ", based on " + (item.completion.sortText && "sortText: \"" + item.completion.sortText + "\"" || 'label') + "\n";
      documentation = new _htmlContent.MarkdownString().appendCodeblock('empty', md);
      detail = "Provider: " + item.provider._debugDisplayName;
    }

    if (!explainMode && !canExpandCompletionItem(item)) {
      this.type.textContent = '';
      this.docs.textContent = '';
      (0, _dom.addClass)(this.el, 'no-docs');
      this.ariaLabel = null;
      return;
    }

    (0, _dom.removeClass)(this.el, 'no-docs');

    if (typeof documentation === 'string') {
      (0, _dom.removeClass)(this.docs, 'markdown-docs');
      this.docs.textContent = documentation;
    } else {
      (0, _dom.addClass)(this.docs, 'markdown-docs');
      this.docs.innerHTML = '';
      var renderedContents = this.markdownRenderer.render(documentation);
      this.renderDisposeable = renderedContents;
      this.docs.appendChild(renderedContents.element);
    } // --- details


    if (detail) {
      this.type.innerText = detail;
      (0, _dom.show)(this.type);
    } else {
      this.type.innerText = '';
      (0, _dom.hide)(this.type);
    }

    this.el.style.height = this.header.offsetHeight + this.docs.offsetHeight + this.borderWidth * 2 + 'px';
    this.el.style.userSelect = 'text';
    this.el.tabIndex = -1;

    this.close.onmousedown = function (e) {
      e.preventDefault();
      e.stopPropagation();
    };

    this.close.onclick = function (e) {
      e.preventDefault();
      e.stopPropagation();

      _this.widget.toggleDetails();
    };

    this.body.scrollTop = 0;
    this.scrollbar.scanDomNode();
    this.ariaLabel = strings.format('{0}{1}', detail || '', documentation ? typeof documentation === 'string' ? documentation : documentation.value : '');
  };

  SuggestionDetails.prototype.getAriaLabel = function () {
    return this.ariaLabel;
  };

  SuggestionDetails.prototype.scrollDown = function (much) {
    if (much === void 0) {
      much = 8;
    }

    this.body.scrollTop += much;
  };

  SuggestionDetails.prototype.scrollUp = function (much) {
    if (much === void 0) {
      much = 8;
    }

    this.body.scrollTop -= much;
  };

  SuggestionDetails.prototype.scrollTop = function () {
    this.body.scrollTop = 0;
  };

  SuggestionDetails.prototype.scrollBottom = function () {
    this.body.scrollTop = this.body.scrollHeight;
  };

  SuggestionDetails.prototype.pageDown = function () {
    this.scrollDown(80);
  };

  SuggestionDetails.prototype.pageUp = function () {
    this.scrollUp(80);
  };

  SuggestionDetails.prototype.setBorderWidth = function (width) {
    this.borderWidth = width;
  };

  SuggestionDetails.prototype.configureFont = function () {
    var options = this.editor.getOptions();
    var fontInfo = options.get(32
    /* fontInfo */
    );
    var fontFamily = fontInfo.fontFamily;
    var fontSize = options.get(86
    /* suggestFontSize */
    ) || fontInfo.fontSize;
    var lineHeight = options.get(87
    /* suggestLineHeight */
    ) || fontInfo.lineHeight;
    var fontWeight = fontInfo.fontWeight;
    var fontSizePx = fontSize + "px";
    var lineHeightPx = lineHeight + "px";
    this.el.style.fontSize = fontSizePx;
    this.el.style.fontWeight = fontWeight;
    this.type.style.fontFamily = fontFamily;
    this.close.style.height = lineHeightPx;
    this.close.style.width = lineHeightPx;
  };

  SuggestionDetails.prototype.dispose = function () {
    this.disposables.dispose();
    this.renderDisposeable = (0, _lifecycle.dispose)(this.renderDisposeable);
  };

  return SuggestionDetails;
}();

var SuggestWidget =
/** @class */
function () {
  function SuggestWidget(editor, telemetryService, contextKeyService, themeService, storageService, keybindingService, modeService, openerService, instantiationService) {
    var _this = this;

    this.editor = editor;
    this.telemetryService = telemetryService; // Editor.IContentWidget.allowEditorOverflow

    this.allowEditorOverflow = true;
    this.suppressMouseDown = false;
    this.state = null;
    this.isAuto = false;
    this.loadingTimeout = _lifecycle.Disposable.None;
    this.currentSuggestionDetails = null;
    this.ignoreFocusEvents = false;
    this.completionModel = null;
    this.showTimeout = new _async.TimeoutTimer();
    this.toDispose = new _lifecycle.DisposableStore();
    this.onDidSelectEmitter = new _event.Emitter();
    this.onDidFocusEmitter = new _event.Emitter();
    this.onDidHideEmitter = new _event.Emitter();
    this.onDidShowEmitter = new _event.Emitter();
    this.onDidSelect = this.onDidSelectEmitter.event;
    this.onDidFocus = this.onDidFocusEmitter.event;
    this.onDidHide = this.onDidHideEmitter.event;
    this.onDidShow = this.onDidShowEmitter.event;
    this.maxWidgetWidth = 660;
    this.listWidth = 330;
    this.firstFocusInCurrentList = false;
    this.preferDocPositionTop = false;
    this.docsPositionPreviousWidgetY = null;
    this.explainMode = false;
    this._onDetailsKeydown = new _event.Emitter();
    this.onDetailsKeyDown = this._onDetailsKeydown.event;
    this._lastAriaAlertLabel = null;
    var kb = keybindingService.lookupKeybinding('editor.action.triggerSuggest');
    var triggerKeybindingLabel = !kb ? '' : " (" + kb.getLabel() + ")";
    var markdownRenderer = this.toDispose.add(new _markdownRenderer.MarkdownRenderer(editor, modeService, openerService));
    this.isAuto = false;
    this.focusedItem = null;
    this.storageService = storageService;
    this.element = (0, _dom.$)('.editor-widget.suggest-widget');
    this.toDispose.add((0, _dom.addDisposableListener)(this.element, 'click', function (e) {
      if (e.target === _this.element) {
        _this.hideWidget();
      }
    }));
    this.messageElement = (0, _dom.append)(this.element, (0, _dom.$)('.message'));
    this.listElement = (0, _dom.append)(this.element, (0, _dom.$)('.tree'));
    this.details = instantiationService.createInstance(SuggestionDetails, this.element, this, this.editor, markdownRenderer, triggerKeybindingLabel);

    var applyIconStyle = function () {
      return (0, _dom.toggleClass)(_this.element, 'no-icons', !_this.editor.getOption(85
      /* suggest */
      ).showIcons);
    };

    applyIconStyle();
    var renderer = instantiationService.createInstance(Renderer, this, this.editor, triggerKeybindingLabel);
    this.list = new _listWidget.List('SuggestWidget', this.listElement, this, [renderer], {
      useShadows: false,
      openController: {
        shouldOpen: function () {
          return false;
        }
      },
      mouseSupport: false
    });
    this.toDispose.add((0, _styler.attachListStyler)(this.list, themeService, {
      listInactiveFocusBackground: editorSuggestWidgetSelectedBackground,
      listInactiveFocusOutline: _colorRegistry.activeContrastBorder
    }));
    this.toDispose.add(themeService.onThemeChange(function (t) {
      return _this.onThemeChange(t);
    }));
    this.toDispose.add(editor.onDidLayoutChange(function () {
      return _this.onEditorLayoutChange();
    }));
    this.toDispose.add(this.list.onMouseDown(function (e) {
      return _this.onListMouseDownOrTap(e);
    }));
    this.toDispose.add(this.list.onTap(function (e) {
      return _this.onListMouseDownOrTap(e);
    }));
    this.toDispose.add(this.list.onSelectionChange(function (e) {
      return _this.onListSelection(e);
    }));
    this.toDispose.add(this.list.onFocusChange(function (e) {
      return _this.onListFocus(e);
    }));
    this.toDispose.add(this.editor.onDidChangeCursorSelection(function () {
      return _this.onCursorSelectionChanged();
    }));
    this.toDispose.add(this.editor.onDidChangeConfiguration(function (e) {
      return e.hasChanged(85
      /* suggest */
      ) && applyIconStyle();
    }));
    this.suggestWidgetVisible = _suggest2.Context.Visible.bindTo(contextKeyService);
    this.suggestWidgetMultipleSuggestions = _suggest2.Context.MultipleSuggestions.bindTo(contextKeyService);
    this.editor.addContentWidget(this);
    this.setState(0
    /* Hidden */
    );
    this.onThemeChange(themeService.getTheme());
    this.toDispose.add((0, _dom.addStandardDisposableListener)(this.details.element, 'keydown', function (e) {
      _this._onDetailsKeydown.fire(e);
    }));
    this.toDispose.add(this.editor.onMouseDown(function (e) {
      return _this.onEditorMouseDown(e);
    }));
  }

  SuggestWidget.prototype.onEditorMouseDown = function (mouseEvent) {
    // Clicking inside details
    if (this.details.element.contains(mouseEvent.target.element)) {
      this.details.element.focus();
    } // Clicking outside details and inside suggest
    else {
        if (this.element.contains(mouseEvent.target.element)) {
          this.editor.focus();
        }
      }
  };

  SuggestWidget.prototype.onCursorSelectionChanged = function () {
    if (this.state === 0
    /* Hidden */
    ) {
        return;
      }

    this.editor.layoutContentWidget(this);
  };

  SuggestWidget.prototype.onEditorLayoutChange = function () {
    if ((this.state === 3
    /* Open */
    || this.state === 5
    /* Details */
    ) && this.expandDocsSettingFromStorage()) {
      this.expandSideOrBelow();
    }
  };

  SuggestWidget.prototype.onListMouseDownOrTap = function (e) {
    if (typeof e.element === 'undefined' || typeof e.index === 'undefined') {
      return;
    } // prevent stealing browser focus from the editor


    e.browserEvent.preventDefault();
    e.browserEvent.stopPropagation();
    this.select(e.element, e.index);
  };

  SuggestWidget.prototype.onListSelection = function (e) {
    if (!e.elements.length) {
      return;
    }

    this.select(e.elements[0], e.indexes[0]);
  };

  SuggestWidget.prototype.select = function (item, index) {
    var completionModel = this.completionModel;

    if (!completionModel) {
      return;
    }

    this.onDidSelectEmitter.fire({
      item: item,
      index: index,
      model: completionModel
    });
    this.editor.focus();
  };

  SuggestWidget.prototype._getSuggestionAriaAlertLabel = function (item) {
    if (this.expandDocsSettingFromStorage()) {
      return nls.localize('ariaCurrenttSuggestionReadDetails', "Item {0}, docs: {1}", item.completion.label, this.details.getAriaLabel());
    } else {
      return item.completion.label;
    }
  };

  SuggestWidget.prototype._ariaAlert = function (newAriaAlertLabel) {
    if (this._lastAriaAlertLabel === newAriaAlertLabel) {
      return;
    }

    this._lastAriaAlertLabel = newAriaAlertLabel;

    if (this._lastAriaAlertLabel) {
      (0, _aria.alert)(this._lastAriaAlertLabel, true);
    }
  };

  SuggestWidget.prototype.onThemeChange = function (theme) {
    var backgroundColor = theme.getColor(editorSuggestWidgetBackground);

    if (backgroundColor) {
      this.listElement.style.backgroundColor = backgroundColor.toString();
      this.details.element.style.backgroundColor = backgroundColor.toString();
      this.messageElement.style.backgroundColor = backgroundColor.toString();
    }

    var borderColor = theme.getColor(editorSuggestWidgetBorder);

    if (borderColor) {
      this.listElement.style.borderColor = borderColor.toString();
      this.details.element.style.borderColor = borderColor.toString();
      this.messageElement.style.borderColor = borderColor.toString();
      this.detailsBorderColor = borderColor.toString();
    }

    var focusBorderColor = theme.getColor(_colorRegistry.focusBorder);

    if (focusBorderColor) {
      this.detailsFocusBorderColor = focusBorderColor.toString();
    }

    this.details.setBorderWidth(theme.type === 'hc' ? 2 : 1);
  };

  SuggestWidget.prototype.onListFocus = function (e) {
    var _this = this;

    if (this.ignoreFocusEvents) {
      return;
    }

    if (!e.elements.length) {
      if (this.currentSuggestionDetails) {
        this.currentSuggestionDetails.cancel();
        this.currentSuggestionDetails = null;
        this.focusedItem = null;
      }

      this._ariaAlert(null);

      return;
    }

    if (!this.completionModel) {
      return;
    }

    var item = e.elements[0];
    var index = e.indexes[0];
    this.firstFocusInCurrentList = !this.focusedItem;

    if (item !== this.focusedItem) {
      if (this.currentSuggestionDetails) {
        this.currentSuggestionDetails.cancel();
        this.currentSuggestionDetails = null;
      }

      this.focusedItem = item;
      this.list.reveal(index);
      this.currentSuggestionDetails = (0, _async.createCancelablePromise)(function (token) {
        return __awaiter(_this, void 0, void 0, function () {
          var loading, result;

          var _this = this;

          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                loading = (0, _async.disposableTimeout)(function () {
                  return _this.showDetails(true);
                }, 250);
                token.onCancellationRequested(function () {
                  return loading.dispose();
                });
                return [4
                /*yield*/
                , item.resolve(token)];

              case 1:
                result = _a.sent();
                loading.dispose();
                return [2
                /*return*/
                , result];
            }
          });
        });
      });
      this.currentSuggestionDetails.then(function () {
        if (index >= _this.list.length || item !== _this.list.element(index)) {
          return;
        } // item can have extra information, so re-render


        _this.ignoreFocusEvents = true;

        _this.list.splice(index, 1, [item]);

        _this.list.setFocus([index]);

        _this.ignoreFocusEvents = false;

        if (_this.expandDocsSettingFromStorage()) {
          _this.showDetails(false);
        } else {
          (0, _dom.removeClass)(_this.element, 'docs-side');
        }

        _this._ariaAlert(_this._getSuggestionAriaAlertLabel(item));
      }).catch(_errors.onUnexpectedError);
    } // emit an event


    this.onDidFocusEmitter.fire({
      item: item,
      index: index,
      model: this.completionModel
    });
  };

  SuggestWidget.prototype.setState = function (state) {
    if (!this.element) {
      return;
    }

    var stateChanged = this.state !== state;
    this.state = state;
    (0, _dom.toggleClass)(this.element, 'frozen', state === 4
    /* Frozen */
    );

    switch (state) {
      case 0
      /* Hidden */
      :
        (0, _dom.hide)(this.messageElement, this.details.element, this.listElement);
        this.hide();
        this.listHeight = 0;

        if (stateChanged) {
          this.list.splice(0, this.list.length);
        }

        this.focusedItem = null;
        break;

      case 1
      /* Loading */
      :
        this.messageElement.textContent = SuggestWidget.LOADING_MESSAGE;
        (0, _dom.hide)(this.listElement, this.details.element);
        (0, _dom.show)(this.messageElement);
        (0, _dom.removeClass)(this.element, 'docs-side');
        this.show();
        this.focusedItem = null;
        break;

      case 2
      /* Empty */
      :
        this.messageElement.textContent = SuggestWidget.NO_SUGGESTIONS_MESSAGE;
        (0, _dom.hide)(this.listElement, this.details.element);
        (0, _dom.show)(this.messageElement);
        (0, _dom.removeClass)(this.element, 'docs-side');
        this.show();
        this.focusedItem = null;
        break;

      case 3
      /* Open */
      :
        (0, _dom.hide)(this.messageElement);
        (0, _dom.show)(this.listElement);
        this.show();
        break;

      case 4
      /* Frozen */
      :
        (0, _dom.hide)(this.messageElement);
        (0, _dom.show)(this.listElement);
        this.show();
        break;

      case 5
      /* Details */
      :
        (0, _dom.hide)(this.messageElement);
        (0, _dom.show)(this.details.element, this.listElement);
        this.show();

        this._ariaAlert(this.details.getAriaLabel());

        break;
    }
  };

  SuggestWidget.prototype.showTriggered = function (auto, delay) {
    var _this = this;

    if (this.state !== 0
    /* Hidden */
    ) {
        return;
      }

    this.isAuto = !!auto;

    if (!this.isAuto) {
      this.loadingTimeout = (0, _async.disposableTimeout)(function () {
        return _this.setState(1
        /* Loading */
        );
      }, delay);
    }
  };

  SuggestWidget.prototype.showSuggestions = function (completionModel, selectionIndex, isFrozen, isAuto) {
    this.preferDocPositionTop = false;
    this.docsPositionPreviousWidgetY = null;
    this.loadingTimeout.dispose();

    if (this.currentSuggestionDetails) {
      this.currentSuggestionDetails.cancel();
      this.currentSuggestionDetails = null;
    }

    if (this.completionModel !== completionModel) {
      this.completionModel = completionModel;
    }

    if (isFrozen && this.state !== 2
    /* Empty */
    && this.state !== 0
    /* Hidden */
    ) {
        this.setState(4
        /* Frozen */
        );
        return;
      }

    var visibleCount = this.completionModel.items.length;
    var isEmpty = visibleCount === 0;
    this.suggestWidgetMultipleSuggestions.set(visibleCount > 1);

    if (isEmpty) {
      if (isAuto) {
        this.setState(0
        /* Hidden */
        );
      } else {
        this.setState(2
        /* Empty */
        );
      }

      this.completionModel = null;
    } else {
      if (this.state !== 3
      /* Open */
      ) {
          var stats = this.completionModel.stats;
          stats['wasAutomaticallyTriggered'] = !!isAuto;
          /* __GDPR__
              "suggestWidget" : {
                  "wasAutomaticallyTriggered" : { "classification": "SystemMetaData", "purpose": "FeatureInsight", "isMeasurement": true },
                  "${include}": [
                      "${ICompletionStats}"
                  ]
              }
          */

          this.telemetryService.publicLog('suggestWidget', __assign({}, stats));
        }

      this.focusedItem = null;
      this.list.splice(0, this.list.length, this.completionModel.items);

      if (isFrozen) {
        this.setState(4
        /* Frozen */
        );
      } else {
        this.setState(3
        /* Open */
        );
      }

      this.list.reveal(selectionIndex, 0);
      this.list.setFocus([selectionIndex]); // Reset focus border

      if (this.detailsBorderColor) {
        this.details.element.style.borderColor = this.detailsBorderColor;
      }
    }
  };

  SuggestWidget.prototype.selectNextPage = function () {
    switch (this.state) {
      case 0
      /* Hidden */
      :
        return false;

      case 5
      /* Details */
      :
        this.details.pageDown();
        return true;

      case 1
      /* Loading */
      :
        return !this.isAuto;

      default:
        this.list.focusNextPage();
        return true;
    }
  };

  SuggestWidget.prototype.selectNext = function () {
    switch (this.state) {
      case 0
      /* Hidden */
      :
        return false;

      case 1
      /* Loading */
      :
        return !this.isAuto;

      default:
        this.list.focusNext(1, true);
        return true;
    }
  };

  SuggestWidget.prototype.selectLast = function () {
    switch (this.state) {
      case 0
      /* Hidden */
      :
        return false;

      case 5
      /* Details */
      :
        this.details.scrollBottom();
        return true;

      case 1
      /* Loading */
      :
        return !this.isAuto;

      default:
        this.list.focusLast();
        return true;
    }
  };

  SuggestWidget.prototype.selectPreviousPage = function () {
    switch (this.state) {
      case 0
      /* Hidden */
      :
        return false;

      case 5
      /* Details */
      :
        this.details.pageUp();
        return true;

      case 1
      /* Loading */
      :
        return !this.isAuto;

      default:
        this.list.focusPreviousPage();
        return true;
    }
  };

  SuggestWidget.prototype.selectPrevious = function () {
    switch (this.state) {
      case 0
      /* Hidden */
      :
        return false;

      case 1
      /* Loading */
      :
        return !this.isAuto;

      default:
        this.list.focusPrevious(1, true);
        return false;
    }
  };

  SuggestWidget.prototype.selectFirst = function () {
    switch (this.state) {
      case 0
      /* Hidden */
      :
        return false;

      case 5
      /* Details */
      :
        this.details.scrollTop();
        return true;

      case 1
      /* Loading */
      :
        return !this.isAuto;

      default:
        this.list.focusFirst();
        return true;
    }
  };

  SuggestWidget.prototype.getFocusedItem = function () {
    if (this.state !== 0
    /* Hidden */
    && this.state !== 2
    /* Empty */
    && this.state !== 1
    /* Loading */
    && this.completionModel) {
      return {
        item: this.list.getFocusedElements()[0],
        index: this.list.getFocus()[0],
        model: this.completionModel
      };
    }

    return undefined;
  };

  SuggestWidget.prototype.toggleDetailsFocus = function () {
    if (this.state === 5
    /* Details */
    ) {
        this.setState(3
        /* Open */
        );

        if (this.detailsBorderColor) {
          this.details.element.style.borderColor = this.detailsBorderColor;
        }
      } else if (this.state === 3
    /* Open */
    && this.expandDocsSettingFromStorage()) {
      this.setState(5
      /* Details */
      );

      if (this.detailsFocusBorderColor) {
        this.details.element.style.borderColor = this.detailsFocusBorderColor;
      }
    }

    this.telemetryService.publicLog2('suggestWidget:toggleDetailsFocus');
  };

  SuggestWidget.prototype.toggleDetails = function () {
    if (!canExpandCompletionItem(this.list.getFocusedElements()[0])) {
      return;
    }

    if (this.expandDocsSettingFromStorage()) {
      this.updateExpandDocsSetting(false);
      (0, _dom.hide)(this.details.element);
      (0, _dom.removeClass)(this.element, 'docs-side');
      (0, _dom.removeClass)(this.element, 'docs-below');
      this.editor.layoutContentWidget(this);
      this.telemetryService.publicLog2('suggestWidget:collapseDetails');
    } else {
      if (this.state !== 3
      /* Open */
      && this.state !== 5
      /* Details */
      && this.state !== 4
      /* Frozen */
      ) {
          return;
        }

      this.updateExpandDocsSetting(true);
      this.showDetails(false);

      this._ariaAlert(this.details.getAriaLabel());

      this.telemetryService.publicLog2('suggestWidget:expandDetails');
    }
  };

  SuggestWidget.prototype.showDetails = function (loading) {
    this.expandSideOrBelow();
    (0, _dom.show)(this.details.element);
    this.details.element.style.maxHeight = this.maxWidgetHeight + 'px';

    if (loading) {
      this.details.renderLoading();
    } else {
      this.details.renderItem(this.list.getFocusedElements()[0], this.explainMode);
    } // Reset margin-top that was set as Fix for #26416


    this.listElement.style.marginTop = '0px'; // with docs showing up widget width/height may change, so reposition the widget

    this.editor.layoutContentWidget(this);
    this.adjustDocsPosition();
    this.editor.focus();
  };

  SuggestWidget.prototype.toggleExplainMode = function () {
    if (this.list.getFocusedElements()[0] && this.expandDocsSettingFromStorage()) {
      this.explainMode = !this.explainMode;
      this.showDetails(false);
    }
  };

  SuggestWidget.prototype.show = function () {
    var _this = this;

    var newHeight = this.updateListHeight();

    if (newHeight !== this.listHeight) {
      this.editor.layoutContentWidget(this);
      this.listHeight = newHeight;
    }

    this.suggestWidgetVisible.set(true);
    this.showTimeout.cancelAndSet(function () {
      (0, _dom.addClass)(_this.element, 'visible');

      _this.onDidShowEmitter.fire(_this);
    }, 100);
  };

  SuggestWidget.prototype.hide = function () {
    this.suggestWidgetVisible.reset();
    this.suggestWidgetMultipleSuggestions.reset();
    (0, _dom.removeClass)(this.element, 'visible');
  };

  SuggestWidget.prototype.hideWidget = function () {
    this.loadingTimeout.dispose();
    this.setState(0
    /* Hidden */
    );
    this.onDidHideEmitter.fire(this);
  };

  SuggestWidget.prototype.getPosition = function () {
    if (this.state === 0
    /* Hidden */
    ) {
        return null;
      }

    var preference = [2
    /* BELOW */
    , 1
    /* ABOVE */
    ];

    if (this.preferDocPositionTop) {
      preference = [1
      /* ABOVE */
      ];
    }

    return {
      position: this.editor.getPosition(),
      preference: preference
    };
  };

  SuggestWidget.prototype.getDomNode = function () {
    return this.element;
  };

  SuggestWidget.prototype.getId = function () {
    return SuggestWidget.ID;
  };

  SuggestWidget.prototype.isFrozen = function () {
    return this.state === 4
    /* Frozen */
    ;
  };

  SuggestWidget.prototype.updateListHeight = function () {
    var height = 0;

    if (this.state === 2
    /* Empty */
    || this.state === 1
    /* Loading */
    ) {
        height = this.unfocusedHeight;
      } else {
      var suggestionCount = this.list.contentHeight / this.unfocusedHeight;
      var maxVisibleSuggestions = this.editor.getOption(85
      /* suggest */
      ).maxVisibleSuggestions;
      height = Math.min(suggestionCount, maxVisibleSuggestions) * this.unfocusedHeight;
    }

    this.element.style.lineHeight = this.unfocusedHeight + "px";
    this.listElement.style.height = height + "px";
    this.list.layout(height);
    return height;
  };
  /**
   * Adds the propert classes, margins when positioning the docs to the side
   */


  SuggestWidget.prototype.adjustDocsPosition = function () {
    if (!this.editor.hasModel()) {
      return;
    }

    var lineHeight = this.editor.getOption(47
    /* lineHeight */
    );
    var cursorCoords = this.editor.getScrolledVisiblePosition(this.editor.getPosition());
    var editorCoords = (0, _dom.getDomNodePagePosition)(this.editor.getDomNode());
    var cursorX = editorCoords.left + cursorCoords.left;
    var cursorY = editorCoords.top + cursorCoords.top + cursorCoords.height;
    var widgetCoords = (0, _dom.getDomNodePagePosition)(this.element);
    var widgetX = widgetCoords.left;
    var widgetY = widgetCoords.top; // Fixes #27649
    // Check if the Y changed to the top of the cursor and keep the widget flagged to prefer top

    if (this.docsPositionPreviousWidgetY && this.docsPositionPreviousWidgetY < widgetY && !this.preferDocPositionTop) {
      this.preferDocPositionTop = true;
      this.adjustDocsPosition();
      return;
    }

    this.docsPositionPreviousWidgetY = widgetY;

    if (widgetX < cursorX - this.listWidth) {
      // Widget is too far to the left of cursor, swap list and docs
      (0, _dom.addClass)(this.element, 'list-right');
    } else {
      (0, _dom.removeClass)(this.element, 'list-right');
    } // Compare top of the cursor (cursorY - lineheight) with widgetTop to determine if
    // margin-top needs to be applied on list to make it appear right above the cursor
    // Cannot compare cursorY directly as it may be a few decimals off due to zoooming


    if ((0, _dom.hasClass)(this.element, 'docs-side') && cursorY - lineHeight > widgetY && this.details.element.offsetHeight > this.listElement.offsetHeight) {
      // Fix for #26416
      // Docs is bigger than list and widget is above cursor, apply margin-top so that list appears right above cursor
      this.listElement.style.marginTop = this.details.element.offsetHeight - this.listElement.offsetHeight + "px";
    }
  };
  /**
   * Adds the proper classes for positioning the docs to the side or below
   */


  SuggestWidget.prototype.expandSideOrBelow = function () {
    if (!canExpandCompletionItem(this.focusedItem) && this.firstFocusInCurrentList) {
      (0, _dom.removeClass)(this.element, 'docs-side');
      (0, _dom.removeClass)(this.element, 'docs-below');
      return;
    }

    var matches = this.element.style.maxWidth.match(/(\d+)px/);

    if (!matches || Number(matches[1]) < this.maxWidgetWidth) {
      (0, _dom.addClass)(this.element, 'docs-below');
      (0, _dom.removeClass)(this.element, 'docs-side');
    } else if (canExpandCompletionItem(this.focusedItem)) {
      (0, _dom.addClass)(this.element, 'docs-side');
      (0, _dom.removeClass)(this.element, 'docs-below');
    }
  };

  Object.defineProperty(SuggestWidget.prototype, "maxWidgetHeight", {
    // Heights
    get: function () {
      return this.unfocusedHeight * this.editor.getOption(85
      /* suggest */
      ).maxVisibleSuggestions;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(SuggestWidget.prototype, "unfocusedHeight", {
    get: function () {
      var options = this.editor.getOptions();
      return options.get(87
      /* suggestLineHeight */
      ) || options.get(32
      /* fontInfo */
      ).lineHeight;
    },
    enumerable: true,
    configurable: true
  }); // IDelegate

  SuggestWidget.prototype.getHeight = function (element) {
    return this.unfocusedHeight;
  };

  SuggestWidget.prototype.getTemplateId = function (element) {
    return 'suggestion';
  };

  SuggestWidget.prototype.expandDocsSettingFromStorage = function () {
    return this.storageService.getBoolean('expandSuggestionDocs', 0
    /* GLOBAL */
    , expandSuggestionDocsByDefault);
  };

  SuggestWidget.prototype.updateExpandDocsSetting = function (value) {
    this.storageService.store('expandSuggestionDocs', value, 0
    /* GLOBAL */
    );
  };

  SuggestWidget.prototype.dispose = function () {
    this.details.dispose();
    this.list.dispose();
    this.toDispose.dispose();
    this.loadingTimeout.dispose();
    this.showTimeout.dispose();
  };

  SuggestWidget.ID = 'editor.widget.suggestWidget';
  SuggestWidget.LOADING_MESSAGE = nls.localize('suggestWidget.loading', "Loading...");
  SuggestWidget.NO_SUGGESTIONS_MESSAGE = nls.localize('suggestWidget.noSuggestions', "No suggestions.");
  SuggestWidget = __decorate([__param(1, _telemetry.ITelemetryService), __param(2, _contextkey.IContextKeyService), __param(3, _themeService2.IThemeService), __param(4, _storage.IStorageService), __param(5, _keybinding.IKeybindingService), __param(6, _modeService2.IModeService), __param(7, _opener.IOpenerService), __param(8, _instantiation.IInstantiationService)], SuggestWidget);
  return SuggestWidget;
}();

exports.SuggestWidget = SuggestWidget;
(0, _themeService2.registerThemingParticipant)(function (theme, collector) {
  var matchHighlight = theme.getColor(editorSuggestWidgetHighlightForeground);

  if (matchHighlight) {
    collector.addRule(".monaco-editor .suggest-widget .monaco-list .monaco-list-row .monaco-highlighted-label .highlight { color: " + matchHighlight + "; }");
  }

  var foreground = theme.getColor(editorSuggestWidgetForeground);

  if (foreground) {
    collector.addRule(".monaco-editor .suggest-widget { color: " + foreground + "; }");
  }

  var link = theme.getColor(_colorRegistry.textLinkForeground);

  if (link) {
    collector.addRule(".monaco-editor .suggest-widget a { color: " + link + "; }");
  }

  var codeBackground = theme.getColor(_colorRegistry.textCodeBlockBackground);

  if (codeBackground) {
    collector.addRule(".monaco-editor .suggest-widget code { background-color: " + codeBackground + "; }");
  }
});
},{"./media/suggest.css":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/media/suggest.css","../../../base/browser/ui/codiconLabel/codiconLabel.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/codiconLabel/codiconLabel.js","../documentSymbols/outlineTree.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/documentSymbols/outlineTree.js","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/filters.js":"../node_modules/monaco-editor/esm/vs/base/common/filters.js","../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../base/browser/ui/list/listWidget.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/list/listWidget.js","../../../base/browser/ui/scrollbar/scrollableElement.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/scrollbar/scrollableElement.js","../../../platform/keybinding/common/keybinding.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","./suggest.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggest.js","../../../base/browser/ui/aria/aria.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria.js","../../../platform/telemetry/common/telemetry.js":"../node_modules/monaco-editor/esm/vs/platform/telemetry/common/telemetry.js","../../../platform/theme/common/styler.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/styler.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/storage/common/storage.js":"../node_modules/monaco-editor/esm/vs/platform/storage/common/storage.js","../markdown/markdownRenderer.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/markdown/markdownRenderer.js","../../common/services/modeService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modeService.js","../../../platform/opener/common/opener.js":"../node_modules/monaco-editor/esm/vs/platform/opener/common/opener.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../../base/browser/ui/iconLabel/iconLabel.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/iconLabel/iconLabel.js","../../common/services/getIconClasses.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/getIconClasses.js","../../common/services/modelService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js","../../../base/common/uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../platform/files/common/files.js":"../node_modules/monaco-editor/esm/vs/platform/files/common/files.js","../../../base/common/htmlContent.js":"../node_modules/monaco-editor/esm/vs/base/common/htmlContent.js","../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/wordContextKey.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WordContextKey = void 0;

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var WordContextKey =
/** @class */
function (_super) {
  __extends(WordContextKey, _super);

  function WordContextKey(_editor, contextKeyService) {
    var _this = _super.call(this) || this;

    _this._editor = _editor;
    _this._enabled = false;
    _this._ckAtEnd = WordContextKey.AtEnd.bindTo(contextKeyService);

    _this._register(_this._editor.onDidChangeConfiguration(function (e) {
      return e.hasChanged(90
      /* tabCompletion */
      ) && _this._update();
    }));

    _this._update();

    return _this;
  }

  WordContextKey.prototype.dispose = function () {
    _super.prototype.dispose.call(this);

    (0, _lifecycle.dispose)(this._selectionListener);

    this._ckAtEnd.reset();
  };

  WordContextKey.prototype._update = function () {
    var _this = this; // only update this when tab completions are enabled


    var enabled = this._editor.getOption(90
    /* tabCompletion */
    ) === 'on';

    if (this._enabled === enabled) {
      return;
    }

    this._enabled = enabled;

    if (this._enabled) {
      var checkForWordEnd = function () {
        if (!_this._editor.hasModel()) {
          _this._ckAtEnd.set(false);

          return;
        }

        var model = _this._editor.getModel();

        var selection = _this._editor.getSelection();

        var word = model.getWordAtPosition(selection.getStartPosition());

        if (!word) {
          _this._ckAtEnd.set(false);

          return;
        }

        _this._ckAtEnd.set(word.endColumn === selection.getStartPosition().column);
      };

      this._selectionListener = this._editor.onDidChangeCursorSelection(checkForWordEnd);
      checkForWordEnd();
    } else if (this._selectionListener) {
      this._ckAtEnd.reset();

      this._selectionListener.dispose();

      this._selectionListener = undefined;
    }
  };

  WordContextKey.AtEnd = new _contextkey.RawContextKey('atEndOfWord', false);
  WordContextKey = __decorate([__param(1, _contextkey.IContextKeyService)], WordContextKey);
  return WordContextKey;
}(_lifecycle.Disposable);

exports.WordContextKey = WordContextKey;
},{"../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestCommitCharacters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommitCharacterController = void 0;

var _arrays = require("../../../base/common/arrays.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _characterClassifier = require("../../common/core/characterClassifier.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var CommitCharacterController =
/** @class */
function () {
  function CommitCharacterController(editor, widget, accept) {
    var _this = this;

    this._disposables = new _lifecycle.DisposableStore();

    this._disposables.add(widget.onDidShow(function () {
      return _this._onItem(widget.getFocusedItem());
    }));

    this._disposables.add(widget.onDidFocus(this._onItem, this));

    this._disposables.add(widget.onDidHide(this.reset, this));

    this._disposables.add(editor.onWillType(function (text) {
      if (_this._active && !widget.isFrozen()) {
        var ch = text.charCodeAt(text.length - 1);

        if (_this._active.acceptCharacters.has(ch) && editor.getOption(0
        /* acceptSuggestionOnCommitCharacter */
        )) {
          accept(_this._active.item);
        }
      }
    }));
  }

  CommitCharacterController.prototype._onItem = function (selected) {
    if (!selected || !(0, _arrays.isNonEmptyArray)(selected.item.completion.commitCharacters)) {
      // no item or no commit characters
      this.reset();
      return;
    }

    if (this._active && this._active.item.item === selected.item) {
      // still the same item
      return;
    } // keep item and its commit characters


    var acceptCharacters = new _characterClassifier.CharacterSet();

    for (var _i = 0, _a = selected.item.completion.commitCharacters; _i < _a.length; _i++) {
      var ch = _a[_i];

      if (ch.length > 0) {
        acceptCharacters.add(ch.charCodeAt(0));
      }
    }

    this._active = {
      acceptCharacters: acceptCharacters,
      item: selected
    };
  };

  CommitCharacterController.prototype.reset = function () {
    this._active = undefined;
  };

  CommitCharacterController.prototype.dispose = function () {
    this._disposables.dispose();
  };

  return CommitCharacterController;
}();

exports.CommitCharacterController = CommitCharacterController;
},{"../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../common/core/characterClassifier.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestRangeHighlighter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuggestRangeHighlighter = void 0;

var _lifecycle = require("../../../base/common/lifecycle.js");

var _range = require("../../common/core/range.js");

var _event = require("../../../base/common/event.js");

var _event2 = require("../../../base/browser/event.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var SuggestRangeHighlighter =
/** @class */
function () {
  function SuggestRangeHighlighter(_controller) {
    var _this = this;

    this._controller = _controller;
    this._disposables = new _lifecycle.DisposableStore();
    this._decorations = [];

    this._disposables.add(_controller.model.onDidSuggest(function (e) {
      if (!e.shy) {
        var widget = _this._controller.widget.getValue();

        var focused = widget.getFocusedItem();

        if (focused) {
          _this._highlight(focused.item);
        }

        if (!_this._widgetListener) {
          _this._widgetListener = widget.onDidFocus(function (e) {
            return _this._highlight(e.item);
          });
        }
      }
    }));

    this._disposables.add(_controller.model.onDidCancel(function () {
      _this._reset();
    }));
  }

  SuggestRangeHighlighter.prototype.dispose = function () {
    this._reset();

    this._disposables.dispose();

    (0, _lifecycle.dispose)(this._widgetListener);
    (0, _lifecycle.dispose)(this._shiftKeyListener);
  };

  SuggestRangeHighlighter.prototype._reset = function () {
    this._decorations = this._controller.editor.deltaDecorations(this._decorations, []);

    if (this._shiftKeyListener) {
      this._shiftKeyListener.dispose();

      this._shiftKeyListener = undefined;
    }
  };

  SuggestRangeHighlighter.prototype._highlight = function (item) {
    var _this = this;

    var _a;

    this._currentItem = item;

    var opts = this._controller.editor.getOption(85
    /* suggest */
    );

    var newDeco = [];

    if (opts.insertHighlight) {
      if (!this._shiftKeyListener) {
        this._shiftKeyListener = shiftKey.event(function () {
          return _this._highlight(_this._currentItem);
        });
      }

      var info = this._controller.getOverwriteInfo(item, shiftKey.isPressed);

      var position = this._controller.editor.getPosition();

      if (opts.insertMode === 'insert' && info.overwriteAfter > 0) {
        // wants inserts but got replace-mode -> highlight AFTER range
        newDeco = [{
          range: new _range.Range(position.lineNumber, position.column, position.lineNumber, position.column + info.overwriteAfter),
          options: {
            inlineClassName: 'suggest-insert-unexpected'
          }
        }];
      } else if (opts.insertMode === 'replace' && info.overwriteAfter === 0) {
        // want replace but likely got insert -> highlight AFTER range
        var wordInfo = (_a = this._controller.editor.getModel()) === null || _a === void 0 ? void 0 : _a.getWordAtPosition(position);

        if (wordInfo && wordInfo.endColumn > position.column) {
          newDeco = [{
            range: new _range.Range(position.lineNumber, position.column, position.lineNumber, wordInfo.endColumn),
            options: {
              inlineClassName: 'suggest-insert-unexpected'
            }
          }];
        }
      }
    } // update editor decorations


    this._decorations = this._controller.editor.deltaDecorations(this._decorations, newDeco);
  };

  return SuggestRangeHighlighter;
}();

exports.SuggestRangeHighlighter = SuggestRangeHighlighter;
var shiftKey = new (
/** @class */
function (_super) {
  __extends(ShiftKey, _super);

  function ShiftKey() {
    var _this = _super.call(this) || this;

    _this._subscriptions = new _lifecycle.DisposableStore();
    _this._isPressed = false;

    _this._subscriptions.add((0, _event2.domEvent)(document.body, 'keydown')(function (e) {
      return _this.isPressed = e.shiftKey;
    }));

    _this._subscriptions.add((0, _event2.domEvent)(document.body, 'keyup')(function () {
      return _this.isPressed = false;
    }));

    _this._subscriptions.add((0, _event2.domEvent)(document.body, 'mouseleave')(function () {
      return _this.isPressed = false;
    }));

    _this._subscriptions.add((0, _event2.domEvent)(document.body, 'blur')(function () {
      return _this.isPressed = false;
    }));

    return _this;
  }

  Object.defineProperty(ShiftKey.prototype, "isPressed", {
    get: function () {
      return this._isPressed;
    },
    set: function (value) {
      if (this._isPressed !== value) {
        this._isPressed = value;
        this.fire(value);
      }
    },
    enumerable: true,
    configurable: true
  });

  ShiftKey.prototype.dispose = function () {
    this._subscriptions.dispose();

    _super.prototype.dispose.call(this);
  };

  return ShiftKey;
}(_event.Emitter))();
},{"../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../base/browser/event.js":"../node_modules/monaco-editor/esm/vs/base/browser/event.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestController.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TriggerSuggestAction = exports.SuggestController = void 0;

var _aria = require("../../../base/browser/ui/aria/aria.js");

var _arrays = require("../../../base/common/arrays.js");

var _errors = require("../../../base/common/errors.js");

var _keyCodes = require("../../../base/common/keyCodes.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _editOperation = require("../../common/core/editOperation.js");

var _range = require("../../common/core/range.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _snippetController = require("../snippet/snippetController2.js");

var _snippetParser = require("../snippet/snippetParser.js");

var _suggestMemory = require("./suggestMemory.js");

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _commands = require("../../../platform/commands/common/commands.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _instantiation = require("../../../platform/instantiation/common/instantiation.js");

var _keybindingsRegistry = require("../../../platform/keybinding/common/keybindingsRegistry.js");

var _suggest = require("./suggest.js");

var _suggestAlternatives = require("./suggestAlternatives.js");

var _suggestModel = require("./suggestModel.js");

var _suggestWidget = require("./suggestWidget.js");

var _wordContextKey = require("./wordContextKey.js");

var _event = require("../../../base/common/event.js");

var _editorWorkerService = require("../../common/services/editorWorkerService.js");

var _async = require("../../../base/common/async.js");

var _types = require("../../../base/common/types.js");

var _suggestCommitCharacters = require("./suggestCommitCharacters.js");

var platform = _interopRequireWildcard(require("../../../base/common/platform.js"));

var _suggestRangeHighlighter = require("./suggestRangeHighlighter.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __spreadArrays = void 0 && (void 0).__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
};

/**
 * Stop suggest widget from disappearing when clicking into other areas
 * For development purpose only
 */
var _sticky = false;

var LineSuffix =
/** @class */
function () {
  function LineSuffix(_model, _position) {
    this._model = _model;
    this._position = _position; // spy on what's happening right of the cursor. two cases:
    // 1. end of line -> check that it's still end of line
    // 2. mid of line -> add a marker and compute the delta

    var maxColumn = _model.getLineMaxColumn(_position.lineNumber);

    if (maxColumn !== _position.column) {
      var offset = _model.getOffsetAt(_position);

      var end = _model.getPositionAt(offset + 1);

      this._marker = _model.deltaDecorations([], [{
        range: _range.Range.fromPositions(_position, end),
        options: {
          stickiness: 1
          /* NeverGrowsWhenTypingAtEdges */

        }
      }]);
    }
  }

  LineSuffix.prototype.dispose = function () {
    if (this._marker && !this._model.isDisposed()) {
      this._model.deltaDecorations(this._marker, []);
    }
  };

  LineSuffix.prototype.delta = function (position) {
    if (this._model.isDisposed() || this._position.lineNumber !== position.lineNumber) {
      // bail out early if things seems fishy
      return 0;
    } // read the marker (in case suggest was triggered at line end) or compare
    // the cursor to the line end.


    if (this._marker) {
      var range = this._model.getDecorationRange(this._marker[0]);

      var end = this._model.getOffsetAt(range.getStartPosition());

      return end - this._model.getOffsetAt(position);
    } else {
      return this._model.getLineMaxColumn(position.lineNumber) - position.column;
    }
  };

  return LineSuffix;
}();

var SuggestController =
/** @class */
function () {
  function SuggestController(editor, editorWorker, _memoryService, _commandService, _contextKeyService, _instantiationService) {
    var _this = this;

    this._memoryService = _memoryService;
    this._commandService = _commandService;
    this._contextKeyService = _contextKeyService;
    this._instantiationService = _instantiationService;
    this._lineSuffix = new _lifecycle.MutableDisposable();
    this._toDispose = new _lifecycle.DisposableStore();
    this.editor = editor;
    this.model = new _suggestModel.SuggestModel(this.editor, editorWorker);
    this.widget = new _async.IdleValue(function () {
      var widget = _this._instantiationService.createInstance(_suggestWidget.SuggestWidget, _this.editor);

      _this._toDispose.add(widget);

      _this._toDispose.add(widget.onDidSelect(function (item) {
        return _this._insertSuggestion(item, 0);
      }, _this)); // Wire up logic to accept a suggestion on certain characters


      var commitCharacterController = new _suggestCommitCharacters.CommitCharacterController(_this.editor, widget, function (item) {
        return _this._insertSuggestion(item, 2
        /* NoAfterUndoStop */
        );
      });

      _this._toDispose.add(commitCharacterController);

      _this._toDispose.add(_this.model.onDidSuggest(function (e) {
        if (e.completionModel.items.length === 0) {
          commitCharacterController.reset();
        }
      })); // Wire up makes text edit context key


      var makesTextEdit = _suggest.Context.MakesTextEdit.bindTo(_this._contextKeyService);

      _this._toDispose.add(widget.onDidFocus(function (_a) {
        var item = _a.item;

        var position = _this.editor.getPosition();

        var startColumn = item.editStart.column;
        var endColumn = position.column;
        var value = true;

        if (_this.editor.getOption(1
        /* acceptSuggestionOnEnter */
        ) === 'smart' && _this.model.state === 2
        /* Auto */
        && !item.completion.command && !item.completion.additionalTextEdits && !(item.completion.insertTextRules & 4
        /* InsertAsSnippet */
        ) && endColumn - startColumn === item.completion.insertText.length) {
          var oldText = _this.editor.getModel().getValueInRange({
            startLineNumber: position.lineNumber,
            startColumn: startColumn,
            endLineNumber: position.lineNumber,
            endColumn: endColumn
          });

          value = oldText !== item.completion.insertText;
        }

        makesTextEdit.set(value);
      }));

      _this._toDispose.add((0, _lifecycle.toDisposable)(function () {
        return makesTextEdit.reset();
      }));

      return widget;
    });
    this._alternatives = new _async.IdleValue(function () {
      return _this._toDispose.add(new _suggestAlternatives.SuggestAlternatives(_this.editor, _this._contextKeyService));
    });

    this._toDispose.add(_instantiationService.createInstance(_wordContextKey.WordContextKey, editor));

    this._toDispose.add(this.model.onDidTrigger(function (e) {
      _this.widget.getValue().showTriggered(e.auto, e.shy ? 250 : 50);

      _this._lineSuffix.value = new LineSuffix(_this.editor.getModel(), e.position);
    }));

    this._toDispose.add(this.model.onDidSuggest(function (e) {
      if (!e.shy) {
        var index = _this._memoryService.select(_this.editor.getModel(), _this.editor.getPosition(), e.completionModel.items);

        _this.widget.getValue().showSuggestions(e.completionModel, index, e.isFrozen, e.auto);
      }
    }));

    this._toDispose.add(this.model.onDidCancel(function (e) {
      if (!e.retrigger) {
        _this.widget.getValue().hideWidget();
      }
    }));

    this._toDispose.add(this.editor.onDidBlurEditorWidget(function () {
      if (!_sticky) {
        _this.model.cancel();

        _this.model.clear();
      }
    }));

    this._toDispose.add(this.widget.getValue().onDetailsKeyDown(function (e) {
      // cmd + c on macOS, ctrl + c on Win / Linux
      if (e.toKeybinding().equals(new _keyCodes.SimpleKeybinding(true, false, false, false, 33
      /* KEY_C */
      )) || platform.isMacintosh && e.toKeybinding().equals(new _keyCodes.SimpleKeybinding(false, false, false, true, 33
      /* KEY_C */
      ))) {
        e.stopPropagation();
        return;
      }

      if (!e.toKeybinding().isModifierKey()) {
        _this.editor.focus();
      }
    })); // Manage the acceptSuggestionsOnEnter context key


    var acceptSuggestionsOnEnter = _suggest.Context.AcceptSuggestionsOnEnter.bindTo(_contextKeyService);

    var updateFromConfig = function () {
      var acceptSuggestionOnEnter = _this.editor.getOption(1
      /* acceptSuggestionOnEnter */
      );

      acceptSuggestionsOnEnter.set(acceptSuggestionOnEnter === 'on' || acceptSuggestionOnEnter === 'smart');
    };

    this._toDispose.add(this.editor.onDidChangeConfiguration(function () {
      return updateFromConfig();
    }));

    updateFromConfig(); // create range highlighter

    this._toDispose.add(new _suggestRangeHighlighter.SuggestRangeHighlighter(this));
  }

  SuggestController.get = function (editor) {
    return editor.getContribution(SuggestController.ID);
  };

  SuggestController.prototype.dispose = function () {
    this._alternatives.dispose();

    this._toDispose.dispose();

    this.widget.dispose();
    this.model.dispose();

    this._lineSuffix.dispose();
  };

  SuggestController.prototype._insertSuggestion = function (event, flags) {
    var _a;

    var _this = this;

    if (!event || !event.item) {
      this._alternatives.getValue().reset();

      this.model.cancel();
      this.model.clear();
      return;
    }

    if (!this.editor.hasModel()) {
      return;
    }

    var model = this.editor.getModel();
    var modelVersionNow = model.getAlternativeVersionId();
    var item = event.item;
    var suggestion = item.completion; // pushing undo stops *before* additional text edits and
    // *after* the main edit

    if (!(flags & 1
    /* NoBeforeUndoStop */
    )) {
      this.editor.pushUndoStop();
    } // compute overwrite[Before|After] deltas BEFORE applying extra edits


    var info = this.getOverwriteInfo(item, Boolean(flags & 8
    /* AlternativeOverwriteConfig */
    )); // keep item in memory

    this._memoryService.memorize(model, this.editor.getPosition(), item);

    if (Array.isArray(suggestion.additionalTextEdits)) {
      this.editor.executeEdits('suggestController.additionalTextEdits', suggestion.additionalTextEdits.map(function (edit) {
        return _editOperation.EditOperation.replace(_range.Range.lift(edit.range), edit.text);
      }));
    }

    var insertText = suggestion.insertText;

    if (!(suggestion.insertTextRules & 4
    /* InsertAsSnippet */
    )) {
      insertText = _snippetParser.SnippetParser.escape(insertText);
    }

    _snippetController.SnippetController2.get(this.editor).insert(insertText, {
      overwriteBefore: info.overwriteBefore,
      overwriteAfter: info.overwriteAfter,
      undoStopBefore: false,
      undoStopAfter: false,
      adjustWhitespace: !(suggestion.insertTextRules & 1
      /* KeepWhitespace */
      )
    });

    if (!(flags & 2
    /* NoAfterUndoStop */
    )) {
      this.editor.pushUndoStop();
    }

    if (!suggestion.command) {
      // done
      this.model.cancel();
      this.model.clear();
    } else if (suggestion.command.id === TriggerSuggestAction.id) {
      // retigger
      this.model.trigger({
        auto: true,
        shy: false
      }, true);
    } else {
      // exec command, done
      (_a = this._commandService).executeCommand.apply(_a, __spreadArrays([suggestion.command.id], suggestion.command.arguments ? __spreadArrays(suggestion.command.arguments) : [])).catch(_errors.onUnexpectedError).finally(function () {
        return _this.model.clear();
      }); // <- clear only now, keep commands alive


      this.model.cancel();
    }

    if (flags & 4
    /* KeepAlternativeSuggestions */
    ) {
        this._alternatives.getValue().set(event, function (next) {
          // this is not so pretty. when inserting the 'next'
          // suggestion we undo until we are at the state at
          // which we were before inserting the previous suggestion...
          while (model.canUndo()) {
            if (modelVersionNow !== model.getAlternativeVersionId()) {
              model.undo();
            }

            _this._insertSuggestion(next, 1
            /* NoBeforeUndoStop */
            | 2
            /* NoAfterUndoStop */
            | (flags & 8
            /* AlternativeOverwriteConfig */
            ? 8
            /* AlternativeOverwriteConfig */
            : 0));

            break;
          }
        });
      }

    this._alertCompletionItem(event.item);
  };

  SuggestController.prototype.getOverwriteInfo = function (item, toggleMode) {
    (0, _types.assertType)(this.editor.hasModel());
    var replace = this.editor.getOption(85
    /* suggest */
    ).insertMode === 'replace';

    if (toggleMode) {
      replace = !replace;
    }

    var overwriteBefore = item.position.column - item.editStart.column;
    var overwriteAfter = (replace ? item.editReplaceEnd.column : item.editInsertEnd.column) - item.position.column;
    var columnDelta = this.editor.getPosition().column - item.position.column;
    var suffixDelta = this._lineSuffix.value ? this._lineSuffix.value.delta(this.editor.getPosition()) : 0;
    return {
      overwriteBefore: overwriteBefore + columnDelta,
      overwriteAfter: overwriteAfter + suffixDelta
    };
  };

  SuggestController.prototype._alertCompletionItem = function (_a) {
    var suggestion = _a.completion;

    if ((0, _arrays.isNonEmptyArray)(suggestion.additionalTextEdits)) {
      var msg = nls.localize('arai.alert.snippet', "Accepting '{0}' made {1} additional edits", suggestion.label, suggestion.additionalTextEdits.length);
      (0, _aria.alert)(msg);
    }
  };

  SuggestController.prototype.triggerSuggest = function (onlyFrom) {
    if (this.editor.hasModel()) {
      this.model.trigger({
        auto: false,
        shy: false
      }, false, onlyFrom);
      this.editor.revealLine(this.editor.getPosition().lineNumber, 0
      /* Smooth */
      );
      this.editor.focus();
    }
  };

  SuggestController.prototype.triggerSuggestAndAcceptBest = function (arg) {
    var _this = this;

    if (!this.editor.hasModel()) {
      return;
    }

    var positionNow = this.editor.getPosition();

    var fallback = function () {
      if (positionNow.equals(_this.editor.getPosition())) {
        _this._commandService.executeCommand(arg.fallback);
      }
    };

    var makesTextEdit = function (item) {
      if (item.completion.insertTextRules & 4
      /* InsertAsSnippet */
      || item.completion.additionalTextEdits) {
        // snippet, other editor -> makes edit
        return true;
      }

      var position = _this.editor.getPosition();

      var startColumn = item.editStart.column;
      var endColumn = position.column;

      if (endColumn - startColumn !== item.completion.insertText.length) {
        // unequal lengths -> makes edit
        return true;
      }

      var textNow = _this.editor.getModel().getValueInRange({
        startLineNumber: position.lineNumber,
        startColumn: startColumn,
        endLineNumber: position.lineNumber,
        endColumn: endColumn
      }); // unequal text -> makes edit


      return textNow !== item.completion.insertText;
    };

    _event.Event.once(this.model.onDidTrigger)(function (_) {
      // wait for trigger because only then the cancel-event is trustworthy
      var listener = [];

      _event.Event.any(_this.model.onDidTrigger, _this.model.onDidCancel)(function () {
        // retrigger or cancel -> try to type default text
        (0, _lifecycle.dispose)(listener);
        fallback();
      }, undefined, listener);

      _this.model.onDidSuggest(function (_a) {
        var completionModel = _a.completionModel;
        (0, _lifecycle.dispose)(listener);

        if (completionModel.items.length === 0) {
          fallback();
          return;
        }

        var index = _this._memoryService.select(_this.editor.getModel(), _this.editor.getPosition(), completionModel.items);

        var item = completionModel.items[index];

        if (!makesTextEdit(item)) {
          fallback();
          return;
        }

        _this.editor.pushUndoStop();

        _this._insertSuggestion({
          index: index,
          item: item,
          model: completionModel
        }, 4
        /* KeepAlternativeSuggestions */
        | 1
        /* NoBeforeUndoStop */
        | 2
        /* NoAfterUndoStop */
        );
      }, undefined, listener);
    });

    this.model.trigger({
      auto: false,
      shy: true
    });
    this.editor.revealLine(positionNow.lineNumber, 0
    /* Smooth */
    );
    this.editor.focus();
  };

  SuggestController.prototype.acceptSelectedSuggestion = function (keepAlternativeSuggestions, alternativeOverwriteConfig) {
    var item = this.widget.getValue().getFocusedItem();
    var flags = 0;

    if (keepAlternativeSuggestions) {
      flags |= 4
      /* KeepAlternativeSuggestions */
      ;
    }

    if (alternativeOverwriteConfig) {
      flags |= 8
      /* AlternativeOverwriteConfig */
      ;
    }

    this._insertSuggestion(item, flags);
  };

  SuggestController.prototype.acceptNextSuggestion = function () {
    this._alternatives.getValue().next();
  };

  SuggestController.prototype.acceptPrevSuggestion = function () {
    this._alternatives.getValue().prev();
  };

  SuggestController.prototype.cancelSuggestWidget = function () {
    this.model.cancel();
    this.model.clear();
    this.widget.getValue().hideWidget();
  };

  SuggestController.prototype.selectNextSuggestion = function () {
    this.widget.getValue().selectNext();
  };

  SuggestController.prototype.selectNextPageSuggestion = function () {
    this.widget.getValue().selectNextPage();
  };

  SuggestController.prototype.selectLastSuggestion = function () {
    this.widget.getValue().selectLast();
  };

  SuggestController.prototype.selectPrevSuggestion = function () {
    this.widget.getValue().selectPrevious();
  };

  SuggestController.prototype.selectPrevPageSuggestion = function () {
    this.widget.getValue().selectPreviousPage();
  };

  SuggestController.prototype.selectFirstSuggestion = function () {
    this.widget.getValue().selectFirst();
  };

  SuggestController.prototype.toggleSuggestionDetails = function () {
    this.widget.getValue().toggleDetails();
  };

  SuggestController.prototype.toggleExplainMode = function () {
    this.widget.getValue().toggleExplainMode();
  };

  SuggestController.prototype.toggleSuggestionFocus = function () {
    this.widget.getValue().toggleDetailsFocus();
  };

  SuggestController.ID = 'editor.contrib.suggestController';
  SuggestController = __decorate([__param(1, _editorWorkerService.IEditorWorkerService), __param(2, _suggestMemory.ISuggestMemoryService), __param(3, _commands.ICommandService), __param(4, _contextkey.IContextKeyService), __param(5, _instantiation.IInstantiationService)], SuggestController);
  return SuggestController;
}();

exports.SuggestController = SuggestController;

var TriggerSuggestAction =
/** @class */
function (_super) {
  __extends(TriggerSuggestAction, _super);

  function TriggerSuggestAction() {
    return _super.call(this, {
      id: TriggerSuggestAction.id,
      label: nls.localize('suggest.trigger.label', "Trigger Suggest"),
      alias: 'Trigger Suggest',
      precondition: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.writable, _editorContextKeys.EditorContextKeys.hasCompletionItemProvider),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 2048
        /* CtrlCmd */
        | 10
        /* Space */
        ,
        mac: {
          primary: 256
          /* WinCtrl */
          | 10
          /* Space */
          ,
          secondary: [512
          /* Alt */
          | 9
          /* Escape */
          ]
        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  TriggerSuggestAction.prototype.run = function (accessor, editor) {
    var controller = SuggestController.get(editor);

    if (!controller) {
      return;
    }

    controller.triggerSuggest();
  };

  TriggerSuggestAction.id = 'editor.action.triggerSuggest';
  return TriggerSuggestAction;
}(_editorExtensions.EditorAction);

exports.TriggerSuggestAction = TriggerSuggestAction;
(0, _editorExtensions.registerEditorContribution)(SuggestController.ID, SuggestController);
(0, _editorExtensions.registerEditorAction)(TriggerSuggestAction);
var weight = 100
/* EditorContrib */
+ 90;

var SuggestCommand = _editorExtensions.EditorCommand.bindToContribution(SuggestController.get);

(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'acceptSelectedSuggestion',
  precondition: _suggest.Context.Visible,
  handler: function (x, args) {
    var alternative = typeof args === 'object' && typeof args.alternative === 'boolean' ? args.alternative : false;
    x.acceptSelectedSuggestion(true, alternative);
  }
})); // normal tab

_keybindingsRegistry.KeybindingsRegistry.registerKeybindingRule({
  id: 'acceptSelectedSuggestion',
  when: _contextkey.ContextKeyExpr.and(_suggest.Context.Visible, _editorContextKeys.EditorContextKeys.textInputFocus),
  primary: 2
  /* Tab */
  ,
  weight: weight
}); // accept on enter has special rules


_keybindingsRegistry.KeybindingsRegistry.registerKeybindingRule({
  id: 'acceptSelectedSuggestion',
  when: _contextkey.ContextKeyExpr.and(_suggest.Context.Visible, _editorContextKeys.EditorContextKeys.textInputFocus, _suggest.Context.AcceptSuggestionsOnEnter, _suggest.Context.MakesTextEdit),
  primary: 3
  /* Enter */
  ,
  weight: weight
}); // shift+enter and shift+tab use the alternative-flag so that the suggest controller
// is doing the opposite of the editor.suggest.overwriteOnAccept-configuration


_keybindingsRegistry.KeybindingsRegistry.registerKeybindingRule({
  id: 'acceptSelectedSuggestion',
  when: _contextkey.ContextKeyExpr.and(_suggest.Context.Visible, _editorContextKeys.EditorContextKeys.textInputFocus),
  primary: 1024
  /* Shift */
  | 2
  /* Tab */
  ,
  secondary: [1024
  /* Shift */
  | 3
  /* Enter */
  ],
  args: {
    alternative: true
  },
  weight: weight
}); // continue to support the old command


_commands.CommandsRegistry.registerCommandAlias('acceptSelectedSuggestionOnEnter', 'acceptSelectedSuggestion');

(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'hideSuggestWidget',
  precondition: _suggest.Context.Visible,
  handler: function (x) {
    return x.cancelSuggestWidget();
  },
  kbOpts: {
    weight: weight,
    kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
    primary: 9
    /* Escape */
    ,
    secondary: [1024
    /* Shift */
    | 9
    /* Escape */
    ]
  }
}));
(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'selectNextSuggestion',
  precondition: _contextkey.ContextKeyExpr.and(_suggest.Context.Visible, _suggest.Context.MultipleSuggestions),
  handler: function (c) {
    return c.selectNextSuggestion();
  },
  kbOpts: {
    weight: weight,
    kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
    primary: 18
    /* DownArrow */
    ,
    secondary: [2048
    /* CtrlCmd */
    | 18
    /* DownArrow */
    ],
    mac: {
      primary: 18
      /* DownArrow */
      ,
      secondary: [2048
      /* CtrlCmd */
      | 18
      /* DownArrow */
      , 256
      /* WinCtrl */
      | 44
      /* KEY_N */
      ]
    }
  }
}));
(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'selectNextPageSuggestion',
  precondition: _contextkey.ContextKeyExpr.and(_suggest.Context.Visible, _suggest.Context.MultipleSuggestions),
  handler: function (c) {
    return c.selectNextPageSuggestion();
  },
  kbOpts: {
    weight: weight,
    kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
    primary: 12
    /* PageDown */
    ,
    secondary: [2048
    /* CtrlCmd */
    | 12
    /* PageDown */
    ]
  }
}));
(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'selectLastSuggestion',
  precondition: _contextkey.ContextKeyExpr.and(_suggest.Context.Visible, _suggest.Context.MultipleSuggestions),
  handler: function (c) {
    return c.selectLastSuggestion();
  }
}));
(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'selectPrevSuggestion',
  precondition: _contextkey.ContextKeyExpr.and(_suggest.Context.Visible, _suggest.Context.MultipleSuggestions),
  handler: function (c) {
    return c.selectPrevSuggestion();
  },
  kbOpts: {
    weight: weight,
    kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
    primary: 16
    /* UpArrow */
    ,
    secondary: [2048
    /* CtrlCmd */
    | 16
    /* UpArrow */
    ],
    mac: {
      primary: 16
      /* UpArrow */
      ,
      secondary: [2048
      /* CtrlCmd */
      | 16
      /* UpArrow */
      , 256
      /* WinCtrl */
      | 46
      /* KEY_P */
      ]
    }
  }
}));
(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'selectPrevPageSuggestion',
  precondition: _contextkey.ContextKeyExpr.and(_suggest.Context.Visible, _suggest.Context.MultipleSuggestions),
  handler: function (c) {
    return c.selectPrevPageSuggestion();
  },
  kbOpts: {
    weight: weight,
    kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
    primary: 11
    /* PageUp */
    ,
    secondary: [2048
    /* CtrlCmd */
    | 11
    /* PageUp */
    ]
  }
}));
(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'selectFirstSuggestion',
  precondition: _contextkey.ContextKeyExpr.and(_suggest.Context.Visible, _suggest.Context.MultipleSuggestions),
  handler: function (c) {
    return c.selectFirstSuggestion();
  }
}));
(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'toggleSuggestionDetails',
  precondition: _suggest.Context.Visible,
  handler: function (x) {
    return x.toggleSuggestionDetails();
  },
  kbOpts: {
    weight: weight,
    kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
    primary: 2048
    /* CtrlCmd */
    | 10
    /* Space */
    ,
    mac: {
      primary: 256
      /* WinCtrl */
      | 10
      /* Space */

    }
  }
}));
(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'toggleExplainMode',
  precondition: _suggest.Context.Visible,
  handler: function (x) {
    return x.toggleExplainMode();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    ,
    primary: 2048
    /* CtrlCmd */
    | 85
    /* US_SLASH */

  }
}));
(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'toggleSuggestionFocus',
  precondition: _suggest.Context.Visible,
  handler: function (x) {
    return x.toggleSuggestionFocus();
  },
  kbOpts: {
    weight: weight,
    kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
    primary: 2048
    /* CtrlCmd */
    | 512
    /* Alt */
    | 10
    /* Space */
    ,
    mac: {
      primary: 256
      /* WinCtrl */
      | 512
      /* Alt */
      | 10
      /* Space */

    }
  }
})); //#region tab completions

(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'insertBestCompletion',
  precondition: _contextkey.ContextKeyExpr.and(_contextkey.ContextKeyExpr.equals('config.editor.tabCompletion', 'on'), _wordContextKey.WordContextKey.AtEnd, _suggest.Context.Visible.toNegated(), _suggestAlternatives.SuggestAlternatives.OtherSuggestions.toNegated(), _snippetController.SnippetController2.InSnippetMode.toNegated()),
  handler: function (x, arg) {
    x.triggerSuggestAndAcceptBest((0, _types.isObject)(arg) ? __assign({
      fallback: 'tab'
    }, arg) : {
      fallback: 'tab'
    });
  },
  kbOpts: {
    weight: weight,
    primary: 2
    /* Tab */

  }
}));
(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'insertNextSuggestion',
  precondition: _contextkey.ContextKeyExpr.and(_contextkey.ContextKeyExpr.equals('config.editor.tabCompletion', 'on'), _suggestAlternatives.SuggestAlternatives.OtherSuggestions, _suggest.Context.Visible.toNegated(), _snippetController.SnippetController2.InSnippetMode.toNegated()),
  handler: function (x) {
    return x.acceptNextSuggestion();
  },
  kbOpts: {
    weight: weight,
    kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
    primary: 2
    /* Tab */

  }
}));
(0, _editorExtensions.registerEditorCommand)(new SuggestCommand({
  id: 'insertPrevSuggestion',
  precondition: _contextkey.ContextKeyExpr.and(_contextkey.ContextKeyExpr.equals('config.editor.tabCompletion', 'on'), _suggestAlternatives.SuggestAlternatives.OtherSuggestions, _suggest.Context.Visible.toNegated(), _snippetController.SnippetController2.InSnippetMode.toNegated()),
  handler: function (x) {
    return x.acceptPrevSuggestion();
  },
  kbOpts: {
    weight: weight,
    kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
    primary: 1024
    /* Shift */
    | 2
    /* Tab */

  }
}));
},{"../../../base/browser/ui/aria/aria.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria.js","../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/keyCodes.js":"../node_modules/monaco-editor/esm/vs/base/common/keyCodes.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/core/editOperation.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/editOperation.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../snippet/snippetController2.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetController2.js","../snippet/snippetParser.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetParser.js","./suggestMemory.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestMemory.js","../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../platform/commands/common/commands.js":"../node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../platform/keybinding/common/keybindingsRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js","./suggest.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggest.js","./suggestAlternatives.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestAlternatives.js","./suggestModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestModel.js","./suggestWidget.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestWidget.js","./wordContextKey.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/wordContextKey.js","../../../base/common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../common/services/editorWorkerService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/editorWorkerService.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/types.js":"../node_modules/monaco-editor/esm/vs/base/common/types.js","./suggestCommitCharacters.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestCommitCharacters.js","../../../base/common/platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js","./suggestRangeHighlighter.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestRangeHighlighter.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/tokenization/tokenization.js":[function(require,module,exports) {
"use strict";

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _editorExtensions = require("../../browser/editorExtensions.js");

var _stopwatch = require("../../../base/common/stopwatch.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var ForceRetokenizeAction =
/** @class */
function (_super) {
  __extends(ForceRetokenizeAction, _super);

  function ForceRetokenizeAction() {
    return _super.call(this, {
      id: 'editor.action.forceRetokenize',
      label: nls.localize('forceRetokenize', "Developer: Force Retokenize"),
      alias: 'Developer: Force Retokenize',
      precondition: undefined
    }) || this;
  }

  ForceRetokenizeAction.prototype.run = function (accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }

    var model = editor.getModel();
    model.resetTokenization();
    var sw = new _stopwatch.StopWatch(true);
    model.forceTokenization(model.getLineCount());
    sw.stop();
    console.log("tokenization took " + sw.elapsed());
  };

  return ForceRetokenizeAction;
}(_editorExtensions.EditorAction);

(0, _editorExtensions.registerEditorAction)(ForceRetokenizeAction);
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../../base/common/stopwatch.js":"../node_modules/monaco-editor/esm/vs/base/common/stopwatch.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/toggleTabFocusMode/toggleTabFocusMode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleTabFocusModeAction = void 0;

var nls = _interopRequireWildcard(require("../../../nls.js"));

var _aria = require("../../../base/browser/ui/aria/aria.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _commonEditorConfig = require("../../common/config/commonEditorConfig.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var ToggleTabFocusModeAction =
/** @class */
function (_super) {
  __extends(ToggleTabFocusModeAction, _super);

  function ToggleTabFocusModeAction() {
    return _super.call(this, {
      id: ToggleTabFocusModeAction.ID,
      label: nls.localize({
        key: 'toggle.tabMovesFocus',
        comment: ['Turn on/off use of tab key for moving focus around VS Code']
      }, "Toggle Tab Key Moves Focus"),
      alias: 'Toggle Tab Key Moves Focus',
      precondition: undefined,
      kbOpts: {
        kbExpr: null,
        primary: 2048
        /* CtrlCmd */
        | 43
        /* KEY_M */
        ,
        mac: {
          primary: 256
          /* WinCtrl */
          | 1024
          /* Shift */
          | 43
          /* KEY_M */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  ToggleTabFocusModeAction.prototype.run = function (accessor, editor) {
    var oldValue = _commonEditorConfig.TabFocus.getTabFocusMode();

    var newValue = !oldValue;

    _commonEditorConfig.TabFocus.setTabFocusMode(newValue);

    if (newValue) {
      (0, _aria.alert)(nls.localize('toggle.tabMovesFocus.on', "Pressing Tab will now move focus to the next focusable element"));
    } else {
      (0, _aria.alert)(nls.localize('toggle.tabMovesFocus.off', "Pressing Tab will now insert the tab character"));
    }
  };

  ToggleTabFocusModeAction.ID = 'editor.action.toggleTabFocusMode';
  return ToggleTabFocusModeAction;
}(_editorExtensions.EditorAction);

exports.ToggleTabFocusModeAction = ToggleTabFocusModeAction;
(0, _editorExtensions.registerEditorAction)(ToggleTabFocusModeAction);
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/browser/ui/aria/aria.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/config/commonEditorConfig.js":"../node_modules/monaco-editor/esm/vs/editor/common/config/commonEditorConfig.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/wordHighlighter/wordHighlighter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOccurrencesAtPosition = getOccurrencesAtPosition;

var nls = _interopRequireWildcard(require("../../../nls.js"));

var arrays = _interopRequireWildcard(require("../../../base/common/arrays.js"));

var _async = require("../../../base/common/async.js");

var _cancellation = require("../../../base/common/cancellation.js");

var _errors = require("../../../base/common/errors.js");

var _lifecycle = require("../../../base/common/lifecycle.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _range = require("../../common/core/range.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _model = require("../../common/model.js");

var _textModel = require("../../common/model/textModel.js");

var _modes = require("../../common/modes.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _colorRegistry = require("../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../platform/theme/common/themeService.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var editorWordHighlight = (0, _colorRegistry.registerColor)('editor.wordHighlightBackground', {
  dark: '#575757B8',
  light: '#57575740',
  hc: null
}, nls.localize('wordHighlight', 'Background color of a symbol during read-access, like reading a variable. The color must not be opaque so as not to hide underlying decorations.'), true);
var editorWordHighlightStrong = (0, _colorRegistry.registerColor)('editor.wordHighlightStrongBackground', {
  dark: '#004972B8',
  light: '#0e639c40',
  hc: null
}, nls.localize('wordHighlightStrong', 'Background color of a symbol during write-access, like writing to a variable. The color must not be opaque so as not to hide underlying decorations.'), true);
var editorWordHighlightBorder = (0, _colorRegistry.registerColor)('editor.wordHighlightBorder', {
  light: null,
  dark: null,
  hc: _colorRegistry.activeContrastBorder
}, nls.localize('wordHighlightBorder', 'Border color of a symbol during read-access, like reading a variable.'));
var editorWordHighlightStrongBorder = (0, _colorRegistry.registerColor)('editor.wordHighlightStrongBorder', {
  light: null,
  dark: null,
  hc: _colorRegistry.activeContrastBorder
}, nls.localize('wordHighlightStrongBorder', 'Border color of a symbol during write-access, like writing to a variable.'));
var overviewRulerWordHighlightForeground = (0, _colorRegistry.registerColor)('editorOverviewRuler.wordHighlightForeground', {
  dark: '#A0A0A0CC',
  light: '#A0A0A0CC',
  hc: '#A0A0A0CC'
}, nls.localize('overviewRulerWordHighlightForeground', 'Overview ruler marker color for symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
var overviewRulerWordHighlightStrongForeground = (0, _colorRegistry.registerColor)('editorOverviewRuler.wordHighlightStrongForeground', {
  dark: '#C0A0C0CC',
  light: '#C0A0C0CC',
  hc: '#C0A0C0CC'
}, nls.localize('overviewRulerWordHighlightStrongForeground', 'Overview ruler marker color for write-access symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
var ctxHasWordHighlights = new _contextkey.RawContextKey('hasWordHighlights', false);

function getOccurrencesAtPosition(model, position, token) {
  var orderedByScore = _modes.DocumentHighlightProviderRegistry.ordered(model); // in order of score ask the occurrences provider
  // until someone response with a good result
  // (good = none empty array)


  return (0, _async.first)(orderedByScore.map(function (provider) {
    return function () {
      return Promise.resolve(provider.provideDocumentHighlights(model, position, token)).then(undefined, _errors.onUnexpectedExternalError);
    };
  }), arrays.isNonEmptyArray);
}

var OccurenceAtPositionRequest =
/** @class */
function () {
  function OccurenceAtPositionRequest(model, selection, wordSeparators) {
    var _this = this;

    this._wordRange = this._getCurrentWordRange(model, selection);
    this.result = (0, _async.createCancelablePromise)(function (token) {
      return _this._compute(model, selection, wordSeparators, token);
    });
  }

  OccurenceAtPositionRequest.prototype._getCurrentWordRange = function (model, selection) {
    var word = model.getWordAtPosition(selection.getPosition());

    if (word) {
      return new _range.Range(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);
    }

    return null;
  };

  OccurenceAtPositionRequest.prototype.isValid = function (model, selection, decorationIds) {
    var lineNumber = selection.startLineNumber;
    var startColumn = selection.startColumn;
    var endColumn = selection.endColumn;

    var currentWordRange = this._getCurrentWordRange(model, selection);

    var requestIsValid = Boolean(this._wordRange && this._wordRange.equalsRange(currentWordRange)); // Even if we are on a different word, if that word is in the decorations ranges, the request is still valid
    // (Same symbol)

    for (var i = 0, len = decorationIds.length; !requestIsValid && i < len; i++) {
      var range = model.getDecorationRange(decorationIds[i]);

      if (range && range.startLineNumber === lineNumber) {
        if (range.startColumn <= startColumn && range.endColumn >= endColumn) {
          requestIsValid = true;
        }
      }
    }

    return requestIsValid;
  };

  OccurenceAtPositionRequest.prototype.cancel = function () {
    this.result.cancel();
  };

  return OccurenceAtPositionRequest;
}();

var SemanticOccurenceAtPositionRequest =
/** @class */
function (_super) {
  __extends(SemanticOccurenceAtPositionRequest, _super);

  function SemanticOccurenceAtPositionRequest() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SemanticOccurenceAtPositionRequest.prototype._compute = function (model, selection, wordSeparators, token) {
    return getOccurrencesAtPosition(model, selection.getPosition(), token).then(function (value) {
      return value || [];
    });
  };

  return SemanticOccurenceAtPositionRequest;
}(OccurenceAtPositionRequest);

var TextualOccurenceAtPositionRequest =
/** @class */
function (_super) {
  __extends(TextualOccurenceAtPositionRequest, _super);

  function TextualOccurenceAtPositionRequest(model, selection, wordSeparators) {
    var _this = _super.call(this, model, selection, wordSeparators) || this;

    _this._selectionIsEmpty = selection.isEmpty();
    return _this;
  }

  TextualOccurenceAtPositionRequest.prototype._compute = function (model, selection, wordSeparators, token) {
    return (0, _async.timeout)(250, token).then(function () {
      if (!selection.isEmpty()) {
        return [];
      }

      var word = model.getWordAtPosition(selection.getPosition());

      if (!word) {
        return [];
      }

      var matches = model.findMatches(word.word, true, false, true, wordSeparators, false);
      return matches.map(function (m) {
        return {
          range: m.range,
          kind: _modes.DocumentHighlightKind.Text
        };
      });
    });
  };

  TextualOccurenceAtPositionRequest.prototype.isValid = function (model, selection, decorationIds) {
    var currentSelectionIsEmpty = selection.isEmpty();

    if (this._selectionIsEmpty !== currentSelectionIsEmpty) {
      return false;
    }

    return _super.prototype.isValid.call(this, model, selection, decorationIds);
  };

  return TextualOccurenceAtPositionRequest;
}(OccurenceAtPositionRequest);

function computeOccurencesAtPosition(model, selection, wordSeparators) {
  if (_modes.DocumentHighlightProviderRegistry.has(model)) {
    return new SemanticOccurenceAtPositionRequest(model, selection, wordSeparators);
  }

  return new TextualOccurenceAtPositionRequest(model, selection, wordSeparators);
}

(0, _editorExtensions.registerDefaultLanguageCommand)('_executeDocumentHighlights', function (model, position) {
  return getOccurrencesAtPosition(model, position, _cancellation.CancellationToken.None);
});

var WordHighlighter =
/** @class */
function () {
  function WordHighlighter(editor, contextKeyService) {
    var _this = this;

    this.toUnhook = new _lifecycle.DisposableStore();
    this.workerRequestTokenId = 0;
    this.workerRequestCompleted = false;
    this.workerRequestValue = [];
    this.lastCursorPositionChangeTime = 0;
    this.renderDecorationsTimer = -1;
    this.editor = editor;
    this._hasWordHighlights = ctxHasWordHighlights.bindTo(contextKeyService);
    this._ignorePositionChangeEvent = false;
    this.occurrencesHighlight = this.editor.getOption(59
    /* occurrencesHighlight */
    );
    this.model = this.editor.getModel();
    this.toUnhook.add(editor.onDidChangeCursorPosition(function (e) {
      if (_this._ignorePositionChangeEvent) {
        // We are changing the position => ignore this event
        return;
      }

      if (!_this.occurrencesHighlight) {
        // Early exit if nothing needs to be done!
        // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)
        return;
      }

      _this._onPositionChanged(e);
    }));
    this.toUnhook.add(editor.onDidChangeModelContent(function (e) {
      _this._stopAll();
    }));
    this.toUnhook.add(editor.onDidChangeConfiguration(function (e) {
      var newValue = _this.editor.getOption(59
      /* occurrencesHighlight */
      );

      if (_this.occurrencesHighlight !== newValue) {
        _this.occurrencesHighlight = newValue;

        _this._stopAll();
      }
    }));
    this._decorationIds = [];
    this.workerRequestTokenId = 0;
    this.workerRequest = null;
    this.workerRequestCompleted = false;
    this.lastCursorPositionChangeTime = 0;
    this.renderDecorationsTimer = -1;
  }

  WordHighlighter.prototype.hasDecorations = function () {
    return this._decorationIds.length > 0;
  };

  WordHighlighter.prototype.restore = function () {
    if (!this.occurrencesHighlight) {
      return;
    }

    this._run();
  };

  WordHighlighter.prototype._getSortedHighlights = function () {
    var _this = this;

    return arrays.coalesce(this._decorationIds.map(function (id) {
      return _this.model.getDecorationRange(id);
    }).sort(_range.Range.compareRangesUsingStarts));
  };

  WordHighlighter.prototype.moveNext = function () {
    var _this = this;

    var highlights = this._getSortedHighlights();

    var index = arrays.firstIndex(highlights, function (range) {
      return range.containsPosition(_this.editor.getPosition());
    });
    var newIndex = (index + 1) % highlights.length;
    var dest = highlights[newIndex];

    try {
      this._ignorePositionChangeEvent = true;
      this.editor.setPosition(dest.getStartPosition());
      this.editor.revealRangeInCenterIfOutsideViewport(dest);
    } finally {
      this._ignorePositionChangeEvent = false;
    }
  };

  WordHighlighter.prototype.moveBack = function () {
    var _this = this;

    var highlights = this._getSortedHighlights();

    var index = arrays.firstIndex(highlights, function (range) {
      return range.containsPosition(_this.editor.getPosition());
    });
    var newIndex = (index - 1 + highlights.length) % highlights.length;
    var dest = highlights[newIndex];

    try {
      this._ignorePositionChangeEvent = true;
      this.editor.setPosition(dest.getStartPosition());
      this.editor.revealRangeInCenterIfOutsideViewport(dest);
    } finally {
      this._ignorePositionChangeEvent = false;
    }
  };

  WordHighlighter.prototype._removeDecorations = function () {
    if (this._decorationIds.length > 0) {
      // remove decorations
      this._decorationIds = this.editor.deltaDecorations(this._decorationIds, []);

      this._hasWordHighlights.set(false);
    }
  };

  WordHighlighter.prototype._stopAll = function () {
    // Remove any existing decorations
    this._removeDecorations(); // Cancel any renderDecorationsTimer


    if (this.renderDecorationsTimer !== -1) {
      clearTimeout(this.renderDecorationsTimer);
      this.renderDecorationsTimer = -1;
    } // Cancel any worker request


    if (this.workerRequest !== null) {
      this.workerRequest.cancel();
      this.workerRequest = null;
    } // Invalidate any worker request callback


    if (!this.workerRequestCompleted) {
      this.workerRequestTokenId++;
      this.workerRequestCompleted = true;
    }
  };

  WordHighlighter.prototype._onPositionChanged = function (e) {
    // disabled
    if (!this.occurrencesHighlight) {
      this._stopAll();

      return;
    } // ignore typing & other


    if (e.reason !== 3
    /* Explicit */
    ) {
        this._stopAll();

        return;
      }

    this._run();
  };

  WordHighlighter.prototype._run = function () {
    var _this = this;

    var editorSelection = this.editor.getSelection(); // ignore multiline selection

    if (editorSelection.startLineNumber !== editorSelection.endLineNumber) {
      this._stopAll();

      return;
    }

    var lineNumber = editorSelection.startLineNumber;
    var startColumn = editorSelection.startColumn;
    var endColumn = editorSelection.endColumn;
    var word = this.model.getWordAtPosition({
      lineNumber: lineNumber,
      column: startColumn
    }); // The selection must be inside a word or surround one word at most

    if (!word || word.startColumn > startColumn || word.endColumn < endColumn) {
      this._stopAll();

      return;
    } // All the effort below is trying to achieve this:
    // - when cursor is moved to a word, trigger immediately a findOccurrences request
    // - 250ms later after the last cursor move event, render the occurrences
    // - no flickering!


    var workerRequestIsValid = this.workerRequest && this.workerRequest.isValid(this.model, editorSelection, this._decorationIds); // There are 4 cases:
    // a) old workerRequest is valid & completed, renderDecorationsTimer fired
    // b) old workerRequest is valid & completed, renderDecorationsTimer not fired
    // c) old workerRequest is valid, but not completed
    // d) old workerRequest is not valid
    // For a) no action is needed
    // For c), member 'lastCursorPositionChangeTime' will be used when installing the timer so no action is needed

    this.lastCursorPositionChangeTime = new Date().getTime();

    if (workerRequestIsValid) {
      if (this.workerRequestCompleted && this.renderDecorationsTimer !== -1) {
        // case b)
        // Delay the firing of renderDecorationsTimer by an extra 250 ms
        clearTimeout(this.renderDecorationsTimer);
        this.renderDecorationsTimer = -1;

        this._beginRenderDecorations();
      }
    } else {
      // case d)
      // Stop all previous actions and start fresh
      this._stopAll();

      var myRequestId_1 = ++this.workerRequestTokenId;
      this.workerRequestCompleted = false;
      this.workerRequest = computeOccurencesAtPosition(this.model, this.editor.getSelection(), this.editor.getOption(92
      /* wordSeparators */
      ));
      this.workerRequest.result.then(function (data) {
        if (myRequestId_1 === _this.workerRequestTokenId) {
          _this.workerRequestCompleted = true;
          _this.workerRequestValue = data || [];

          _this._beginRenderDecorations();
        }
      }, _errors.onUnexpectedError);
    }
  };

  WordHighlighter.prototype._beginRenderDecorations = function () {
    var _this = this;

    var currentTime = new Date().getTime();
    var minimumRenderTime = this.lastCursorPositionChangeTime + 250;

    if (currentTime >= minimumRenderTime) {
      // Synchronous
      this.renderDecorationsTimer = -1;
      this.renderDecorations();
    } else {
      // Asynchronous
      this.renderDecorationsTimer = setTimeout(function () {
        _this.renderDecorations();
      }, minimumRenderTime - currentTime);
    }
  };

  WordHighlighter.prototype.renderDecorations = function () {
    this.renderDecorationsTimer = -1;
    var decorations = [];

    for (var i = 0, len = this.workerRequestValue.length; i < len; i++) {
      var info = this.workerRequestValue[i];
      decorations.push({
        range: info.range,
        options: WordHighlighter._getDecorationOptions(info.kind)
      });
    }

    this._decorationIds = this.editor.deltaDecorations(this._decorationIds, decorations);

    this._hasWordHighlights.set(this.hasDecorations());
  };

  WordHighlighter._getDecorationOptions = function (kind) {
    if (kind === _modes.DocumentHighlightKind.Write) {
      return this._WRITE_OPTIONS;
    } else if (kind === _modes.DocumentHighlightKind.Text) {
      return this._TEXT_OPTIONS;
    } else {
      return this._REGULAR_OPTIONS;
    }
  };

  WordHighlighter.prototype.dispose = function () {
    this._stopAll();

    this.toUnhook.dispose();
  };

  WordHighlighter._WRITE_OPTIONS = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    className: 'wordHighlightStrong',
    overviewRuler: {
      color: (0, _themeService.themeColorFromId)(overviewRulerWordHighlightStrongForeground),
      position: _model.OverviewRulerLane.Center
    }
  });
  WordHighlighter._TEXT_OPTIONS = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    className: 'selectionHighlight',
    overviewRuler: {
      color: (0, _themeService.themeColorFromId)(_colorRegistry.overviewRulerSelectionHighlightForeground),
      position: _model.OverviewRulerLane.Center
    }
  });
  WordHighlighter._REGULAR_OPTIONS = _textModel.ModelDecorationOptions.register({
    stickiness: 1
    /* NeverGrowsWhenTypingAtEdges */
    ,
    className: 'wordHighlight',
    overviewRuler: {
      color: (0, _themeService.themeColorFromId)(overviewRulerWordHighlightForeground),
      position: _model.OverviewRulerLane.Center
    }
  });
  return WordHighlighter;
}();

var WordHighlighterContribution =
/** @class */
function (_super) {
  __extends(WordHighlighterContribution, _super);

  function WordHighlighterContribution(editor, contextKeyService) {
    var _this = _super.call(this) || this;

    _this.wordHighligher = null;

    var createWordHighlighterIfPossible = function () {
      if (editor.hasModel()) {
        _this.wordHighligher = new WordHighlighter(editor, contextKeyService);
      }
    };

    _this._register(editor.onDidChangeModel(function (e) {
      if (_this.wordHighligher) {
        _this.wordHighligher.dispose();

        _this.wordHighligher = null;
      }

      createWordHighlighterIfPossible();
    }));

    createWordHighlighterIfPossible();
    return _this;
  }

  WordHighlighterContribution.get = function (editor) {
    return editor.getContribution(WordHighlighterContribution.ID);
  };

  WordHighlighterContribution.prototype.saveViewState = function () {
    if (this.wordHighligher && this.wordHighligher.hasDecorations()) {
      return true;
    }

    return false;
  };

  WordHighlighterContribution.prototype.moveNext = function () {
    if (this.wordHighligher) {
      this.wordHighligher.moveNext();
    }
  };

  WordHighlighterContribution.prototype.moveBack = function () {
    if (this.wordHighligher) {
      this.wordHighligher.moveBack();
    }
  };

  WordHighlighterContribution.prototype.restoreViewState = function (state) {
    if (this.wordHighligher && state) {
      this.wordHighligher.restore();
    }
  };

  WordHighlighterContribution.prototype.dispose = function () {
    if (this.wordHighligher) {
      this.wordHighligher.dispose();
      this.wordHighligher = null;
    }

    _super.prototype.dispose.call(this);
  };

  WordHighlighterContribution.ID = 'editor.contrib.wordHighlighter';
  WordHighlighterContribution = __decorate([__param(1, _contextkey.IContextKeyService)], WordHighlighterContribution);
  return WordHighlighterContribution;
}(_lifecycle.Disposable);

var WordHighlightNavigationAction =
/** @class */
function (_super) {
  __extends(WordHighlightNavigationAction, _super);

  function WordHighlightNavigationAction(next, opts) {
    var _this = _super.call(this, opts) || this;

    _this._isNext = next;
    return _this;
  }

  WordHighlightNavigationAction.prototype.run = function (accessor, editor) {
    var controller = WordHighlighterContribution.get(editor);

    if (!controller) {
      return;
    }

    if (this._isNext) {
      controller.moveNext();
    } else {
      controller.moveBack();
    }
  };

  return WordHighlightNavigationAction;
}(_editorExtensions.EditorAction);

var NextWordHighlightAction =
/** @class */
function (_super) {
  __extends(NextWordHighlightAction, _super);

  function NextWordHighlightAction() {
    return _super.call(this, true, {
      id: 'editor.action.wordHighlight.next',
      label: nls.localize('wordHighlight.next.label', "Go to Next Symbol Highlight"),
      alias: 'Go to Next Symbol Highlight',
      precondition: ctxHasWordHighlights,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 65
        /* F7 */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return NextWordHighlightAction;
}(WordHighlightNavigationAction);

var PrevWordHighlightAction =
/** @class */
function (_super) {
  __extends(PrevWordHighlightAction, _super);

  function PrevWordHighlightAction() {
    return _super.call(this, false, {
      id: 'editor.action.wordHighlight.prev',
      label: nls.localize('wordHighlight.previous.label', "Go to Previous Symbol Highlight"),
      alias: 'Go to Previous Symbol Highlight',
      precondition: ctxHasWordHighlights,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 1024
        /* Shift */
        | 65
        /* F7 */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return PrevWordHighlightAction;
}(WordHighlightNavigationAction);

var TriggerWordHighlightAction =
/** @class */
function (_super) {
  __extends(TriggerWordHighlightAction, _super);

  function TriggerWordHighlightAction() {
    return _super.call(this, {
      id: 'editor.action.wordHighlight.trigger',
      label: nls.localize('wordHighlight.trigger.label', "Trigger Symbol Highlight"),
      alias: 'Trigger Symbol Highlight',
      precondition: ctxHasWordHighlights.toNegated(),
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.editorTextFocus,
        primary: 0,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  TriggerWordHighlightAction.prototype.run = function (accessor, editor, args) {
    var controller = WordHighlighterContribution.get(editor);

    if (!controller) {
      return;
    }

    controller.restoreViewState(true);
  };

  return TriggerWordHighlightAction;
}(_editorExtensions.EditorAction);

(0, _editorExtensions.registerEditorContribution)(WordHighlighterContribution.ID, WordHighlighterContribution);
(0, _editorExtensions.registerEditorAction)(NextWordHighlightAction);
(0, _editorExtensions.registerEditorAction)(PrevWordHighlightAction);
(0, _editorExtensions.registerEditorAction)(TriggerWordHighlightAction);
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var selectionHighlight = theme.getColor(_colorRegistry.editorSelectionHighlight);

  if (selectionHighlight) {
    collector.addRule(".monaco-editor .focused .selectionHighlight { background-color: " + selectionHighlight + "; }");
    collector.addRule(".monaco-editor .selectionHighlight { background-color: " + selectionHighlight.transparent(0.5) + "; }");
  }

  var wordHighlight = theme.getColor(editorWordHighlight);

  if (wordHighlight) {
    collector.addRule(".monaco-editor .wordHighlight { background-color: " + wordHighlight + "; }");
  }

  var wordHighlightStrong = theme.getColor(editorWordHighlightStrong);

  if (wordHighlightStrong) {
    collector.addRule(".monaco-editor .wordHighlightStrong { background-color: " + wordHighlightStrong + "; }");
  }

  var selectionHighlightBorder = theme.getColor(_colorRegistry.editorSelectionHighlightBorder);

  if (selectionHighlightBorder) {
    collector.addRule(".monaco-editor .selectionHighlight { border: 1px " + (theme.type === 'hc' ? 'dotted' : 'solid') + " " + selectionHighlightBorder + "; box-sizing: border-box; }");
  }

  var wordHighlightBorder = theme.getColor(editorWordHighlightBorder);

  if (wordHighlightBorder) {
    collector.addRule(".monaco-editor .wordHighlight { border: 1px " + (theme.type === 'hc' ? 'dashed' : 'solid') + " " + wordHighlightBorder + "; box-sizing: border-box; }");
  }

  var wordHighlightStrongBorder = theme.getColor(editorWordHighlightStrongBorder);

  if (wordHighlightStrongBorder) {
    collector.addRule(".monaco-editor .wordHighlightStrong { border: 1px " + (theme.type === 'hc' ? 'dashed' : 'solid') + " " + wordHighlightStrongBorder + "; box-sizing: border-box; }");
  }
});
},{"../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../common/model.js":"../node_modules/monaco-editor/esm/vs/editor/common/model.js","../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/wordOperations/wordOperations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeleteWordRight = exports.DeleteWordEndRight = exports.DeleteWordStartRight = exports.DeleteWordLeft = exports.DeleteWordEndLeft = exports.DeleteWordStartLeft = exports.DeleteWordRightCommand = exports.DeleteWordLeftCommand = exports.DeleteWordCommand = exports.CursorWordAccessibilityRightSelect = exports.CursorWordAccessibilityRight = exports.CursorWordRightSelect = exports.CursorWordEndRightSelect = exports.CursorWordStartRightSelect = exports.CursorWordRight = exports.CursorWordEndRight = exports.CursorWordStartRight = exports.CursorWordAccessibilityLeftSelect = exports.CursorWordAccessibilityLeft = exports.CursorWordLeftSelect = exports.CursorWordEndLeftSelect = exports.CursorWordStartLeftSelect = exports.CursorWordLeft = exports.CursorWordEndLeft = exports.CursorWordStartLeft = exports.WordRightCommand = exports.WordLeftCommand = exports.MoveWordCommand = void 0;

var _editorExtensions = require("../../browser/editorExtensions.js");

var _replaceCommand = require("../../common/commands/replaceCommand.js");

var _cursorCommon = require("../../common/controller/cursorCommon.js");

var _cursorWordOperations = require("../../common/controller/cursorWordOperations.js");

var _wordCharacterClassifier = require("../../common/controller/wordCharacterClassifier.js");

var _position = require("../../common/core/position.js");

var _range = require("../../common/core/range.js");

var _selection = require("../../common/core/selection.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _accessibility = require("../../../platform/accessibility/common/accessibility.js");

var _contextkey = require("../../../platform/contextkey/common/contextkey.js");

var _editorOptions = require("../../common/config/editorOptions.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var MoveWordCommand =
/** @class */
function (_super) {
  __extends(MoveWordCommand, _super);

  function MoveWordCommand(opts) {
    var _this = _super.call(this, opts) || this;

    _this._inSelectionMode = opts.inSelectionMode;
    _this._wordNavigationType = opts.wordNavigationType;
    return _this;
  }

  MoveWordCommand.prototype.runEditorCommand = function (accessor, editor, args) {
    var _this = this;

    if (!editor.hasModel()) {
      return;
    }

    var wordSeparators = (0, _wordCharacterClassifier.getMapForWordSeparators)(editor.getOption(92
    /* wordSeparators */
    ));
    var model = editor.getModel();
    var selections = editor.getSelections();
    var result = selections.map(function (sel) {
      var inPosition = new _position.Position(sel.positionLineNumber, sel.positionColumn);

      var outPosition = _this._move(wordSeparators, model, inPosition, _this._wordNavigationType);

      return _this._moveTo(sel, outPosition, _this._inSelectionMode);
    });

    editor._getCursors().setStates('moveWordCommand', 0
    /* NotSet */
    , result.map(function (r) {
      return _cursorCommon.CursorState.fromModelSelection(r);
    }));

    if (result.length === 1) {
      var pos = new _position.Position(result[0].positionLineNumber, result[0].positionColumn);
      editor.revealPosition(pos, 0
      /* Smooth */
      );
    }
  };

  MoveWordCommand.prototype._moveTo = function (from, to, inSelectionMode) {
    if (inSelectionMode) {
      // move just position
      return new _selection.Selection(from.selectionStartLineNumber, from.selectionStartColumn, to.lineNumber, to.column);
    } else {
      // move everything
      return new _selection.Selection(to.lineNumber, to.column, to.lineNumber, to.column);
    }
  };

  return MoveWordCommand;
}(_editorExtensions.EditorCommand);

exports.MoveWordCommand = MoveWordCommand;

var WordLeftCommand =
/** @class */
function (_super) {
  __extends(WordLeftCommand, _super);

  function WordLeftCommand() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WordLeftCommand.prototype._move = function (wordSeparators, model, position, wordNavigationType) {
    return _cursorWordOperations.WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType);
  };

  return WordLeftCommand;
}(MoveWordCommand);

exports.WordLeftCommand = WordLeftCommand;

var WordRightCommand =
/** @class */
function (_super) {
  __extends(WordRightCommand, _super);

  function WordRightCommand() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WordRightCommand.prototype._move = function (wordSeparators, model, position, wordNavigationType) {
    return _cursorWordOperations.WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);
  };

  return WordRightCommand;
}(MoveWordCommand);

exports.WordRightCommand = WordRightCommand;

var CursorWordStartLeft =
/** @class */
function (_super) {
  __extends(CursorWordStartLeft, _super);

  function CursorWordStartLeft() {
    return _super.call(this, {
      inSelectionMode: false,
      wordNavigationType: 0
      /* WordStart */
      ,
      id: 'cursorWordStartLeft',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 2048
        /* CtrlCmd */
        | 15
        /* LeftArrow */
        ,
        mac: {
          primary: 512
          /* Alt */
          | 15
          /* LeftArrow */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return CursorWordStartLeft;
}(WordLeftCommand);

exports.CursorWordStartLeft = CursorWordStartLeft;

var CursorWordEndLeft =
/** @class */
function (_super) {
  __extends(CursorWordEndLeft, _super);

  function CursorWordEndLeft() {
    return _super.call(this, {
      inSelectionMode: false,
      wordNavigationType: 2
      /* WordEnd */
      ,
      id: 'cursorWordEndLeft',
      precondition: undefined
    }) || this;
  }

  return CursorWordEndLeft;
}(WordLeftCommand);

exports.CursorWordEndLeft = CursorWordEndLeft;

var CursorWordLeft =
/** @class */
function (_super) {
  __extends(CursorWordLeft, _super);

  function CursorWordLeft() {
    return _super.call(this, {
      inSelectionMode: false,
      wordNavigationType: 1
      /* WordStartFast */
      ,
      id: 'cursorWordLeft',
      precondition: undefined
    }) || this;
  }

  return CursorWordLeft;
}(WordLeftCommand);

exports.CursorWordLeft = CursorWordLeft;

var CursorWordStartLeftSelect =
/** @class */
function (_super) {
  __extends(CursorWordStartLeftSelect, _super);

  function CursorWordStartLeftSelect() {
    return _super.call(this, {
      inSelectionMode: true,
      wordNavigationType: 0
      /* WordStart */
      ,
      id: 'cursorWordStartLeftSelect',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 15
        /* LeftArrow */
        ,
        mac: {
          primary: 512
          /* Alt */
          | 1024
          /* Shift */
          | 15
          /* LeftArrow */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return CursorWordStartLeftSelect;
}(WordLeftCommand);

exports.CursorWordStartLeftSelect = CursorWordStartLeftSelect;

var CursorWordEndLeftSelect =
/** @class */
function (_super) {
  __extends(CursorWordEndLeftSelect, _super);

  function CursorWordEndLeftSelect() {
    return _super.call(this, {
      inSelectionMode: true,
      wordNavigationType: 2
      /* WordEnd */
      ,
      id: 'cursorWordEndLeftSelect',
      precondition: undefined
    }) || this;
  }

  return CursorWordEndLeftSelect;
}(WordLeftCommand);

exports.CursorWordEndLeftSelect = CursorWordEndLeftSelect;

var CursorWordLeftSelect =
/** @class */
function (_super) {
  __extends(CursorWordLeftSelect, _super);

  function CursorWordLeftSelect() {
    return _super.call(this, {
      inSelectionMode: true,
      wordNavigationType: 1
      /* WordStartFast */
      ,
      id: 'cursorWordLeftSelect',
      precondition: undefined
    }) || this;
  }

  return CursorWordLeftSelect;
}(WordLeftCommand);

exports.CursorWordLeftSelect = CursorWordLeftSelect;

var CursorWordAccessibilityLeft =
/** @class */
function (_super) {
  __extends(CursorWordAccessibilityLeft, _super);

  function CursorWordAccessibilityLeft() {
    return _super.call(this, {
      inSelectionMode: false,
      wordNavigationType: 3
      /* WordAccessibility */
      ,
      id: 'cursorWordAccessibilityLeft',
      precondition: undefined,
      kbOpts: {
        kbExpr: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.textInputFocus, _accessibility.CONTEXT_ACCESSIBILITY_MODE_ENABLED),
        primary: 2048
        /* CtrlCmd */
        | 15
        /* LeftArrow */
        ,
        mac: {
          primary: 512
          /* Alt */
          | 15
          /* LeftArrow */

        },
        weight: 100
        /* EditorContrib */
        + 1
      }
    }) || this;
  }

  CursorWordAccessibilityLeft.prototype._move = function (_, model, position, wordNavigationType) {
    return _super.prototype._move.call(this, (0, _wordCharacterClassifier.getMapForWordSeparators)(_editorOptions.EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);
  };

  return CursorWordAccessibilityLeft;
}(WordLeftCommand);

exports.CursorWordAccessibilityLeft = CursorWordAccessibilityLeft;

var CursorWordAccessibilityLeftSelect =
/** @class */
function (_super) {
  __extends(CursorWordAccessibilityLeftSelect, _super);

  function CursorWordAccessibilityLeftSelect() {
    return _super.call(this, {
      inSelectionMode: true,
      wordNavigationType: 3
      /* WordAccessibility */
      ,
      id: 'cursorWordAccessibilityLeftSelect',
      precondition: undefined,
      kbOpts: {
        kbExpr: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.textInputFocus, _accessibility.CONTEXT_ACCESSIBILITY_MODE_ENABLED),
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 15
        /* LeftArrow */
        ,
        mac: {
          primary: 512
          /* Alt */
          | 1024
          /* Shift */
          | 15
          /* LeftArrow */

        },
        weight: 100
        /* EditorContrib */
        + 1
      }
    }) || this;
  }

  CursorWordAccessibilityLeftSelect.prototype._move = function (_, model, position, wordNavigationType) {
    return _super.prototype._move.call(this, (0, _wordCharacterClassifier.getMapForWordSeparators)(_editorOptions.EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);
  };

  return CursorWordAccessibilityLeftSelect;
}(WordLeftCommand);

exports.CursorWordAccessibilityLeftSelect = CursorWordAccessibilityLeftSelect;

var CursorWordStartRight =
/** @class */
function (_super) {
  __extends(CursorWordStartRight, _super);

  function CursorWordStartRight() {
    return _super.call(this, {
      inSelectionMode: false,
      wordNavigationType: 0
      /* WordStart */
      ,
      id: 'cursorWordStartRight',
      precondition: undefined
    }) || this;
  }

  return CursorWordStartRight;
}(WordRightCommand);

exports.CursorWordStartRight = CursorWordStartRight;

var CursorWordEndRight =
/** @class */
function (_super) {
  __extends(CursorWordEndRight, _super);

  function CursorWordEndRight() {
    return _super.call(this, {
      inSelectionMode: false,
      wordNavigationType: 2
      /* WordEnd */
      ,
      id: 'cursorWordEndRight',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 2048
        /* CtrlCmd */
        | 17
        /* RightArrow */
        ,
        mac: {
          primary: 512
          /* Alt */
          | 17
          /* RightArrow */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return CursorWordEndRight;
}(WordRightCommand);

exports.CursorWordEndRight = CursorWordEndRight;

var CursorWordRight =
/** @class */
function (_super) {
  __extends(CursorWordRight, _super);

  function CursorWordRight() {
    return _super.call(this, {
      inSelectionMode: false,
      wordNavigationType: 2
      /* WordEnd */
      ,
      id: 'cursorWordRight',
      precondition: undefined
    }) || this;
  }

  return CursorWordRight;
}(WordRightCommand);

exports.CursorWordRight = CursorWordRight;

var CursorWordStartRightSelect =
/** @class */
function (_super) {
  __extends(CursorWordStartRightSelect, _super);

  function CursorWordStartRightSelect() {
    return _super.call(this, {
      inSelectionMode: true,
      wordNavigationType: 0
      /* WordStart */
      ,
      id: 'cursorWordStartRightSelect',
      precondition: undefined
    }) || this;
  }

  return CursorWordStartRightSelect;
}(WordRightCommand);

exports.CursorWordStartRightSelect = CursorWordStartRightSelect;

var CursorWordEndRightSelect =
/** @class */
function (_super) {
  __extends(CursorWordEndRightSelect, _super);

  function CursorWordEndRightSelect() {
    return _super.call(this, {
      inSelectionMode: true,
      wordNavigationType: 2
      /* WordEnd */
      ,
      id: 'cursorWordEndRightSelect',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 17
        /* RightArrow */
        ,
        mac: {
          primary: 512
          /* Alt */
          | 1024
          /* Shift */
          | 17
          /* RightArrow */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return CursorWordEndRightSelect;
}(WordRightCommand);

exports.CursorWordEndRightSelect = CursorWordEndRightSelect;

var CursorWordRightSelect =
/** @class */
function (_super) {
  __extends(CursorWordRightSelect, _super);

  function CursorWordRightSelect() {
    return _super.call(this, {
      inSelectionMode: true,
      wordNavigationType: 2
      /* WordEnd */
      ,
      id: 'cursorWordRightSelect',
      precondition: undefined
    }) || this;
  }

  return CursorWordRightSelect;
}(WordRightCommand);

exports.CursorWordRightSelect = CursorWordRightSelect;

var CursorWordAccessibilityRight =
/** @class */
function (_super) {
  __extends(CursorWordAccessibilityRight, _super);

  function CursorWordAccessibilityRight() {
    return _super.call(this, {
      inSelectionMode: false,
      wordNavigationType: 3
      /* WordAccessibility */
      ,
      id: 'cursorWordAccessibilityRight',
      precondition: undefined,
      kbOpts: {
        kbExpr: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.textInputFocus, _accessibility.CONTEXT_ACCESSIBILITY_MODE_ENABLED),
        primary: 2048
        /* CtrlCmd */
        | 17
        /* RightArrow */
        ,
        mac: {
          primary: 512
          /* Alt */
          | 17
          /* RightArrow */

        },
        weight: 100
        /* EditorContrib */
        + 1
      }
    }) || this;
  }

  CursorWordAccessibilityRight.prototype._move = function (_, model, position, wordNavigationType) {
    return _super.prototype._move.call(this, (0, _wordCharacterClassifier.getMapForWordSeparators)(_editorOptions.EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);
  };

  return CursorWordAccessibilityRight;
}(WordRightCommand);

exports.CursorWordAccessibilityRight = CursorWordAccessibilityRight;

var CursorWordAccessibilityRightSelect =
/** @class */
function (_super) {
  __extends(CursorWordAccessibilityRightSelect, _super);

  function CursorWordAccessibilityRightSelect() {
    return _super.call(this, {
      inSelectionMode: true,
      wordNavigationType: 3
      /* WordAccessibility */
      ,
      id: 'cursorWordAccessibilityRightSelect',
      precondition: undefined,
      kbOpts: {
        kbExpr: _contextkey.ContextKeyExpr.and(_editorContextKeys.EditorContextKeys.textInputFocus, _accessibility.CONTEXT_ACCESSIBILITY_MODE_ENABLED),
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 17
        /* RightArrow */
        ,
        mac: {
          primary: 512
          /* Alt */
          | 1024
          /* Shift */
          | 17
          /* RightArrow */

        },
        weight: 100
        /* EditorContrib */
        + 1
      }
    }) || this;
  }

  CursorWordAccessibilityRightSelect.prototype._move = function (_, model, position, wordNavigationType) {
    return _super.prototype._move.call(this, (0, _wordCharacterClassifier.getMapForWordSeparators)(_editorOptions.EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);
  };

  return CursorWordAccessibilityRightSelect;
}(WordRightCommand);

exports.CursorWordAccessibilityRightSelect = CursorWordAccessibilityRightSelect;

var DeleteWordCommand =
/** @class */
function (_super) {
  __extends(DeleteWordCommand, _super);

  function DeleteWordCommand(opts) {
    var _this = _super.call(this, opts) || this;

    _this._whitespaceHeuristics = opts.whitespaceHeuristics;
    _this._wordNavigationType = opts.wordNavigationType;
    return _this;
  }

  DeleteWordCommand.prototype.runEditorCommand = function (accessor, editor, args) {
    var _this = this;

    if (!editor.hasModel()) {
      return;
    }

    var wordSeparators = (0, _wordCharacterClassifier.getMapForWordSeparators)(editor.getOption(92
    /* wordSeparators */
    ));
    var model = editor.getModel();
    var selections = editor.getSelections();
    var commands = selections.map(function (sel) {
      var deleteRange = _this._delete(wordSeparators, model, sel, _this._whitespaceHeuristics, _this._wordNavigationType);

      return new _replaceCommand.ReplaceCommand(deleteRange, '');
    });
    editor.pushUndoStop();
    editor.executeCommands(this.id, commands);
    editor.pushUndoStop();
  };

  return DeleteWordCommand;
}(_editorExtensions.EditorCommand);

exports.DeleteWordCommand = DeleteWordCommand;

var DeleteWordLeftCommand =
/** @class */
function (_super) {
  __extends(DeleteWordLeftCommand, _super);

  function DeleteWordLeftCommand() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DeleteWordLeftCommand.prototype._delete = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {
    var r = _cursorWordOperations.WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType);

    if (r) {
      return r;
    }

    return new _range.Range(1, 1, 1, 1);
  };

  return DeleteWordLeftCommand;
}(DeleteWordCommand);

exports.DeleteWordLeftCommand = DeleteWordLeftCommand;

var DeleteWordRightCommand =
/** @class */
function (_super) {
  __extends(DeleteWordRightCommand, _super);

  function DeleteWordRightCommand() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DeleteWordRightCommand.prototype._delete = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {
    var r = _cursorWordOperations.WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType);

    if (r) {
      return r;
    }

    var lineCount = model.getLineCount();
    var maxColumn = model.getLineMaxColumn(lineCount);
    return new _range.Range(lineCount, maxColumn, lineCount, maxColumn);
  };

  return DeleteWordRightCommand;
}(DeleteWordCommand);

exports.DeleteWordRightCommand = DeleteWordRightCommand;

var DeleteWordStartLeft =
/** @class */
function (_super) {
  __extends(DeleteWordStartLeft, _super);

  function DeleteWordStartLeft() {
    return _super.call(this, {
      whitespaceHeuristics: false,
      wordNavigationType: 0
      /* WordStart */
      ,
      id: 'deleteWordStartLeft',
      precondition: _editorContextKeys.EditorContextKeys.writable
    }) || this;
  }

  return DeleteWordStartLeft;
}(DeleteWordLeftCommand);

exports.DeleteWordStartLeft = DeleteWordStartLeft;

var DeleteWordEndLeft =
/** @class */
function (_super) {
  __extends(DeleteWordEndLeft, _super);

  function DeleteWordEndLeft() {
    return _super.call(this, {
      whitespaceHeuristics: false,
      wordNavigationType: 2
      /* WordEnd */
      ,
      id: 'deleteWordEndLeft',
      precondition: _editorContextKeys.EditorContextKeys.writable
    }) || this;
  }

  return DeleteWordEndLeft;
}(DeleteWordLeftCommand);

exports.DeleteWordEndLeft = DeleteWordEndLeft;

var DeleteWordLeft =
/** @class */
function (_super) {
  __extends(DeleteWordLeft, _super);

  function DeleteWordLeft() {
    return _super.call(this, {
      whitespaceHeuristics: true,
      wordNavigationType: 0
      /* WordStart */
      ,
      id: 'deleteWordLeft',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 2048
        /* CtrlCmd */
        | 1
        /* Backspace */
        ,
        mac: {
          primary: 512
          /* Alt */
          | 1
          /* Backspace */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return DeleteWordLeft;
}(DeleteWordLeftCommand);

exports.DeleteWordLeft = DeleteWordLeft;

var DeleteWordStartRight =
/** @class */
function (_super) {
  __extends(DeleteWordStartRight, _super);

  function DeleteWordStartRight() {
    return _super.call(this, {
      whitespaceHeuristics: false,
      wordNavigationType: 0
      /* WordStart */
      ,
      id: 'deleteWordStartRight',
      precondition: _editorContextKeys.EditorContextKeys.writable
    }) || this;
  }

  return DeleteWordStartRight;
}(DeleteWordRightCommand);

exports.DeleteWordStartRight = DeleteWordStartRight;

var DeleteWordEndRight =
/** @class */
function (_super) {
  __extends(DeleteWordEndRight, _super);

  function DeleteWordEndRight() {
    return _super.call(this, {
      whitespaceHeuristics: false,
      wordNavigationType: 2
      /* WordEnd */
      ,
      id: 'deleteWordEndRight',
      precondition: _editorContextKeys.EditorContextKeys.writable
    }) || this;
  }

  return DeleteWordEndRight;
}(DeleteWordRightCommand);

exports.DeleteWordEndRight = DeleteWordEndRight;

var DeleteWordRight =
/** @class */
function (_super) {
  __extends(DeleteWordRight, _super);

  function DeleteWordRight() {
    return _super.call(this, {
      whitespaceHeuristics: true,
      wordNavigationType: 2
      /* WordEnd */
      ,
      id: 'deleteWordRight',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 2048
        /* CtrlCmd */
        | 20
        /* Delete */
        ,
        mac: {
          primary: 512
          /* Alt */
          | 20
          /* Delete */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return DeleteWordRight;
}(DeleteWordRightCommand);

exports.DeleteWordRight = DeleteWordRight;
(0, _editorExtensions.registerEditorCommand)(new CursorWordStartLeft());
(0, _editorExtensions.registerEditorCommand)(new CursorWordEndLeft());
(0, _editorExtensions.registerEditorCommand)(new CursorWordLeft());
(0, _editorExtensions.registerEditorCommand)(new CursorWordStartLeftSelect());
(0, _editorExtensions.registerEditorCommand)(new CursorWordEndLeftSelect());
(0, _editorExtensions.registerEditorCommand)(new CursorWordLeftSelect());
(0, _editorExtensions.registerEditorCommand)(new CursorWordStartRight());
(0, _editorExtensions.registerEditorCommand)(new CursorWordEndRight());
(0, _editorExtensions.registerEditorCommand)(new CursorWordRight());
(0, _editorExtensions.registerEditorCommand)(new CursorWordStartRightSelect());
(0, _editorExtensions.registerEditorCommand)(new CursorWordEndRightSelect());
(0, _editorExtensions.registerEditorCommand)(new CursorWordRightSelect());
(0, _editorExtensions.registerEditorCommand)(new CursorWordAccessibilityLeft());
(0, _editorExtensions.registerEditorCommand)(new CursorWordAccessibilityLeftSelect());
(0, _editorExtensions.registerEditorCommand)(new CursorWordAccessibilityRight());
(0, _editorExtensions.registerEditorCommand)(new CursorWordAccessibilityRightSelect());
(0, _editorExtensions.registerEditorCommand)(new DeleteWordStartLeft());
(0, _editorExtensions.registerEditorCommand)(new DeleteWordEndLeft());
(0, _editorExtensions.registerEditorCommand)(new DeleteWordLeft());
(0, _editorExtensions.registerEditorCommand)(new DeleteWordStartRight());
(0, _editorExtensions.registerEditorCommand)(new DeleteWordEndRight());
(0, _editorExtensions.registerEditorCommand)(new DeleteWordRight());
},{"../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/commands/replaceCommand.js":"../node_modules/monaco-editor/esm/vs/editor/common/commands/replaceCommand.js","../../common/controller/cursorCommon.js":"../node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCommon.js","../../common/controller/cursorWordOperations.js":"../node_modules/monaco-editor/esm/vs/editor/common/controller/cursorWordOperations.js","../../common/controller/wordCharacterClassifier.js":"../node_modules/monaco-editor/esm/vs/editor/common/controller/wordCharacterClassifier.js","../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/core/selection.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../../platform/accessibility/common/accessibility.js":"../node_modules/monaco-editor/esm/vs/platform/accessibility/common/accessibility.js","../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../common/config/editorOptions.js":"../node_modules/monaco-editor/esm/vs/editor/common/config/editorOptions.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/wordPartOperations/wordPartOperations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CursorWordPartRightSelect = exports.CursorWordPartRight = exports.WordPartRightCommand = exports.CursorWordPartLeftSelect = exports.CursorWordPartLeft = exports.WordPartLeftCommand = exports.DeleteWordPartRight = exports.DeleteWordPartLeft = void 0;

var _editorExtensions = require("../../browser/editorExtensions.js");

var _cursorWordOperations = require("../../common/controller/cursorWordOperations.js");

var _range = require("../../common/core/range.js");

var _editorContextKeys = require("../../common/editorContextKeys.js");

var _wordOperations = require("../wordOperations/wordOperations.js");

var _commands = require("../../../platform/commands/common/commands.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var DeleteWordPartLeft =
/** @class */
function (_super) {
  __extends(DeleteWordPartLeft, _super);

  function DeleteWordPartLeft() {
    return _super.call(this, {
      whitespaceHeuristics: true,
      wordNavigationType: 0
      /* WordStart */
      ,
      id: 'deleteWordPartLeft',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256
          /* WinCtrl */
          | 512
          /* Alt */
          | 1
          /* Backspace */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  DeleteWordPartLeft.prototype._delete = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {
    var r = _cursorWordOperations.WordPartOperations.deleteWordPartLeft(wordSeparators, model, selection, whitespaceHeuristics);

    if (r) {
      return r;
    }

    return new _range.Range(1, 1, 1, 1);
  };

  return DeleteWordPartLeft;
}(_wordOperations.DeleteWordCommand);

exports.DeleteWordPartLeft = DeleteWordPartLeft;

var DeleteWordPartRight =
/** @class */
function (_super) {
  __extends(DeleteWordPartRight, _super);

  function DeleteWordPartRight() {
    return _super.call(this, {
      whitespaceHeuristics: true,
      wordNavigationType: 2
      /* WordEnd */
      ,
      id: 'deleteWordPartRight',
      precondition: _editorContextKeys.EditorContextKeys.writable,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256
          /* WinCtrl */
          | 512
          /* Alt */
          | 20
          /* Delete */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  DeleteWordPartRight.prototype._delete = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {
    var r = _cursorWordOperations.WordPartOperations.deleteWordPartRight(wordSeparators, model, selection, whitespaceHeuristics);

    if (r) {
      return r;
    }

    var lineCount = model.getLineCount();
    var maxColumn = model.getLineMaxColumn(lineCount);
    return new _range.Range(lineCount, maxColumn, lineCount, maxColumn);
  };

  return DeleteWordPartRight;
}(_wordOperations.DeleteWordCommand);

exports.DeleteWordPartRight = DeleteWordPartRight;

var WordPartLeftCommand =
/** @class */
function (_super) {
  __extends(WordPartLeftCommand, _super);

  function WordPartLeftCommand() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WordPartLeftCommand.prototype._move = function (wordSeparators, model, position, wordNavigationType) {
    return _cursorWordOperations.WordPartOperations.moveWordPartLeft(wordSeparators, model, position);
  };

  return WordPartLeftCommand;
}(_wordOperations.MoveWordCommand);

exports.WordPartLeftCommand = WordPartLeftCommand;

var CursorWordPartLeft =
/** @class */
function (_super) {
  __extends(CursorWordPartLeft, _super);

  function CursorWordPartLeft() {
    return _super.call(this, {
      inSelectionMode: false,
      wordNavigationType: 0
      /* WordStart */
      ,
      id: 'cursorWordPartLeft',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256
          /* WinCtrl */
          | 512
          /* Alt */
          | 15
          /* LeftArrow */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return CursorWordPartLeft;
}(WordPartLeftCommand);

exports.CursorWordPartLeft = CursorWordPartLeft;

// Register previous id for compatibility purposes
_commands.CommandsRegistry.registerCommandAlias('cursorWordPartStartLeft', 'cursorWordPartLeft');

var CursorWordPartLeftSelect =
/** @class */
function (_super) {
  __extends(CursorWordPartLeftSelect, _super);

  function CursorWordPartLeftSelect() {
    return _super.call(this, {
      inSelectionMode: true,
      wordNavigationType: 0
      /* WordStart */
      ,
      id: 'cursorWordPartLeftSelect',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256
          /* WinCtrl */
          | 512
          /* Alt */
          | 1024
          /* Shift */
          | 15
          /* LeftArrow */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return CursorWordPartLeftSelect;
}(WordPartLeftCommand);

exports.CursorWordPartLeftSelect = CursorWordPartLeftSelect;

// Register previous id for compatibility purposes
_commands.CommandsRegistry.registerCommandAlias('cursorWordPartStartLeftSelect', 'cursorWordPartLeftSelect');

var WordPartRightCommand =
/** @class */
function (_super) {
  __extends(WordPartRightCommand, _super);

  function WordPartRightCommand() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WordPartRightCommand.prototype._move = function (wordSeparators, model, position, wordNavigationType) {
    return _cursorWordOperations.WordPartOperations.moveWordPartRight(wordSeparators, model, position);
  };

  return WordPartRightCommand;
}(_wordOperations.MoveWordCommand);

exports.WordPartRightCommand = WordPartRightCommand;

var CursorWordPartRight =
/** @class */
function (_super) {
  __extends(CursorWordPartRight, _super);

  function CursorWordPartRight() {
    return _super.call(this, {
      inSelectionMode: false,
      wordNavigationType: 2
      /* WordEnd */
      ,
      id: 'cursorWordPartRight',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256
          /* WinCtrl */
          | 512
          /* Alt */
          | 17
          /* RightArrow */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return CursorWordPartRight;
}(WordPartRightCommand);

exports.CursorWordPartRight = CursorWordPartRight;

var CursorWordPartRightSelect =
/** @class */
function (_super) {
  __extends(CursorWordPartRightSelect, _super);

  function CursorWordPartRightSelect() {
    return _super.call(this, {
      inSelectionMode: true,
      wordNavigationType: 2
      /* WordEnd */
      ,
      id: 'cursorWordPartRightSelect',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256
          /* WinCtrl */
          | 512
          /* Alt */
          | 1024
          /* Shift */
          | 17
          /* RightArrow */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  return CursorWordPartRightSelect;
}(WordPartRightCommand);

exports.CursorWordPartRightSelect = CursorWordPartRightSelect;
(0, _editorExtensions.registerEditorCommand)(new DeleteWordPartLeft());
(0, _editorExtensions.registerEditorCommand)(new DeleteWordPartRight());
(0, _editorExtensions.registerEditorCommand)(new CursorWordPartLeft());
(0, _editorExtensions.registerEditorCommand)(new CursorWordPartLeftSelect());
(0, _editorExtensions.registerEditorCommand)(new CursorWordPartRight());
(0, _editorExtensions.registerEditorCommand)(new CursorWordPartRightSelect());
},{"../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/controller/cursorWordOperations.js":"../node_modules/monaco-editor/esm/vs/editor/common/controller/cursorWordOperations.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../wordOperations/wordOperations.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/wordOperations/wordOperations.js","../../../platform/commands/common/commands.js":"../node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js"}],"../node_modules/monaco-editor/esm/vs/editor/editor.all.js":[function(require,module,exports) {
"use strict";

require("./browser/controller/coreCommands.js");

require("./browser/widget/codeEditorWidget.js");

require("./browser/widget/diffEditorWidget.js");

require("./browser/widget/diffNavigator.js");

require("./contrib/bracketMatching/bracketMatching.js");

require("./contrib/caretOperations/caretOperations.js");

require("./contrib/caretOperations/transpose.js");

require("./contrib/clipboard/clipboard.js");

require("./contrib/codeAction/codeActionContributions.js");

require("./contrib/codelens/codelensController.js");

require("./contrib/colorPicker/colorDetector.js");

require("./contrib/comment/comment.js");

require("./contrib/contextmenu/contextmenu.js");

require("./contrib/cursorUndo/cursorUndo.js");

require("./contrib/dnd/dnd.js");

require("./contrib/find/findController.js");

require("./contrib/folding/folding.js");

require("./contrib/fontZoom/fontZoom.js");

require("./contrib/format/formatActions.js");

require("./contrib/gotoSymbol/goToCommands.js");

require("./contrib/gotoSymbol/link/goToDefinitionAtPosition.js");

require("./contrib/gotoError/gotoError.js");

require("./contrib/hover/hover.js");

require("./contrib/inPlaceReplace/inPlaceReplace.js");

require("./contrib/linesOperations/linesOperations.js");

require("./contrib/links/links.js");

require("./contrib/multicursor/multicursor.js");

require("./contrib/parameterHints/parameterHints.js");

require("./contrib/rename/rename.js");

require("./contrib/smartSelect/smartSelect.js");

require("./contrib/snippet/snippetController2.js");

require("./contrib/suggest/suggestController.js");

require("./contrib/tokenization/tokenization.js");

require("./contrib/toggleTabFocusMode/toggleTabFocusMode.js");

require("./contrib/wordHighlighter/wordHighlighter.js");

require("./contrib/wordOperations/wordOperations.js");

require("./contrib/wordPartOperations/wordPartOperations.js");

require("./common/standaloneStrings.js");
},{"./browser/controller/coreCommands.js":"../node_modules/monaco-editor/esm/vs/editor/browser/controller/coreCommands.js","./browser/widget/codeEditorWidget.js":"../node_modules/monaco-editor/esm/vs/editor/browser/widget/codeEditorWidget.js","./browser/widget/diffEditorWidget.js":"../node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditorWidget.js","./browser/widget/diffNavigator.js":"../node_modules/monaco-editor/esm/vs/editor/browser/widget/diffNavigator.js","./contrib/bracketMatching/bracketMatching.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/bracketMatching/bracketMatching.js","./contrib/caretOperations/caretOperations.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/caretOperations.js","./contrib/caretOperations/transpose.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/transpose.js","./contrib/clipboard/clipboard.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/clipboard/clipboard.js","./contrib/codeAction/codeActionContributions.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/codeActionContributions.js","./contrib/codelens/codelensController.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/codelens/codelensController.js","./contrib/colorPicker/colorDetector.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/colorPicker/colorDetector.js","./contrib/comment/comment.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/comment/comment.js","./contrib/contextmenu/contextmenu.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/contextmenu/contextmenu.js","./contrib/cursorUndo/cursorUndo.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/cursorUndo/cursorUndo.js","./contrib/dnd/dnd.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/dnd/dnd.js","./contrib/find/findController.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/find/findController.js","./contrib/folding/folding.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/folding/folding.js","./contrib/fontZoom/fontZoom.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/fontZoom/fontZoom.js","./contrib/format/formatActions.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/format/formatActions.js","./contrib/gotoSymbol/goToCommands.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/goToCommands.js","./contrib/gotoSymbol/link/goToDefinitionAtPosition.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/link/goToDefinitionAtPosition.js","./contrib/gotoError/gotoError.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoError/gotoError.js","./contrib/hover/hover.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/hover/hover.js","./contrib/inPlaceReplace/inPlaceReplace.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/inPlaceReplace/inPlaceReplace.js","./contrib/linesOperations/linesOperations.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/linesOperations.js","./contrib/links/links.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/links/links.js","./contrib/multicursor/multicursor.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/multicursor/multicursor.js","./contrib/parameterHints/parameterHints.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/parameterHints.js","./contrib/rename/rename.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/rename/rename.js","./contrib/smartSelect/smartSelect.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/smartSelect/smartSelect.js","./contrib/snippet/snippetController2.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetController2.js","./contrib/suggest/suggestController.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestController.js","./contrib/tokenization/tokenization.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/tokenization/tokenization.js","./contrib/toggleTabFocusMode/toggleTabFocusMode.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/toggleTabFocusMode/toggleTabFocusMode.js","./contrib/wordHighlighter/wordHighlighter.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/wordHighlighter/wordHighlighter.js","./contrib/wordOperations/wordOperations.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/wordOperations/wordOperations.js","./contrib/wordPartOperations/wordPartOperations.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/wordPartOperations/wordPartOperations.js","./common/standaloneStrings.js":"../node_modules/monaco-editor/esm/vs/editor/common/standaloneStrings.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/accessibilityHelp/accessibilityHelp.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/accessibilityHelp/accessibilityHelp.js":[function(require,module,exports) {
"use strict";

require("./accessibilityHelp.css");

var browser = _interopRequireWildcard(require("../../../../base/browser/browser.js"));

var dom = _interopRequireWildcard(require("../../../../base/browser/dom.js"));

var _fastDomNode = require("../../../../base/browser/fastDomNode.js");

var _formattedTextRenderer = require("../../../../base/browser/formattedTextRenderer.js");

var _aria = require("../../../../base/browser/ui/aria/aria.js");

var _widget = require("../../../../base/browser/ui/widget.js");

var _lifecycle = require("../../../../base/common/lifecycle.js");

var platform = _interopRequireWildcard(require("../../../../base/common/platform.js"));

var strings = _interopRequireWildcard(require("../../../../base/common/strings.js"));

var _uri = require("../../../../base/common/uri.js");

var _editorExtensions = require("../../../browser/editorExtensions.js");

var _editorContextKeys = require("../../../common/editorContextKeys.js");

var _toggleTabFocusMode = require("../../../contrib/toggleTabFocusMode/toggleTabFocusMode.js");

var _contextkey = require("../../../../platform/contextkey/common/contextkey.js");

var _instantiation = require("../../../../platform/instantiation/common/instantiation.js");

var _keybinding = require("../../../../platform/keybinding/common/keybinding.js");

var _opener = require("../../../../platform/opener/common/opener.js");

var _colorRegistry = require("../../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../../platform/theme/common/themeService.js");

var _standaloneStrings = require("../../../common/standaloneStrings.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE = new _contextkey.RawContextKey('accessibilityHelpWidgetVisible', false);

var AccessibilityHelpController =
/** @class */
function (_super) {
  __extends(AccessibilityHelpController, _super);

  function AccessibilityHelpController(editor, instantiationService) {
    var _this = _super.call(this) || this;

    _this._editor = editor;
    _this._widget = _this._register(instantiationService.createInstance(AccessibilityHelpWidget, _this._editor));
    return _this;
  }

  AccessibilityHelpController.get = function (editor) {
    return editor.getContribution(AccessibilityHelpController.ID);
  };

  AccessibilityHelpController.prototype.show = function () {
    this._widget.show();
  };

  AccessibilityHelpController.prototype.hide = function () {
    this._widget.hide();
  };

  AccessibilityHelpController.ID = 'editor.contrib.accessibilityHelpController';
  AccessibilityHelpController = __decorate([__param(1, _instantiation.IInstantiationService)], AccessibilityHelpController);
  return AccessibilityHelpController;
}(_lifecycle.Disposable);

function getSelectionLabel(selections, charactersSelected) {
  if (!selections || selections.length === 0) {
    return _standaloneStrings.AccessibilityHelpNLS.noSelection;
  }

  if (selections.length === 1) {
    if (charactersSelected) {
      return strings.format(_standaloneStrings.AccessibilityHelpNLS.singleSelectionRange, selections[0].positionLineNumber, selections[0].positionColumn, charactersSelected);
    }

    return strings.format(_standaloneStrings.AccessibilityHelpNLS.singleSelection, selections[0].positionLineNumber, selections[0].positionColumn);
  }

  if (charactersSelected) {
    return strings.format(_standaloneStrings.AccessibilityHelpNLS.multiSelectionRange, selections.length, charactersSelected);
  }

  if (selections.length > 0) {
    return strings.format(_standaloneStrings.AccessibilityHelpNLS.multiSelection, selections.length);
  }

  return '';
}

var AccessibilityHelpWidget =
/** @class */
function (_super) {
  __extends(AccessibilityHelpWidget, _super);

  function AccessibilityHelpWidget(editor, _contextKeyService, _keybindingService, _openerService) {
    var _this = _super.call(this) || this;

    _this._contextKeyService = _contextKeyService;
    _this._keybindingService = _keybindingService;
    _this._openerService = _openerService;
    _this._editor = editor;
    _this._isVisibleKey = CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE.bindTo(_this._contextKeyService);
    _this._domNode = (0, _fastDomNode.createFastDomNode)(document.createElement('div'));

    _this._domNode.setClassName('accessibilityHelpWidget');

    _this._domNode.setDisplay('none');

    _this._domNode.setAttribute('role', 'dialog');

    _this._domNode.setAttribute('aria-hidden', 'true');

    _this._contentDomNode = (0, _fastDomNode.createFastDomNode)(document.createElement('div'));

    _this._contentDomNode.setAttribute('role', 'document');

    _this._domNode.appendChild(_this._contentDomNode);

    _this._isVisible = false;

    _this._register(_this._editor.onDidLayoutChange(function () {
      if (_this._isVisible) {
        _this._layout();
      }
    })); // Intentionally not configurable!


    _this._register(dom.addStandardDisposableListener(_this._contentDomNode.domNode, 'keydown', function (e) {
      if (!_this._isVisible) {
        return;
      }

      if (e.equals(2048
      /* CtrlCmd */
      | 35
      /* KEY_E */
      )) {
        (0, _aria.alert)(_standaloneStrings.AccessibilityHelpNLS.emergencyConfOn);

        _this._editor.updateOptions({
          accessibilitySupport: 'on'
        });

        dom.clearNode(_this._contentDomNode.domNode);

        _this._buildContent();

        _this._contentDomNode.domNode.focus();

        e.preventDefault();
        e.stopPropagation();
      }

      if (e.equals(2048
      /* CtrlCmd */
      | 38
      /* KEY_H */
      )) {
        (0, _aria.alert)(_standaloneStrings.AccessibilityHelpNLS.openingDocs);

        var url = _this._editor.getRawOptions().accessibilityHelpUrl;

        if (typeof url === 'undefined') {
          url = 'https://go.microsoft.com/fwlink/?linkid=852450';
        }

        _this._openerService.open(_uri.URI.parse(url));

        e.preventDefault();
        e.stopPropagation();
      }
    }));

    _this.onblur(_this._contentDomNode.domNode, function () {
      _this.hide();
    });

    _this._editor.addOverlayWidget(_this);

    return _this;
  }

  AccessibilityHelpWidget.prototype.dispose = function () {
    this._editor.removeOverlayWidget(this);

    _super.prototype.dispose.call(this);
  };

  AccessibilityHelpWidget.prototype.getId = function () {
    return AccessibilityHelpWidget.ID;
  };

  AccessibilityHelpWidget.prototype.getDomNode = function () {
    return this._domNode.domNode;
  };

  AccessibilityHelpWidget.prototype.getPosition = function () {
    return {
      preference: null
    };
  };

  AccessibilityHelpWidget.prototype.show = function () {
    if (this._isVisible) {
      return;
    }

    this._isVisible = true;

    this._isVisibleKey.set(true);

    this._layout();

    this._domNode.setDisplay('block');

    this._domNode.setAttribute('aria-hidden', 'false');

    this._contentDomNode.domNode.tabIndex = 0;

    this._buildContent();

    this._contentDomNode.domNode.focus();
  };

  AccessibilityHelpWidget.prototype._descriptionForCommand = function (commandId, msg, noKbMsg) {
    var kb = this._keybindingService.lookupKeybinding(commandId);

    if (kb) {
      return strings.format(msg, kb.getAriaLabel());
    }

    return strings.format(noKbMsg, commandId);
  };

  AccessibilityHelpWidget.prototype._buildContent = function () {
    var options = this._editor.getOptions();

    var selections = this._editor.getSelections();

    var charactersSelected = 0;

    if (selections) {
      var model_1 = this._editor.getModel();

      if (model_1) {
        selections.forEach(function (selection) {
          charactersSelected += model_1.getValueLengthInRange(selection);
        });
      }
    }

    var text = getSelectionLabel(selections, charactersSelected);

    if (options.get(43
    /* inDiffEditor */
    )) {
      if (options.get(65
      /* readOnly */
      )) {
        text += _standaloneStrings.AccessibilityHelpNLS.readonlyDiffEditor;
      } else {
        text += _standaloneStrings.AccessibilityHelpNLS.editableDiffEditor;
      }
    } else {
      if (options.get(65
      /* readOnly */
      )) {
        text += _standaloneStrings.AccessibilityHelpNLS.readonlyEditor;
      } else {
        text += _standaloneStrings.AccessibilityHelpNLS.editableEditor;
      }
    }

    var turnOnMessage = platform.isMacintosh ? _standaloneStrings.AccessibilityHelpNLS.changeConfigToOnMac : _standaloneStrings.AccessibilityHelpNLS.changeConfigToOnWinLinux;

    switch (options.get(2
    /* accessibilitySupport */
    )) {
      case 0
      /* Unknown */
      :
        text += '\n\n - ' + turnOnMessage;
        break;

      case 2
      /* Enabled */
      :
        text += '\n\n - ' + _standaloneStrings.AccessibilityHelpNLS.auto_on;
        break;

      case 1
      /* Disabled */
      :
        text += '\n\n - ' + _standaloneStrings.AccessibilityHelpNLS.auto_off;
        text += ' ' + turnOnMessage;
        break;
    }

    if (options.get(102
    /* tabFocusMode */
    )) {
      text += '\n\n - ' + this._descriptionForCommand(_toggleTabFocusMode.ToggleTabFocusModeAction.ID, _standaloneStrings.AccessibilityHelpNLS.tabFocusModeOnMsg, _standaloneStrings.AccessibilityHelpNLS.tabFocusModeOnMsgNoKb);
    } else {
      text += '\n\n - ' + this._descriptionForCommand(_toggleTabFocusMode.ToggleTabFocusModeAction.ID, _standaloneStrings.AccessibilityHelpNLS.tabFocusModeOffMsg, _standaloneStrings.AccessibilityHelpNLS.tabFocusModeOffMsgNoKb);
    }

    var openDocMessage = platform.isMacintosh ? _standaloneStrings.AccessibilityHelpNLS.openDocMac : _standaloneStrings.AccessibilityHelpNLS.openDocWinLinux;
    text += '\n\n - ' + openDocMessage;
    text += '\n\n' + _standaloneStrings.AccessibilityHelpNLS.outroMsg;

    this._contentDomNode.domNode.appendChild((0, _formattedTextRenderer.renderFormattedText)(text)); // Per https://www.w3.org/TR/wai-aria/roles#document, Authors SHOULD provide a title or label for documents


    this._contentDomNode.domNode.setAttribute('aria-label', text);
  };

  AccessibilityHelpWidget.prototype.hide = function () {
    if (!this._isVisible) {
      return;
    }

    this._isVisible = false;

    this._isVisibleKey.reset();

    this._domNode.setDisplay('none');

    this._domNode.setAttribute('aria-hidden', 'true');

    this._contentDomNode.domNode.tabIndex = -1;
    dom.clearNode(this._contentDomNode.domNode);

    this._editor.focus();
  };

  AccessibilityHelpWidget.prototype._layout = function () {
    var editorLayout = this._editor.getLayoutInfo();

    var w = Math.max(5, Math.min(AccessibilityHelpWidget.WIDTH, editorLayout.width - 40));
    var h = Math.max(5, Math.min(AccessibilityHelpWidget.HEIGHT, editorLayout.height - 40));

    this._domNode.setWidth(w);

    this._domNode.setHeight(h);

    var top = Math.round((editorLayout.height - h) / 2);

    this._domNode.setTop(top);

    var left = Math.round((editorLayout.width - w) / 2);

    this._domNode.setLeft(left);
  };

  AccessibilityHelpWidget.ID = 'editor.contrib.accessibilityHelpWidget';
  AccessibilityHelpWidget.WIDTH = 500;
  AccessibilityHelpWidget.HEIGHT = 300;
  AccessibilityHelpWidget = __decorate([__param(1, _contextkey.IContextKeyService), __param(2, _keybinding.IKeybindingService), __param(3, _opener.IOpenerService)], AccessibilityHelpWidget);
  return AccessibilityHelpWidget;
}(_widget.Widget);

var ShowAccessibilityHelpAction =
/** @class */
function (_super) {
  __extends(ShowAccessibilityHelpAction, _super);

  function ShowAccessibilityHelpAction() {
    return _super.call(this, {
      id: 'editor.action.showAccessibilityHelp',
      label: _standaloneStrings.AccessibilityHelpNLS.showAccessibilityHelpAction,
      alias: 'Show Accessibility Help',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: browser.isIE ? 2048
        /* CtrlCmd */
        | 59
        /* F1 */
        : 512
        /* Alt */
        | 59
        /* F1 */
        ,
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  ShowAccessibilityHelpAction.prototype.run = function (accessor, editor) {
    var controller = AccessibilityHelpController.get(editor);

    if (controller) {
      controller.show();
    }
  };

  return ShowAccessibilityHelpAction;
}(_editorExtensions.EditorAction);

(0, _editorExtensions.registerEditorContribution)(AccessibilityHelpController.ID, AccessibilityHelpController);
(0, _editorExtensions.registerEditorAction)(ShowAccessibilityHelpAction);

var AccessibilityHelpCommand = _editorExtensions.EditorCommand.bindToContribution(AccessibilityHelpController.get);

(0, _editorExtensions.registerEditorCommand)(new AccessibilityHelpCommand({
  id: 'closeAccessibilityHelp',
  precondition: CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE,
  handler: function (x) {
    return x.hide();
  },
  kbOpts: {
    weight: 100
    /* EditorContrib */
    + 100,
    kbExpr: _editorContextKeys.EditorContextKeys.focus,
    primary: 9
    /* Escape */
    ,
    secondary: [1024
    /* Shift */
    | 9
    /* Escape */
    ]
  }
}));
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var widgetBackground = theme.getColor(_colorRegistry.editorWidgetBackground);

  if (widgetBackground) {
    collector.addRule(".monaco-editor .accessibilityHelpWidget { background-color: " + widgetBackground + "; }");
  }

  var widgetForeground = theme.getColor(_colorRegistry.editorWidgetForeground);

  if (widgetForeground) {
    collector.addRule(".monaco-editor .accessibilityHelpWidget { color: " + widgetForeground + "; }");
  }

  var widgetShadowColor = theme.getColor(_colorRegistry.widgetShadow);

  if (widgetShadowColor) {
    collector.addRule(".monaco-editor .accessibilityHelpWidget { box-shadow: 0 2px 8px " + widgetShadowColor + "; }");
  }

  var hcBorder = theme.getColor(_colorRegistry.contrastBorder);

  if (hcBorder) {
    collector.addRule(".monaco-editor .accessibilityHelpWidget { border: 2px solid " + hcBorder + "; }");
  }
});
},{"./accessibilityHelp.css":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/accessibilityHelp/accessibilityHelp.css","../../../../base/browser/browser.js":"../node_modules/monaco-editor/esm/vs/base/browser/browser.js","../../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../../base/browser/fastDomNode.js":"../node_modules/monaco-editor/esm/vs/base/browser/fastDomNode.js","../../../../base/browser/formattedTextRenderer.js":"../node_modules/monaco-editor/esm/vs/base/browser/formattedTextRenderer.js","../../../../base/browser/ui/aria/aria.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria.js","../../../../base/browser/ui/widget.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/widget.js","../../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../../base/common/platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js","../../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../../../base/common/uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js","../../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../../contrib/toggleTabFocusMode/toggleTabFocusMode.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/toggleTabFocusMode/toggleTabFocusMode.js","../../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../../platform/keybinding/common/keybinding.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding.js","../../../../platform/opener/common/opener.js":"../node_modules/monaco-editor/esm/vs/platform/opener/common/opener.js","../../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../common/standaloneStrings.js":"../node_modules/monaco-editor/esm/vs/editor/common/standaloneStrings.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IPadShowKeyboard = void 0;

require("./iPadShowKeyboard.css");

var browser = _interopRequireWildcard(require("../../../../base/browser/browser.js"));

var dom = _interopRequireWildcard(require("../../../../base/browser/dom.js"));

var _lifecycle = require("../../../../base/common/lifecycle.js");

var _editorExtensions = require("../../../browser/editorExtensions.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var IPadShowKeyboard =
/** @class */
function (_super) {
  __extends(IPadShowKeyboard, _super);

  function IPadShowKeyboard(editor) {
    var _this = _super.call(this) || this;

    _this.editor = editor;
    _this.widget = null;

    if (browser.isIPad) {
      _this._register(editor.onDidChangeConfiguration(function () {
        return _this.update();
      }));

      _this.update();
    }

    return _this;
  }

  IPadShowKeyboard.prototype.update = function () {
    var shouldHaveWidget = !this.editor.getOption(65
    /* readOnly */
    );

    if (!this.widget && shouldHaveWidget) {
      this.widget = new ShowKeyboardWidget(this.editor);
    } else if (this.widget && !shouldHaveWidget) {
      this.widget.dispose();
      this.widget = null;
    }
  };

  IPadShowKeyboard.prototype.dispose = function () {
    _super.prototype.dispose.call(this);

    if (this.widget) {
      this.widget.dispose();
      this.widget = null;
    }
  };

  IPadShowKeyboard.ID = 'editor.contrib.iPadShowKeyboard';
  return IPadShowKeyboard;
}(_lifecycle.Disposable);

exports.IPadShowKeyboard = IPadShowKeyboard;

var ShowKeyboardWidget =
/** @class */
function (_super) {
  __extends(ShowKeyboardWidget, _super);

  function ShowKeyboardWidget(editor) {
    var _this = _super.call(this) || this;

    _this.editor = editor;
    _this._domNode = document.createElement('textarea');
    _this._domNode.className = 'iPadShowKeyboard';

    _this._register(dom.addDisposableListener(_this._domNode, 'touchstart', function (e) {
      _this.editor.focus();
    }));

    _this._register(dom.addDisposableListener(_this._domNode, 'focus', function (e) {
      _this.editor.focus();
    }));

    _this.editor.addOverlayWidget(_this);

    return _this;
  }

  ShowKeyboardWidget.prototype.dispose = function () {
    this.editor.removeOverlayWidget(this);

    _super.prototype.dispose.call(this);
  }; // ----- IOverlayWidget API


  ShowKeyboardWidget.prototype.getId = function () {
    return ShowKeyboardWidget.ID;
  };

  ShowKeyboardWidget.prototype.getDomNode = function () {
    return this._domNode;
  };

  ShowKeyboardWidget.prototype.getPosition = function () {
    return {
      preference: 1
      /* BOTTOM_RIGHT_CORNER */

    };
  };

  ShowKeyboardWidget.ID = 'editor.contrib.ShowKeyboardWidget';
  return ShowKeyboardWidget;
}(_lifecycle.Disposable);

(0, _editorExtensions.registerEditorContribution)(IPadShowKeyboard.ID, IPadShowKeyboard);
},{"./iPadShowKeyboard.css":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard.css","../../../../base/browser/browser.js":"../node_modules/monaco-editor/esm/vs/base/browser/browser.js","../../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/inspectTokens/inspectTokens.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/inspectTokens/inspectTokens.js":[function(require,module,exports) {
"use strict";

require("./inspectTokens.css");

var _color = require("../../../../base/common/color.js");

var _lifecycle = require("../../../../base/common/lifecycle.js");

var _strings = require("../../../../base/common/strings.js");

var _editorExtensions = require("../../../browser/editorExtensions.js");

var _modes = require("../../../common/modes.js");

var _nullMode = require("../../../common/modes/nullMode.js");

var _modeService = require("../../../common/services/modeService.js");

var _standaloneThemeService = require("../../common/standaloneThemeService.js");

var _colorRegistry = require("../../../../platform/theme/common/colorRegistry.js");

var _themeService = require("../../../../platform/theme/common/themeService.js");

var _standaloneStrings = require("../../../common/standaloneStrings.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var InspectTokensController =
/** @class */
function (_super) {
  __extends(InspectTokensController, _super);

  function InspectTokensController(editor, standaloneColorService, modeService) {
    var _this = _super.call(this) || this;

    _this._editor = editor;
    _this._modeService = modeService;
    _this._widget = null;

    _this._register(_this._editor.onDidChangeModel(function (e) {
      return _this.stop();
    }));

    _this._register(_this._editor.onDidChangeModelLanguage(function (e) {
      return _this.stop();
    }));

    _this._register(_modes.TokenizationRegistry.onDidChange(function (e) {
      return _this.stop();
    }));

    return _this;
  }

  InspectTokensController.get = function (editor) {
    return editor.getContribution(InspectTokensController.ID);
  };

  InspectTokensController.prototype.dispose = function () {
    this.stop();

    _super.prototype.dispose.call(this);
  };

  InspectTokensController.prototype.launch = function () {
    if (this._widget) {
      return;
    }

    if (!this._editor.hasModel()) {
      return;
    }

    this._widget = new InspectTokensWidget(this._editor, this._modeService);
  };

  InspectTokensController.prototype.stop = function () {
    if (this._widget) {
      this._widget.dispose();

      this._widget = null;
    }
  };

  InspectTokensController.ID = 'editor.contrib.inspectTokens';
  InspectTokensController = __decorate([__param(1, _standaloneThemeService.IStandaloneThemeService), __param(2, _modeService.IModeService)], InspectTokensController);
  return InspectTokensController;
}(_lifecycle.Disposable);

var InspectTokens =
/** @class */
function (_super) {
  __extends(InspectTokens, _super);

  function InspectTokens() {
    return _super.call(this, {
      id: 'editor.action.inspectTokens',
      label: _standaloneStrings.InspectTokensNLS.inspectTokensAction,
      alias: 'Developer: Inspect Tokens',
      precondition: undefined
    }) || this;
  }

  InspectTokens.prototype.run = function (accessor, editor) {
    var controller = InspectTokensController.get(editor);

    if (controller) {
      controller.launch();
    }
  };

  return InspectTokens;
}(_editorExtensions.EditorAction);

function renderTokenText(tokenText) {
  var result = '';

  for (var charIndex = 0, len = tokenText.length; charIndex < len; charIndex++) {
    var charCode = tokenText.charCodeAt(charIndex);

    switch (charCode) {
      case 9
      /* Tab */
      :
        result += '&rarr;';
        break;

      case 32
      /* Space */
      :
        result += '&middot;';
        break;

      case 60
      /* LessThan */
      :
        result += '&lt;';
        break;

      case 62
      /* GreaterThan */
      :
        result += '&gt;';
        break;

      case 38
      /* Ampersand */
      :
        result += '&amp;';
        break;

      default:
        result += String.fromCharCode(charCode);
    }
  }

  return result;
}

function getSafeTokenizationSupport(languageIdentifier) {
  var tokenizationSupport = _modes.TokenizationRegistry.get(languageIdentifier.language);

  if (tokenizationSupport) {
    return tokenizationSupport;
  }

  return {
    getInitialState: function () {
      return _nullMode.NULL_STATE;
    },
    tokenize: function (line, state, deltaOffset) {
      return (0, _nullMode.nullTokenize)(languageIdentifier.language, line, state, deltaOffset);
    },
    tokenize2: function (line, state, deltaOffset) {
      return (0, _nullMode.nullTokenize2)(languageIdentifier.id, line, state, deltaOffset);
    }
  };
}

var InspectTokensWidget =
/** @class */
function (_super) {
  __extends(InspectTokensWidget, _super);

  function InspectTokensWidget(editor, modeService) {
    var _this = _super.call(this) || this; // Editor.IContentWidget.allowEditorOverflow


    _this.allowEditorOverflow = true;
    _this._editor = editor;
    _this._modeService = modeService;
    _this._model = _this._editor.getModel();
    _this._domNode = document.createElement('div');
    _this._domNode.className = 'tokens-inspect-widget';
    _this._tokenizationSupport = getSafeTokenizationSupport(_this._model.getLanguageIdentifier());

    _this._compute(_this._editor.getPosition());

    _this._register(_this._editor.onDidChangeCursorPosition(function (e) {
      return _this._compute(_this._editor.getPosition());
    }));

    _this._editor.addContentWidget(_this);

    return _this;
  }

  InspectTokensWidget.prototype.dispose = function () {
    this._editor.removeContentWidget(this);

    _super.prototype.dispose.call(this);
  };

  InspectTokensWidget.prototype.getId = function () {
    return InspectTokensWidget._ID;
  };

  InspectTokensWidget.prototype._compute = function (position) {
    var data = this._getTokensAtLine(position.lineNumber);

    var token1Index = 0;

    for (var i = data.tokens1.length - 1; i >= 0; i--) {
      var t = data.tokens1[i];

      if (position.column - 1 >= t.offset) {
        token1Index = i;
        break;
      }
    }

    var token2Index = 0;

    for (var i = data.tokens2.length >>> 1; i >= 0; i--) {
      if (position.column - 1 >= data.tokens2[i << 1]) {
        token2Index = i;
        break;
      }
    }

    var result = '';

    var lineContent = this._model.getLineContent(position.lineNumber);

    var tokenText = '';

    if (token1Index < data.tokens1.length) {
      var tokenStartIndex = data.tokens1[token1Index].offset;
      var tokenEndIndex = token1Index + 1 < data.tokens1.length ? data.tokens1[token1Index + 1].offset : lineContent.length;
      tokenText = lineContent.substring(tokenStartIndex, tokenEndIndex);
    }

    result += "<h2 class=\"tm-token\">" + renderTokenText(tokenText) + "<span class=\"tm-token-length\">(" + tokenText.length + " " + (tokenText.length === 1 ? 'char' : 'chars') + ")</span></h2>";
    result += "<hr class=\"tokens-inspect-separator\" style=\"clear:both\"/>";

    var metadata = this._decodeMetadata(data.tokens2[(token2Index << 1) + 1]);

    result += "<table class=\"tm-metadata-table\"><tbody>";
    result += "<tr><td class=\"tm-metadata-key\">language</td><td class=\"tm-metadata-value\">" + (0, _strings.escape)(metadata.languageIdentifier.language) + "</td>";
    result += "<tr><td class=\"tm-metadata-key\">token type</td><td class=\"tm-metadata-value\">" + this._tokenTypeToString(metadata.tokenType) + "</td>";
    result += "<tr><td class=\"tm-metadata-key\">font style</td><td class=\"tm-metadata-value\">" + this._fontStyleToString(metadata.fontStyle) + "</td>";
    result += "<tr><td class=\"tm-metadata-key\">foreground</td><td class=\"tm-metadata-value\">" + _color.Color.Format.CSS.formatHex(metadata.foreground) + "</td>";
    result += "<tr><td class=\"tm-metadata-key\">background</td><td class=\"tm-metadata-value\">" + _color.Color.Format.CSS.formatHex(metadata.background) + "</td>";
    result += "</tbody></table>";
    result += "<hr class=\"tokens-inspect-separator\"/>";

    if (token1Index < data.tokens1.length) {
      result += "<span class=\"tm-token-type\">" + (0, _strings.escape)(data.tokens1[token1Index].type) + "</span>";
    }

    this._domNode.innerHTML = result;

    this._editor.layoutContentWidget(this);
  };

  InspectTokensWidget.prototype._decodeMetadata = function (metadata) {
    var colorMap = _modes.TokenizationRegistry.getColorMap();

    var languageId = _modes.TokenMetadata.getLanguageId(metadata);

    var tokenType = _modes.TokenMetadata.getTokenType(metadata);

    var fontStyle = _modes.TokenMetadata.getFontStyle(metadata);

    var foreground = _modes.TokenMetadata.getForeground(metadata);

    var background = _modes.TokenMetadata.getBackground(metadata);

    return {
      languageIdentifier: this._modeService.getLanguageIdentifier(languageId),
      tokenType: tokenType,
      fontStyle: fontStyle,
      foreground: colorMap[foreground],
      background: colorMap[background]
    };
  };

  InspectTokensWidget.prototype._tokenTypeToString = function (tokenType) {
    switch (tokenType) {
      case 0
      /* Other */
      :
        return 'Other';

      case 1
      /* Comment */
      :
        return 'Comment';

      case 2
      /* String */
      :
        return 'String';

      case 4
      /* RegEx */
      :
        return 'RegEx';
    }

    return '??';
  };

  InspectTokensWidget.prototype._fontStyleToString = function (fontStyle) {
    var r = '';

    if (fontStyle & 1
    /* Italic */
    ) {
        r += 'italic ';
      }

    if (fontStyle & 2
    /* Bold */
    ) {
        r += 'bold ';
      }

    if (fontStyle & 4
    /* Underline */
    ) {
        r += 'underline ';
      }

    if (r.length === 0) {
      r = '---';
    }

    return r;
  };

  InspectTokensWidget.prototype._getTokensAtLine = function (lineNumber) {
    var stateBeforeLine = this._getStateBeforeLine(lineNumber);

    var tokenizationResult1 = this._tokenizationSupport.tokenize(this._model.getLineContent(lineNumber), stateBeforeLine, 0);

    var tokenizationResult2 = this._tokenizationSupport.tokenize2(this._model.getLineContent(lineNumber), stateBeforeLine, 0);

    return {
      startState: stateBeforeLine,
      tokens1: tokenizationResult1.tokens,
      tokens2: tokenizationResult2.tokens,
      endState: tokenizationResult1.endState
    };
  };

  InspectTokensWidget.prototype._getStateBeforeLine = function (lineNumber) {
    var state = this._tokenizationSupport.getInitialState();

    for (var i = 1; i < lineNumber; i++) {
      var tokenizationResult = this._tokenizationSupport.tokenize(this._model.getLineContent(i), state, 0);

      state = tokenizationResult.endState;
    }

    return state;
  };

  InspectTokensWidget.prototype.getDomNode = function () {
    return this._domNode;
  };

  InspectTokensWidget.prototype.getPosition = function () {
    return {
      position: this._editor.getPosition(),
      preference: [2
      /* BELOW */
      , 1
      /* ABOVE */
      ]
    };
  };

  InspectTokensWidget._ID = 'editor.contrib.inspectTokensWidget';
  return InspectTokensWidget;
}(_lifecycle.Disposable);

(0, _editorExtensions.registerEditorContribution)(InspectTokensController.ID, InspectTokensController);
(0, _editorExtensions.registerEditorAction)(InspectTokens);
(0, _themeService.registerThemingParticipant)(function (theme, collector) {
  var border = theme.getColor(_colorRegistry.editorHoverBorder);

  if (border) {
    var borderWidth = theme.type === _themeService.HIGH_CONTRAST ? 2 : 1;
    collector.addRule(".monaco-editor .tokens-inspect-widget { border: " + borderWidth + "px solid " + border + "; }");
    collector.addRule(".monaco-editor .tokens-inspect-widget .tokens-inspect-separator { background-color: " + border + "; }");
  }

  var background = theme.getColor(_colorRegistry.editorHoverBackground);

  if (background) {
    collector.addRule(".monaco-editor .tokens-inspect-widget { background-color: " + background + "; }");
  }

  var foreground = theme.getColor(_colorRegistry.editorHoverForeground);

  if (foreground) {
    collector.addRule(".monaco-editor .tokens-inspect-widget { color: " + foreground + "; }");
  }
});
},{"./inspectTokens.css":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/inspectTokens/inspectTokens.css","../../../../base/common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../../base/common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../../common/modes/nullMode.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes/nullMode.js","../../../common/services/modeService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modeService.js","../../common/standaloneThemeService.js":"../node_modules/monaco-editor/esm/vs/editor/standalone/common/standaloneThemeService.js","../../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../../../common/standaloneStrings.js":"../node_modules/monaco-editor/esm/vs/editor/common/standaloneStrings.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/gotoLine.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/keybindingLabel/keybindingLabel.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/keybindingLabel/keybindingLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KeybindingLabel = void 0;

require("./keybindingLabel.css");

var _objects = require("../../../common/objects.js");

var _keybindingLabels = require("../../../common/keybindingLabels.js");

var dom = _interopRequireWildcard(require("../../dom.js"));

var _nls = require("../../../../nls.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var $ = dom.$;

var KeybindingLabel =
/** @class */
function () {
  function KeybindingLabel(container, os, options) {
    this.os = os;
    this.options = options;
    this.domNode = dom.append(container, $('.monaco-keybinding'));
    this.didEverRender = false;
    container.appendChild(this.domNode);
  }

  KeybindingLabel.prototype.set = function (keybinding, matches) {
    if (this.didEverRender && this.keybinding === keybinding && KeybindingLabel.areSame(this.matches, matches)) {
      return;
    }

    this.keybinding = keybinding;
    this.matches = matches;
    this.render();
  };

  KeybindingLabel.prototype.render = function () {
    dom.clearNode(this.domNode);

    if (this.keybinding) {
      var _a = this.keybinding.getParts(),
          firstPart = _a[0],
          chordPart = _a[1];

      if (firstPart) {
        this.renderPart(this.domNode, firstPart, this.matches ? this.matches.firstPart : null);
      }

      if (chordPart) {
        dom.append(this.domNode, $('span.monaco-keybinding-key-chord-separator', undefined, ' '));
        this.renderPart(this.domNode, chordPart, this.matches ? this.matches.chordPart : null);
      }

      this.domNode.title = this.keybinding.getAriaLabel() || '';
    } else if (this.options && this.options.renderUnboundKeybindings) {
      this.renderUnbound(this.domNode);
    }

    this.didEverRender = true;
  };

  KeybindingLabel.prototype.renderPart = function (parent, part, match) {
    var _a, _b, _c, _d, _e;

    var modifierLabels = _keybindingLabels.UILabelProvider.modifierLabels[this.os];

    if (part.ctrlKey) {
      this.renderKey(parent, modifierLabels.ctrlKey, Boolean((_a = match) === null || _a === void 0 ? void 0 : _a.ctrlKey), modifierLabels.separator);
    }

    if (part.shiftKey) {
      this.renderKey(parent, modifierLabels.shiftKey, Boolean((_b = match) === null || _b === void 0 ? void 0 : _b.shiftKey), modifierLabels.separator);
    }

    if (part.altKey) {
      this.renderKey(parent, modifierLabels.altKey, Boolean((_c = match) === null || _c === void 0 ? void 0 : _c.altKey), modifierLabels.separator);
    }

    if (part.metaKey) {
      this.renderKey(parent, modifierLabels.metaKey, Boolean((_d = match) === null || _d === void 0 ? void 0 : _d.metaKey), modifierLabels.separator);
    }

    var keyLabel = part.keyLabel;

    if (keyLabel) {
      this.renderKey(parent, keyLabel, Boolean((_e = match) === null || _e === void 0 ? void 0 : _e.keyCode), '');
    }
  };

  KeybindingLabel.prototype.renderKey = function (parent, label, highlight, separator) {
    dom.append(parent, $('span.monaco-keybinding-key' + (highlight ? '.highlight' : ''), undefined, label));

    if (separator) {
      dom.append(parent, $('span.monaco-keybinding-key-separator', undefined, separator));
    }
  };

  KeybindingLabel.prototype.renderUnbound = function (parent) {
    dom.append(parent, $('span.monaco-keybinding-key', undefined, (0, _nls.localize)('unbound', "Unbound")));
  };

  KeybindingLabel.areSame = function (a, b) {
    if (a === b || !a && !b) {
      return true;
    }

    return !!a && !!b && (0, _objects.equals)(a.firstPart, b.firstPart) && (0, _objects.equals)(a.chordPart, b.chordPart);
  };

  return KeybindingLabel;
}();

exports.KeybindingLabel = KeybindingLabel;
},{"./keybindingLabel.css":"../node_modules/monaco-editor/esm/vs/base/browser/ui/keybindingLabel/keybindingLabel.css","../../../common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js","../../../common/keybindingLabels.js":"../node_modules/monaco-editor/esm/vs/base/common/keybindingLabels.js","../../dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js"}],"../node_modules/monaco-editor/esm/vs/base/parts/quickopen/browser/quickOpenModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QuickOpenModel = exports.QuickOpenEntryGroup = exports.QuickOpenEntry = void 0;

var nls = _interopRequireWildcard(require("../../../../nls.js"));

var types = _interopRequireWildcard(require("../../../common/types.js"));

var _iconLabel = require("../../../browser/ui/iconLabel/iconLabel.js");

var _actionbar = require("../../../browser/ui/actionbar/actionbar.js");

var _highlightedLabel = require("../../../browser/ui/highlightedlabel/highlightedLabel.js");

var DOM = _interopRequireWildcard(require("../../../browser/dom.js"));

var _keybindingLabel = require("../../../browser/ui/keybindingLabel/keybindingLabel.js");

var _platform = require("../../../common/platform.js");

var _arrays = require("../../../common/arrays.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var IDS = 0;

var QuickOpenEntry =
/** @class */
function () {
  function QuickOpenEntry(highlights) {
    if (highlights === void 0) {
      highlights = [];
    }

    this.id = (IDS++).toString();
    this.labelHighlights = highlights;
    this.descriptionHighlights = [];
  }
  /**
   * A unique identifier for the entry
   */


  QuickOpenEntry.prototype.getId = function () {
    return this.id;
  };
  /**
   * The label of the entry to identify it from others in the list
   */


  QuickOpenEntry.prototype.getLabel = function () {
    return undefined;
  };
  /**
   * The options for the label to use for this entry
   */


  QuickOpenEntry.prototype.getLabelOptions = function () {
    return undefined;
  };
  /**
   * The label of the entry to use when a screen reader wants to read about the entry
   */


  QuickOpenEntry.prototype.getAriaLabel = function () {
    return (0, _arrays.coalesce)([this.getLabel(), this.getDescription(), this.getDetail()]).join(', ');
  };
  /**
   * Detail information about the entry that is optional and can be shown below the label
   */


  QuickOpenEntry.prototype.getDetail = function () {
    return undefined;
  };
  /**
   * The icon of the entry to identify it from others in the list
   */


  QuickOpenEntry.prototype.getIcon = function () {
    return undefined;
  };
  /**
   * A secondary description that is optional and can be shown right to the label
   */


  QuickOpenEntry.prototype.getDescription = function () {
    return undefined;
  };
  /**
   * A tooltip to show when hovering over the entry.
   */


  QuickOpenEntry.prototype.getTooltip = function () {
    return undefined;
  };
  /**
   * A tooltip to show when hovering over the description portion of the entry.
   */


  QuickOpenEntry.prototype.getDescriptionTooltip = function () {
    return undefined;
  };
  /**
   * An optional keybinding to show for an entry.
   */


  QuickOpenEntry.prototype.getKeybinding = function () {
    return undefined;
  };
  /**
   * Allows to reuse the same model while filtering. Hidden entries will not show up in the viewer.
   */


  QuickOpenEntry.prototype.isHidden = function () {
    return !!this.hidden;
  };
  /**
   * Allows to set highlight ranges that should show up for the entry label and optionally description if set.
   */


  QuickOpenEntry.prototype.setHighlights = function (labelHighlights, descriptionHighlights, detailHighlights) {
    this.labelHighlights = labelHighlights;
    this.descriptionHighlights = descriptionHighlights;
    this.detailHighlights = detailHighlights;
  };
  /**
   * Allows to return highlight ranges that should show up for the entry label and description.
   */


  QuickOpenEntry.prototype.getHighlights = function () {
    return [this.labelHighlights, this.descriptionHighlights, this.detailHighlights];
  };
  /**
   * Called when the entry is selected for opening. Returns a boolean value indicating if an action was performed or not.
   * The mode parameter gives an indication if the element is previewed (using arrow keys) or opened.
   *
   * The context parameter provides additional context information how the run was triggered.
   */


  QuickOpenEntry.prototype.run = function (mode, context) {
    return false;
  };

  return QuickOpenEntry;
}();

exports.QuickOpenEntry = QuickOpenEntry;

var QuickOpenEntryGroup =
/** @class */
function (_super) {
  __extends(QuickOpenEntryGroup, _super);

  function QuickOpenEntryGroup(entry, groupLabel, withBorder) {
    var _this = _super.call(this) || this;

    _this.entry = entry;
    _this.groupLabel = groupLabel;
    _this.withBorder = withBorder;
    return _this;
  }
  /**
   * The label of the group or null if none.
   */


  QuickOpenEntryGroup.prototype.getGroupLabel = function () {
    return this.groupLabel;
  };

  QuickOpenEntryGroup.prototype.setGroupLabel = function (groupLabel) {
    this.groupLabel = groupLabel;
  };
  /**
   * Whether to show a border on top of the group entry or not.
   */


  QuickOpenEntryGroup.prototype.showBorder = function () {
    return !!this.withBorder;
  };

  QuickOpenEntryGroup.prototype.setShowBorder = function (showBorder) {
    this.withBorder = showBorder;
  };

  QuickOpenEntryGroup.prototype.getLabel = function () {
    return this.entry ? this.entry.getLabel() : _super.prototype.getLabel.call(this);
  };

  QuickOpenEntryGroup.prototype.getLabelOptions = function () {
    return this.entry ? this.entry.getLabelOptions() : _super.prototype.getLabelOptions.call(this);
  };

  QuickOpenEntryGroup.prototype.getAriaLabel = function () {
    return this.entry ? this.entry.getAriaLabel() : _super.prototype.getAriaLabel.call(this);
  };

  QuickOpenEntryGroup.prototype.getDetail = function () {
    return this.entry ? this.entry.getDetail() : _super.prototype.getDetail.call(this);
  };

  QuickOpenEntryGroup.prototype.getIcon = function () {
    return this.entry ? this.entry.getIcon() : _super.prototype.getIcon.call(this);
  };

  QuickOpenEntryGroup.prototype.getDescription = function () {
    return this.entry ? this.entry.getDescription() : _super.prototype.getDescription.call(this);
  };

  QuickOpenEntryGroup.prototype.getHighlights = function () {
    return this.entry ? this.entry.getHighlights() : _super.prototype.getHighlights.call(this);
  };

  QuickOpenEntryGroup.prototype.isHidden = function () {
    return this.entry ? this.entry.isHidden() : _super.prototype.isHidden.call(this);
  };

  QuickOpenEntryGroup.prototype.setHighlights = function (labelHighlights, descriptionHighlights, detailHighlights) {
    this.entry ? this.entry.setHighlights(labelHighlights, descriptionHighlights, detailHighlights) : _super.prototype.setHighlights.call(this, labelHighlights, descriptionHighlights, detailHighlights);
  };

  QuickOpenEntryGroup.prototype.run = function (mode, context) {
    return this.entry ? this.entry.run(mode, context) : _super.prototype.run.call(this, mode, context);
  };

  return QuickOpenEntryGroup;
}(QuickOpenEntry);

exports.QuickOpenEntryGroup = QuickOpenEntryGroup;

var NoActionProvider =
/** @class */
function () {
  function NoActionProvider() {}

  NoActionProvider.prototype.hasActions = function (tree, element) {
    return false;
  };

  NoActionProvider.prototype.getActions = function (tree, element) {
    return null;
  };

  return NoActionProvider;
}();

var templateEntry = 'quickOpenEntry';
var templateEntryGroup = 'quickOpenEntryGroup';

var Renderer =
/** @class */
function () {
  function Renderer(actionProvider, actionRunner) {
    if (actionProvider === void 0) {
      actionProvider = new NoActionProvider();
    }

    this.actionProvider = actionProvider;
    this.actionRunner = actionRunner;
  }

  Renderer.prototype.getHeight = function (entry) {
    if (entry.getDetail()) {
      return 44;
    }

    return 22;
  };

  Renderer.prototype.getTemplateId = function (entry) {
    if (entry instanceof QuickOpenEntryGroup) {
      return templateEntryGroup;
    }

    return templateEntry;
  };

  Renderer.prototype.renderTemplate = function (templateId, container, styles) {
    var entryContainer = document.createElement('div');
    DOM.addClass(entryContainer, 'sub-content');
    container.appendChild(entryContainer); // Entry

    var row1 = DOM.$('.quick-open-row');
    var row2 = DOM.$('.quick-open-row');
    var entry = DOM.$('.quick-open-entry', undefined, row1, row2);
    entryContainer.appendChild(entry); // Icon

    var icon = document.createElement('span');
    row1.appendChild(icon); // Label

    var label = new _iconLabel.IconLabel(row1, {
      supportHighlights: true,
      supportDescriptionHighlights: true,
      supportCodicons: true
    }); // Keybinding

    var keybindingContainer = document.createElement('span');
    row1.appendChild(keybindingContainer);
    DOM.addClass(keybindingContainer, 'quick-open-entry-keybinding');
    var keybinding = new _keybindingLabel.KeybindingLabel(keybindingContainer, _platform.OS); // Detail

    var detailContainer = document.createElement('div');
    row2.appendChild(detailContainer);
    DOM.addClass(detailContainer, 'quick-open-entry-meta');
    var detail = new _highlightedLabel.HighlightedLabel(detailContainer, true); // Entry Group

    var group;

    if (templateId === templateEntryGroup) {
      group = document.createElement('div');
      DOM.addClass(group, 'results-group');
      container.appendChild(group);
    } // Actions


    DOM.addClass(container, 'actions');
    var actionBarContainer = document.createElement('div');
    DOM.addClass(actionBarContainer, 'primary-action-bar');
    container.appendChild(actionBarContainer);
    var actionBar = new _actionbar.ActionBar(actionBarContainer, {
      actionRunner: this.actionRunner
    });
    return {
      container: container,
      entry: entry,
      icon: icon,
      label: label,
      detail: detail,
      keybinding: keybinding,
      group: group,
      actionBar: actionBar
    };
  };

  Renderer.prototype.renderElement = function (entry, templateId, data, styles) {
    // Action Bar
    if (this.actionProvider.hasActions(null, entry)) {
      DOM.addClass(data.container, 'has-actions');
    } else {
      DOM.removeClass(data.container, 'has-actions');
    }

    data.actionBar.context = entry; // make sure the context is the current element

    var actions = this.actionProvider.getActions(null, entry);

    if (data.actionBar.isEmpty() && actions && actions.length > 0) {
      data.actionBar.push(actions, {
        icon: true,
        label: false
      });
    } else if (!data.actionBar.isEmpty() && (!actions || actions.length === 0)) {
      data.actionBar.clear();
    } // Entry group class


    if (entry instanceof QuickOpenEntryGroup && entry.getGroupLabel()) {
      DOM.addClass(data.container, 'has-group-label');
    } else {
      DOM.removeClass(data.container, 'has-group-label');
    } // Entry group


    if (entry instanceof QuickOpenEntryGroup) {
      var group = entry;
      var groupData = data; // Border

      if (group.showBorder()) {
        DOM.addClass(groupData.container, 'results-group-separator');

        if (styles.pickerGroupBorder) {
          groupData.container.style.borderTopColor = styles.pickerGroupBorder.toString();
        }
      } else {
        DOM.removeClass(groupData.container, 'results-group-separator');
        groupData.container.style.borderTopColor = '';
      } // Group Label


      var groupLabel = group.getGroupLabel() || '';

      if (groupData.group) {
        groupData.group.textContent = groupLabel;

        if (styles.pickerGroupForeground) {
          groupData.group.style.color = styles.pickerGroupForeground.toString();
        }
      }
    } // Normal Entry


    if (entry instanceof QuickOpenEntry) {
      var _a = entry.getHighlights(),
          labelHighlights = _a[0],
          descriptionHighlights = _a[1],
          detailHighlights = _a[2]; // Icon


      var iconClass = entry.getIcon() ? 'quick-open-entry-icon ' + entry.getIcon() : '';
      data.icon.className = iconClass; // Label

      var options = entry.getLabelOptions() || Object.create(null);
      options.matches = labelHighlights || [];
      options.title = entry.getTooltip();
      options.descriptionTitle = entry.getDescriptionTooltip() || entry.getDescription(); // tooltip over description because it could overflow

      options.descriptionMatches = descriptionHighlights || [];
      data.label.setLabel(entry.getLabel() || '', entry.getDescription(), options); // Meta

      data.detail.set(entry.getDetail(), detailHighlights); // Keybinding

      data.keybinding.set(entry.getKeybinding());
    }
  };

  Renderer.prototype.disposeTemplate = function (templateId, templateData) {
    templateData.actionBar.dispose();
    templateData.actionBar = null;
    templateData.container = null;
    templateData.entry = null;
    templateData.keybinding = null;
    templateData.detail = null;
    templateData.group = null;
    templateData.icon = null;
    templateData.label.dispose();
    templateData.label = null;
  };

  return Renderer;
}();

var QuickOpenModel =
/** @class */
function () {
  function QuickOpenModel(entries, actionProvider) {
    if (entries === void 0) {
      entries = [];
    }

    if (actionProvider === void 0) {
      actionProvider = new NoActionProvider();
    }

    this._entries = entries;
    this._dataSource = this;
    this._renderer = new Renderer(actionProvider);
    this._filter = this;
    this._runner = this;
    this._accessibilityProvider = this;
  }

  Object.defineProperty(QuickOpenModel.prototype, "entries", {
    get: function () {
      return this._entries;
    },
    set: function (entries) {
      this._entries = entries;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(QuickOpenModel.prototype, "dataSource", {
    get: function () {
      return this._dataSource;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(QuickOpenModel.prototype, "renderer", {
    get: function () {
      return this._renderer;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(QuickOpenModel.prototype, "filter", {
    get: function () {
      return this._filter;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(QuickOpenModel.prototype, "runner", {
    get: function () {
      return this._runner;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(QuickOpenModel.prototype, "accessibilityProvider", {
    get: function () {
      return this._accessibilityProvider;
    },
    enumerable: true,
    configurable: true
  });

  QuickOpenModel.prototype.getId = function (entry) {
    return entry.getId();
  };

  QuickOpenModel.prototype.getLabel = function (entry) {
    return types.withUndefinedAsNull(entry.getLabel());
  };

  QuickOpenModel.prototype.getAriaLabel = function (entry) {
    var ariaLabel = entry.getAriaLabel();

    if (ariaLabel) {
      return nls.localize('quickOpenAriaLabelEntry', "{0}, picker", entry.getAriaLabel());
    }

    return nls.localize('quickOpenAriaLabel', "picker");
  };

  QuickOpenModel.prototype.isVisible = function (entry) {
    return !entry.isHidden();
  };

  QuickOpenModel.prototype.run = function (entry, mode, context) {
    return entry.run(mode, context);
  };

  return QuickOpenModel;
}();

exports.QuickOpenModel = QuickOpenModel;
},{"../../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../common/types.js":"../node_modules/monaco-editor/esm/vs/base/common/types.js","../../../browser/ui/iconLabel/iconLabel.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/iconLabel/iconLabel.js","../../../browser/ui/actionbar/actionbar.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js","../../../browser/ui/highlightedlabel/highlightedLabel.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/highlightedlabel/highlightedLabel.js","../../../browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../browser/ui/keybindingLabel/keybindingLabel.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/keybindingLabel/keybindingLabel.js","../../../common/platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js","../../../common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/editorQuickOpen.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/parts/quickopen/browser/quickopen.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/parts/quickopen/browser/quickOpenViewer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Renderer = exports.Filter = exports.AccessibilityProvider = exports.DataSource = void 0;

var _types = require("../../../common/types.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var DataSource =
/** @class */
function () {
  function DataSource(arg) {
    this.modelProvider = (0, _types.isFunction)(arg.getModel) ? arg : {
      getModel: function () {
        return arg;
      }
    };
  }

  DataSource.prototype.getId = function (tree, element) {
    if (!element) {
      return null;
    }

    var model = this.modelProvider.getModel();
    return model === element ? '__root__' : model.dataSource.getId(element);
  };

  DataSource.prototype.hasChildren = function (tree, element) {
    var model = this.modelProvider.getModel();
    return !!(model && model === element && model.entries.length > 0);
  };

  DataSource.prototype.getChildren = function (tree, element) {
    var model = this.modelProvider.getModel();
    return Promise.resolve(model === element ? model.entries : []);
  };

  DataSource.prototype.getParent = function (tree, element) {
    return Promise.resolve(null);
  };

  return DataSource;
}();

exports.DataSource = DataSource;

var AccessibilityProvider =
/** @class */
function () {
  function AccessibilityProvider(modelProvider) {
    this.modelProvider = modelProvider;
  }

  AccessibilityProvider.prototype.getAriaLabel = function (tree, element) {
    var model = this.modelProvider.getModel();
    return model.accessibilityProvider ? model.accessibilityProvider.getAriaLabel(element) : null;
  };

  AccessibilityProvider.prototype.getPosInSet = function (tree, element) {
    var model = this.modelProvider.getModel();
    var i = 0;

    if (model.filter) {
      for (var _i = 0, _a = model.entries; _i < _a.length; _i++) {
        var entry = _a[_i];

        if (model.filter.isVisible(entry)) {
          i++;
        }

        if (entry === element) {
          break;
        }
      }
    } else {
      i = model.entries.indexOf(element) + 1;
    }

    return String(i);
  };

  AccessibilityProvider.prototype.getSetSize = function () {
    var model = this.modelProvider.getModel();
    var n = 0;

    if (model.filter) {
      for (var _i = 0, _a = model.entries; _i < _a.length; _i++) {
        var entry = _a[_i];

        if (model.filter.isVisible(entry)) {
          n++;
        }
      }
    } else {
      n = model.entries.length;
    }

    return String(n);
  };

  return AccessibilityProvider;
}();

exports.AccessibilityProvider = AccessibilityProvider;

var Filter =
/** @class */
function () {
  function Filter(modelProvider) {
    this.modelProvider = modelProvider;
  }

  Filter.prototype.isVisible = function (tree, element) {
    var model = this.modelProvider.getModel();

    if (!model.filter) {
      return true;
    }

    return model.filter.isVisible(element);
  };

  return Filter;
}();

exports.Filter = Filter;

var Renderer =
/** @class */
function () {
  function Renderer(modelProvider, styles) {
    this.modelProvider = modelProvider;
    this.styles = styles;
  }

  Renderer.prototype.updateStyles = function (styles) {
    this.styles = styles;
  };

  Renderer.prototype.getHeight = function (tree, element) {
    var model = this.modelProvider.getModel();
    return model.renderer.getHeight(element);
  };

  Renderer.prototype.getTemplateId = function (tree, element) {
    var model = this.modelProvider.getModel();
    return model.renderer.getTemplateId(element);
  };

  Renderer.prototype.renderTemplate = function (tree, templateId, container) {
    var model = this.modelProvider.getModel();
    return model.renderer.renderTemplate(templateId, container, this.styles);
  };

  Renderer.prototype.renderElement = function (tree, element, templateId, templateData) {
    var model = this.modelProvider.getModel();
    model.renderer.renderElement(element, templateId, templateData, this.styles);
  };

  Renderer.prototype.disposeTemplate = function (tree, templateId, templateData) {
    var model = this.modelProvider.getModel();
    model.renderer.disposeTemplate(templateId, templateData);
  };

  return Renderer;
}();

exports.Renderer = Renderer;
},{"../../../common/types.js":"../node_modules/monaco-editor/esm/vs/base/common/types.js"}],"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/tree.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeDefaults.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultTreestyler = exports.DefaultAccessibilityProvider = exports.DefaultFilter = exports.DefaultDragAndDrop = exports.DefaultController = exports.KeybindingDispatcher = void 0;

var platform = _interopRequireWildcard(require("../../../common/platform.js"));

var errors = _interopRequireWildcard(require("../../../common/errors.js"));

var dom = _interopRequireWildcard(require("../../../browser/dom.js"));

var _keyCodes = require("../../../common/keyCodes.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var KeybindingDispatcher =
/** @class */
function () {
  function KeybindingDispatcher() {
    this._arr = [];
  }

  KeybindingDispatcher.prototype.set = function (keybinding, callback) {
    this._arr.push({
      keybinding: (0, _keyCodes.createKeybinding)(keybinding, platform.OS),
      callback: callback
    });
  };

  KeybindingDispatcher.prototype.dispatch = function (keybinding) {
    // Loop from the last to the first to handle overwrites
    for (var i = this._arr.length - 1; i >= 0; i--) {
      var item = this._arr[i];

      if (keybinding.toChord().equals(item.keybinding)) {
        return item.callback;
      }
    }

    return null;
  };

  return KeybindingDispatcher;
}();

exports.KeybindingDispatcher = KeybindingDispatcher;

var DefaultController =
/** @class */
function () {
  function DefaultController(options) {
    var _this = this;

    if (options === void 0) {
      options = {
        clickBehavior: 0
        /* ON_MOUSE_DOWN */
        ,
        keyboardSupport: true,
        openMode: 0
        /* SINGLE_CLICK */

      };
    }

    this.options = options;
    this.downKeyBindingDispatcher = new KeybindingDispatcher();
    this.upKeyBindingDispatcher = new KeybindingDispatcher();

    if (typeof options.keyboardSupport !== 'boolean' || options.keyboardSupport) {
      this.downKeyBindingDispatcher.set(16
      /* UpArrow */
      , function (t, e) {
        return _this.onUp(t, e);
      });
      this.downKeyBindingDispatcher.set(18
      /* DownArrow */
      , function (t, e) {
        return _this.onDown(t, e);
      });
      this.downKeyBindingDispatcher.set(15
      /* LeftArrow */
      , function (t, e) {
        return _this.onLeft(t, e);
      });
      this.downKeyBindingDispatcher.set(17
      /* RightArrow */
      , function (t, e) {
        return _this.onRight(t, e);
      });

      if (platform.isMacintosh) {
        this.downKeyBindingDispatcher.set(2048
        /* CtrlCmd */
        | 16
        /* UpArrow */
        , function (t, e) {
          return _this.onLeft(t, e);
        });
        this.downKeyBindingDispatcher.set(256
        /* WinCtrl */
        | 44
        /* KEY_N */
        , function (t, e) {
          return _this.onDown(t, e);
        });
        this.downKeyBindingDispatcher.set(256
        /* WinCtrl */
        | 46
        /* KEY_P */
        , function (t, e) {
          return _this.onUp(t, e);
        });
      }

      this.downKeyBindingDispatcher.set(11
      /* PageUp */
      , function (t, e) {
        return _this.onPageUp(t, e);
      });
      this.downKeyBindingDispatcher.set(12
      /* PageDown */
      , function (t, e) {
        return _this.onPageDown(t, e);
      });
      this.downKeyBindingDispatcher.set(14
      /* Home */
      , function (t, e) {
        return _this.onHome(t, e);
      });
      this.downKeyBindingDispatcher.set(13
      /* End */
      , function (t, e) {
        return _this.onEnd(t, e);
      });
      this.downKeyBindingDispatcher.set(10
      /* Space */
      , function (t, e) {
        return _this.onSpace(t, e);
      });
      this.downKeyBindingDispatcher.set(9
      /* Escape */
      , function (t, e) {
        return _this.onEscape(t, e);
      });
      this.upKeyBindingDispatcher.set(3
      /* Enter */
      , this.onEnter.bind(this));
      this.upKeyBindingDispatcher.set(2048
      /* CtrlCmd */
      | 3
      /* Enter */
      , this.onEnter.bind(this));
    }
  }

  DefaultController.prototype.onMouseDown = function (tree, element, event, origin) {
    if (origin === void 0) {
      origin = 'mouse';
    }

    if (this.options.clickBehavior === 0
    /* ON_MOUSE_DOWN */
    && (event.leftButton || event.middleButton)) {
      if (event.target) {
        if (event.target.tagName && event.target.tagName.toLowerCase() === 'input') {
          return false; // Ignore event if target is a form input field (avoids browser specific issues)
        }

        if (dom.findParentWithClass(event.target, 'scrollbar', 'monaco-tree')) {
          return false;
        }

        if (dom.findParentWithClass(event.target, 'monaco-action-bar', 'row')) {
          // TODO@Joao not very nice way of checking for the action bar (implicit knowledge)
          return false; // Ignore event if target is over an action bar of the row
        }
      } // Propagate to onLeftClick now


      return this.onLeftClick(tree, element, event, origin);
    }

    return false;
  };

  DefaultController.prototype.onClick = function (tree, element, event) {
    var isMac = platform.isMacintosh; // A Ctrl click on the Mac is a context menu event

    if (isMac && event.ctrlKey) {
      event.preventDefault();
      event.stopPropagation();
      return false;
    }

    if (event.target && event.target.tagName && event.target.tagName.toLowerCase() === 'input') {
      return false; // Ignore event if target is a form input field (avoids browser specific issues)
    }

    if (this.options.clickBehavior === 0
    /* ON_MOUSE_DOWN */
    && (event.leftButton || event.middleButton)) {
      return false; // Already handled by onMouseDown
    }

    return this.onLeftClick(tree, element, event);
  };

  DefaultController.prototype.onLeftClick = function (tree, element, eventish, origin) {
    if (origin === void 0) {
      origin = 'mouse';
    }

    var event = eventish;
    var payload = {
      origin: origin,
      originalEvent: eventish,
      didClickOnTwistie: this.isClickOnTwistie(event)
    };

    if (tree.getInput() === element) {
      tree.clearFocus(payload);
      tree.clearSelection(payload);
    } else {
      var isSingleMouseDown = eventish && event.browserEvent && event.browserEvent.type === 'mousedown' && event.browserEvent.detail === 1;

      if (!isSingleMouseDown) {
        eventish.preventDefault(); // we cannot preventDefault onMouseDown with single click because this would break DND otherwise
      }

      eventish.stopPropagation();
      tree.domFocus();
      tree.setSelection([element], payload);
      tree.setFocus(element, payload);

      if (this.shouldToggleExpansion(element, event, origin)) {
        if (tree.isExpanded(element)) {
          tree.collapse(element).then(undefined, errors.onUnexpectedError);
        } else {
          tree.expand(element).then(undefined, errors.onUnexpectedError);
        }
      }
    }

    return true;
  };

  DefaultController.prototype.shouldToggleExpansion = function (element, event, origin) {
    var isDoubleClick = origin === 'mouse' && event.detail === 2;
    return this.openOnSingleClick || isDoubleClick || this.isClickOnTwistie(event);
  };

  Object.defineProperty(DefaultController.prototype, "openOnSingleClick", {
    get: function () {
      return this.options.openMode === 0
      /* SINGLE_CLICK */
      ;
    },
    enumerable: true,
    configurable: true
  });

  DefaultController.prototype.isClickOnTwistie = function (event) {
    var element = event.target;

    if (!dom.hasClass(element, 'content')) {
      return false;
    }

    var twistieStyle = window.getComputedStyle(element, ':before');

    if (twistieStyle.backgroundImage === 'none' || twistieStyle.display === 'none') {
      return false;
    }

    var twistieWidth = parseInt(twistieStyle.width) + parseInt(twistieStyle.paddingRight);
    return event.browserEvent.offsetX <= twistieWidth;
  };

  DefaultController.prototype.onContextMenu = function (tree, element, event) {
    if (event.target && event.target.tagName && event.target.tagName.toLowerCase() === 'input') {
      return false; // allow context menu on input fields
    } // Prevent native context menu from showing up


    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }

    return false;
  };

  DefaultController.prototype.onTap = function (tree, element, event) {
    var target = event.initialTarget;

    if (target && target.tagName && target.tagName.toLowerCase() === 'input') {
      return false; // Ignore event if target is a form input field (avoids browser specific issues)
    }

    return this.onLeftClick(tree, element, event, 'touch');
  };

  DefaultController.prototype.onKeyDown = function (tree, event) {
    return this.onKey(this.downKeyBindingDispatcher, tree, event);
  };

  DefaultController.prototype.onKeyUp = function (tree, event) {
    return this.onKey(this.upKeyBindingDispatcher, tree, event);
  };

  DefaultController.prototype.onKey = function (bindings, tree, event) {
    var handler = bindings.dispatch(event.toKeybinding());

    if (handler) {
      // TODO: TS 3.1 upgrade. Why are we checking against void?
      if (handler(tree, event)) {
        event.preventDefault();
        event.stopPropagation();
        return true;
      }
    }

    return false;
  };

  DefaultController.prototype.onUp = function (tree, event) {
    var payload = {
      origin: 'keyboard',
      originalEvent: event
    };

    if (tree.getHighlight()) {
      tree.clearHighlight(payload);
    } else {
      tree.focusPrevious(1, payload);
      tree.reveal(tree.getFocus()).then(undefined, errors.onUnexpectedError);
    }

    return true;
  };

  DefaultController.prototype.onPageUp = function (tree, event) {
    var payload = {
      origin: 'keyboard',
      originalEvent: event
    };

    if (tree.getHighlight()) {
      tree.clearHighlight(payload);
    } else {
      tree.focusPreviousPage(payload);
      tree.reveal(tree.getFocus()).then(undefined, errors.onUnexpectedError);
    }

    return true;
  };

  DefaultController.prototype.onDown = function (tree, event) {
    var payload = {
      origin: 'keyboard',
      originalEvent: event
    };

    if (tree.getHighlight()) {
      tree.clearHighlight(payload);
    } else {
      tree.focusNext(1, payload);
      tree.reveal(tree.getFocus()).then(undefined, errors.onUnexpectedError);
    }

    return true;
  };

  DefaultController.prototype.onPageDown = function (tree, event) {
    var payload = {
      origin: 'keyboard',
      originalEvent: event
    };

    if (tree.getHighlight()) {
      tree.clearHighlight(payload);
    } else {
      tree.focusNextPage(payload);
      tree.reveal(tree.getFocus()).then(undefined, errors.onUnexpectedError);
    }

    return true;
  };

  DefaultController.prototype.onHome = function (tree, event) {
    var payload = {
      origin: 'keyboard',
      originalEvent: event
    };

    if (tree.getHighlight()) {
      tree.clearHighlight(payload);
    } else {
      tree.focusFirst(payload);
      tree.reveal(tree.getFocus()).then(undefined, errors.onUnexpectedError);
    }

    return true;
  };

  DefaultController.prototype.onEnd = function (tree, event) {
    var payload = {
      origin: 'keyboard',
      originalEvent: event
    };

    if (tree.getHighlight()) {
      tree.clearHighlight(payload);
    } else {
      tree.focusLast(payload);
      tree.reveal(tree.getFocus()).then(undefined, errors.onUnexpectedError);
    }

    return true;
  };

  DefaultController.prototype.onLeft = function (tree, event) {
    var payload = {
      origin: 'keyboard',
      originalEvent: event
    };

    if (tree.getHighlight()) {
      tree.clearHighlight(payload);
    } else {
      var focus_1 = tree.getFocus();
      tree.collapse(focus_1).then(function (didCollapse) {
        if (focus_1 && !didCollapse) {
          tree.focusParent(payload);
          return tree.reveal(tree.getFocus());
        }

        return undefined;
      }).then(undefined, errors.onUnexpectedError);
    }

    return true;
  };

  DefaultController.prototype.onRight = function (tree, event) {
    var payload = {
      origin: 'keyboard',
      originalEvent: event
    };

    if (tree.getHighlight()) {
      tree.clearHighlight(payload);
    } else {
      var focus_2 = tree.getFocus();
      tree.expand(focus_2).then(function (didExpand) {
        if (focus_2 && !didExpand) {
          tree.focusFirstChild(payload);
          return tree.reveal(tree.getFocus());
        }

        return undefined;
      }).then(undefined, errors.onUnexpectedError);
    }

    return true;
  };

  DefaultController.prototype.onEnter = function (tree, event) {
    var payload = {
      origin: 'keyboard',
      originalEvent: event
    };

    if (tree.getHighlight()) {
      return false;
    }

    var focus = tree.getFocus();

    if (focus) {
      tree.setSelection([focus], payload);
    }

    return true;
  };

  DefaultController.prototype.onSpace = function (tree, event) {
    if (tree.getHighlight()) {
      return false;
    }

    var focus = tree.getFocus();

    if (focus) {
      tree.toggleExpansion(focus);
    }

    return true;
  };

  DefaultController.prototype.onEscape = function (tree, event) {
    var payload = {
      origin: 'keyboard',
      originalEvent: event
    };

    if (tree.getHighlight()) {
      tree.clearHighlight(payload);
      return true;
    }

    if (tree.getSelection().length) {
      tree.clearSelection(payload);
      return true;
    }

    if (tree.getFocus()) {
      tree.clearFocus(payload);
      return true;
    }

    return false;
  };

  return DefaultController;
}();

exports.DefaultController = DefaultController;

var DefaultDragAndDrop =
/** @class */
function () {
  function DefaultDragAndDrop() {}

  DefaultDragAndDrop.prototype.getDragURI = function (tree, element) {
    return null;
  };

  DefaultDragAndDrop.prototype.onDragStart = function (tree, data, originalEvent) {
    return;
  };

  DefaultDragAndDrop.prototype.onDragOver = function (tree, data, targetElement, originalEvent) {
    return null;
  };

  DefaultDragAndDrop.prototype.drop = function (tree, data, targetElement, originalEvent) {
    return;
  };

  return DefaultDragAndDrop;
}();

exports.DefaultDragAndDrop = DefaultDragAndDrop;

var DefaultFilter =
/** @class */
function () {
  function DefaultFilter() {}

  DefaultFilter.prototype.isVisible = function (tree, element) {
    return true;
  };

  return DefaultFilter;
}();

exports.DefaultFilter = DefaultFilter;

var DefaultAccessibilityProvider =
/** @class */
function () {
  function DefaultAccessibilityProvider() {}

  DefaultAccessibilityProvider.prototype.getAriaLabel = function (tree, element) {
    return null;
  };

  return DefaultAccessibilityProvider;
}();

exports.DefaultAccessibilityProvider = DefaultAccessibilityProvider;

var DefaultTreestyler =
/** @class */
function () {
  function DefaultTreestyler(styleElement, selectorSuffix) {
    this.styleElement = styleElement;
    this.selectorSuffix = selectorSuffix;
  }

  DefaultTreestyler.prototype.style = function (styles) {
    var suffix = this.selectorSuffix ? "." + this.selectorSuffix : '';
    var content = [];

    if (styles.listFocusBackground) {
      content.push(".monaco-tree" + suffix + ".focused .monaco-tree-rows > .monaco-tree-row.focused:not(.highlighted) { background-color: " + styles.listFocusBackground + "; }");
    }

    if (styles.listFocusForeground) {
      content.push(".monaco-tree" + suffix + ".focused .monaco-tree-rows > .monaco-tree-row.focused:not(.highlighted) { color: " + styles.listFocusForeground + "; }");
    }

    if (styles.listActiveSelectionBackground) {
      content.push(".monaco-tree" + suffix + ".focused .monaco-tree-rows > .monaco-tree-row.selected:not(.highlighted) { background-color: " + styles.listActiveSelectionBackground + "; }");
    }

    if (styles.listActiveSelectionForeground) {
      content.push(".monaco-tree" + suffix + ".focused .monaco-tree-rows > .monaco-tree-row.selected:not(.highlighted) { color: " + styles.listActiveSelectionForeground + "; }");
    }

    if (styles.listFocusAndSelectionBackground) {
      content.push("\n\t\t\t\t.monaco-tree-drag-image,\n\t\t\t\t.monaco-tree" + suffix + ".focused .monaco-tree-rows > .monaco-tree-row.focused.selected:not(.highlighted) { background-color: " + styles.listFocusAndSelectionBackground + "; }\n\t\t\t");
    }

    if (styles.listFocusAndSelectionForeground) {
      content.push("\n\t\t\t\t.monaco-tree-drag-image,\n\t\t\t\t.monaco-tree" + suffix + ".focused .monaco-tree-rows > .monaco-tree-row.focused.selected:not(.highlighted) { color: " + styles.listFocusAndSelectionForeground + "; }\n\t\t\t");
    }

    if (styles.listInactiveSelectionBackground) {
      content.push(".monaco-tree" + suffix + " .monaco-tree-rows > .monaco-tree-row.selected:not(.highlighted) { background-color: " + styles.listInactiveSelectionBackground + "; }");
    }

    if (styles.listInactiveSelectionForeground) {
      content.push(".monaco-tree" + suffix + " .monaco-tree-rows > .monaco-tree-row.selected:not(.highlighted) { color: " + styles.listInactiveSelectionForeground + "; }");
    }

    if (styles.listHoverBackground) {
      content.push(".monaco-tree" + suffix + " .monaco-tree-rows > .monaco-tree-row:hover:not(.highlighted):not(.selected):not(.focused) { background-color: " + styles.listHoverBackground + "; }");
    }

    if (styles.listHoverForeground) {
      content.push(".monaco-tree" + suffix + " .monaco-tree-rows > .monaco-tree-row:hover:not(.highlighted):not(.selected):not(.focused) { color: " + styles.listHoverForeground + "; }");
    }

    if (styles.listDropBackground) {
      content.push("\n\t\t\t\t.monaco-tree" + suffix + " .monaco-tree-wrapper.drop-target,\n\t\t\t\t.monaco-tree" + suffix + " .monaco-tree-rows > .monaco-tree-row.drop-target { background-color: " + styles.listDropBackground + " !important; color: inherit !important; }\n\t\t\t");
    }

    if (styles.listFocusOutline) {
      content.push("\n\t\t\t\t.monaco-tree-drag-image\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ border: 1px solid " + styles.listFocusOutline + "; background: #000; }\n\t\t\t\t.monaco-tree" + suffix + " .monaco-tree-rows > .monaco-tree-row \t\t\t\t\t\t\t\t\t\t\t\t\t\t{ border: 1px solid transparent; }\n\t\t\t\t.monaco-tree" + suffix + ".focused .monaco-tree-rows > .monaco-tree-row.focused:not(.highlighted) \t\t\t\t\t\t{ border: 1px dotted " + styles.listFocusOutline + "; }\n\t\t\t\t.monaco-tree" + suffix + ".focused .monaco-tree-rows > .monaco-tree-row.selected:not(.highlighted) \t\t\t\t\t\t{ border: 1px solid " + styles.listFocusOutline + "; }\n\t\t\t\t.monaco-tree" + suffix + " .monaco-tree-rows > .monaco-tree-row.selected:not(.highlighted)  \t\t\t\t\t\t\t{ border: 1px solid " + styles.listFocusOutline + "; }\n\t\t\t\t.monaco-tree" + suffix + " .monaco-tree-rows > .monaco-tree-row:hover:not(.highlighted):not(.selected):not(.focused)  \t{ border: 1px dashed " + styles.listFocusOutline + "; }\n\t\t\t\t.monaco-tree" + suffix + " .monaco-tree-wrapper.drop-target,\n\t\t\t\t.monaco-tree" + suffix + " .monaco-tree-rows > .monaco-tree-row.drop-target\t\t\t\t\t\t\t\t\t\t\t\t{ border: 1px dashed " + styles.listFocusOutline + "; }\n\t\t\t");
    }

    var newStyles = content.join('\n');

    if (newStyles !== this.styleElement.innerHTML) {
      this.styleElement.innerHTML = newStyles;
    }
  };

  return DefaultTreestyler;
}();

exports.DefaultTreestyler = DefaultTreestyler;
},{"../../../common/platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js","../../../common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../common/keyCodes.js":"../node_modules/monaco-editor/esm/vs/base/common/keyCodes.js"}],"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeModel = exports.TreeNavigator = exports.Item = exports.ItemRegistry = exports.Lock = exports.LockData = void 0;

var Assert = _interopRequireWildcard(require("../../../common/assert.js"));

var _errors = require("../../../common/errors.js");

var _lifecycle = require("../../../common/lifecycle.js");

var _event = require("../../../common/event.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var LockData =
/** @class */
function () {
  function LockData(item) {
    this._onDispose = new _event.Emitter();
    this.onDispose = this._onDispose.event;
    this._item = item;
  }

  Object.defineProperty(LockData.prototype, "item", {
    get: function () {
      return this._item;
    },
    enumerable: true,
    configurable: true
  });

  LockData.prototype.dispose = function () {
    if (this._onDispose) {
      this._onDispose.fire();

      this._onDispose.dispose();

      this._onDispose = undefined;
    }
  };

  return LockData;
}();

exports.LockData = LockData;

var Lock =
/** @class */
function () {
  function Lock() {
    this.locks = Object.create({});
  }

  Lock.prototype.isLocked = function (item) {
    return !!this.locks[item.id];
  };

  Lock.prototype.run = function (item, fn) {
    var _this = this;

    var lock = this.getLock(item);

    if (lock) {
      return new Promise(function (c, e) {
        _event.Event.once(lock.onDispose)(function () {
          return _this.run(item, fn).then(c, e);
        });
      });
    }

    var result;
    return new Promise(function (c, e) {
      if (item.isDisposed()) {
        return e(new Error('Item is disposed.'));
      }

      var lock = _this.locks[item.id] = new LockData(item);
      result = fn().then(function (r) {
        delete _this.locks[item.id];
        lock.dispose();
        return r;
      }).then(c, e);
      return result;
    });
  };

  Lock.prototype.getLock = function (item) {
    var key;

    for (key in this.locks) {
      var lock = this.locks[key];

      if (item.intersects(lock.item)) {
        return lock;
      }
    }

    return null;
  };

  return Lock;
}();

exports.Lock = Lock;

var ItemRegistry =
/** @class */
function () {
  function ItemRegistry() {
    this._isDisposed = false;
    this._onDidRevealItem = new _event.EventMultiplexer();
    this.onDidRevealItem = this._onDidRevealItem.event;
    this._onExpandItem = new _event.EventMultiplexer();
    this.onExpandItem = this._onExpandItem.event;
    this._onDidExpandItem = new _event.EventMultiplexer();
    this.onDidExpandItem = this._onDidExpandItem.event;
    this._onCollapseItem = new _event.EventMultiplexer();
    this.onCollapseItem = this._onCollapseItem.event;
    this._onDidCollapseItem = new _event.EventMultiplexer();
    this.onDidCollapseItem = this._onDidCollapseItem.event;
    this._onDidAddTraitItem = new _event.EventMultiplexer();
    this.onDidAddTraitItem = this._onDidAddTraitItem.event;
    this._onDidRemoveTraitItem = new _event.EventMultiplexer();
    this.onDidRemoveTraitItem = this._onDidRemoveTraitItem.event;
    this._onDidRefreshItem = new _event.EventMultiplexer();
    this.onDidRefreshItem = this._onDidRefreshItem.event;
    this._onRefreshItemChildren = new _event.EventMultiplexer();
    this.onRefreshItemChildren = this._onRefreshItemChildren.event;
    this._onDidRefreshItemChildren = new _event.EventMultiplexer();
    this.onDidRefreshItemChildren = this._onDidRefreshItemChildren.event;
    this._onDidDisposeItem = new _event.EventMultiplexer();
    this.onDidDisposeItem = this._onDidDisposeItem.event;
    this.items = {};
  }

  ItemRegistry.prototype.register = function (item) {
    Assert.ok(!this.isRegistered(item.id), 'item already registered: ' + item.id);
    var disposable = (0, _lifecycle.combinedDisposable)(this._onDidRevealItem.add(item.onDidReveal), this._onExpandItem.add(item.onExpand), this._onDidExpandItem.add(item.onDidExpand), this._onCollapseItem.add(item.onCollapse), this._onDidCollapseItem.add(item.onDidCollapse), this._onDidAddTraitItem.add(item.onDidAddTrait), this._onDidRemoveTraitItem.add(item.onDidRemoveTrait), this._onDidRefreshItem.add(item.onDidRefresh), this._onRefreshItemChildren.add(item.onRefreshChildren), this._onDidRefreshItemChildren.add(item.onDidRefreshChildren), this._onDidDisposeItem.add(item.onDidDispose));
    this.items[item.id] = {
      item: item,
      disposable: disposable
    };
  };

  ItemRegistry.prototype.deregister = function (item) {
    Assert.ok(this.isRegistered(item.id), 'item not registered: ' + item.id);
    this.items[item.id].disposable.dispose();
    delete this.items[item.id];
  };

  ItemRegistry.prototype.isRegistered = function (id) {
    return this.items.hasOwnProperty(id);
  };

  ItemRegistry.prototype.getItem = function (id) {
    var result = this.items[id];
    return result ? result.item : null;
  };

  ItemRegistry.prototype.dispose = function () {
    this.items = {};

    this._onDidRevealItem.dispose();

    this._onExpandItem.dispose();

    this._onDidExpandItem.dispose();

    this._onCollapseItem.dispose();

    this._onDidCollapseItem.dispose();

    this._onDidAddTraitItem.dispose();

    this._onDidRemoveTraitItem.dispose();

    this._onDidRefreshItem.dispose();

    this._onRefreshItemChildren.dispose();

    this._onDidRefreshItemChildren.dispose();

    this._isDisposed = true;
  };

  ItemRegistry.prototype.isDisposed = function () {
    return this._isDisposed;
  };

  return ItemRegistry;
}();

exports.ItemRegistry = ItemRegistry;

var Item =
/** @class */
function () {
  function Item(id, registry, context, lock, element) {
    this._onDidCreate = new _event.Emitter();
    this._onDidReveal = new _event.Emitter();
    this.onDidReveal = this._onDidReveal.event;
    this._onExpand = new _event.Emitter();
    this.onExpand = this._onExpand.event;
    this._onDidExpand = new _event.Emitter();
    this.onDidExpand = this._onDidExpand.event;
    this._onCollapse = new _event.Emitter();
    this.onCollapse = this._onCollapse.event;
    this._onDidCollapse = new _event.Emitter();
    this.onDidCollapse = this._onDidCollapse.event;
    this._onDidAddTrait = new _event.Emitter();
    this.onDidAddTrait = this._onDidAddTrait.event;
    this._onDidRemoveTrait = new _event.Emitter();
    this.onDidRemoveTrait = this._onDidRemoveTrait.event;
    this._onDidRefresh = new _event.Emitter();
    this.onDidRefresh = this._onDidRefresh.event;
    this._onRefreshChildren = new _event.Emitter();
    this.onRefreshChildren = this._onRefreshChildren.event;
    this._onDidRefreshChildren = new _event.Emitter();
    this.onDidRefreshChildren = this._onDidRefreshChildren.event;
    this._onDidDispose = new _event.Emitter();
    this.onDidDispose = this._onDidDispose.event;
    this.registry = registry;
    this.context = context;
    this.lock = lock;
    this.element = element;
    this.id = id;
    this.registry.register(this);
    this.doesHaveChildren = this.context.dataSource.hasChildren(this.context.tree, this.element);
    this.needsChildrenRefresh = true;
    this.parent = null;
    this.previous = null;
    this.next = null;
    this.firstChild = null;
    this.lastChild = null;
    this.traits = {};
    this.depth = 0;
    this.expanded = !!(this.context.dataSource.shouldAutoexpand && this.context.dataSource.shouldAutoexpand(this.context.tree, element));

    this._onDidCreate.fire(this);

    this.visible = this._isVisible();
    this.height = this._getHeight();
    this._isDisposed = false;
  }

  Item.prototype.getElement = function () {
    return this.element;
  };

  Item.prototype.hasChildren = function () {
    return this.doesHaveChildren;
  };

  Item.prototype.getDepth = function () {
    return this.depth;
  };

  Item.prototype.isVisible = function () {
    return this.visible;
  };

  Item.prototype.setVisible = function (value) {
    this.visible = value;
  };

  Item.prototype.isExpanded = function () {
    return this.expanded;
  };
  /* protected */


  Item.prototype._setExpanded = function (value) {
    this.expanded = value;
  };

  Item.prototype.reveal = function (relativeTop) {
    if (relativeTop === void 0) {
      relativeTop = null;
    }

    var eventData = {
      item: this,
      relativeTop: relativeTop
    };

    this._onDidReveal.fire(eventData);
  };

  Item.prototype.expand = function () {
    var _this = this;

    if (this.isExpanded() || !this.doesHaveChildren || this.lock.isLocked(this)) {
      return Promise.resolve(false);
    }

    var result = this.lock.run(this, function () {
      if (_this.isExpanded() || !_this.doesHaveChildren) {
        return Promise.resolve(false);
      }

      var eventData = {
        item: _this
      };
      var result;

      _this._onExpand.fire(eventData);

      if (_this.needsChildrenRefresh) {
        result = _this.refreshChildren(false, true, true);
      } else {
        result = Promise.resolve(null);
      }

      return result.then(function () {
        _this._setExpanded(true);

        _this._onDidExpand.fire(eventData);

        return true;
      });
    });
    return result.then(function (r) {
      if (_this.isDisposed()) {
        return false;
      } // Auto expand single child folders


      if (_this.context.options.autoExpandSingleChildren && r && _this.firstChild !== null && _this.firstChild === _this.lastChild && _this.firstChild.isVisible()) {
        return _this.firstChild.expand().then(function () {
          return true;
        });
      }

      return r;
    });
  };

  Item.prototype.collapse = function (recursive) {
    var _this = this;

    if (recursive === void 0) {
      recursive = false;
    }

    if (recursive) {
      var collapseChildrenPromise_1 = Promise.resolve(null);
      this.forEachChild(function (child) {
        collapseChildrenPromise_1 = collapseChildrenPromise_1.then(function () {
          return child.collapse(true);
        });
      });
      return collapseChildrenPromise_1.then(function () {
        return _this.collapse(false);
      });
    } else {
      if (!this.isExpanded() || this.lock.isLocked(this)) {
        return Promise.resolve(false);
      }

      return this.lock.run(this, function () {
        var eventData = {
          item: _this
        };

        _this._onCollapse.fire(eventData);

        _this._setExpanded(false);

        _this._onDidCollapse.fire(eventData);

        return Promise.resolve(true);
      });
    }
  };

  Item.prototype.addTrait = function (trait) {
    var eventData = {
      item: this,
      trait: trait
    };
    this.traits[trait] = true;

    this._onDidAddTrait.fire(eventData);
  };

  Item.prototype.removeTrait = function (trait) {
    var eventData = {
      item: this,
      trait: trait
    };
    delete this.traits[trait];

    this._onDidRemoveTrait.fire(eventData);
  };

  Item.prototype.hasTrait = function (trait) {
    return this.traits[trait] || false;
  };

  Item.prototype.getAllTraits = function () {
    var result = [];
    var trait;

    for (trait in this.traits) {
      if (this.traits.hasOwnProperty(trait) && this.traits[trait]) {
        result.push(trait);
      }
    }

    return result;
  };

  Item.prototype.getHeight = function () {
    return this.height;
  };

  Item.prototype.refreshChildren = function (recursive, safe, force) {
    var _this = this;

    if (safe === void 0) {
      safe = false;
    }

    if (force === void 0) {
      force = false;
    }

    if (!force && !this.isExpanded()) {
      var setNeedsChildrenRefresh_1 = function (item) {
        item.needsChildrenRefresh = true;
        item.forEachChild(setNeedsChildrenRefresh_1);
      };

      setNeedsChildrenRefresh_1(this);
      return Promise.resolve(this);
    }

    this.needsChildrenRefresh = false;

    var doRefresh = function () {
      var eventData = {
        item: _this,
        isNested: safe
      };

      _this._onRefreshChildren.fire(eventData);

      var childrenPromise;

      if (_this.doesHaveChildren) {
        childrenPromise = _this.context.dataSource.getChildren(_this.context.tree, _this.element);
      } else {
        childrenPromise = Promise.resolve([]);
      }

      var result = childrenPromise.then(function (elements) {
        if (_this.isDisposed() || _this.registry.isDisposed()) {
          return Promise.resolve(null);
        }

        if (!Array.isArray(elements)) {
          return Promise.reject(new Error('Please return an array of children.'));
        }

        elements = !elements ? [] : elements.slice(0);
        elements = _this.sort(elements);
        var staleItems = {};

        while (_this.firstChild !== null) {
          staleItems[_this.firstChild.id] = _this.firstChild;

          _this.removeChild(_this.firstChild);
        }

        for (var i = 0, len = elements.length; i < len; i++) {
          var element = elements[i];

          var id = _this.context.dataSource.getId(_this.context.tree, element);

          var item = staleItems[id] || new Item(id, _this.registry, _this.context, _this.lock, element);
          item.element = element;

          if (recursive) {
            item.needsChildrenRefresh = recursive;
          }

          delete staleItems[id];

          _this.addChild(item);
        }

        for (var staleItemId in staleItems) {
          if (staleItems.hasOwnProperty(staleItemId)) {
            staleItems[staleItemId].dispose();
          }
        }

        if (recursive) {
          return Promise.all(_this.mapEachChild(function (child) {
            return child.doRefresh(recursive, true);
          }));
        } else {
          return Promise.all(_this.mapEachChild(function (child) {
            if (child.isExpanded() && child.needsChildrenRefresh) {
              return child.doRefresh(recursive, true);
            } else {
              child.updateVisibility();
              return Promise.resolve(null);
            }
          }));
        }
      });
      return result.then(undefined, _errors.onUnexpectedError).then(function () {
        return _this._onDidRefreshChildren.fire(eventData);
      });
    };

    return safe ? doRefresh() : this.lock.run(this, doRefresh);
  };

  Item.prototype.doRefresh = function (recursive, safe) {
    if (safe === void 0) {
      safe = false;
    }

    this.doesHaveChildren = this.context.dataSource.hasChildren(this.context.tree, this.element);
    this.height = this._getHeight();
    this.updateVisibility();

    this._onDidRefresh.fire(this);

    return this.refreshChildren(recursive, safe);
  };

  Item.prototype.updateVisibility = function () {
    this.setVisible(this._isVisible());
  };

  Item.prototype.refresh = function (recursive) {
    return this.doRefresh(recursive);
  };

  Item.prototype.getNavigator = function () {
    return new TreeNavigator(this);
  };

  Item.prototype.intersects = function (other) {
    return this.isAncestorOf(other) || other.isAncestorOf(this);
  };

  Item.prototype.isAncestorOf = function (startItem) {
    var item = startItem;

    while (item) {
      if (item.id === this.id) {
        return true;
      }

      item = item.parent;
    }

    return false;
  };

  Item.prototype.addChild = function (item, afterItem) {
    if (afterItem === void 0) {
      afterItem = this.lastChild;
    }

    var isEmpty = this.firstChild === null;
    var atHead = afterItem === null;
    var atTail = afterItem === this.lastChild;

    if (isEmpty) {
      this.firstChild = this.lastChild = item;
      item.next = item.previous = null;
    } else if (atHead) {
      if (!this.firstChild) {
        throw new Error('Invalid tree state');
      }

      this.firstChild.previous = item;
      item.next = this.firstChild;
      item.previous = null;
      this.firstChild = item;
    } else if (atTail) {
      if (!this.lastChild) {
        throw new Error('Invalid tree state');
      }

      this.lastChild.next = item;
      item.next = null;
      item.previous = this.lastChild;
      this.lastChild = item;
    } else {
      item.previous = afterItem;

      if (!afterItem) {
        throw new Error('Invalid tree state');
      }

      item.next = afterItem.next;

      if (!afterItem.next) {
        throw new Error('Invalid tree state');
      }

      afterItem.next.previous = item;
      afterItem.next = item;
    }

    item.parent = this;
    item.depth = this.depth + 1;
  };

  Item.prototype.removeChild = function (item) {
    var isFirstChild = this.firstChild === item;
    var isLastChild = this.lastChild === item;

    if (isFirstChild && isLastChild) {
      this.firstChild = this.lastChild = null;
    } else if (isFirstChild) {
      if (!item.next) {
        throw new Error('Invalid tree state');
      }

      item.next.previous = null;
      this.firstChild = item.next;
    } else if (isLastChild) {
      if (!item.previous) {
        throw new Error('Invalid tree state');
      }

      item.previous.next = null;
      this.lastChild = item.previous;
    } else {
      if (!item.next) {
        throw new Error('Invalid tree state');
      }

      item.next.previous = item.previous;

      if (!item.previous) {
        throw new Error('Invalid tree state');
      }

      item.previous.next = item.next;
    }

    item.parent = null;
    item.depth = NaN;
  };

  Item.prototype.forEachChild = function (fn) {
    var child = this.firstChild;
    var next;

    while (child) {
      next = child.next;
      fn(child);
      child = next;
    }
  };

  Item.prototype.mapEachChild = function (fn) {
    var result = [];
    this.forEachChild(function (child) {
      result.push(fn(child));
    });
    return result;
  };

  Item.prototype.sort = function (elements) {
    var _this = this;

    var sorter = this.context.sorter;

    if (sorter) {
      return elements.sort(function (element, otherElement) {
        return sorter.compare(_this.context.tree, element, otherElement);
      });
    }

    return elements;
  };
  /* protected */


  Item.prototype._getHeight = function () {
    if (!this.context.renderer) {
      return 0;
    }

    return this.context.renderer.getHeight(this.context.tree, this.element);
  };
  /* protected */


  Item.prototype._isVisible = function () {
    if (!this.context.filter) {
      return false;
    }

    return this.context.filter.isVisible(this.context.tree, this.element);
  };

  Item.prototype.isDisposed = function () {
    return this._isDisposed;
  };

  Item.prototype.dispose = function () {
    this.forEachChild(function (child) {
      return child.dispose();
    });
    this.parent = null;
    this.previous = null;
    this.next = null;
    this.firstChild = null;
    this.lastChild = null;

    this._onDidDispose.fire(this);

    this.registry.deregister(this);

    this._onDidCreate.dispose();

    this._onDidReveal.dispose();

    this._onExpand.dispose();

    this._onDidExpand.dispose();

    this._onCollapse.dispose();

    this._onDidCollapse.dispose();

    this._onDidAddTrait.dispose();

    this._onDidRemoveTrait.dispose();

    this._onDidRefresh.dispose();

    this._onRefreshChildren.dispose();

    this._onDidRefreshChildren.dispose();

    this._onDidDispose.dispose();

    this._isDisposed = true;
  };

  return Item;
}();

exports.Item = Item;

var RootItem =
/** @class */
function (_super) {
  __extends(RootItem, _super);

  function RootItem(id, registry, context, lock, element) {
    return _super.call(this, id, registry, context, lock, element) || this;
  }

  RootItem.prototype.isVisible = function () {
    return false;
  };

  RootItem.prototype.setVisible = function (value) {// no-op
  };

  RootItem.prototype.isExpanded = function () {
    return true;
  };
  /* protected */


  RootItem.prototype._setExpanded = function (value) {// no-op
  };
  /* protected */


  RootItem.prototype._getHeight = function () {
    return 0;
  };
  /* protected */


  RootItem.prototype._isVisible = function () {
    return false;
  };

  return RootItem;
}(Item);

var TreeNavigator =
/** @class */
function () {
  function TreeNavigator(item, subTreeOnly) {
    if (subTreeOnly === void 0) {
      subTreeOnly = true;
    }

    this.item = item;
    this.start = subTreeOnly ? item : null;
  }

  TreeNavigator.lastDescendantOf = function (item) {
    if (!item) {
      return null;
    }

    if (item instanceof RootItem) {
      return TreeNavigator.lastDescendantOf(item.lastChild);
    }

    if (!item.isVisible()) {
      return TreeNavigator.lastDescendantOf(item.previous);
    }

    if (!item.isExpanded() || item.lastChild === null) {
      return item;
    }

    return TreeNavigator.lastDescendantOf(item.lastChild);
  };

  TreeNavigator.prototype.current = function () {
    return this.item || null;
  };

  TreeNavigator.prototype.next = function () {
    if (this.item) {
      do {
        if ((this.item instanceof RootItem || this.item.isVisible() && this.item.isExpanded()) && this.item.firstChild) {
          this.item = this.item.firstChild;
        } else if (this.item === this.start) {
          this.item = null;
        } else {
          // select next brother, next uncle, next great-uncle, etc...
          while (this.item && this.item !== this.start && !this.item.next) {
            this.item = this.item.parent;
          }

          if (this.item === this.start) {
            this.item = null;
          }

          this.item = !this.item ? null : this.item.next;
        }
      } while (this.item && !this.item.isVisible());
    }

    return this.item || null;
  };

  TreeNavigator.prototype.previous = function () {
    if (this.item) {
      do {
        var previous = TreeNavigator.lastDescendantOf(this.item.previous);

        if (previous) {
          this.item = previous;
        } else if (this.item.parent && this.item.parent !== this.start && this.item.parent.isVisible()) {
          this.item = this.item.parent;
        } else {
          this.item = null;
        }
      } while (this.item && !this.item.isVisible());
    }

    return this.item || null;
  };

  TreeNavigator.prototype.parent = function () {
    if (this.item) {
      var parent_1 = this.item.parent;

      if (parent_1 && parent_1 !== this.start && parent_1.isVisible()) {
        this.item = parent_1;
      } else {
        this.item = null;
      }
    }

    return this.item || null;
  };

  TreeNavigator.prototype.first = function () {
    this.item = this.start;
    this.next();
    return this.item || null;
  };

  TreeNavigator.prototype.last = function () {
    return TreeNavigator.lastDescendantOf(this.start);
  };

  return TreeNavigator;
}();

exports.TreeNavigator = TreeNavigator;

var TreeModel =
/** @class */
function () {
  function TreeModel(context) {
    this.registry = new ItemRegistry();
    this.registryDisposable = _lifecycle.Disposable.None;
    this._onSetInput = new _event.Emitter();
    this.onSetInput = this._onSetInput.event;
    this._onDidSetInput = new _event.Emitter();
    this.onDidSetInput = this._onDidSetInput.event;
    this._onRefresh = new _event.Emitter();
    this.onRefresh = this._onRefresh.event;
    this._onDidRefresh = new _event.Emitter();
    this.onDidRefresh = this._onDidRefresh.event;
    this._onDidHighlight = new _event.Emitter();
    this.onDidHighlight = this._onDidHighlight.event;
    this._onDidSelect = new _event.Emitter();
    this.onDidSelect = this._onDidSelect.event;
    this._onDidFocus = new _event.Emitter();
    this.onDidFocus = this._onDidFocus.event;
    this._onDidRevealItem = new _event.Relay();
    this.onDidRevealItem = this._onDidRevealItem.event;
    this._onExpandItem = new _event.Relay();
    this.onExpandItem = this._onExpandItem.event;
    this._onDidExpandItem = new _event.Relay();
    this.onDidExpandItem = this._onDidExpandItem.event;
    this._onCollapseItem = new _event.Relay();
    this.onCollapseItem = this._onCollapseItem.event;
    this._onDidCollapseItem = new _event.Relay();
    this.onDidCollapseItem = this._onDidCollapseItem.event;
    this._onDidAddTraitItem = new _event.Relay();
    this.onDidAddTraitItem = this._onDidAddTraitItem.event;
    this._onDidRemoveTraitItem = new _event.Relay();
    this.onDidRemoveTraitItem = this._onDidRemoveTraitItem.event;
    this._onDidRefreshItem = new _event.Relay();
    this.onDidRefreshItem = this._onDidRefreshItem.event;
    this._onRefreshItemChildren = new _event.Relay();
    this.onRefreshItemChildren = this._onRefreshItemChildren.event;
    this._onDidRefreshItemChildren = new _event.Relay();
    this.onDidRefreshItemChildren = this._onDidRefreshItemChildren.event;
    this._onDidDisposeItem = new _event.Relay();
    this.context = context;
    this.input = null;
    this.traitsToItems = {};
  }

  TreeModel.prototype.setInput = function (element) {
    var _this = this;

    var eventData = {
      item: this.input
    };

    this._onSetInput.fire(eventData);

    this.setSelection([]);
    this.setFocus();
    this.setHighlight();
    this.lock = new Lock();

    if (this.input) {
      this.input.dispose();
    }

    if (this.registry) {
      this.registry.dispose();
      this.registryDisposable.dispose();
    }

    this.registry = new ItemRegistry();
    this._onDidRevealItem.input = this.registry.onDidRevealItem;
    this._onExpandItem.input = this.registry.onExpandItem;
    this._onDidExpandItem.input = this.registry.onDidExpandItem;
    this._onCollapseItem.input = this.registry.onCollapseItem;
    this._onDidCollapseItem.input = this.registry.onDidCollapseItem;
    this._onDidAddTraitItem.input = this.registry.onDidAddTraitItem;
    this._onDidRemoveTraitItem.input = this.registry.onDidRemoveTraitItem;
    this._onDidRefreshItem.input = this.registry.onDidRefreshItem;
    this._onRefreshItemChildren.input = this.registry.onRefreshItemChildren;
    this._onDidRefreshItemChildren.input = this.registry.onDidRefreshItemChildren;
    this._onDidDisposeItem.input = this.registry.onDidDisposeItem;
    this.registryDisposable = this.registry.onDidDisposeItem(function (item) {
      return item.getAllTraits().forEach(function (trait) {
        return delete _this.traitsToItems[trait][item.id];
      });
    });
    var id = this.context.dataSource.getId(this.context.tree, element);
    this.input = new RootItem(id, this.registry, this.context, this.lock, element);
    eventData = {
      item: this.input
    };

    this._onDidSetInput.fire(eventData);

    return this.refresh(this.input);
  };

  TreeModel.prototype.getInput = function () {
    return this.input ? this.input.getElement() : null;
  };

  TreeModel.prototype.refresh = function (element, recursive) {
    var _this = this;

    if (element === void 0) {
      element = null;
    }

    if (recursive === void 0) {
      recursive = true;
    }

    var item = this.getItem(element);

    if (!item) {
      return Promise.resolve(null);
    }

    var eventData = {
      item: item,
      recursive: recursive
    };

    this._onRefresh.fire(eventData);

    return item.refresh(recursive).then(function () {
      _this._onDidRefresh.fire(eventData);
    });
  };

  TreeModel.prototype.expand = function (element) {
    var item = this.getItem(element);

    if (!item) {
      return Promise.resolve(false);
    }

    return item.expand();
  };

  TreeModel.prototype.collapse = function (element, recursive) {
    if (recursive === void 0) {
      recursive = false;
    }

    var item = this.getItem(element);

    if (!item) {
      return Promise.resolve(false);
    }

    return item.collapse(recursive);
  };

  TreeModel.prototype.toggleExpansion = function (element, recursive) {
    if (recursive === void 0) {
      recursive = false;
    }

    return this.isExpanded(element) ? this.collapse(element, recursive) : this.expand(element);
  };

  TreeModel.prototype.isExpanded = function (element) {
    var item = this.getItem(element);

    if (!item) {
      return false;
    }

    return item.isExpanded();
  };

  TreeModel.prototype.reveal = function (element, relativeTop) {
    var _this = this;

    if (relativeTop === void 0) {
      relativeTop = null;
    }

    return this.resolveUnknownParentChain(element).then(function (chain) {
      var result = Promise.resolve(null);
      chain.forEach(function (e) {
        result = result.then(function () {
          return _this.expand(e);
        });
      });
      return result;
    }).then(function () {
      var item = _this.getItem(element);

      if (item) {
        return item.reveal(relativeTop);
      }
    });
  };

  TreeModel.prototype.resolveUnknownParentChain = function (element) {
    var _this = this;

    return this.context.dataSource.getParent(this.context.tree, element).then(function (parent) {
      if (!parent) {
        return Promise.resolve([]);
      }

      return _this.resolveUnknownParentChain(parent).then(function (result) {
        result.push(parent);
        return result;
      });
    });
  };

  TreeModel.prototype.setHighlight = function (element, eventPayload) {
    this.setTraits('highlighted', element ? [element] : []);
    var eventData = {
      highlight: this.getHighlight(),
      payload: eventPayload
    };

    this._onDidHighlight.fire(eventData);
  };

  TreeModel.prototype.getHighlight = function (includeHidden) {
    if (includeHidden === void 0) {
      includeHidden = false;
    }

    var result = this.getElementsWithTrait('highlighted', includeHidden);
    return result.length === 0 ? null : result[0];
  };

  TreeModel.prototype.setSelection = function (elements, eventPayload) {
    this.setTraits('selected', elements);
    var eventData = {
      selection: this.getSelection(),
      payload: eventPayload
    };

    this._onDidSelect.fire(eventData);
  };

  TreeModel.prototype.getSelection = function (includeHidden) {
    if (includeHidden === void 0) {
      includeHidden = false;
    }

    return this.getElementsWithTrait('selected', includeHidden);
  };

  TreeModel.prototype.setFocus = function (element, eventPayload) {
    this.setTraits('focused', element ? [element] : []);
    var eventData = {
      focus: this.getFocus(),
      payload: eventPayload
    };

    this._onDidFocus.fire(eventData);
  };

  TreeModel.prototype.getFocus = function (includeHidden) {
    if (includeHidden === void 0) {
      includeHidden = false;
    }

    var result = this.getElementsWithTrait('focused', includeHidden);
    return result.length === 0 ? null : result[0];
  };

  TreeModel.prototype.focusNext = function (count, eventPayload) {
    if (count === void 0) {
      count = 1;
    }

    var item = this.getFocus() || this.input;
    var nextItem;
    var nav = this.getNavigator(item, false);

    for (var i = 0; i < count; i++) {
      nextItem = nav.next();

      if (!nextItem) {
        break;
      }

      item = nextItem;
    }

    this.setFocus(item, eventPayload);
  };

  TreeModel.prototype.focusPrevious = function (count, eventPayload) {
    if (count === void 0) {
      count = 1;
    }

    var item = this.getFocus() || this.input;
    var previousItem;
    var nav = this.getNavigator(item, false);

    for (var i = 0; i < count; i++) {
      previousItem = nav.previous();

      if (!previousItem) {
        break;
      }

      item = previousItem;
    }

    this.setFocus(item, eventPayload);
  };

  TreeModel.prototype.focusParent = function (eventPayload) {
    var item = this.getFocus() || this.input;
    var nav = this.getNavigator(item, false);
    var parent = nav.parent();

    if (parent) {
      this.setFocus(parent, eventPayload);
    }
  };

  TreeModel.prototype.focusFirstChild = function (eventPayload) {
    var item = this.getItem(this.getFocus() || this.input);
    var nav = this.getNavigator(item, false);
    var next = nav.next();
    var parent = nav.parent();

    if (parent === item) {
      this.setFocus(next, eventPayload);
    }
  };

  TreeModel.prototype.focusFirst = function (eventPayload, from) {
    this.focusNth(0, eventPayload, from);
  };

  TreeModel.prototype.focusNth = function (index, eventPayload, from) {
    var navItem = this.getParent(from);
    var nav = this.getNavigator(navItem);
    var item = nav.first();

    for (var i = 0; i < index; i++) {
      item = nav.next();
    }

    if (item) {
      this.setFocus(item, eventPayload);
    }
  };

  TreeModel.prototype.focusLast = function (eventPayload, from) {
    var navItem = this.getParent(from);
    var item;

    if (from && navItem) {
      item = navItem.lastChild;
    } else {
      var nav = this.getNavigator(navItem);
      item = nav.last();
    }

    if (item) {
      this.setFocus(item, eventPayload);
    }
  };

  TreeModel.prototype.getParent = function (from) {
    if (from) {
      var fromItem = this.getItem(from);

      if (fromItem && fromItem.parent) {
        return fromItem.parent;
      }
    }

    return this.getItem(this.input);
  };

  TreeModel.prototype.getNavigator = function (element, subTreeOnly) {
    if (element === void 0) {
      element = null;
    }

    if (subTreeOnly === void 0) {
      subTreeOnly = true;
    }

    return new TreeNavigator(this.getItem(element), subTreeOnly);
  };

  TreeModel.prototype.getItem = function (element) {
    if (element === void 0) {
      element = null;
    }

    if (element === null) {
      return this.input;
    } else if (element instanceof Item) {
      return element;
    } else if (typeof element === 'string') {
      return this.registry.getItem(element);
    } else {
      return this.registry.getItem(this.context.dataSource.getId(this.context.tree, element));
    }
  };

  TreeModel.prototype.removeTraits = function (trait, elements) {
    var items = this.traitsToItems[trait] || {};
    var item;
    var id;

    if (elements.length === 0) {
      for (id in items) {
        if (items.hasOwnProperty(id)) {
          item = items[id];
          item.removeTrait(trait);
        }
      }

      delete this.traitsToItems[trait];
    } else {
      for (var i = 0, len = elements.length; i < len; i++) {
        item = this.getItem(elements[i]);

        if (item) {
          item.removeTrait(trait);
          delete items[item.id];
        }
      }
    }
  };

  TreeModel.prototype.setTraits = function (trait, elements) {
    if (elements.length === 0) {
      this.removeTraits(trait, elements);
    } else {
      var items = {};
      var item = void 0;

      for (var i = 0, len = elements.length; i < len; i++) {
        item = this.getItem(elements[i]);

        if (item) {
          items[item.id] = item;
        }
      }

      var traitItems = this.traitsToItems[trait] || {};
      var itemsToRemoveTrait = [];
      var id = void 0;

      for (id in traitItems) {
        if (traitItems.hasOwnProperty(id)) {
          if (items.hasOwnProperty(id)) {
            delete items[id];
          } else {
            itemsToRemoveTrait.push(traitItems[id]);
          }
        }
      }

      for (var i = 0, len = itemsToRemoveTrait.length; i < len; i++) {
        item = itemsToRemoveTrait[i];
        item.removeTrait(trait);
        delete traitItems[item.id];
      }

      for (id in items) {
        if (items.hasOwnProperty(id)) {
          item = items[id];
          item.addTrait(trait);
          traitItems[id] = item;
        }
      }

      this.traitsToItems[trait] = traitItems;
    }
  };

  TreeModel.prototype.getElementsWithTrait = function (trait, includeHidden) {
    var elements = [];
    var items = this.traitsToItems[trait] || {};
    var id;

    for (id in items) {
      if (items.hasOwnProperty(id) && (items[id].isVisible() || includeHidden)) {
        elements.push(items[id].getElement());
      }
    }

    return elements;
  };

  TreeModel.prototype.dispose = function () {
    this.registry.dispose();

    this._onSetInput.dispose();

    this._onDidSetInput.dispose();

    this._onRefresh.dispose();

    this._onDidRefresh.dispose();

    this._onDidHighlight.dispose();

    this._onDidSelect.dispose();

    this._onDidFocus.dispose();

    this._onDidRevealItem.dispose();

    this._onExpandItem.dispose();

    this._onDidExpandItem.dispose();

    this._onCollapseItem.dispose();

    this._onDidCollapseItem.dispose();

    this._onDidAddTraitItem.dispose();

    this._onDidRemoveTraitItem.dispose();

    this._onDidRefreshItem.dispose();

    this._onRefreshItemChildren.dispose();

    this._onDidRefreshItemChildren.dispose();

    this._onDidDisposeItem.dispose();
  };

  return TreeModel;
}();

exports.TreeModel = TreeModel;
},{"../../../common/assert.js":"../node_modules/monaco-editor/esm/vs/base/common/assert.js","../../../common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js"}],"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeDnd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DesktopDragAndDropData = exports.ExternalElementsDragAndDropData = exports.ElementsDragAndDropData = void 0;

var ElementsDragAndDropData =
/** @class */
function () {
  function ElementsDragAndDropData(elements) {
    this.elements = elements;
  }

  ElementsDragAndDropData.prototype.update = function (dataTransfer) {// no-op
  };

  ElementsDragAndDropData.prototype.getData = function () {
    return this.elements;
  };

  return ElementsDragAndDropData;
}();

exports.ElementsDragAndDropData = ElementsDragAndDropData;

var ExternalElementsDragAndDropData =
/** @class */
function () {
  function ExternalElementsDragAndDropData(elements) {
    this.elements = elements;
  }

  ExternalElementsDragAndDropData.prototype.update = function (dataTransfer) {// no-op
  };

  ExternalElementsDragAndDropData.prototype.getData = function () {
    return this.elements;
  };

  return ExternalElementsDragAndDropData;
}();

exports.ExternalElementsDragAndDropData = ExternalElementsDragAndDropData;

var DesktopDragAndDropData =
/** @class */
function () {
  function DesktopDragAndDropData() {
    this.types = [];
    this.files = [];
  }

  DesktopDragAndDropData.prototype.update = function (dataTransfer) {
    if (dataTransfer.types) {
      this.types = [];
      Array.prototype.push.apply(this.types, dataTransfer.types);
    }

    if (dataTransfer.files) {
      this.files = [];
      Array.prototype.push.apply(this.files, dataTransfer.files);
      this.files = this.files.filter(function (f) {
        return f.size || f.type;
      });
    }
  };

  DesktopDragAndDropData.prototype.getData = function () {
    return {
      types: this.types,
      files: this.files
    };
  };

  return DesktopDragAndDropData;
}();

exports.DesktopDragAndDropData = DesktopDragAndDropData;
},{}],"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeViewModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeightMap = void 0;

var _iterator = require("../../../common/iterator.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var HeightMap =
/** @class */
function () {
  function HeightMap() {
    this.heightMap = [];
    this.indexes = {};
  }

  HeightMap.prototype.getContentHeight = function () {
    var last = this.heightMap[this.heightMap.length - 1];
    return !last ? 0 : last.top + last.height;
  };

  HeightMap.prototype.onInsertItems = function (iterator, afterItemId) {
    if (afterItemId === void 0) {
      afterItemId = null;
    }

    var item = null;
    var viewItem;
    var i, j;
    var totalSize;
    var sizeDiff = 0;

    if (afterItemId === null) {
      i = 0;
      totalSize = 0;
    } else {
      i = this.indexes[afterItemId] + 1;
      viewItem = this.heightMap[i - 1];

      if (!viewItem) {
        console.error('view item doesnt exist');
        return undefined;
      }

      totalSize = viewItem.top + viewItem.height;
    }

    var boundSplice = this.heightMap.splice.bind(this.heightMap, i, 0);
    var itemsToInsert = [];

    while (item = iterator.next()) {
      viewItem = this.createViewItem(item);
      viewItem.top = totalSize + sizeDiff;
      this.indexes[item.id] = i++;
      itemsToInsert.push(viewItem);
      sizeDiff += viewItem.height;
    }

    boundSplice.apply(this.heightMap, itemsToInsert);

    for (j = i; j < this.heightMap.length; j++) {
      viewItem = this.heightMap[j];
      viewItem.top += sizeDiff;
      this.indexes[viewItem.model.id] = j;
    }

    for (j = itemsToInsert.length - 1; j >= 0; j--) {
      this.onInsertItem(itemsToInsert[j]);
    }

    for (j = this.heightMap.length - 1; j >= i; j--) {
      this.onRefreshItem(this.heightMap[j]);
    }

    return sizeDiff;
  };

  HeightMap.prototype.onInsertItem = function (item) {// noop
  }; // Contiguous items


  HeightMap.prototype.onRemoveItems = function (iterator) {
    var itemId = null;
    var viewItem;
    var startIndex = null;
    var i = 0;
    var sizeDiff = 0;

    while (itemId = iterator.next()) {
      i = this.indexes[itemId];
      viewItem = this.heightMap[i];

      if (!viewItem) {
        console.error('view item doesnt exist');
        return;
      }

      sizeDiff -= viewItem.height;
      delete this.indexes[itemId];
      this.onRemoveItem(viewItem);

      if (startIndex === null) {
        startIndex = i;
      }
    }

    if (sizeDiff === 0 || startIndex === null) {
      return;
    }

    this.heightMap.splice(startIndex, i - startIndex + 1);

    for (i = startIndex; i < this.heightMap.length; i++) {
      viewItem = this.heightMap[i];
      viewItem.top += sizeDiff;
      this.indexes[viewItem.model.id] = i;
      this.onRefreshItem(viewItem);
    }
  };

  HeightMap.prototype.onRemoveItem = function (item) {// noop
  };

  HeightMap.prototype.onRefreshItemSet = function (items) {
    var _this = this;

    var sortedItems = items.sort(function (a, b) {
      return _this.indexes[a.id] - _this.indexes[b.id];
    });
    this.onRefreshItems(new _iterator.ArrayIterator(sortedItems));
  }; // Ordered, but not necessarily contiguous items


  HeightMap.prototype.onRefreshItems = function (iterator) {
    var item = null;
    var viewItem;
    var newHeight;
    var i,
        j = null;
    var cummDiff = 0;

    while (item = iterator.next()) {
      i = this.indexes[item.id];

      for (; cummDiff !== 0 && j !== null && j < i; j++) {
        viewItem = this.heightMap[j];
        viewItem.top += cummDiff;
        this.onRefreshItem(viewItem);
      }

      viewItem = this.heightMap[i];
      newHeight = item.getHeight();
      viewItem.top += cummDiff;
      cummDiff += newHeight - viewItem.height;
      viewItem.height = newHeight;
      this.onRefreshItem(viewItem, true);
      j = i + 1;
    }

    if (cummDiff !== 0 && j !== null) {
      for (; j < this.heightMap.length; j++) {
        viewItem = this.heightMap[j];
        viewItem.top += cummDiff;
        this.onRefreshItem(viewItem);
      }
    }
  };

  HeightMap.prototype.onRefreshItem = function (item, needsRender) {
    if (needsRender === void 0) {
      needsRender = false;
    } // noop

  };

  HeightMap.prototype.indexAt = function (position) {
    var left = 0;
    var right = this.heightMap.length;
    var center;
    var item; // Binary search

    while (left < right) {
      center = Math.floor((left + right) / 2);
      item = this.heightMap[center];

      if (position < item.top) {
        right = center;
      } else if (position >= item.top + item.height) {
        if (left === center) {
          break;
        }

        left = center;
      } else {
        return center;
      }
    }

    return this.heightMap.length;
  };

  HeightMap.prototype.indexAfter = function (position) {
    return Math.min(this.indexAt(position) + 1, this.heightMap.length);
  };

  HeightMap.prototype.itemAtIndex = function (index) {
    return this.heightMap[index];
  };

  HeightMap.prototype.itemAfter = function (item) {
    return this.heightMap[this.indexes[item.model.id] + 1] || null;
  };

  HeightMap.prototype.createViewItem = function (item) {
    throw new Error('not implemented');
  };

  HeightMap.prototype.dispose = function () {
    this.heightMap = [];
    this.indexes = {};
  };

  return HeightMap;
}();

exports.HeightMap = HeightMap;
},{"../../../common/iterator.js":"../node_modules/monaco-editor/esm/vs/base/common/iterator.js"}],"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/tree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KeyboardContextMenuEvent = exports.MouseContextMenuEvent = exports.ContextMenuEvent = void 0;

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var ContextMenuEvent =
/** @class */
function () {
  function ContextMenuEvent(posx, posy, target) {
    this._posx = posx;
    this._posy = posy;
    this._target = target;
  }

  ContextMenuEvent.prototype.preventDefault = function () {// no-op
  };

  ContextMenuEvent.prototype.stopPropagation = function () {// no-op
  };

  Object.defineProperty(ContextMenuEvent.prototype, "target", {
    get: function () {
      return this._target;
    },
    enumerable: true,
    configurable: true
  });
  return ContextMenuEvent;
}();

exports.ContextMenuEvent = ContextMenuEvent;

var MouseContextMenuEvent =
/** @class */
function (_super) {
  __extends(MouseContextMenuEvent, _super);

  function MouseContextMenuEvent(originalEvent) {
    var _this = _super.call(this, originalEvent.posx, originalEvent.posy, originalEvent.target) || this;

    _this.originalEvent = originalEvent;
    return _this;
  }

  MouseContextMenuEvent.prototype.preventDefault = function () {
    this.originalEvent.preventDefault();
  };

  MouseContextMenuEvent.prototype.stopPropagation = function () {
    this.originalEvent.stopPropagation();
  };

  return MouseContextMenuEvent;
}(ContextMenuEvent);

exports.MouseContextMenuEvent = MouseContextMenuEvent;

var KeyboardContextMenuEvent =
/** @class */
function (_super) {
  __extends(KeyboardContextMenuEvent, _super);

  function KeyboardContextMenuEvent(posx, posy, originalEvent) {
    var _this = _super.call(this, posx, posy, originalEvent.target) || this;

    _this.originalEvent = originalEvent;
    return _this;
  }

  KeyboardContextMenuEvent.prototype.preventDefault = function () {
    this.originalEvent.preventDefault();
  };

  KeyboardContextMenuEvent.prototype.stopPropagation = function () {
    this.originalEvent.stopPropagation();
  };

  return KeyboardContextMenuEvent;
}(ContextMenuEvent);

exports.KeyboardContextMenuEvent = KeyboardContextMenuEvent;
},{}],"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeView.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeView = exports.ViewItem = exports.RowCache = void 0;

var Platform = _interopRequireWildcard(require("../../../common/platform.js"));

var Browser = _interopRequireWildcard(require("../../../browser/browser.js"));

var Lifecycle = _interopRequireWildcard(require("../../../common/lifecycle.js"));

var DOM = _interopRequireWildcard(require("../../../browser/dom.js"));

var Diff = _interopRequireWildcard(require("../../../common/diff/diff.js"));

var Touch = _interopRequireWildcard(require("../../../browser/touch.js"));

var strings = _interopRequireWildcard(require("../../../common/strings.js"));

var Mouse = _interopRequireWildcard(require("../../../browser/mouseEvent.js"));

var Keyboard = _interopRequireWildcard(require("../../../browser/keyboardEvent.js"));

var dnd = _interopRequireWildcard(require("./treeDnd.js"));

var _iterator = require("../../../common/iterator.js");

var _scrollableElement = require("../../../browser/ui/scrollbar/scrollableElement.js");

var _treeViewModel = require("./treeViewModel.js");

var _ = _interopRequireWildcard(require("./tree.js"));

var _event = require("../../../common/event.js");

var _dnd = require("../../../browser/dnd.js");

var _treeDefaults = require("./treeDefaults.js");

var _async = require("../../../common/async.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

function removeFromParent(element) {
  try {
    element.parentElement.removeChild(element);
  } catch (e) {// this will throw if this happens due to a blur event, nasty business
  }
}

var RowCache =
/** @class */
function () {
  function RowCache(context) {
    this.context = context;
    this._cache = {
      '': []
    };
  }

  RowCache.prototype.alloc = function (templateId) {
    var result = this.cache(templateId).pop();

    if (!result) {
      var content = document.createElement('div');
      content.className = 'content';
      var row = document.createElement('div');
      row.appendChild(content);
      var templateData = null;

      try {
        templateData = this.context.renderer.renderTemplate(this.context.tree, templateId, content);
      } catch (err) {
        console.error('Tree usage error: exception while rendering template');
        console.error(err);
      }

      result = {
        element: row,
        templateId: templateId,
        templateData: templateData
      };
    }

    return result;
  };

  RowCache.prototype.release = function (templateId, row) {
    removeFromParent(row.element);
    this.cache(templateId).push(row);
  };

  RowCache.prototype.cache = function (templateId) {
    return this._cache[templateId] || (this._cache[templateId] = []);
  };

  RowCache.prototype.garbageCollect = function () {
    var _this = this;

    if (this._cache) {
      Object.keys(this._cache).forEach(function (templateId) {
        _this._cache[templateId].forEach(function (cachedRow) {
          _this.context.renderer.disposeTemplate(_this.context.tree, templateId, cachedRow.templateData);

          cachedRow.element = null;
          cachedRow.templateData = null;
        });

        delete _this._cache[templateId];
      });
    }
  };

  RowCache.prototype.dispose = function () {
    this.garbageCollect();
    this._cache = null;
  };

  return RowCache;
}();

exports.RowCache = RowCache;

var ViewItem =
/** @class */
function () {
  function ViewItem(context, model) {
    var _this = this;

    this.width = 0;
    this.needsRender = false;
    this.uri = null;
    this.unbindDragStart = Lifecycle.Disposable.None;
    this._draggable = false;
    this.context = context;
    this.model = model;
    this.id = this.model.id;
    this.row = null;
    this.top = 0;
    this.height = model.getHeight();
    this._styles = {};
    model.getAllTraits().forEach(function (t) {
      return _this._styles[t] = true;
    });

    if (model.isExpanded()) {
      this.addClass('expanded');
    }
  }

  Object.defineProperty(ViewItem.prototype, "expanded", {
    set: function (value) {
      value ? this.addClass('expanded') : this.removeClass('expanded');
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewItem.prototype, "loading", {
    set: function (value) {
      value ? this.addClass('codicon-loading') : this.removeClass('codicon-loading');
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewItem.prototype, "draggable", {
    get: function () {
      return this._draggable;
    },
    set: function (value) {
      this._draggable = value;
      this.render(true);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewItem.prototype, "dropTarget", {
    set: function (value) {
      value ? this.addClass('drop-target') : this.removeClass('drop-target');
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewItem.prototype, "element", {
    get: function () {
      return this.row && this.row.element;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewItem.prototype, "templateId", {
    get: function () {
      return this._templateId || (this._templateId = this.context.renderer.getTemplateId && this.context.renderer.getTemplateId(this.context.tree, this.model.getElement()));
    },
    enumerable: true,
    configurable: true
  });

  ViewItem.prototype.addClass = function (name) {
    this._styles[name] = true;
    this.render(true);
  };

  ViewItem.prototype.removeClass = function (name) {
    delete this._styles[name]; // is this slow?

    this.render(true);
  };

  ViewItem.prototype.render = function (skipUserRender) {
    var _this = this;

    if (skipUserRender === void 0) {
      skipUserRender = false;
    }

    if (!this.model || !this.element) {
      return;
    }

    var classes = ['monaco-tree-row'];
    classes.push.apply(classes, Object.keys(this._styles));

    if (this.model.hasChildren()) {
      classes.push('has-children');
    }

    this.element.className = classes.join(' ');
    this.element.draggable = this.draggable;
    this.element.style.height = this.height + 'px'; // ARIA

    this.element.setAttribute('role', 'treeitem');
    var accessibility = this.context.accessibilityProvider;
    var ariaLabel = accessibility.getAriaLabel(this.context.tree, this.model.getElement());

    if (ariaLabel) {
      this.element.setAttribute('aria-label', ariaLabel);
    }

    if (accessibility.getPosInSet && accessibility.getSetSize) {
      this.element.setAttribute('aria-setsize', accessibility.getSetSize());
      this.element.setAttribute('aria-posinset', accessibility.getPosInSet(this.context.tree, this.model.getElement()));
    }

    if (this.model.hasTrait('focused')) {
      var base64Id = strings.safeBtoa(this.model.id);
      this.element.setAttribute('aria-selected', 'true');
      this.element.setAttribute('id', base64Id);
    } else {
      this.element.setAttribute('aria-selected', 'false');
      this.element.removeAttribute('id');
    }

    if (this.model.hasChildren()) {
      this.element.setAttribute('aria-expanded', String(!!this._styles['expanded']));
    } else {
      this.element.removeAttribute('aria-expanded');
    }

    this.element.setAttribute('aria-level', String(this.model.getDepth()));

    if (this.context.options.paddingOnRow) {
      this.element.style.paddingLeft = this.context.options.twistiePixels + (this.model.getDepth() - 1) * this.context.options.indentPixels + 'px';
    } else {
      this.element.style.paddingLeft = (this.model.getDepth() - 1) * this.context.options.indentPixels + 'px';
      this.row.element.firstElementChild.style.paddingLeft = this.context.options.twistiePixels + 'px';
    }

    var uri = this.context.dnd.getDragURI(this.context.tree, this.model.getElement());

    if (uri !== this.uri) {
      if (this.unbindDragStart) {
        this.unbindDragStart.dispose();
      }

      if (uri) {
        this.uri = uri;
        this.draggable = true;
        this.unbindDragStart = DOM.addDisposableListener(this.element, 'dragstart', function (e) {
          _this.onDragStart(e);
        });
      } else {
        this.uri = null;
      }
    }

    if (!skipUserRender && this.element) {
      var paddingLeft = 0;

      if (this.context.horizontalScrolling) {
        var style = window.getComputedStyle(this.element);
        paddingLeft = parseFloat(style.paddingLeft);
      }

      if (this.context.horizontalScrolling) {
        this.element.style.width = Browser.isFirefox ? '-moz-fit-content' : 'fit-content';
      }

      try {
        this.context.renderer.renderElement(this.context.tree, this.model.getElement(), this.templateId, this.row.templateData);
      } catch (err) {
        console.error('Tree usage error: exception while rendering element');
        console.error(err);
      }

      if (this.context.horizontalScrolling) {
        this.width = DOM.getContentWidth(this.element) + paddingLeft;
        this.element.style.width = '';
      }
    }
  };

  ViewItem.prototype.insertInDOM = function (container, afterElement) {
    if (!this.row) {
      this.row = this.context.cache.alloc(this.templateId); // used in reverse lookup from HTMLElement to Item

      this.element[TreeView.BINDING] = this;
    }

    if (this.element.parentElement) {
      return;
    }

    if (afterElement === null) {
      container.appendChild(this.element);
    } else {
      try {
        container.insertBefore(this.element, afterElement);
      } catch (e) {
        console.warn('Failed to locate previous tree element');
        container.appendChild(this.element);
      }
    }

    this.render();
  };

  ViewItem.prototype.removeFromDOM = function () {
    if (!this.row) {
      return;
    }

    this.unbindDragStart.dispose();
    this.uri = null;
    this.element[TreeView.BINDING] = null;
    this.context.cache.release(this.templateId, this.row);
    this.row = null;
  };

  ViewItem.prototype.dispose = function () {
    this.row = null;
  };

  return ViewItem;
}();

exports.ViewItem = ViewItem;

var RootViewItem =
/** @class */
function (_super) {
  __extends(RootViewItem, _super);

  function RootViewItem(context, model, wrapper) {
    var _this = _super.call(this, context, model) || this;

    _this.row = {
      element: wrapper,
      templateData: null,
      templateId: null
    };
    return _this;
  }

  RootViewItem.prototype.render = function () {
    if (!this.model || !this.element) {
      return;
    }

    var classes = ['monaco-tree-wrapper'];
    classes.push.apply(classes, Object.keys(this._styles));

    if (this.model.hasChildren()) {
      classes.push('has-children');
    }

    this.element.className = classes.join(' ');
  };

  RootViewItem.prototype.insertInDOM = function (container, afterElement) {// noop
  };

  RootViewItem.prototype.removeFromDOM = function () {// noop
  };

  return RootViewItem;
}(ViewItem);

function reactionEquals(one, other) {
  if (!one && !other) {
    return true;
  } else if (!one || !other) {
    return false;
  } else if (one.accept !== other.accept) {
    return false;
  } else if (one.bubble !== other.bubble) {
    return false;
  } else if (one.effect !== other.effect) {
    return false;
  } else {
    return true;
  }
}

var TreeView =
/** @class */
function (_super) {
  __extends(TreeView, _super);

  function TreeView(context, container) {
    var _this = _super.call(this) || this;

    _this.model = null;
    _this.lastPointerType = '';
    _this.lastClickTimeStamp = 0;
    _this.contentWidthUpdateDelayer = new _async.Delayer(50);
    _this.isRefreshing = false;
    _this.refreshingPreviousChildrenIds = {};
    _this.currentDragAndDropData = null;
    _this.currentDropTarget = null;
    _this.currentDropTargets = null;
    _this.currentDropDisposable = Lifecycle.Disposable.None;
    _this.gestureDisposable = Lifecycle.Disposable.None;
    _this.dragAndDropScrollInterval = null;
    _this.dragAndDropScrollTimeout = null;
    _this.dragAndDropMouseY = null;
    _this.highlightedItemWasDraggable = false;
    _this.onHiddenScrollTop = null;
    _this._onDOMFocus = new _event.Emitter();
    _this.onDOMFocus = _this._onDOMFocus.event;
    _this._onDOMBlur = new _event.Emitter();
    _this._onDidScroll = new _event.Emitter();
    TreeView.counter++;
    _this.instance = TreeView.counter;
    var horizontalScrollMode = typeof context.options.horizontalScrollMode === 'undefined' ? 2
    /* Hidden */
    : context.options.horizontalScrollMode;
    _this.horizontalScrolling = horizontalScrollMode !== 2
    /* Hidden */
    ;
    _this.context = {
      dataSource: context.dataSource,
      renderer: context.renderer,
      controller: context.controller,
      dnd: context.dnd,
      filter: context.filter,
      sorter: context.sorter,
      tree: context.tree,
      accessibilityProvider: context.accessibilityProvider,
      options: context.options,
      cache: new RowCache(context),
      horizontalScrolling: _this.horizontalScrolling
    };
    _this.modelListeners = [];
    _this.viewListeners = [];
    _this.items = {};
    _this.domNode = document.createElement('div');
    _this.domNode.className = "monaco-tree no-focused-item monaco-tree-instance-" + _this.instance; // to allow direct tabbing into the tree instead of first focusing the tree

    _this.domNode.tabIndex = context.options.preventRootFocus ? -1 : 0;
    _this.styleElement = DOM.createStyleSheet(_this.domNode);
    _this.treeStyler = context.styler || new _treeDefaults.DefaultTreestyler(_this.styleElement, "monaco-tree-instance-" + _this.instance); // ARIA

    _this.domNode.setAttribute('role', 'tree');

    if (_this.context.options.ariaLabel) {
      _this.domNode.setAttribute('aria-label', _this.context.options.ariaLabel);
    }

    if (_this.context.options.alwaysFocused) {
      DOM.addClass(_this.domNode, 'focused');
    }

    if (!_this.context.options.paddingOnRow) {
      DOM.addClass(_this.domNode, 'no-row-padding');
    }

    _this.wrapper = document.createElement('div');
    _this.wrapper.className = 'monaco-tree-wrapper';
    _this.scrollableElement = new _scrollableElement.ScrollableElement(_this.wrapper, {
      alwaysConsumeMouseWheel: true,
      horizontal: horizontalScrollMode,
      vertical: typeof context.options.verticalScrollMode !== 'undefined' ? context.options.verticalScrollMode : 1
      /* Auto */
      ,
      useShadows: context.options.useShadows
    });

    _this.scrollableElement.onScroll(function (e) {
      _this.render(e.scrollTop, e.height, e.scrollLeft, e.width, e.scrollWidth);

      _this._onDidScroll.fire();
    });

    if (Browser.isIE) {
      _this.wrapper.style.msTouchAction = 'none';
      _this.wrapper.style.msContentZooming = 'none';
    } else {
      _this.gestureDisposable = Touch.Gesture.addTarget(_this.wrapper);
    }

    _this.rowsContainer = document.createElement('div');
    _this.rowsContainer.className = 'monaco-tree-rows';

    if (context.options.showTwistie) {
      _this.rowsContainer.className += ' show-twisties';
    }

    var focusTracker = DOM.trackFocus(_this.domNode);

    _this.viewListeners.push(focusTracker.onDidFocus(function () {
      return _this.onFocus();
    }));

    _this.viewListeners.push(focusTracker.onDidBlur(function () {
      return _this.onBlur();
    }));

    _this.viewListeners.push(focusTracker);

    _this.viewListeners.push(DOM.addDisposableListener(_this.domNode, 'keydown', function (e) {
      return _this.onKeyDown(e);
    }));

    _this.viewListeners.push(DOM.addDisposableListener(_this.domNode, 'keyup', function (e) {
      return _this.onKeyUp(e);
    }));

    _this.viewListeners.push(DOM.addDisposableListener(_this.domNode, 'mousedown', function (e) {
      return _this.onMouseDown(e);
    }));

    _this.viewListeners.push(DOM.addDisposableListener(_this.domNode, 'mouseup', function (e) {
      return _this.onMouseUp(e);
    }));

    _this.viewListeners.push(DOM.addDisposableListener(_this.wrapper, 'auxclick', function (e) {
      if (e && e.button === 1) {
        _this.onMouseMiddleClick(e);
      }
    }));

    _this.viewListeners.push(DOM.addDisposableListener(_this.wrapper, 'click', function (e) {
      return _this.onClick(e);
    }));

    _this.viewListeners.push(DOM.addDisposableListener(_this.domNode, 'contextmenu', function (e) {
      return _this.onContextMenu(e);
    }));

    _this.viewListeners.push(DOM.addDisposableListener(_this.wrapper, Touch.EventType.Tap, function (e) {
      return _this.onTap(e);
    }));

    _this.viewListeners.push(DOM.addDisposableListener(_this.wrapper, Touch.EventType.Change, function (e) {
      return _this.onTouchChange(e);
    }));

    if (Browser.isIE) {
      _this.viewListeners.push(DOM.addDisposableListener(_this.wrapper, 'MSPointerDown', function (e) {
        return _this.onMsPointerDown(e);
      }));

      _this.viewListeners.push(DOM.addDisposableListener(_this.wrapper, 'MSGestureTap', function (e) {
        return _this.onMsGestureTap(e);
      })); // these events come too fast, we throttle them


      _this.viewListeners.push(DOM.addDisposableThrottledListener(_this.wrapper, 'MSGestureChange', function (e) {
        return _this.onThrottledMsGestureChange(e);
      }, function (lastEvent, event) {
        event.stopPropagation();
        event.preventDefault();
        var result = {
          translationY: event.translationY,
          translationX: event.translationX
        };

        if (lastEvent) {
          result.translationY += lastEvent.translationY;
          result.translationX += lastEvent.translationX;
        }

        return result;
      }));
    }

    _this.viewListeners.push(DOM.addDisposableListener(window, 'dragover', function (e) {
      return _this.onDragOver(e);
    }));

    _this.viewListeners.push(DOM.addDisposableListener(_this.wrapper, 'drop', function (e) {
      return _this.onDrop(e);
    }));

    _this.viewListeners.push(DOM.addDisposableListener(window, 'dragend', function (e) {
      return _this.onDragEnd(e);
    }));

    _this.viewListeners.push(DOM.addDisposableListener(window, 'dragleave', function (e) {
      return _this.onDragOver(e);
    }));

    _this.wrapper.appendChild(_this.rowsContainer);

    _this.domNode.appendChild(_this.scrollableElement.getDomNode());

    container.appendChild(_this.domNode);
    _this.lastRenderTop = 0;
    _this.lastRenderHeight = 0;
    _this.didJustPressContextMenuKey = false;
    _this.currentDropTarget = null;
    _this.currentDropTargets = [];
    _this.shouldInvalidateDropReaction = false;
    _this.dragAndDropScrollInterval = null;
    _this.dragAndDropScrollTimeout = null;

    _this.onRowsChanged();

    _this.layout();

    _this.setupMSGesture();

    _this.applyStyles(context.options);

    return _this;
  }

  TreeView.prototype.applyStyles = function (styles) {
    this.treeStyler.style(styles);
  };

  TreeView.prototype.createViewItem = function (item) {
    return new ViewItem(this.context, item);
  };

  TreeView.prototype.getHTMLElement = function () {
    return this.domNode;
  };

  TreeView.prototype.focus = function () {
    this.domNode.focus();
  };

  TreeView.prototype.isFocused = function () {
    return document.activeElement === this.domNode;
  };

  TreeView.prototype.blur = function () {
    this.domNode.blur();
  };

  TreeView.prototype.setupMSGesture = function () {
    var _this = this;

    if (window.MSGesture) {
      this.msGesture = new MSGesture();
      setTimeout(function () {
        return _this.msGesture.target = _this.wrapper;
      }, 100); // TODO@joh, TODO@IETeam
    }
  };

  TreeView.prototype.isTreeVisible = function () {
    return this.onHiddenScrollTop === null;
  };

  TreeView.prototype.layout = function (height, width) {
    if (!this.isTreeVisible()) {
      return;
    }

    this.viewHeight = height || DOM.getContentHeight(this.wrapper); // render

    this.scrollHeight = this.getContentHeight();

    if (this.horizontalScrolling) {
      this.viewWidth = width || DOM.getContentWidth(this.wrapper);
    }
  };

  TreeView.prototype.render = function (scrollTop, viewHeight, scrollLeft, viewWidth, scrollWidth) {
    var i;
    var stop;
    var renderTop = scrollTop;
    var renderBottom = scrollTop + viewHeight;
    var thisRenderBottom = this.lastRenderTop + this.lastRenderHeight; // when view scrolls down, start rendering from the renderBottom

    for (i = this.indexAfter(renderBottom) - 1, stop = this.indexAt(Math.max(thisRenderBottom, renderTop)); i >= stop; i--) {
      this.insertItemInDOM(this.itemAtIndex(i));
    } // when view scrolls up, start rendering from either this.renderTop or renderBottom


    for (i = Math.min(this.indexAt(this.lastRenderTop), this.indexAfter(renderBottom)) - 1, stop = this.indexAt(renderTop); i >= stop; i--) {
      this.insertItemInDOM(this.itemAtIndex(i));
    } // when view scrolls down, start unrendering from renderTop


    for (i = this.indexAt(this.lastRenderTop), stop = Math.min(this.indexAt(renderTop), this.indexAfter(thisRenderBottom)); i < stop; i++) {
      this.removeItemFromDOM(this.itemAtIndex(i));
    } // when view scrolls up, start unrendering from either renderBottom this.renderTop


    for (i = Math.max(this.indexAfter(renderBottom), this.indexAt(this.lastRenderTop)), stop = this.indexAfter(thisRenderBottom); i < stop; i++) {
      this.removeItemFromDOM(this.itemAtIndex(i));
    }

    var topItem = this.itemAtIndex(this.indexAt(renderTop));

    if (topItem) {
      this.rowsContainer.style.top = topItem.top - renderTop + 'px';
    }

    if (this.horizontalScrolling) {
      this.rowsContainer.style.left = -scrollLeft + 'px';
      this.rowsContainer.style.width = Math.max(scrollWidth, viewWidth) + "px";
    }

    this.lastRenderTop = renderTop;
    this.lastRenderHeight = renderBottom - renderTop;
  };

  TreeView.prototype.setModel = function (newModel) {
    this.releaseModel();
    this.model = newModel;
    this.model.onRefresh(this.onRefreshing, this, this.modelListeners);
    this.model.onDidRefresh(this.onRefreshed, this, this.modelListeners);
    this.model.onSetInput(this.onClearingInput, this, this.modelListeners);
    this.model.onDidSetInput(this.onSetInput, this, this.modelListeners);
    this.model.onDidFocus(this.onModelFocusChange, this, this.modelListeners);
    this.model.onRefreshItemChildren(this.onItemChildrenRefreshing, this, this.modelListeners);
    this.model.onDidRefreshItemChildren(this.onItemChildrenRefreshed, this, this.modelListeners);
    this.model.onDidRefreshItem(this.onItemRefresh, this, this.modelListeners);
    this.model.onExpandItem(this.onItemExpanding, this, this.modelListeners);
    this.model.onDidExpandItem(this.onItemExpanded, this, this.modelListeners);
    this.model.onCollapseItem(this.onItemCollapsing, this, this.modelListeners);
    this.model.onDidRevealItem(this.onItemReveal, this, this.modelListeners);
    this.model.onDidAddTraitItem(this.onItemAddTrait, this, this.modelListeners);
    this.model.onDidRemoveTraitItem(this.onItemRemoveTrait, this, this.modelListeners);
  };

  TreeView.prototype.onRefreshing = function () {
    this.isRefreshing = true;
  };

  TreeView.prototype.onRefreshed = function () {
    this.isRefreshing = false;
    this.onRowsChanged();
  };

  TreeView.prototype.onRowsChanged = function (scrollTop) {
    if (scrollTop === void 0) {
      scrollTop = this.scrollTop;
    }

    if (this.isRefreshing) {
      return;
    }

    this.scrollTop = scrollTop;
    this.updateScrollWidth();
  };

  TreeView.prototype.updateScrollWidth = function () {
    var _this = this;

    if (!this.horizontalScrolling) {
      return;
    }

    this.contentWidthUpdateDelayer.trigger(function () {
      var keys = Object.keys(_this.items);
      var scrollWidth = 0;

      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        scrollWidth = Math.max(scrollWidth, _this.items[key].width);
      }

      _this.scrollWidth = scrollWidth + 10
      /* scrollbar */
      ;
    });
  };

  TreeView.prototype.focusNextPage = function (eventPayload) {
    var _this = this;

    var lastPageIndex = this.indexAt(this.scrollTop + this.viewHeight);
    lastPageIndex = lastPageIndex === 0 ? 0 : lastPageIndex - 1;
    var lastPageElement = this.itemAtIndex(lastPageIndex).model.getElement();
    var currentlyFocusedElement = this.model.getFocus();

    if (currentlyFocusedElement !== lastPageElement) {
      this.model.setFocus(lastPageElement, eventPayload);
    } else {
      var previousScrollTop = this.scrollTop;
      this.scrollTop += this.viewHeight;

      if (this.scrollTop !== previousScrollTop) {
        // Let the scroll event listener run
        setTimeout(function () {
          _this.focusNextPage(eventPayload);
        }, 0);
      }
    }
  };

  TreeView.prototype.focusPreviousPage = function (eventPayload) {
    var _this = this;

    var firstPageIndex;

    if (this.scrollTop === 0) {
      firstPageIndex = this.indexAt(this.scrollTop);
    } else {
      firstPageIndex = this.indexAfter(this.scrollTop - 1);
    }

    var firstPageElement = this.itemAtIndex(firstPageIndex).model.getElement();
    var currentlyFocusedElement = this.model.getFocus();

    if (currentlyFocusedElement !== firstPageElement) {
      this.model.setFocus(firstPageElement, eventPayload);
    } else {
      var previousScrollTop = this.scrollTop;
      this.scrollTop -= this.viewHeight;

      if (this.scrollTop !== previousScrollTop) {
        // Let the scroll event listener run
        setTimeout(function () {
          _this.focusPreviousPage(eventPayload);
        }, 0);
      }
    }
  };

  Object.defineProperty(TreeView.prototype, "viewHeight", {
    get: function () {
      var scrollDimensions = this.scrollableElement.getScrollDimensions();
      return scrollDimensions.height;
    },
    set: function (height) {
      this.scrollableElement.setScrollDimensions({
        height: height
      });
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TreeView.prototype, "scrollHeight", {
    set: function (scrollHeight) {
      scrollHeight = scrollHeight + (this.horizontalScrolling ? 10 : 0);
      this.scrollableElement.setScrollDimensions({
        scrollHeight: scrollHeight
      });
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TreeView.prototype, "viewWidth", {
    get: function () {
      var scrollDimensions = this.scrollableElement.getScrollDimensions();
      return scrollDimensions.width;
    },
    set: function (viewWidth) {
      this.scrollableElement.setScrollDimensions({
        width: viewWidth
      });
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TreeView.prototype, "scrollWidth", {
    set: function (scrollWidth) {
      this.scrollableElement.setScrollDimensions({
        scrollWidth: scrollWidth
      });
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TreeView.prototype, "scrollTop", {
    get: function () {
      var scrollPosition = this.scrollableElement.getScrollPosition();
      return scrollPosition.scrollTop;
    },
    set: function (scrollTop) {
      var scrollHeight = this.getContentHeight() + (this.horizontalScrolling ? 10 : 0);
      this.scrollableElement.setScrollDimensions({
        scrollHeight: scrollHeight
      });
      this.scrollableElement.setScrollPosition({
        scrollTop: scrollTop
      });
    },
    enumerable: true,
    configurable: true
  }); // Events

  TreeView.prototype.onClearingInput = function (e) {
    var item = e.item;

    if (item) {
      this.onRemoveItems(new _iterator.MappedIterator(item.getNavigator(), function (item) {
        return item && item.id;
      }));
      this.onRowsChanged();
    }
  };

  TreeView.prototype.onSetInput = function (e) {
    this.context.cache.garbageCollect();
    this.inputItem = new RootViewItem(this.context, e.item, this.wrapper);
  };

  TreeView.prototype.onItemChildrenRefreshing = function (e) {
    var item = e.item;
    var viewItem = this.items[item.id];

    if (viewItem && this.context.options.showLoading) {
      viewItem.loadingTimer = setTimeout(function () {
        viewItem.loadingTimer = 0;
        viewItem.loading = true;
      }, TreeView.LOADING_DECORATION_DELAY);
    }

    if (!e.isNested) {
      var childrenIds = [];
      var navigator_1 = item.getNavigator();
      var childItem = void 0;

      while (childItem = navigator_1.next()) {
        childrenIds.push(childItem.id);
      }

      this.refreshingPreviousChildrenIds[item.id] = childrenIds;
    }
  };

  TreeView.prototype.onItemChildrenRefreshed = function (e) {
    var _this = this;

    var item = e.item;
    var viewItem = this.items[item.id];

    if (viewItem) {
      if (viewItem.loadingTimer) {
        clearTimeout(viewItem.loadingTimer);
        viewItem.loadingTimer = 0;
      }

      viewItem.loading = false;
    }

    if (!e.isNested) {
      var previousChildrenIds_1 = this.refreshingPreviousChildrenIds[item.id];
      var afterModelItems_1 = [];
      var navigator_2 = item.getNavigator();
      var childItem = void 0;

      while (childItem = navigator_2.next()) {
        afterModelItems_1.push(childItem);
      }

      var skipDiff = Math.abs(previousChildrenIds_1.length - afterModelItems_1.length) > 1000;
      var diff = [];
      var doToInsertItemsAlreadyExist = false;

      if (!skipDiff) {
        var lcs = new Diff.LcsDiff({
          getElements: function () {
            return previousChildrenIds_1;
          }
        }, {
          getElements: function () {
            return afterModelItems_1.map(function (item) {
              return item.id;
            });
          }
        }, null);
        diff = lcs.ComputeDiff(false).changes; // this means that the result of the diff algorithm would result
        // in inserting items that were already registered. this can only
        // happen if the data provider returns bad ids OR if the sorting
        // of the elements has changed

        doToInsertItemsAlreadyExist = diff.some(function (d) {
          if (d.modifiedLength > 0) {
            for (var i = d.modifiedStart, len = d.modifiedStart + d.modifiedLength; i < len; i++) {
              if (_this.items.hasOwnProperty(afterModelItems_1[i].id)) {
                return true;
              }
            }
          }

          return false;
        });
      } // 50 is an optimization number, at some point we're better off
      // just replacing everything


      if (!skipDiff && !doToInsertItemsAlreadyExist && diff.length < 50) {
        for (var _i = 0, diff_1 = diff; _i < diff_1.length; _i++) {
          var diffChange = diff_1[_i];

          if (diffChange.originalLength > 0) {
            this.onRemoveItems(new _iterator.ArrayIterator(previousChildrenIds_1, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength));
          }

          if (diffChange.modifiedLength > 0) {
            var beforeItem = afterModelItems_1[diffChange.modifiedStart - 1] || item;
            beforeItem = beforeItem.getDepth() > 0 ? beforeItem : null;
            this.onInsertItems(new _iterator.ArrayIterator(afterModelItems_1, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength), beforeItem ? beforeItem.id : null);
          }
        }
      } else if (skipDiff || diff.length) {
        this.onRemoveItems(new _iterator.ArrayIterator(previousChildrenIds_1));
        this.onInsertItems(new _iterator.ArrayIterator(afterModelItems_1), item.getDepth() > 0 ? item.id : null);
      }

      if (skipDiff || diff.length) {
        this.onRowsChanged();
      }
    }
  };

  TreeView.prototype.onItemRefresh = function (item) {
    this.onItemsRefresh([item]);
  };

  TreeView.prototype.onItemsRefresh = function (items) {
    var _this = this;

    this.onRefreshItemSet(items.filter(function (item) {
      return _this.items.hasOwnProperty(item.id);
    }));
    this.onRowsChanged();
  };

  TreeView.prototype.onItemExpanding = function (e) {
    var viewItem = this.items[e.item.id];

    if (viewItem) {
      viewItem.expanded = true;
    }
  };

  TreeView.prototype.onItemExpanded = function (e) {
    var item = e.item;
    var viewItem = this.items[item.id];

    if (viewItem) {
      viewItem.expanded = true;
      var height = this.onInsertItems(item.getNavigator(), item.id) || 0;
      var scrollTop = this.scrollTop;

      if (viewItem.top + viewItem.height <= this.scrollTop) {
        scrollTop += height;
      }

      this.onRowsChanged(scrollTop);
    }
  };

  TreeView.prototype.onItemCollapsing = function (e) {
    var item = e.item;
    var viewItem = this.items[item.id];

    if (viewItem) {
      viewItem.expanded = false;
      this.onRemoveItems(new _iterator.MappedIterator(item.getNavigator(), function (item) {
        return item && item.id;
      }));
      this.onRowsChanged();
    }
  };

  TreeView.prototype.onItemReveal = function (e) {
    var item = e.item;
    var relativeTop = e.relativeTop;
    var viewItem = this.items[item.id];

    if (viewItem) {
      if (relativeTop !== null) {
        relativeTop = relativeTop < 0 ? 0 : relativeTop;
        relativeTop = relativeTop > 1 ? 1 : relativeTop; // y = mx + b

        var m = viewItem.height - this.viewHeight;
        this.scrollTop = m * relativeTop + viewItem.top;
      } else {
        var viewItemBottom = viewItem.top + viewItem.height;
        var wrapperBottom = this.scrollTop + this.viewHeight;

        if (viewItem.top < this.scrollTop) {
          this.scrollTop = viewItem.top;
        } else if (viewItemBottom >= wrapperBottom) {
          this.scrollTop = viewItemBottom - this.viewHeight;
        }
      }
    }
  };

  TreeView.prototype.onItemAddTrait = function (e) {
    var item = e.item;
    var trait = e.trait;
    var viewItem = this.items[item.id];

    if (viewItem) {
      viewItem.addClass(trait);
    }

    if (trait === 'highlighted') {
      DOM.addClass(this.domNode, trait); // Ugly Firefox fix: input fields can't be selected if parent nodes are draggable

      if (viewItem) {
        this.highlightedItemWasDraggable = !!viewItem.draggable;

        if (viewItem.draggable) {
          viewItem.draggable = false;
        }
      }
    }
  };

  TreeView.prototype.onItemRemoveTrait = function (e) {
    var item = e.item;
    var trait = e.trait;
    var viewItem = this.items[item.id];

    if (viewItem) {
      viewItem.removeClass(trait);
    }

    if (trait === 'highlighted') {
      DOM.removeClass(this.domNode, trait); // Ugly Firefox fix: input fields can't be selected if parent nodes are draggable

      if (this.highlightedItemWasDraggable) {
        viewItem.draggable = true;
      }

      this.highlightedItemWasDraggable = false;
    }
  };

  TreeView.prototype.onModelFocusChange = function () {
    var focus = this.model && this.model.getFocus();
    DOM.toggleClass(this.domNode, 'no-focused-item', !focus); // ARIA

    if (focus) {
      this.domNode.setAttribute('aria-activedescendant', strings.safeBtoa(this.context.dataSource.getId(this.context.tree, focus)));
    } else {
      this.domNode.removeAttribute('aria-activedescendant');
    }
  }; // HeightMap "events"


  TreeView.prototype.onInsertItem = function (item) {
    var _this = this;

    item.onDragStart = function (e) {
      _this.onDragStart(item, e);
    };

    item.needsRender = true;
    this.refreshViewItem(item);
    this.items[item.id] = item;
  };

  TreeView.prototype.onRefreshItem = function (item, needsRender) {
    if (needsRender === void 0) {
      needsRender = false;
    }

    item.needsRender = item.needsRender || needsRender;
    this.refreshViewItem(item);
  };

  TreeView.prototype.onRemoveItem = function (item) {
    this.removeItemFromDOM(item);
    item.dispose();
    delete this.items[item.id];
  }; // ViewItem refresh


  TreeView.prototype.refreshViewItem = function (item) {
    item.render();

    if (this.shouldBeRendered(item)) {
      this.insertItemInDOM(item);
    } else {
      this.removeItemFromDOM(item);
    }
  }; // DOM Events


  TreeView.prototype.onClick = function (e) {
    if (this.lastPointerType && this.lastPointerType !== 'mouse') {
      return;
    }

    var event = new Mouse.StandardMouseEvent(e);
    var item = this.getItemAround(event.target);

    if (!item) {
      return;
    }

    if (Browser.isIE && Date.now() - this.lastClickTimeStamp < 300) {
      // IE10+ doesn't set the detail property correctly. While IE10 simply
      // counts the number of clicks, IE11 reports always 1. To align with
      // other browser, we set the value to 2 if clicks events come in a 300ms
      // sequence.
      event.detail = 2;
    }

    this.lastClickTimeStamp = Date.now();
    this.context.controller.onClick(this.context.tree, item.model.getElement(), event);
  };

  TreeView.prototype.onMouseMiddleClick = function (e) {
    if (!this.context.controller.onMouseMiddleClick) {
      return;
    }

    var event = new Mouse.StandardMouseEvent(e);
    var item = this.getItemAround(event.target);

    if (!item) {
      return;
    }

    this.context.controller.onMouseMiddleClick(this.context.tree, item.model.getElement(), event);
  };

  TreeView.prototype.onMouseDown = function (e) {
    this.didJustPressContextMenuKey = false;

    if (!this.context.controller.onMouseDown) {
      return;
    }

    if (this.lastPointerType && this.lastPointerType !== 'mouse') {
      return;
    }

    var event = new Mouse.StandardMouseEvent(e);

    if (event.ctrlKey && Platform.isNative && Platform.isMacintosh) {
      return;
    }

    var item = this.getItemAround(event.target);

    if (!item) {
      return;
    }

    this.context.controller.onMouseDown(this.context.tree, item.model.getElement(), event);
  };

  TreeView.prototype.onMouseUp = function (e) {
    if (!this.context.controller.onMouseUp) {
      return;
    }

    if (this.lastPointerType && this.lastPointerType !== 'mouse') {
      return;
    }

    var event = new Mouse.StandardMouseEvent(e);

    if (event.ctrlKey && Platform.isNative && Platform.isMacintosh) {
      return;
    }

    var item = this.getItemAround(event.target);

    if (!item) {
      return;
    }

    this.context.controller.onMouseUp(this.context.tree, item.model.getElement(), event);
  };

  TreeView.prototype.onTap = function (e) {
    var item = this.getItemAround(e.initialTarget);

    if (!item) {
      return;
    }

    this.context.controller.onTap(this.context.tree, item.model.getElement(), e);
  };

  TreeView.prototype.onTouchChange = function (event) {
    event.preventDefault();
    event.stopPropagation();
    this.scrollTop -= event.translationY;
  };

  TreeView.prototype.onContextMenu = function (event) {
    var resultEvent;
    var element;

    if (event instanceof KeyboardEvent || this.didJustPressContextMenuKey) {
      this.didJustPressContextMenuKey = false;
      var keyboardEvent = new Keyboard.StandardKeyboardEvent(event);
      element = this.model.getFocus();
      var position = void 0;

      if (!element) {
        element = this.model.getInput();
        position = DOM.getDomNodePagePosition(this.inputItem.element);
      } else {
        var id = this.context.dataSource.getId(this.context.tree, element);
        var viewItem = this.items[id];
        position = DOM.getDomNodePagePosition(viewItem.element);
      }

      resultEvent = new _.KeyboardContextMenuEvent(position.left + position.width, position.top, keyboardEvent);
    } else {
      var mouseEvent = new Mouse.StandardMouseEvent(event);
      var item = this.getItemAround(mouseEvent.target);

      if (!item) {
        return;
      }

      element = item.model.getElement();
      resultEvent = new _.MouseContextMenuEvent(mouseEvent);
    }

    this.context.controller.onContextMenu(this.context.tree, element, resultEvent);
  };

  TreeView.prototype.onKeyDown = function (e) {
    var event = new Keyboard.StandardKeyboardEvent(e);
    this.didJustPressContextMenuKey = event.keyCode === 58
    /* ContextMenu */
    || event.shiftKey && event.keyCode === 68
    /* F10 */
    ;

    if (event.target && event.target.tagName && event.target.tagName.toLowerCase() === 'input') {
      return; // Ignore event if target is a form input field (avoids browser specific issues)
    }

    if (this.didJustPressContextMenuKey) {
      event.preventDefault();
      event.stopPropagation();
    }

    this.context.controller.onKeyDown(this.context.tree, event);
  };

  TreeView.prototype.onKeyUp = function (e) {
    if (this.didJustPressContextMenuKey) {
      this.onContextMenu(e);
    }

    this.didJustPressContextMenuKey = false;
    this.context.controller.onKeyUp(this.context.tree, new Keyboard.StandardKeyboardEvent(e));
  };

  TreeView.prototype.onDragStart = function (item, e) {
    if (this.model.getHighlight()) {
      return;
    }

    var element = item.model.getElement();
    var selection = this.model.getSelection();
    var elements;

    if (selection.indexOf(element) > -1) {
      elements = selection;
    } else {
      elements = [element];
    }

    e.dataTransfer.effectAllowed = 'copyMove';
    e.dataTransfer.setData(_dnd.DataTransfers.RESOURCES, JSON.stringify([item.uri]));

    if (e.dataTransfer.setDragImage) {
      var label = void 0;

      if (this.context.dnd.getDragLabel) {
        label = this.context.dnd.getDragLabel(this.context.tree, elements);
      } else {
        label = String(elements.length);
      }

      var dragImage_1 = document.createElement('div');
      dragImage_1.className = 'monaco-tree-drag-image';
      dragImage_1.textContent = label;
      document.body.appendChild(dragImage_1);
      e.dataTransfer.setDragImage(dragImage_1, -10, -10);
      setTimeout(function () {
        return document.body.removeChild(dragImage_1);
      }, 0);
    }

    this.currentDragAndDropData = new dnd.ElementsDragAndDropData(elements);
    _dnd.StaticDND.CurrentDragAndDropData = new dnd.ExternalElementsDragAndDropData(elements);
    this.context.dnd.onDragStart(this.context.tree, this.currentDragAndDropData, new Mouse.DragMouseEvent(e));
  };

  TreeView.prototype.setupDragAndDropScrollInterval = function () {
    var _this = this;

    var viewTop = DOM.getTopLeftOffset(this.wrapper).top;

    if (!this.dragAndDropScrollInterval) {
      this.dragAndDropScrollInterval = window.setInterval(function () {
        if (_this.dragAndDropMouseY === null) {
          return;
        }

        var diff = _this.dragAndDropMouseY - viewTop;
        var scrollDiff = 0;
        var upperLimit = _this.viewHeight - 35;

        if (diff < 35) {
          scrollDiff = Math.max(-14, 0.2 * (diff - 35));
        } else if (diff > upperLimit) {
          scrollDiff = Math.min(14, 0.2 * (diff - upperLimit));
        }

        _this.scrollTop += scrollDiff;
      }, 10);
      this.cancelDragAndDropScrollTimeout();
      this.dragAndDropScrollTimeout = window.setTimeout(function () {
        _this.cancelDragAndDropScrollInterval();

        _this.dragAndDropScrollTimeout = null;
      }, 1000);
    }
  };

  TreeView.prototype.cancelDragAndDropScrollInterval = function () {
    if (this.dragAndDropScrollInterval) {
      window.clearInterval(this.dragAndDropScrollInterval);
      this.dragAndDropScrollInterval = null;
    }

    this.cancelDragAndDropScrollTimeout();
  };

  TreeView.prototype.cancelDragAndDropScrollTimeout = function () {
    if (this.dragAndDropScrollTimeout) {
      window.clearTimeout(this.dragAndDropScrollTimeout);
      this.dragAndDropScrollTimeout = null;
    }
  };

  TreeView.prototype.onDragOver = function (e) {
    var _this = this;

    e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)

    var event = new Mouse.DragMouseEvent(e);
    var viewItem = this.getItemAround(event.target);

    if (!viewItem || event.posx === 0 && event.posy === 0 && event.browserEvent.type === DOM.EventType.DRAG_LEAVE) {
      // dragging outside of tree
      if (this.currentDropTarget) {
        // clear previously hovered element feedback
        this.currentDropTargets.forEach(function (i) {
          return i.dropTarget = false;
        });
        this.currentDropTargets = [];
        this.currentDropDisposable.dispose();
      }

      this.cancelDragAndDropScrollInterval();
      this.currentDropTarget = null;
      this.currentDropElement = null;
      this.dragAndDropMouseY = null;
      return false;
    } // dragging inside the tree


    this.setupDragAndDropScrollInterval();
    this.dragAndDropMouseY = event.posy;

    if (!this.currentDragAndDropData) {
      // just started dragging
      if (_dnd.StaticDND.CurrentDragAndDropData) {
        this.currentDragAndDropData = _dnd.StaticDND.CurrentDragAndDropData;
      } else {
        if (!event.dataTransfer.types) {
          return false;
        }

        this.currentDragAndDropData = new dnd.DesktopDragAndDropData();
      }
    }

    this.currentDragAndDropData.update(event.browserEvent.dataTransfer);
    var element;
    var item = viewItem.model;
    var reaction; // check the bubble up behavior

    do {
      element = item ? item.getElement() : this.model.getInput();
      reaction = this.context.dnd.onDragOver(this.context.tree, this.currentDragAndDropData, element, event);

      if (!reaction || reaction.bubble !== 1
      /* BUBBLE_UP */
      ) {
          break;
        }

      item = item && item.parent;
    } while (item);

    if (!item) {
      this.currentDropElement = null;
      return false;
    }

    var canDrop = reaction && reaction.accept;

    if (canDrop) {
      this.currentDropElement = item.getElement();
      event.preventDefault();
      event.dataTransfer.dropEffect = reaction.effect === 0
      /* COPY */
      ? 'copy' : 'move';
    } else {
      this.currentDropElement = null;
    } // item is the model item where drop() should be called
    // can be null


    var currentDropTarget = item.id === this.inputItem.id ? this.inputItem : this.items[item.id];

    if (this.shouldInvalidateDropReaction || this.currentDropTarget !== currentDropTarget || !reactionEquals(this.currentDropElementReaction, reaction)) {
      this.shouldInvalidateDropReaction = false;

      if (this.currentDropTarget) {
        this.currentDropTargets.forEach(function (i) {
          return i.dropTarget = false;
        });
        this.currentDropTargets = [];
        this.currentDropDisposable.dispose();
      }

      this.currentDropTarget = currentDropTarget;
      this.currentDropElementReaction = reaction;

      if (canDrop) {
        // setup hover feedback for drop target
        if (this.currentDropTarget) {
          this.currentDropTarget.dropTarget = true;
          this.currentDropTargets.push(this.currentDropTarget);
        }

        if (reaction.bubble === 0
        /* BUBBLE_DOWN */
        ) {
            var nav = item.getNavigator();
            var child = void 0;

            while (child = nav.next()) {
              viewItem = this.items[child.id];

              if (viewItem) {
                viewItem.dropTarget = true;
                this.currentDropTargets.push(viewItem);
              }
            }
          }

        if (reaction.autoExpand) {
          var timeoutPromise_1 = (0, _async.timeout)(500);
          this.currentDropDisposable = Lifecycle.toDisposable(function () {
            return timeoutPromise_1.cancel();
          });
          timeoutPromise_1.then(function () {
            return _this.context.tree.expand(_this.currentDropElement);
          }).then(function () {
            return _this.shouldInvalidateDropReaction = true;
          });
        }
      }
    }

    return true;
  };

  TreeView.prototype.onDrop = function (e) {
    if (this.currentDropElement) {
      var event_1 = new Mouse.DragMouseEvent(e);
      event_1.preventDefault();
      this.currentDragAndDropData.update(event_1.browserEvent.dataTransfer);
      this.context.dnd.drop(this.context.tree, this.currentDragAndDropData, this.currentDropElement, event_1);
      this.onDragEnd(e);
    }

    this.cancelDragAndDropScrollInterval();
  };

  TreeView.prototype.onDragEnd = function (e) {
    if (this.currentDropTarget) {
      this.currentDropTargets.forEach(function (i) {
        return i.dropTarget = false;
      });
      this.currentDropTargets = [];
    }

    this.currentDropDisposable.dispose();
    this.cancelDragAndDropScrollInterval();
    this.currentDragAndDropData = null;
    _dnd.StaticDND.CurrentDragAndDropData = undefined;
    this.currentDropElement = null;
    this.currentDropTarget = null;
    this.dragAndDropMouseY = null;
  };

  TreeView.prototype.onFocus = function () {
    if (!this.context.options.alwaysFocused) {
      DOM.addClass(this.domNode, 'focused');
    }

    this._onDOMFocus.fire();
  };

  TreeView.prototype.onBlur = function () {
    if (!this.context.options.alwaysFocused) {
      DOM.removeClass(this.domNode, 'focused');
    }

    this.domNode.removeAttribute('aria-activedescendant'); // ARIA

    this._onDOMBlur.fire();
  }; // MS specific DOM Events


  TreeView.prototype.onMsPointerDown = function (event) {
    if (!this.msGesture) {
      return;
    } // Circumvent IE11 breaking change in e.pointerType & TypeScript's stale definitions


    var pointerType = event.pointerType;

    if (pointerType === (event.MSPOINTER_TYPE_MOUSE || 'mouse')) {
      this.lastPointerType = 'mouse';
      return;
    } else if (pointerType === (event.MSPOINTER_TYPE_TOUCH || 'touch')) {
      this.lastPointerType = 'touch';
    } else {
      return;
    }

    event.stopPropagation();
    event.preventDefault();
    this.msGesture.addPointer(event.pointerId);
  };

  TreeView.prototype.onThrottledMsGestureChange = function (event) {
    this.scrollTop -= event.translationY;
  };

  TreeView.prototype.onMsGestureTap = function (event) {
    event.initialTarget = document.elementFromPoint(event.clientX, event.clientY);
    this.onTap(event);
  }; // DOM changes


  TreeView.prototype.insertItemInDOM = function (item) {
    var elementAfter = null;
    var itemAfter = this.itemAfter(item);

    if (itemAfter && itemAfter.element) {
      elementAfter = itemAfter.element;
    }

    item.insertInDOM(this.rowsContainer, elementAfter);
  };

  TreeView.prototype.removeItemFromDOM = function (item) {
    if (!item) {
      return;
    }

    item.removeFromDOM();
  }; // Helpers


  TreeView.prototype.shouldBeRendered = function (item) {
    return item.top < this.lastRenderTop + this.lastRenderHeight && item.top + item.height > this.lastRenderTop;
  };

  TreeView.prototype.getItemAround = function (element) {
    var candidate = this.inputItem;
    var el = element;

    do {
      if (el[TreeView.BINDING]) {
        candidate = el[TreeView.BINDING];
      }

      if (el === this.wrapper || el === this.domNode) {
        return candidate;
      }

      if (el === this.scrollableElement.getDomNode() || el === document.body) {
        return undefined;
      }
    } while (el = el.parentElement);

    return undefined;
  }; // Cleanup


  TreeView.prototype.releaseModel = function () {
    if (this.model) {
      this.modelListeners = Lifecycle.dispose(this.modelListeners);
      this.model = null;
    }
  };

  TreeView.prototype.dispose = function () {
    var _this = this; // TODO@joao: improve


    this.scrollableElement.dispose();
    this.releaseModel();
    this.viewListeners = Lifecycle.dispose(this.viewListeners);

    this._onDOMFocus.dispose();

    this._onDOMBlur.dispose();

    if (this.domNode.parentNode) {
      this.domNode.parentNode.removeChild(this.domNode);
    }

    if (this.items) {
      Object.keys(this.items).forEach(function (key) {
        return _this.items[key].removeFromDOM();
      });
    }

    if (this.context.cache) {
      this.context.cache.dispose();
    }

    this.gestureDisposable.dispose();

    _super.prototype.dispose.call(this);
  };

  TreeView.BINDING = 'monaco-tree-row';
  TreeView.LOADING_DECORATION_DELAY = 800;
  TreeView.counter = 0;
  return TreeView;
}(_treeViewModel.HeightMap);

exports.TreeView = TreeView;
},{"../../../common/platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js","../../../browser/browser.js":"../node_modules/monaco-editor/esm/vs/base/browser/browser.js","../../../common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../common/diff/diff.js":"../node_modules/monaco-editor/esm/vs/base/common/diff/diff.js","../../../browser/touch.js":"../node_modules/monaco-editor/esm/vs/base/browser/touch.js","../../../common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../../browser/mouseEvent.js":"../node_modules/monaco-editor/esm/vs/base/browser/mouseEvent.js","../../../browser/keyboardEvent.js":"../node_modules/monaco-editor/esm/vs/base/browser/keyboardEvent.js","./treeDnd.js":"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeDnd.js","../../../common/iterator.js":"../node_modules/monaco-editor/esm/vs/base/common/iterator.js","../../../browser/ui/scrollbar/scrollableElement.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/scrollbar/scrollableElement.js","./treeViewModel.js":"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeViewModel.js","./tree.js":"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/tree.js","../../../common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../browser/dnd.js":"../node_modules/monaco-editor/esm/vs/base/browser/dnd.js","./treeDefaults.js":"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeDefaults.js","../../../common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js"}],"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeImpl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tree = exports.TreeContext = void 0;

require("./tree.css");

var TreeDefaults = _interopRequireWildcard(require("./treeDefaults.js"));

var Model = _interopRequireWildcard(require("./treeModel.js"));

var View = _interopRequireWildcard(require("./treeView.js"));

var _event = require("../../../common/event.js");

var _color = require("../../../common/color.js");

var _objects = require("../../../common/objects.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var TreeContext =
/** @class */
function () {
  function TreeContext(tree, configuration, options) {
    if (options === void 0) {
      options = {};
    }

    this.tree = tree;
    this.configuration = configuration;
    this.options = options;

    if (!configuration.dataSource) {
      throw new Error('You must provide a Data Source to the tree.');
    }

    this.dataSource = configuration.dataSource;
    this.renderer = configuration.renderer;
    this.controller = configuration.controller || new TreeDefaults.DefaultController({
      clickBehavior: 1
      /* ON_MOUSE_UP */
      ,
      keyboardSupport: typeof options.keyboardSupport !== 'boolean' || options.keyboardSupport
    });
    this.dnd = configuration.dnd || new TreeDefaults.DefaultDragAndDrop();
    this.filter = configuration.filter || new TreeDefaults.DefaultFilter();
    this.sorter = configuration.sorter;
    this.accessibilityProvider = configuration.accessibilityProvider || new TreeDefaults.DefaultAccessibilityProvider();
    this.styler = configuration.styler;
  }

  return TreeContext;
}();

exports.TreeContext = TreeContext;
var defaultStyles = {
  listFocusBackground: _color.Color.fromHex('#073655'),
  listActiveSelectionBackground: _color.Color.fromHex('#0E639C'),
  listActiveSelectionForeground: _color.Color.fromHex('#FFFFFF'),
  listFocusAndSelectionBackground: _color.Color.fromHex('#094771'),
  listFocusAndSelectionForeground: _color.Color.fromHex('#FFFFFF'),
  listInactiveSelectionBackground: _color.Color.fromHex('#3F3F46'),
  listHoverBackground: _color.Color.fromHex('#2A2D2E'),
  listDropBackground: _color.Color.fromHex('#383B3D')
};

var Tree =
/** @class */
function () {
  function Tree(container, configuration, options) {
    if (options === void 0) {
      options = {};
    }

    this._onDidChangeFocus = new _event.Relay();
    this.onDidChangeFocus = this._onDidChangeFocus.event;
    this._onDidChangeSelection = new _event.Relay();
    this.onDidChangeSelection = this._onDidChangeSelection.event;
    this._onHighlightChange = new _event.Relay();
    this._onDidExpandItem = new _event.Relay();
    this._onDidCollapseItem = new _event.Relay();
    this._onDispose = new _event.Emitter();
    this.onDidDispose = this._onDispose.event;
    this.container = container;
    (0, _objects.mixin)(options, defaultStyles, false);
    options.twistiePixels = typeof options.twistiePixels === 'number' ? options.twistiePixels : 32;
    options.showTwistie = options.showTwistie === false ? false : true;
    options.indentPixels = typeof options.indentPixels === 'number' ? options.indentPixels : 12;
    options.alwaysFocused = options.alwaysFocused === true ? true : false;
    options.useShadows = options.useShadows === false ? false : true;
    options.paddingOnRow = options.paddingOnRow === false ? false : true;
    options.showLoading = options.showLoading === false ? false : true;
    this.context = new TreeContext(this, configuration, options);
    this.model = new Model.TreeModel(this.context);
    this.view = new View.TreeView(this.context, this.container);
    this.view.setModel(this.model);
    this._onDidChangeFocus.input = this.model.onDidFocus;
    this._onDidChangeSelection.input = this.model.onDidSelect;
    this._onHighlightChange.input = this.model.onDidHighlight;
    this._onDidExpandItem.input = this.model.onDidExpandItem;
    this._onDidCollapseItem.input = this.model.onDidCollapseItem;
  }

  Tree.prototype.style = function (styles) {
    this.view.applyStyles(styles);
  };

  Object.defineProperty(Tree.prototype, "onDidFocus", {
    get: function () {
      return this.view.onDOMFocus;
    },
    enumerable: true,
    configurable: true
  });

  Tree.prototype.getHTMLElement = function () {
    return this.view.getHTMLElement();
  };

  Tree.prototype.layout = function (height, width) {
    this.view.layout(height, width);
  };

  Tree.prototype.domFocus = function () {
    this.view.focus();
  };

  Tree.prototype.isDOMFocused = function () {
    return this.view.isFocused();
  };

  Tree.prototype.domBlur = function () {
    this.view.blur();
  };

  Tree.prototype.setInput = function (element) {
    return this.model.setInput(element);
  };

  Tree.prototype.getInput = function () {
    return this.model.getInput();
  };

  Tree.prototype.expand = function (element) {
    return this.model.expand(element);
  };

  Tree.prototype.collapse = function (element, recursive) {
    if (recursive === void 0) {
      recursive = false;
    }

    return this.model.collapse(element, recursive);
  };

  Tree.prototype.toggleExpansion = function (element, recursive) {
    if (recursive === void 0) {
      recursive = false;
    }

    return this.model.toggleExpansion(element, recursive);
  };

  Tree.prototype.isExpanded = function (element) {
    return this.model.isExpanded(element);
  };

  Tree.prototype.reveal = function (element, relativeTop) {
    if (relativeTop === void 0) {
      relativeTop = null;
    }

    return this.model.reveal(element, relativeTop);
  };

  Tree.prototype.getHighlight = function () {
    return this.model.getHighlight();
  };

  Tree.prototype.clearHighlight = function (eventPayload) {
    this.model.setHighlight(null, eventPayload);
  };

  Tree.prototype.setSelection = function (elements, eventPayload) {
    this.model.setSelection(elements, eventPayload);
  };

  Tree.prototype.getSelection = function () {
    return this.model.getSelection();
  };

  Tree.prototype.clearSelection = function (eventPayload) {
    this.model.setSelection([], eventPayload);
  };

  Tree.prototype.setFocus = function (element, eventPayload) {
    this.model.setFocus(element, eventPayload);
  };

  Tree.prototype.getFocus = function () {
    return this.model.getFocus();
  };

  Tree.prototype.focusNext = function (count, eventPayload) {
    this.model.focusNext(count, eventPayload);
  };

  Tree.prototype.focusPrevious = function (count, eventPayload) {
    this.model.focusPrevious(count, eventPayload);
  };

  Tree.prototype.focusParent = function (eventPayload) {
    this.model.focusParent(eventPayload);
  };

  Tree.prototype.focusFirstChild = function (eventPayload) {
    this.model.focusFirstChild(eventPayload);
  };

  Tree.prototype.focusFirst = function (eventPayload, from) {
    this.model.focusFirst(eventPayload, from);
  };

  Tree.prototype.focusNth = function (index, eventPayload) {
    this.model.focusNth(index, eventPayload);
  };

  Tree.prototype.focusLast = function (eventPayload, from) {
    this.model.focusLast(eventPayload, from);
  };

  Tree.prototype.focusNextPage = function (eventPayload) {
    this.view.focusNextPage(eventPayload);
  };

  Tree.prototype.focusPreviousPage = function (eventPayload) {
    this.view.focusPreviousPage(eventPayload);
  };

  Tree.prototype.clearFocus = function (eventPayload) {
    this.model.setFocus(null, eventPayload);
  };

  Tree.prototype.dispose = function () {
    this._onDispose.fire();

    this.model.dispose();
    this.view.dispose();

    this._onDidChangeFocus.dispose();

    this._onDidChangeSelection.dispose();

    this._onHighlightChange.dispose();

    this._onDidExpandItem.dispose();

    this._onDidCollapseItem.dispose();

    this._onDispose.dispose();
  };

  return Tree;
}();

exports.Tree = Tree;
},{"./tree.css":"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/tree.css","./treeDefaults.js":"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeDefaults.js","./treeModel.js":"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeModel.js","./treeView.js":"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeView.js","../../../common/event.js":"../node_modules/monaco-editor/esm/vs/base/common/event.js","../../../common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/progressbar/progressbar.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/base/browser/ui/progressbar/progressbar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgressBar = void 0;

require("./progressbar.css");

var _lifecycle = require("../../../common/lifecycle.js");

var _color = require("../../../common/color.js");

var _objects = require("../../../common/objects.js");

var _dom = require("../../dom.js");

var _async = require("../../../common/async.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var css_done = 'done';
var css_active = 'active';
var css_infinite = 'infinite';
var css_discrete = 'discrete';
var css_progress_container = 'monaco-progress-container';
var css_progress_bit = 'progress-bit';
var defaultOpts = {
  progressBarBackground: _color.Color.fromHex('#0E70C0')
};
/**
 * A progress bar with support for infinite or discrete progress.
 */

var ProgressBar =
/** @class */
function (_super) {
  __extends(ProgressBar, _super);

  function ProgressBar(container, options) {
    var _this = _super.call(this) || this;

    _this.options = options || Object.create(null);
    (0, _objects.mixin)(_this.options, defaultOpts, false);
    _this.workedVal = 0;
    _this.progressBarBackground = _this.options.progressBarBackground;

    _this._register(_this.showDelayedScheduler = new _async.RunOnceScheduler(function () {
      return (0, _dom.show)(_this.element);
    }, 0));

    _this.create(container);

    return _this;
  }

  ProgressBar.prototype.create = function (container) {
    this.element = document.createElement('div');
    (0, _dom.addClass)(this.element, css_progress_container);
    container.appendChild(this.element);
    this.bit = document.createElement('div');
    (0, _dom.addClass)(this.bit, css_progress_bit);
    this.element.appendChild(this.bit);
    this.applyStyles();
  };

  ProgressBar.prototype.off = function () {
    this.bit.style.width = 'inherit';
    this.bit.style.opacity = '1';
    (0, _dom.removeClasses)(this.element, css_active, css_infinite, css_discrete);
    this.workedVal = 0;
    this.totalWork = undefined;
  };
  /**
   * Stops the progressbar from showing any progress instantly without fading out.
   */


  ProgressBar.prototype.stop = function () {
    return this.doDone(false);
  };

  ProgressBar.prototype.doDone = function (delayed) {
    var _this = this;

    (0, _dom.addClass)(this.element, css_done); // let it grow to 100% width and hide afterwards

    if (!(0, _dom.hasClass)(this.element, css_infinite)) {
      this.bit.style.width = 'inherit';

      if (delayed) {
        setTimeout(function () {
          return _this.off();
        }, 200);
      } else {
        this.off();
      }
    } // let it fade out and hide afterwards
    else {
        this.bit.style.opacity = '0';

        if (delayed) {
          setTimeout(function () {
            return _this.off();
          }, 200);
        } else {
          this.off();
        }
      }

    return this;
  };

  ProgressBar.prototype.hide = function () {
    (0, _dom.hide)(this.element);
    this.showDelayedScheduler.cancel();
  };

  ProgressBar.prototype.style = function (styles) {
    this.progressBarBackground = styles.progressBarBackground;
    this.applyStyles();
  };

  ProgressBar.prototype.applyStyles = function () {
    if (this.bit) {
      var background = this.progressBarBackground ? this.progressBarBackground.toString() : '';
      this.bit.style.backgroundColor = background;
    }
  };

  return ProgressBar;
}(_lifecycle.Disposable);

exports.ProgressBar = ProgressBar;
},{"./progressbar.css":"../node_modules/monaco-editor/esm/vs/base/browser/ui/progressbar/progressbar.css","../../../common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js","../../dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../common/async.js":"../node_modules/monaco-editor/esm/vs/base/common/async.js"}],"../node_modules/monaco-editor/esm/vs/base/parts/quickopen/browser/quickOpenWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QuickOpenWidget = exports.QuickOpenController = void 0;

require("./quickopen.css");

var nls = _interopRequireWildcard(require("../../../../nls.js"));

var platform = _interopRequireWildcard(require("../../../common/platform.js"));

var types = _interopRequireWildcard(require("../../../common/types.js"));

var _quickOpenViewer = require("./quickOpenViewer.js");

var _inputBox = require("../../../browser/ui/inputbox/inputBox.js");

var _treeImpl = require("../../tree/browser/treeImpl.js");

var _progressbar = require("../../../browser/ui/progressbar/progressbar.js");

var _keyboardEvent = require("../../../browser/keyboardEvent.js");

var _treeDefaults = require("../../tree/browser/treeDefaults.js");

var DOM = _interopRequireWildcard(require("../../../browser/dom.js"));

var _lifecycle = require("../../../common/lifecycle.js");

var _color = require("../../../common/color.js");

var _objects = require("../../../common/objects.js");

var _mouseEvent = require("../../../browser/mouseEvent.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var QuickOpenController =
/** @class */
function (_super) {
  __extends(QuickOpenController, _super);

  function QuickOpenController() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  QuickOpenController.prototype.onContextMenu = function (tree, element, event) {
    if (platform.isMacintosh) {
      return this.onLeftClick(tree, element, event); // https://github.com/Microsoft/vscode/issues/1011
    }

    return _super.prototype.onContextMenu.call(this, tree, element, event);
  };

  return QuickOpenController;
}(_treeDefaults.DefaultController);

exports.QuickOpenController = QuickOpenController;
var defaultStyles = {
  background: _color.Color.fromHex('#1E1E1E'),
  foreground: _color.Color.fromHex('#CCCCCC'),
  pickerGroupForeground: _color.Color.fromHex('#0097FB'),
  pickerGroupBorder: _color.Color.fromHex('#3F3F46'),
  widgetShadow: _color.Color.fromHex('#000000'),
  progressBarBackground: _color.Color.fromHex('#0E70C0')
};
var DEFAULT_INPUT_ARIA_LABEL = nls.localize('quickOpenAriaLabel', "Quick picker. Type to narrow down results.");

var QuickOpenWidget =
/** @class */
function (_super) {
  __extends(QuickOpenWidget, _super);

  function QuickOpenWidget(container, callbacks, options) {
    var _this = _super.call(this) || this;

    _this.isDisposed = false;
    _this.container = container;
    _this.callbacks = callbacks;
    _this.options = options;
    _this.styles = options || Object.create(null);
    (0, _objects.mixin)(_this.styles, defaultStyles, false);
    _this.model = null;
    return _this;
  }

  QuickOpenWidget.prototype.getModel = function () {
    return this.model;
  };

  QuickOpenWidget.prototype.create = function () {
    var _this = this; // Container


    this.element = document.createElement('div');
    DOM.addClass(this.element, 'monaco-quick-open-widget');
    this.container.appendChild(this.element);

    this._register(DOM.addDisposableListener(this.element, DOM.EventType.CONTEXT_MENU, function (e) {
      return DOM.EventHelper.stop(e, true);
    })); // Do this to fix an issue on Mac where the menu goes into the way


    this._register(DOM.addDisposableListener(this.element, DOM.EventType.FOCUS, function (e) {
      return _this.gainingFocus();
    }, true));

    this._register(DOM.addDisposableListener(this.element, DOM.EventType.BLUR, function (e) {
      return _this.loosingFocus(e);
    }, true));

    this._register(DOM.addDisposableListener(this.element, DOM.EventType.KEY_DOWN, function (e) {
      var keyboardEvent = new _keyboardEvent.StandardKeyboardEvent(e);

      if (keyboardEvent.keyCode === 9
      /* Escape */
      ) {
          DOM.EventHelper.stop(e, true);

          _this.hide(2
          /* CANCELED */
          );
        } else if (keyboardEvent.keyCode === 2
      /* Tab */
      && !keyboardEvent.altKey && !keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {
        var stops = e.currentTarget.querySelectorAll('input, .monaco-tree, .monaco-tree-row.focused .action-label.icon');

        if (keyboardEvent.shiftKey && keyboardEvent.target === stops[0]) {
          DOM.EventHelper.stop(e, true);
          stops[stops.length - 1].focus();
        } else if (!keyboardEvent.shiftKey && keyboardEvent.target === stops[stops.length - 1]) {
          DOM.EventHelper.stop(e, true);
          stops[0].focus();
        }
      }
    })); // Progress Bar


    this.progressBar = this._register(new _progressbar.ProgressBar(this.element, {
      progressBarBackground: this.styles.progressBarBackground
    }));
    this.progressBar.hide(); // Input Field

    this.inputContainer = document.createElement('div');
    DOM.addClass(this.inputContainer, 'quick-open-input');
    this.element.appendChild(this.inputContainer);
    this.inputBox = this._register(new _inputBox.InputBox(this.inputContainer, undefined, {
      placeholder: this.options.inputPlaceHolder || '',
      ariaLabel: DEFAULT_INPUT_ARIA_LABEL,
      inputBackground: this.styles.inputBackground,
      inputForeground: this.styles.inputForeground,
      inputBorder: this.styles.inputBorder,
      inputValidationInfoBackground: this.styles.inputValidationInfoBackground,
      inputValidationInfoForeground: this.styles.inputValidationInfoForeground,
      inputValidationInfoBorder: this.styles.inputValidationInfoBorder,
      inputValidationWarningBackground: this.styles.inputValidationWarningBackground,
      inputValidationWarningForeground: this.styles.inputValidationWarningForeground,
      inputValidationWarningBorder: this.styles.inputValidationWarningBorder,
      inputValidationErrorBackground: this.styles.inputValidationErrorBackground,
      inputValidationErrorForeground: this.styles.inputValidationErrorForeground,
      inputValidationErrorBorder: this.styles.inputValidationErrorBorder
    }));
    this.inputElement = this.inputBox.inputElement;
    this.inputElement.setAttribute('role', 'combobox');
    this.inputElement.setAttribute('aria-haspopup', 'false');
    this.inputElement.setAttribute('aria-autocomplete', 'list');

    this._register(DOM.addDisposableListener(this.inputBox.inputElement, DOM.EventType.INPUT, function (e) {
      return _this.onType();
    }));

    this._register(DOM.addDisposableListener(this.inputBox.inputElement, DOM.EventType.KEY_DOWN, function (e) {
      var keyboardEvent = new _keyboardEvent.StandardKeyboardEvent(e);

      var shouldOpenInBackground = _this.shouldOpenInBackground(keyboardEvent); // Do not handle Tab: It is used to navigate between elements without mouse


      if (keyboardEvent.keyCode === 2
      /* Tab */
      ) {
          return;
        } // Pass tree navigation keys to the tree but leave focus in input field
      else if (keyboardEvent.keyCode === 18
        /* DownArrow */
        || keyboardEvent.keyCode === 16
        /* UpArrow */
        || keyboardEvent.keyCode === 12
        /* PageDown */
        || keyboardEvent.keyCode === 11
        /* PageUp */
        ) {
            DOM.EventHelper.stop(e, true);

            _this.navigateInTree(keyboardEvent.keyCode, keyboardEvent.shiftKey); // Position cursor at the end of input to allow right arrow (open in background)
            // to function immediately unless the user has made a selection


            if (_this.inputBox.inputElement.selectionStart === _this.inputBox.inputElement.selectionEnd) {
              _this.inputBox.inputElement.selectionStart = _this.inputBox.value.length;
            }
          } // Select element on Enter or on Arrow-Right if we are at the end of the input
        else if (keyboardEvent.keyCode === 3
          /* Enter */
          || shouldOpenInBackground) {
            DOM.EventHelper.stop(e, true);

            var focus_1 = _this.tree.getFocus();

            if (focus_1) {
              _this.elementSelected(focus_1, e, shouldOpenInBackground ? 2
              /* OPEN_IN_BACKGROUND */
              : 1
              /* OPEN */
              );
            }
          }
    })); // Result count for screen readers


    this.resultCount = document.createElement('div');
    DOM.addClass(this.resultCount, 'quick-open-result-count');
    this.resultCount.setAttribute('aria-live', 'polite');
    this.resultCount.setAttribute('aria-atomic', 'true');
    this.element.appendChild(this.resultCount); // Tree

    this.treeContainer = document.createElement('div');
    DOM.addClass(this.treeContainer, 'quick-open-tree');
    this.element.appendChild(this.treeContainer);

    var createTree = this.options.treeCreator || function (container, config, opts) {
      return new _treeImpl.Tree(container, config, opts);
    };

    this.tree = this._register(createTree(this.treeContainer, {
      dataSource: new _quickOpenViewer.DataSource(this),
      controller: new QuickOpenController({
        clickBehavior: 1
        /* ON_MOUSE_UP */
        ,
        keyboardSupport: this.options.keyboardSupport
      }),
      renderer: this.renderer = new _quickOpenViewer.Renderer(this, this.styles),
      filter: new _quickOpenViewer.Filter(this),
      accessibilityProvider: new _quickOpenViewer.AccessibilityProvider(this)
    }, {
      twistiePixels: 11,
      indentPixels: 0,
      alwaysFocused: true,
      verticalScrollMode: 3
      /* Visible */
      ,
      horizontalScrollMode: 2
      /* Hidden */
      ,
      ariaLabel: nls.localize('treeAriaLabel', "Quick Picker"),
      keyboardSupport: this.options.keyboardSupport,
      preventRootFocus: false
    }));
    this.treeElement = this.tree.getHTMLElement(); // Handle Focus and Selection event

    this._register(this.tree.onDidChangeFocus(function (event) {
      _this.elementFocused(event.focus, event);
    }));

    this._register(this.tree.onDidChangeSelection(function (event) {
      if (event.selection && event.selection.length > 0) {
        var mouseEvent = event.payload && event.payload.originalEvent instanceof _mouseEvent.StandardMouseEvent ? event.payload.originalEvent : undefined;
        var shouldOpenInBackground = mouseEvent ? _this.shouldOpenInBackground(mouseEvent) : false;

        _this.elementSelected(event.selection[0], event, shouldOpenInBackground ? 2
        /* OPEN_IN_BACKGROUND */
        : 1
        /* OPEN */
        );
      }
    }));

    this._register(DOM.addDisposableListener(this.treeContainer, DOM.EventType.KEY_DOWN, function (e) {
      var keyboardEvent = new _keyboardEvent.StandardKeyboardEvent(e); // Only handle when in quick navigation mode

      if (!_this.quickNavigateConfiguration) {
        return;
      } // Support keyboard navigation in quick navigation mode


      if (keyboardEvent.keyCode === 18
      /* DownArrow */
      || keyboardEvent.keyCode === 16
      /* UpArrow */
      || keyboardEvent.keyCode === 12
      /* PageDown */
      || keyboardEvent.keyCode === 11
      /* PageUp */
      ) {
          DOM.EventHelper.stop(e, true);

          _this.navigateInTree(keyboardEvent.keyCode);
        } // Support to open item with Enter still even in quick nav mode
      else if (keyboardEvent.keyCode === 3
        /* Enter */
        ) {
            DOM.EventHelper.stop(e, true);

            var focus_2 = _this.tree.getFocus();

            if (focus_2) {
              _this.elementSelected(focus_2, e);
            }
          }
    }));

    this._register(DOM.addDisposableListener(this.treeContainer, DOM.EventType.KEY_UP, function (e) {
      var keyboardEvent = new _keyboardEvent.StandardKeyboardEvent(e);
      var keyCode = keyboardEvent.keyCode; // Only handle when in quick navigation mode

      if (!_this.quickNavigateConfiguration) {
        return;
      } // Select element when keys are pressed that signal it


      var quickNavKeys = _this.quickNavigateConfiguration.keybindings;
      var wasTriggerKeyPressed = quickNavKeys.some(function (k) {
        var _a = k.getParts(),
            firstPart = _a[0],
            chordPart = _a[1];

        if (chordPart) {
          return false;
        }

        if (firstPart.shiftKey && keyCode === 4
        /* Shift */
        ) {
            if (keyboardEvent.ctrlKey || keyboardEvent.altKey || keyboardEvent.metaKey) {
              return false; // this is an optimistic check for the shift key being used to navigate back in quick open
            }

            return true;
          }

        if (firstPart.altKey && keyCode === 6
        /* Alt */
        ) {
            return true;
          }

        if (firstPart.ctrlKey && keyCode === 5
        /* Ctrl */
        ) {
            return true;
          }

        if (firstPart.metaKey && keyCode === 57
        /* Meta */
        ) {
            return true;
          }

        return false;
      });

      if (wasTriggerKeyPressed) {
        var focus_3 = _this.tree.getFocus();

        if (focus_3) {
          _this.elementSelected(focus_3, e);
        }
      }
    })); // Support layout


    if (this.layoutDimensions) {
      this.layout(this.layoutDimensions);
    }

    this.applyStyles(); // Allows focus to switch to next/previous entry after tab into an actionbar item

    this._register(DOM.addDisposableListener(this.treeContainer, DOM.EventType.KEY_DOWN, function (e) {
      var keyboardEvent = new _keyboardEvent.StandardKeyboardEvent(e); // Only handle when not in quick navigation mode

      if (_this.quickNavigateConfiguration) {
        return;
      }

      if (keyboardEvent.keyCode === 18
      /* DownArrow */
      || keyboardEvent.keyCode === 16
      /* UpArrow */
      || keyboardEvent.keyCode === 12
      /* PageDown */
      || keyboardEvent.keyCode === 11
      /* PageUp */
      ) {
          DOM.EventHelper.stop(e, true);

          _this.navigateInTree(keyboardEvent.keyCode, keyboardEvent.shiftKey);

          _this.treeElement.focus();
        }
    }));

    return this.element;
  };

  QuickOpenWidget.prototype.style = function (styles) {
    this.styles = styles;
    this.applyStyles();
  };

  QuickOpenWidget.prototype.applyStyles = function () {
    if (this.element) {
      var foreground = this.styles.foreground ? this.styles.foreground.toString() : null;
      var background = this.styles.background ? this.styles.background.toString() : '';
      var borderColor = this.styles.borderColor ? this.styles.borderColor.toString() : '';
      var widgetShadow = this.styles.widgetShadow ? this.styles.widgetShadow.toString() : '';
      this.element.style.color = foreground;
      this.element.style.backgroundColor = background;
      this.element.style.borderColor = borderColor;
      this.element.style.borderWidth = borderColor ? '1px' : '';
      this.element.style.borderStyle = borderColor ? 'solid' : '';
      this.element.style.boxShadow = widgetShadow ? "0 5px 8px " + widgetShadow : '';
    }

    if (this.progressBar) {
      this.progressBar.style({
        progressBarBackground: this.styles.progressBarBackground
      });
    }

    if (this.inputBox) {
      this.inputBox.style({
        inputBackground: this.styles.inputBackground,
        inputForeground: this.styles.inputForeground,
        inputBorder: this.styles.inputBorder,
        inputValidationInfoBackground: this.styles.inputValidationInfoBackground,
        inputValidationInfoForeground: this.styles.inputValidationInfoForeground,
        inputValidationInfoBorder: this.styles.inputValidationInfoBorder,
        inputValidationWarningBackground: this.styles.inputValidationWarningBackground,
        inputValidationWarningForeground: this.styles.inputValidationWarningForeground,
        inputValidationWarningBorder: this.styles.inputValidationWarningBorder,
        inputValidationErrorBackground: this.styles.inputValidationErrorBackground,
        inputValidationErrorForeground: this.styles.inputValidationErrorForeground,
        inputValidationErrorBorder: this.styles.inputValidationErrorBorder
      });
    }

    if (this.tree && !this.options.treeCreator) {
      this.tree.style(this.styles);
    }

    if (this.renderer) {
      this.renderer.updateStyles(this.styles);
    }
  };

  QuickOpenWidget.prototype.shouldOpenInBackground = function (e) {
    // Keyboard
    if (e instanceof _keyboardEvent.StandardKeyboardEvent) {
      if (e.keyCode !== 17
      /* RightArrow */
      ) {
          return false; // only for right arrow
        }

      if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) {
        return false; // no modifiers allowed
      } // validate the cursor is at the end of the input and there is no selection,
      // and if not prevent opening in the background such as the selection can be changed


      var element = this.inputBox.inputElement;
      return element.selectionEnd === this.inputBox.value.length && element.selectionStart === element.selectionEnd;
    } // Mouse


    return e.middleButton;
  };

  QuickOpenWidget.prototype.onType = function () {
    var value = this.inputBox.value; // Adjust help text as needed if present

    if (this.helpText) {
      if (value) {
        DOM.hide(this.helpText);
      } else {
        DOM.show(this.helpText);
      }
    } // Send to callbacks


    this.callbacks.onType(value);
  };

  QuickOpenWidget.prototype.navigateInTree = function (keyCode, isShift) {
    var model = this.tree.getInput();
    var entries = model ? model.entries : [];
    var oldFocus = this.tree.getFocus(); // Normal Navigation

    switch (keyCode) {
      case 18
      /* DownArrow */
      :
        this.tree.focusNext();
        break;

      case 16
      /* UpArrow */
      :
        this.tree.focusPrevious();
        break;

      case 12
      /* PageDown */
      :
        this.tree.focusNextPage();
        break;

      case 11
      /* PageUp */
      :
        this.tree.focusPreviousPage();
        break;

      case 2
      /* Tab */
      :
        if (isShift) {
          this.tree.focusPrevious();
        } else {
          this.tree.focusNext();
        }

        break;
    }

    var newFocus = this.tree.getFocus(); // Support cycle-through navigation if focus did not change

    if (entries.length > 1 && oldFocus === newFocus) {
      // Up from no entry or first entry goes down to last
      if (keyCode === 16
      /* UpArrow */
      || keyCode === 2
      /* Tab */
      && isShift) {
        this.tree.focusLast();
      } // Down from last entry goes to up to first
      else if (keyCode === 18
        /* DownArrow */
        || keyCode === 2
        /* Tab */
        && !isShift) {
          this.tree.focusFirst();
        }
    } // Reveal


    newFocus = this.tree.getFocus();

    if (newFocus) {
      this.tree.reveal(newFocus);
    }
  };

  QuickOpenWidget.prototype.elementFocused = function (value, event) {
    if (!value || !this.isVisible()) {
      return;
    } // ARIA


    var arivaActiveDescendant = this.treeElement.getAttribute('aria-activedescendant');

    if (arivaActiveDescendant) {
      this.inputElement.setAttribute('aria-activedescendant', arivaActiveDescendant);
    } else {
      this.inputElement.removeAttribute('aria-activedescendant');
    }

    var context = {
      event: event,
      keymods: this.extractKeyMods(event),
      quickNavigateConfiguration: this.quickNavigateConfiguration
    };
    this.model.runner.run(value, 0
    /* PREVIEW */
    , context);
  };

  QuickOpenWidget.prototype.elementSelected = function (value, event, preferredMode) {
    var hide = true; // Trigger open of element on selection

    if (this.isVisible()) {
      var mode = preferredMode || 1
      /* OPEN */
      ;
      var context = {
        event: event,
        keymods: this.extractKeyMods(event),
        quickNavigateConfiguration: this.quickNavigateConfiguration
      };
      hide = this.model.runner.run(value, mode, context);
    } // Hide if command was run successfully


    if (hide) {
      this.hide(0
      /* ELEMENT_SELECTED */
      );
    }
  };

  QuickOpenWidget.prototype.extractKeyMods = function (event) {
    return {
      ctrlCmd: event && (event.ctrlKey || event.metaKey || event.payload && event.payload.originalEvent && (event.payload.originalEvent.ctrlKey || event.payload.originalEvent.metaKey)),
      alt: event && (event.altKey || event.payload && event.payload.originalEvent && event.payload.originalEvent.altKey)
    };
  };

  QuickOpenWidget.prototype.show = function (param, options) {
    this.visible = true;
    this.isLoosingFocus = false;
    this.quickNavigateConfiguration = options ? options.quickNavigateConfiguration : undefined; // Adjust UI for quick navigate mode

    if (this.quickNavigateConfiguration) {
      DOM.hide(this.inputContainer);
      DOM.show(this.element);
      this.tree.domFocus();
    } // Otherwise use normal UI
    else {
        DOM.show(this.inputContainer);
        DOM.show(this.element);
        this.inputBox.focus();
      } // Adjust Help text for IE


    if (this.helpText) {
      if (this.quickNavigateConfiguration || types.isString(param)) {
        DOM.hide(this.helpText);
      } else {
        DOM.show(this.helpText);
      }
    } // Show based on param


    if (types.isString(param)) {
      this.doShowWithPrefix(param);
    } else {
      if (options && options.value) {
        this.restoreLastInput(options.value);
      }

      this.doShowWithInput(param, options && options.autoFocus ? options.autoFocus : {});
    } // Respect selectAll option


    if (options && options.inputSelection && !this.quickNavigateConfiguration) {
      this.inputBox.select(options.inputSelection);
    }

    if (this.callbacks.onShow) {
      this.callbacks.onShow();
    }
  };

  QuickOpenWidget.prototype.restoreLastInput = function (lastInput) {
    this.inputBox.value = lastInput;
    this.inputBox.select();
    this.callbacks.onType(lastInput);
  };

  QuickOpenWidget.prototype.doShowWithPrefix = function (prefix) {
    this.inputBox.value = prefix;
    this.callbacks.onType(prefix);
  };

  QuickOpenWidget.prototype.doShowWithInput = function (input, autoFocus) {
    this.setInput(input, autoFocus);
  };

  QuickOpenWidget.prototype.setInputAndLayout = function (input, autoFocus) {
    var _this = this;

    this.treeContainer.style.height = this.getHeight(input) + "px";
    this.tree.setInput(null).then(function () {
      _this.model = input; // ARIA

      _this.inputElement.setAttribute('aria-haspopup', String(input && input.entries && input.entries.length > 0));

      return _this.tree.setInput(input);
    }).then(function () {
      // Indicate entries to tree
      _this.tree.layout();

      var entries = input ? input.entries.filter(function (e) {
        return _this.isElementVisible(input, e);
      }) : [];

      _this.updateResultCount(entries.length); // Handle auto focus


      if (entries.length) {
        _this.autoFocus(input, entries, autoFocus);
      }
    });
  };

  QuickOpenWidget.prototype.isElementVisible = function (input, e) {
    if (!input.filter) {
      return true;
    }

    return input.filter.isVisible(e);
  };

  QuickOpenWidget.prototype.autoFocus = function (input, entries, autoFocus) {
    if (autoFocus === void 0) {
      autoFocus = {};
    } // First check for auto focus of prefix matches


    if (autoFocus.autoFocusPrefixMatch) {
      var caseSensitiveMatch = void 0;
      var caseInsensitiveMatch = void 0;
      var prefix = autoFocus.autoFocusPrefixMatch;
      var lowerCasePrefix = prefix.toLowerCase();

      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var entry = entries_1[_i];
        var label = input.dataSource.getLabel(entry) || '';

        if (!caseSensitiveMatch && label.indexOf(prefix) === 0) {
          caseSensitiveMatch = entry;
        } else if (!caseInsensitiveMatch && label.toLowerCase().indexOf(lowerCasePrefix) === 0) {
          caseInsensitiveMatch = entry;
        }

        if (caseSensitiveMatch && caseInsensitiveMatch) {
          break;
        }
      }

      var entryToFocus = caseSensitiveMatch || caseInsensitiveMatch;

      if (entryToFocus) {
        this.tree.setFocus(entryToFocus);
        this.tree.reveal(entryToFocus, 0.5);
        return;
      }
    } // Second check for auto focus of first entry


    if (autoFocus.autoFocusFirstEntry) {
      this.tree.focusFirst();
      this.tree.reveal(this.tree.getFocus());
    } // Third check for specific index option
    else if (typeof autoFocus.autoFocusIndex === 'number') {
        if (entries.length > autoFocus.autoFocusIndex) {
          this.tree.focusNth(autoFocus.autoFocusIndex);
          this.tree.reveal(this.tree.getFocus());
        }
      } // Check for auto focus of second entry
      else if (autoFocus.autoFocusSecondEntry) {
          if (entries.length > 1) {
            this.tree.focusNth(1);
          }
        } // Finally check for auto focus of last entry
        else if (autoFocus.autoFocusLastEntry) {
            if (entries.length > 1) {
              this.tree.focusLast();
            }
          }
  };

  QuickOpenWidget.prototype.getHeight = function (input) {
    var _this = this;

    var renderer = input.renderer;

    if (!input) {
      var itemHeight = renderer.getHeight(null);
      return this.options.minItemsToShow ? this.options.minItemsToShow * itemHeight : 0;
    }

    var height = 0;
    var preferredItemsHeight;

    if (this.layoutDimensions && this.layoutDimensions.height) {
      preferredItemsHeight = (this.layoutDimensions.height - 50
      /* subtract height of input field (30px) and some spacing (drop shadow) to fit */
      ) * 0.4
      /* max 40% of screen */
      ;
    }

    if (!preferredItemsHeight || preferredItemsHeight > QuickOpenWidget.MAX_ITEMS_HEIGHT) {
      preferredItemsHeight = QuickOpenWidget.MAX_ITEMS_HEIGHT;
    }

    var entries = input.entries.filter(function (e) {
      return _this.isElementVisible(input, e);
    });
    var maxEntries = this.options.maxItemsToShow || entries.length;

    for (var i = 0; i < maxEntries && i < entries.length; i++) {
      var entryHeight = renderer.getHeight(entries[i]);

      if (height + entryHeight <= preferredItemsHeight) {
        height += entryHeight;
      } else {
        break;
      }
    }

    return height;
  };

  QuickOpenWidget.prototype.updateResultCount = function (count) {
    this.resultCount.textContent = nls.localize({
      key: 'quickInput.visibleCount',
      comment: ['This tells the user how many items are shown in a list of items to select from. The items can be anything. Currently not visible, but read by screen readers.']
    }, "{0} Results", count);
  };

  QuickOpenWidget.prototype.hide = function (reason) {
    if (!this.isVisible()) {
      return;
    }

    this.visible = false;
    DOM.hide(this.element);
    this.element.blur(); // Clear input field and clear tree

    this.inputBox.value = '';
    this.tree.setInput(null); // ARIA

    this.inputElement.setAttribute('aria-haspopup', 'false'); // Reset Tree Height

    this.treeContainer.style.height = (this.options.minItemsToShow ? this.options.minItemsToShow * 22 : 0) + "px"; // Clear any running Progress

    this.progressBar.stop().hide(); // Clear Focus

    if (this.tree.isDOMFocused()) {
      this.tree.domBlur();
    } else if (this.inputBox.hasFocus()) {
      this.inputBox.blur();
    } // Callbacks


    if (reason === 0
    /* ELEMENT_SELECTED */
    ) {
        this.callbacks.onOk();
      } else {
      this.callbacks.onCancel();
    }

    if (this.callbacks.onHide) {
      this.callbacks.onHide(reason);
    }
  };

  QuickOpenWidget.prototype.setInput = function (input, autoFocus, ariaLabel) {
    if (!this.isVisible()) {
      return;
    } // If the input changes, indicate this to the tree


    if (!!this.getInput()) {
      this.onInputChanging();
    } // Adapt tree height to entries and apply input


    this.setInputAndLayout(input, autoFocus); // Apply ARIA

    if (this.inputBox) {
      this.inputBox.setAriaLabel(ariaLabel || DEFAULT_INPUT_ARIA_LABEL);
    }
  };

  QuickOpenWidget.prototype.onInputChanging = function () {
    var _this = this;

    if (this.inputChangingTimeoutHandle) {
      clearTimeout(this.inputChangingTimeoutHandle);
      this.inputChangingTimeoutHandle = null;
    } // when the input is changing in quick open, we indicate this as CSS class to the widget
    // for a certain timeout. this helps reducing some hectic UI updates when input changes quickly


    DOM.addClass(this.element, 'content-changing');
    this.inputChangingTimeoutHandle = setTimeout(function () {
      DOM.removeClass(_this.element, 'content-changing');
    }, 500);
  };

  QuickOpenWidget.prototype.getInput = function () {
    return this.tree.getInput();
  };

  QuickOpenWidget.prototype.isVisible = function () {
    return this.visible;
  };

  QuickOpenWidget.prototype.layout = function (dimension) {
    this.layoutDimensions = dimension; // Apply to quick open width (height is dynamic by number of items to show)

    var quickOpenWidth = Math.min(this.layoutDimensions.width * 0.62
    /* golden cut */
    , QuickOpenWidget.MAX_WIDTH);

    if (this.element) {
      // quick open
      this.element.style.width = quickOpenWidth + "px";
      this.element.style.marginLeft = "-" + quickOpenWidth / 2 + "px"; // input field

      this.inputContainer.style.width = quickOpenWidth - 12 + "px";
    }
  };

  QuickOpenWidget.prototype.gainingFocus = function () {
    this.isLoosingFocus = false;
  };

  QuickOpenWidget.prototype.loosingFocus = function (e) {
    var _this = this;

    if (!this.isVisible()) {
      return;
    }

    var relatedTarget = e.relatedTarget;

    if (!this.quickNavigateConfiguration && DOM.isAncestor(relatedTarget, this.element)) {
      return; // user clicked somewhere into quick open widget, do not close thereby
    }

    this.isLoosingFocus = true;
    setTimeout(function () {
      if (!_this.isLoosingFocus || _this.isDisposed) {
        return;
      }

      var veto = _this.callbacks.onFocusLost && _this.callbacks.onFocusLost();

      if (!veto) {
        _this.hide(1
        /* FOCUS_LOST */
        );
      }
    }, 0);
  };

  QuickOpenWidget.prototype.dispose = function () {
    _super.prototype.dispose.call(this);

    this.isDisposed = true;
  };

  QuickOpenWidget.MAX_WIDTH = 600; // Max total width of quick open widget

  QuickOpenWidget.MAX_ITEMS_HEIGHT = 20 * 22; // Max height of item list below input field

  return QuickOpenWidget;
}(_lifecycle.Disposable);

exports.QuickOpenWidget = QuickOpenWidget;
},{"./quickopen.css":"../node_modules/monaco-editor/esm/vs/base/parts/quickopen/browser/quickopen.css","../../../../nls.js":"../node_modules/monaco-editor/esm/vs/nls.js","../../../common/platform.js":"../node_modules/monaco-editor/esm/vs/base/common/platform.js","../../../common/types.js":"../node_modules/monaco-editor/esm/vs/base/common/types.js","./quickOpenViewer.js":"../node_modules/monaco-editor/esm/vs/base/parts/quickopen/browser/quickOpenViewer.js","../../../browser/ui/inputbox/inputBox.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/inputbox/inputBox.js","../../tree/browser/treeImpl.js":"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeImpl.js","../../../browser/ui/progressbar/progressbar.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/progressbar/progressbar.js","../../../browser/keyboardEvent.js":"../node_modules/monaco-editor/esm/vs/base/browser/keyboardEvent.js","../../tree/browser/treeDefaults.js":"../node_modules/monaco-editor/esm/vs/base/parts/tree/browser/treeDefaults.js","../../../browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../common/lifecycle.js":"../node_modules/monaco-editor/esm/vs/base/common/lifecycle.js","../../../common/color.js":"../node_modules/monaco-editor/esm/vs/base/common/color.js","../../../common/objects.js":"../node_modules/monaco-editor/esm/vs/base/common/objects.js","../../../browser/mouseEvent.js":"../node_modules/monaco-editor/esm/vs/base/browser/mouseEvent.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickOpenEditorWidget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QuickOpenEditorWidget = void 0;

var _dom = require("../../../../base/browser/dom.js");

var _quickOpenWidget = require("../../../../base/parts/quickopen/browser/quickOpenWidget.js");

var _colorRegistry = require("../../../../platform/theme/common/colorRegistry.js");

var _styler = require("../../../../platform/theme/common/styler.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var QuickOpenEditorWidget =
/** @class */
function () {
  function QuickOpenEditorWidget(codeEditor, onOk, onCancel, onType, configuration, themeService) {
    this.codeEditor = codeEditor;
    this.themeService = themeService;
    this.visible = false;
    this.domNode = document.createElement('div');
    this.quickOpenWidget = new _quickOpenWidget.QuickOpenWidget(this.domNode, {
      onOk: onOk,
      onCancel: onCancel,
      onType: onType
    }, {
      inputPlaceHolder: undefined,
      inputAriaLabel: configuration.inputAriaLabel,
      keyboardSupport: true
    });
    this.styler = (0, _styler.attachQuickOpenStyler)(this.quickOpenWidget, this.themeService, {
      pickerGroupForeground: _colorRegistry.foreground
    });
    this.quickOpenWidget.create();
    this.codeEditor.addOverlayWidget(this);
  }

  QuickOpenEditorWidget.prototype.setInput = function (model, focus) {
    this.quickOpenWidget.setInput(model, focus);
  };

  QuickOpenEditorWidget.prototype.getId = function () {
    return QuickOpenEditorWidget.ID;
  };

  QuickOpenEditorWidget.prototype.getDomNode = function () {
    return this.domNode;
  };

  QuickOpenEditorWidget.prototype.destroy = function () {
    this.codeEditor.removeOverlayWidget(this);
    this.quickOpenWidget.dispose();
    this.styler.dispose();
  };

  QuickOpenEditorWidget.prototype.show = function (value) {
    this.visible = true;
    var editorLayout = this.codeEditor.getLayoutInfo();

    if (editorLayout) {
      this.quickOpenWidget.layout(new _dom.Dimension(editorLayout.width, editorLayout.height));
    }

    this.quickOpenWidget.show(value);
    this.codeEditor.layoutOverlayWidget(this);
  };

  QuickOpenEditorWidget.prototype.getPosition = function () {
    if (this.visible) {
      return {
        preference: 2
        /* TOP_CENTER */

      };
    }

    return null;
  };

  QuickOpenEditorWidget.ID = 'editor.contrib.quickOpenEditorWidget';
  return QuickOpenEditorWidget;
}();

exports.QuickOpenEditorWidget = QuickOpenEditorWidget;
},{"../../../../base/browser/dom.js":"../node_modules/monaco-editor/esm/vs/base/browser/dom.js","../../../../base/parts/quickopen/browser/quickOpenWidget.js":"../node_modules/monaco-editor/esm/vs/base/parts/quickopen/browser/quickOpenWidget.js","../../../../platform/theme/common/colorRegistry.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../../../../platform/theme/common/styler.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/styler.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/editorQuickOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseEditorQuickOpenAction = exports.QuickOpenController = void 0;

require("./editorQuickOpen.css");

var _editorExtensions = require("../../../browser/editorExtensions.js");

var _textModel = require("../../../common/model/textModel.js");

var _quickOpenEditorWidget = require("./quickOpenEditorWidget.js");

var _themeService = require("../../../../platform/theme/common/themeService.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var QuickOpenController =
/** @class */
function () {
  function QuickOpenController(editor, themeService) {
    this.themeService = themeService;
    this.widget = null;
    this.rangeHighlightDecorationId = null;
    this.lastKnownEditorSelection = null;
    this.editor = editor;
  }

  QuickOpenController.get = function (editor) {
    return editor.getContribution(QuickOpenController.ID);
  };

  QuickOpenController.prototype.dispose = function () {
    // Dispose widget
    if (this.widget) {
      this.widget.destroy();
      this.widget = null;
    }
  };

  QuickOpenController.prototype.run = function (opts) {
    var _this = this;

    if (this.widget) {
      this.widget.destroy();
      this.widget = null;
    } // Create goto line widget


    var onClose = function (canceled) {
      // Clear Highlight Decorations if present
      _this.clearDecorations(); // Restore selection if canceled


      if (canceled && _this.lastKnownEditorSelection) {
        _this.editor.setSelection(_this.lastKnownEditorSelection);

        _this.editor.revealRangeInCenterIfOutsideViewport(_this.lastKnownEditorSelection, 0
        /* Smooth */
        );
      }

      _this.lastKnownEditorSelection = null; // Return focus to the editor if
      // - focus is back on the <body> element because no other focusable element was clicked
      // - a command was picked from the picker which indicates the editor should get focused

      if (document.activeElement === document.body || !canceled) {
        _this.editor.focus();
      }
    };

    this.widget = new _quickOpenEditorWidget.QuickOpenEditorWidget(this.editor, function () {
      return onClose(false);
    }, function () {
      return onClose(true);
    }, function (value) {
      _this.widget.setInput(opts.getModel(value), opts.getAutoFocus(value));
    }, {
      inputAriaLabel: opts.inputAriaLabel
    }, this.themeService); // Remember selection to be able to restore on cancel

    if (!this.lastKnownEditorSelection) {
      this.lastKnownEditorSelection = this.editor.getSelection();
    } // Show


    this.widget.show('');
  };

  QuickOpenController.prototype.decorateLine = function (range, editor) {
    var oldDecorations = [];

    if (this.rangeHighlightDecorationId) {
      oldDecorations.push(this.rangeHighlightDecorationId);
      this.rangeHighlightDecorationId = null;
    }

    var newDecorations = [{
      range: range,
      options: QuickOpenController._RANGE_HIGHLIGHT_DECORATION
    }];
    var decorations = editor.deltaDecorations(oldDecorations, newDecorations);
    this.rangeHighlightDecorationId = decorations[0];
  };

  QuickOpenController.prototype.clearDecorations = function () {
    if (this.rangeHighlightDecorationId) {
      this.editor.deltaDecorations([this.rangeHighlightDecorationId], []);
      this.rangeHighlightDecorationId = null;
    }
  };

  QuickOpenController.ID = 'editor.controller.quickOpenController';
  QuickOpenController._RANGE_HIGHLIGHT_DECORATION = _textModel.ModelDecorationOptions.register({
    className: 'rangeHighlight',
    isWholeLine: true
  });
  QuickOpenController = __decorate([__param(1, _themeService.IThemeService)], QuickOpenController);
  return QuickOpenController;
}();

exports.QuickOpenController = QuickOpenController;

/**
 * Base class for providing quick open in the editor.
 */
var BaseEditorQuickOpenAction =
/** @class */
function (_super) {
  __extends(BaseEditorQuickOpenAction, _super);

  function BaseEditorQuickOpenAction(inputAriaLabel, opts) {
    var _this = _super.call(this, opts) || this;

    _this._inputAriaLabel = inputAriaLabel;
    return _this;
  }

  BaseEditorQuickOpenAction.prototype.getController = function (editor) {
    return QuickOpenController.get(editor);
  };

  BaseEditorQuickOpenAction.prototype._show = function (controller, opts) {
    controller.run({
      inputAriaLabel: this._inputAriaLabel,
      getModel: function (value) {
        return opts.getModel(value);
      },
      getAutoFocus: function (searchValue) {
        return opts.getAutoFocus(searchValue);
      }
    });
  };

  return BaseEditorQuickOpenAction;
}(_editorExtensions.EditorAction);

exports.BaseEditorQuickOpenAction = BaseEditorQuickOpenAction;
(0, _editorExtensions.registerEditorContribution)(QuickOpenController.ID, QuickOpenController);
},{"./editorQuickOpen.css":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/editorQuickOpen.css","../../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../../common/model/textModel.js":"../node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","./quickOpenEditorWidget.js":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickOpenEditorWidget.js","../../../../platform/theme/common/themeService.js":"../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/gotoLine.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GotoLineAction = exports.GotoLineEntry = void 0;

require("./gotoLine.css");

var strings = _interopRequireWildcard(require("../../../../base/common/strings.js"));

var _quickOpenModel = require("../../../../base/parts/quickopen/browser/quickOpenModel.js");

var _editorBrowser = require("../../../browser/editorBrowser.js");

var _editorExtensions = require("../../../browser/editorExtensions.js");

var _position = require("../../../common/core/position.js");

var _range = require("../../../common/core/range.js");

var _editorContextKeys = require("../../../common/editorContextKeys.js");

var _editorQuickOpen = require("./editorQuickOpen.js");

var _standaloneStrings = require("../../../common/standaloneStrings.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var GotoLineEntry =
/** @class */
function (_super) {
  __extends(GotoLineEntry, _super);

  function GotoLineEntry(line, editor, decorator) {
    var _this = _super.call(this) || this;

    _this.editor = editor;
    _this.decorator = decorator;
    _this.parseResult = _this.parseInput(line);
    return _this;
  }

  GotoLineEntry.prototype.parseInput = function (line) {
    var numbers = line.split(',').map(function (part) {
      return parseInt(part, 10);
    }).filter(function (part) {
      return !isNaN(part);
    });
    var position;

    if (numbers.length === 0) {
      position = new _position.Position(-1, -1);
    } else if (numbers.length === 1) {
      position = new _position.Position(numbers[0], 1);
    } else {
      position = new _position.Position(numbers[0], numbers[1]);
    }

    var model;

    if ((0, _editorBrowser.isCodeEditor)(this.editor)) {
      model = this.editor.getModel();
    } else {
      var diffModel = this.editor.getModel();
      model = diffModel ? diffModel.modified : null;
    }

    var isValid = model ? model.validatePosition(position).equals(position) : false;
    var label;

    if (isValid) {
      if (position.column && position.column > 1) {
        label = strings.format(_standaloneStrings.GoToLineNLS.gotoLineLabelValidLineAndColumn, position.lineNumber, position.column);
      } else {
        label = strings.format(_standaloneStrings.GoToLineNLS.gotoLineLabelValidLine, position.lineNumber);
      }
    } else if (position.lineNumber < 1 || position.lineNumber > (model ? model.getLineCount() : 0)) {
      label = strings.format(_standaloneStrings.GoToLineNLS.gotoLineLabelEmptyWithLineLimit, model ? model.getLineCount() : 0);
    } else {
      label = strings.format(_standaloneStrings.GoToLineNLS.gotoLineLabelEmptyWithLineAndColumnLimit, model ? model.getLineMaxColumn(position.lineNumber) : 0);
    }

    return {
      position: position,
      isValid: isValid,
      label: label
    };
  };

  GotoLineEntry.prototype.getLabel = function () {
    return this.parseResult.label;
  };

  GotoLineEntry.prototype.getAriaLabel = function () {
    var position = this.editor.getPosition();
    var currentLine = position ? position.lineNumber : 0;
    return strings.format(_standaloneStrings.GoToLineNLS.gotoLineAriaLabel, currentLine, this.parseResult.label);
  };

  GotoLineEntry.prototype.run = function (mode, _context) {
    if (mode === 1
    /* OPEN */
    ) {
        return this.runOpen();
      }

    return this.runPreview();
  };

  GotoLineEntry.prototype.runOpen = function () {
    // No-op if range is not valid
    if (!this.parseResult.isValid) {
      return false;
    } // Apply selection and focus


    var range = this.toSelection();
    this.editor.setSelection(range);
    this.editor.revealRangeInCenter(range, 0
    /* Smooth */
    );
    this.editor.focus();
    return true;
  };

  GotoLineEntry.prototype.runPreview = function () {
    // No-op if range is not valid
    if (!this.parseResult.isValid) {
      this.decorator.clearDecorations();
      return false;
    } // Select Line Position


    var range = this.toSelection();
    this.editor.revealRangeInCenter(range, 0
    /* Smooth */
    ); // Decorate if possible

    this.decorator.decorateLine(range, this.editor);
    return false;
  };

  GotoLineEntry.prototype.toSelection = function () {
    return new _range.Range(this.parseResult.position.lineNumber, this.parseResult.position.column, this.parseResult.position.lineNumber, this.parseResult.position.column);
  };

  return GotoLineEntry;
}(_quickOpenModel.QuickOpenEntry);

exports.GotoLineEntry = GotoLineEntry;

var GotoLineAction =
/** @class */
function (_super) {
  __extends(GotoLineAction, _super);

  function GotoLineAction() {
    return _super.call(this, _standaloneStrings.GoToLineNLS.gotoLineActionInput, {
      id: 'editor.action.gotoLine',
      label: _standaloneStrings.GoToLineNLS.gotoLineActionLabel,
      alias: 'Go to Line...',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: 2048
        /* CtrlCmd */
        | 37
        /* KEY_G */
        ,
        mac: {
          primary: 256
          /* WinCtrl */
          | 37
          /* KEY_G */

        },
        weight: 100
        /* EditorContrib */

      }
    }) || this;
  }

  GotoLineAction.prototype.run = function (accessor, editor) {
    var _this = this;

    this._show(this.getController(editor), {
      getModel: function (value) {
        return new _quickOpenModel.QuickOpenModel([new GotoLineEntry(value, editor, _this.getController(editor))]);
      },
      getAutoFocus: function (searchValue) {
        return {
          autoFocusFirstEntry: searchValue.length > 0
        };
      }
    });
  };

  return GotoLineAction;
}(_editorQuickOpen.BaseEditorQuickOpenAction);

exports.GotoLineAction = GotoLineAction;
(0, _editorExtensions.registerEditorAction)(GotoLineAction);
},{"./gotoLine.css":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/gotoLine.css","../../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../../../base/parts/quickopen/browser/quickOpenModel.js":"../node_modules/monaco-editor/esm/vs/base/parts/quickopen/browser/quickOpenModel.js","../../../browser/editorBrowser.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorBrowser.js","../../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../../common/core/position.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","./editorQuickOpen.js":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/editorQuickOpen.js","../../../common/standaloneStrings.js":"../node_modules/monaco-editor/esm/vs/editor/common/standaloneStrings.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickCommand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QuickCommandAction = exports.EditorActionCommandEntry = void 0;

var strings = _interopRequireWildcard(require("../../../../base/common/strings.js"));

var browser = _interopRequireWildcard(require("../../../../base/browser/browser.js"));

var _errors = require("../../../../base/common/errors.js");

var _filters = require("../../../../base/common/filters.js");

var _quickOpenModel = require("../../../../base/parts/quickopen/browser/quickOpenModel.js");

var _editorExtensions = require("../../../browser/editorExtensions.js");

var _editorContextKeys = require("../../../common/editorContextKeys.js");

var _editorQuickOpen = require("./editorQuickOpen.js");

var _keybinding = require("../../../../platform/keybinding/common/keybinding.js");

var _standaloneStrings = require("../../../common/standaloneStrings.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var EditorActionCommandEntry =
/** @class */
function (_super) {
  __extends(EditorActionCommandEntry, _super);

  function EditorActionCommandEntry(key, keyAriaLabel, highlights, action, editor) {
    var _this = _super.call(this) || this;

    _this.key = key;
    _this.keyAriaLabel = keyAriaLabel;

    _this.setHighlights(highlights);

    _this.action = action;
    _this.editor = editor;
    return _this;
  }

  EditorActionCommandEntry.prototype.getLabel = function () {
    return this.action.label;
  };

  EditorActionCommandEntry.prototype.getAriaLabel = function () {
    if (this.keyAriaLabel) {
      return strings.format(_standaloneStrings.QuickCommandNLS.ariaLabelEntryWithKey, this.getLabel(), this.keyAriaLabel);
    }

    return strings.format(_standaloneStrings.QuickCommandNLS.ariaLabelEntry, this.getLabel());
  };

  EditorActionCommandEntry.prototype.getGroupLabel = function () {
    return this.key;
  };

  EditorActionCommandEntry.prototype.run = function (mode, context) {
    var _this = this;

    if (mode === 1
    /* OPEN */
    ) {
        // Use a timeout to give the quick open widget a chance to close itself first
        setTimeout(function () {
          // Some actions are enabled only when editor has focus
          _this.editor.focus();

          try {
            var promise = _this.action.run() || Promise.resolve();
            promise.then(undefined, _errors.onUnexpectedError);
          } catch (error) {
            (0, _errors.onUnexpectedError)(error);
          }
        }, 50);
        return true;
      }

    return false;
  };

  return EditorActionCommandEntry;
}(_quickOpenModel.QuickOpenEntryGroup);

exports.EditorActionCommandEntry = EditorActionCommandEntry;

var QuickCommandAction =
/** @class */
function (_super) {
  __extends(QuickCommandAction, _super);

  function QuickCommandAction() {
    return _super.call(this, _standaloneStrings.QuickCommandNLS.quickCommandActionInput, {
      id: 'editor.action.quickCommand',
      label: _standaloneStrings.QuickCommandNLS.quickCommandActionLabel,
      alias: 'Command Palette',
      precondition: undefined,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: browser.isIE ? 512
        /* Alt */
        | 59
        /* F1 */
        : 59
        /* F1 */
        ,
        weight: 100
        /* EditorContrib */

      },
      contextMenuOpts: {
        group: 'z_commands',
        order: 1
      }
    }) || this;
  }

  QuickCommandAction.prototype.run = function (accessor, editor) {
    var _this = this;

    var keybindingService = accessor.get(_keybinding.IKeybindingService);

    this._show(this.getController(editor), {
      getModel: function (value) {
        return new _quickOpenModel.QuickOpenModel(_this._editorActionsToEntries(keybindingService, editor, value));
      },
      getAutoFocus: function (searchValue) {
        return {
          autoFocusFirstEntry: true,
          autoFocusPrefixMatch: searchValue
        };
      }
    });
  };

  QuickCommandAction.prototype._sort = function (elementA, elementB) {
    var elementAName = (elementA.getLabel() || '').toLowerCase();
    var elementBName = (elementB.getLabel() || '').toLowerCase();
    return elementAName.localeCompare(elementBName);
  };

  QuickCommandAction.prototype._editorActionsToEntries = function (keybindingService, editor, searchValue) {
    var actions = editor.getSupportedActions();
    var entries = [];

    for (var _i = 0, actions_1 = actions; _i < actions_1.length; _i++) {
      var action = actions_1[_i];
      var keybinding = keybindingService.lookupKeybinding(action.id);

      if (action.label) {
        var highlights = (0, _filters.matchesFuzzy)(searchValue, action.label);

        if (highlights) {
          entries.push(new EditorActionCommandEntry(keybinding ? keybinding.getLabel() || '' : '', keybinding ? keybinding.getAriaLabel() || '' : '', highlights, action, editor));
        }
      }
    } // Sort by name


    entries = entries.sort(this._sort);
    return entries;
  };

  return QuickCommandAction;
}(_editorQuickOpen.BaseEditorQuickOpenAction);

exports.QuickCommandAction = QuickCommandAction;
(0, _editorExtensions.registerEditorAction)(QuickCommandAction);
},{"../../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../../../base/browser/browser.js":"../node_modules/monaco-editor/esm/vs/base/browser/browser.js","../../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../../base/common/filters.js":"../node_modules/monaco-editor/esm/vs/base/common/filters.js","../../../../base/parts/quickopen/browser/quickOpenModel.js":"../node_modules/monaco-editor/esm/vs/base/parts/quickopen/browser/quickOpenModel.js","../../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","./editorQuickOpen.js":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/editorQuickOpen.js","../../../../platform/keybinding/common/keybinding.js":"../node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybinding.js","../../../common/standaloneStrings.js":"../node_modules/monaco-editor/esm/vs/editor/common/standaloneStrings.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickOutline.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/documentSymbols/outlineModel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OutlineModel = exports.OutlineGroup = exports.OutlineElement = exports.TreeElement = void 0;

var _arrays = require("../../../base/common/arrays.js");

var _cancellation = require("../../../base/common/cancellation.js");

var _collections = require("../../../base/common/collections.js");

var _errors = require("../../../base/common/errors.js");

var _map = require("../../../base/common/map.js");

var _modes = require("../../common/modes.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var TreeElement =
/** @class */
function () {
  function TreeElement() {}

  TreeElement.prototype.remove = function () {
    if (this.parent) {
      delete this.parent.children[this.id];
    }
  };

  TreeElement.findId = function (candidate, container) {
    // complex id-computation which contains the origin/extension,
    // the parent path, and some dedupe logic when names collide
    var candidateId;

    if (typeof candidate === 'string') {
      candidateId = container.id + "/" + candidate;
    } else {
      candidateId = container.id + "/" + candidate.name;

      if (container.children[candidateId] !== undefined) {
        candidateId = container.id + "/" + candidate.name + "_" + candidate.range.startLineNumber + "_" + candidate.range.startColumn;
      }
    }

    var id = candidateId;

    for (var i = 0; container.children[id] !== undefined; i++) {
      id = candidateId + "_" + i;
    }

    return id;
  };

  TreeElement.empty = function (element) {
    for (var _key in element.children) {
      return false;
    }

    return true;
  };

  return TreeElement;
}();

exports.TreeElement = TreeElement;

var OutlineElement =
/** @class */
function (_super) {
  __extends(OutlineElement, _super);

  function OutlineElement(id, parent, symbol) {
    var _this = _super.call(this) || this;

    _this.id = id;
    _this.parent = parent;
    _this.symbol = symbol;
    _this.children = Object.create(null);
    return _this;
  }

  return OutlineElement;
}(TreeElement);

exports.OutlineElement = OutlineElement;

var OutlineGroup =
/** @class */
function (_super) {
  __extends(OutlineGroup, _super);

  function OutlineGroup(id, parent, provider, providerIndex) {
    var _this = _super.call(this) || this;

    _this.id = id;
    _this.parent = parent;
    _this.provider = provider;
    _this.providerIndex = providerIndex;
    _this.children = Object.create(null);
    return _this;
  }

  return OutlineGroup;
}(TreeElement);

exports.OutlineGroup = OutlineGroup;

var MovingAverage =
/** @class */
function () {
  function MovingAverage() {
    this._n = 1;
    this._val = 0;
  }

  MovingAverage.prototype.update = function (value) {
    this._val = this._val + (value - this._val) / this._n;
    this._n += 1;
    return this;
  };

  return MovingAverage;
}();

var OutlineModel =
/** @class */
function (_super) {
  __extends(OutlineModel, _super);

  function OutlineModel(textModel) {
    var _this = _super.call(this) || this;

    _this.textModel = textModel;
    _this.id = 'root';
    _this.parent = undefined;
    _this._groups = Object.create(null);
    _this.children = Object.create(null);
    _this.id = 'root';
    _this.parent = undefined;
    return _this;
  }

  OutlineModel.create = function (textModel, token) {
    var _this = this;

    var key = this._keys.for(textModel, true);

    var data = OutlineModel._requests.get(key);

    if (!data) {
      var source = new _cancellation.CancellationTokenSource();
      data = {
        promiseCnt: 0,
        source: source,
        promise: OutlineModel._create(textModel, source.token),
        model: undefined
      };

      OutlineModel._requests.set(key, data); // keep moving average of request durations


      var now_1 = Date.now();
      data.promise.then(function () {
        var key = _this._keys.for(textModel, false);

        var avg = _this._requestDurations.get(key);

        if (!avg) {
          avg = new MovingAverage();

          _this._requestDurations.set(key, avg);
        }

        avg.update(Date.now() - now_1);
      });
    }

    if (data.model) {
      // resolved -> return data
      return Promise.resolve(data.model);
    } // increase usage counter


    data.promiseCnt += 1;
    token.onCancellationRequested(function () {
      // last -> cancel provider request, remove cached promise
      if (--data.promiseCnt === 0) {
        data.source.cancel();

        OutlineModel._requests.delete(key);
      }
    });
    return new Promise(function (resolve, reject) {
      data.promise.then(function (model) {
        data.model = model;
        resolve(model);
      }, function (err) {
        OutlineModel._requests.delete(key);

        reject(err);
      });
    });
  };

  OutlineModel._create = function (textModel, token) {
    var cts = new _cancellation.CancellationTokenSource(token);
    var result = new OutlineModel(textModel);

    var provider = _modes.DocumentSymbolProviderRegistry.ordered(textModel);

    var promises = provider.map(function (provider, index) {
      var id = TreeElement.findId("provider_" + index, result);
      var group = new OutlineGroup(id, result, provider, index);
      return Promise.resolve(provider.provideDocumentSymbols(result.textModel, cts.token)).then(function (result) {
        for (var _i = 0, _a = result || []; _i < _a.length; _i++) {
          var info = _a[_i];

          OutlineModel._makeOutlineElement(info, group);
        }

        return group;
      }, function (err) {
        (0, _errors.onUnexpectedExternalError)(err);
        return group;
      }).then(function (group) {
        if (!TreeElement.empty(group)) {
          result._groups[id] = group;
        } else {
          group.remove();
        }
      });
    });

    var listener = _modes.DocumentSymbolProviderRegistry.onDidChange(function () {
      var newProvider = _modes.DocumentSymbolProviderRegistry.ordered(textModel);

      if (!(0, _arrays.equals)(newProvider, provider)) {
        cts.cancel();
      }
    });

    return Promise.all(promises).then(function () {
      if (cts.token.isCancellationRequested && !token.isCancellationRequested) {
        return OutlineModel._create(textModel, token);
      } else {
        return result._compact();
      }
    }).finally(function () {
      listener.dispose();
    });
  };

  OutlineModel._makeOutlineElement = function (info, container) {
    var id = TreeElement.findId(info, container);
    var res = new OutlineElement(id, container, info);

    if (info.children) {
      for (var _i = 0, _a = info.children; _i < _a.length; _i++) {
        var childInfo = _a[_i];

        OutlineModel._makeOutlineElement(childInfo, res);
      }
    }

    container.children[res.id] = res;
  };

  OutlineModel.prototype._compact = function () {
    var count = 0;

    for (var key in this._groups) {
      var group = this._groups[key];

      if ((0, _collections.first)(group.children) === undefined) {
        // empty
        delete this._groups[key];
      } else {
        count += 1;
      }
    }

    if (count !== 1) {
      //
      this.children = this._groups;
    } else {
      // adopt all elements of the first group
      var group = (0, _collections.first)(this._groups);

      for (var key in group.children) {
        var child = group.children[key];
        child.parent = this;
        this.children[child.id] = child;
      }
    }

    return this;
  };

  OutlineModel._requestDurations = new _map.LRUCache(50, 0.7);
  OutlineModel._requests = new _map.LRUCache(9, 0.75);
  OutlineModel._keys = new (
  /** @class */
  function () {
    function class_1() {
      this._counter = 1;
      this._data = new WeakMap();
    }

    class_1.prototype.for = function (textModel, version) {
      return textModel.id + "/" + (version ? textModel.getVersionId() : '') + "/" + this._hash(_modes.DocumentSymbolProviderRegistry.all(textModel));
    };

    class_1.prototype._hash = function (providers) {
      var result = '';

      for (var _i = 0, providers_1 = providers; _i < providers_1.length; _i++) {
        var provider = providers_1[_i];

        var n = this._data.get(provider);

        if (typeof n === 'undefined') {
          n = this._counter++;

          this._data.set(provider, n);
        }

        result += n;
      }

      return result;
    };

    return class_1;
  }())();
  return OutlineModel;
}(TreeElement);

exports.OutlineModel = OutlineModel;
},{"../../../base/common/arrays.js":"../node_modules/monaco-editor/esm/vs/base/common/arrays.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../base/common/collections.js":"../node_modules/monaco-editor/esm/vs/base/common/collections.js","../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/map.js":"../node_modules/monaco-editor/esm/vs/base/common/map.js","../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js"}],"../node_modules/monaco-editor/esm/vs/editor/contrib/quickOpen/quickOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDocumentSymbols = getDocumentSymbols;

var _errors = require("../../../base/common/errors.js");

var _uri = require("../../../base/common/uri.js");

var _range = require("../../common/core/range.js");

var _editorExtensions = require("../../browser/editorExtensions.js");

var _modelService = require("../../common/services/modelService.js");

var _cancellation = require("../../../base/common/cancellation.js");

var _resolverService = require("../../common/services/resolverService.js");

var _outlineModel = require("../documentSymbols/outlineModel.js");

var _collections = require("../../../base/common/collections.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

function getDocumentSymbols(document, flat, token) {
  return __awaiter(this, void 0, void 0, function () {
    var model, roots, _i, _a, child, flatEntries;

    return __generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          return [4
          /*yield*/
          , _outlineModel.OutlineModel.create(document, token)];

        case 1:
          model = _b.sent();
          roots = [];

          for (_i = 0, _a = (0, _collections.values)(model.children); _i < _a.length; _i++) {
            child = _a[_i];

            if (child instanceof _outlineModel.OutlineElement) {
              roots.push(child.symbol);
            } else {
              roots.push.apply(roots, (0, _collections.values)(child.children).map(function (child) {
                return child.symbol;
              }));
            }
          }

          flatEntries = [];

          if (token.isCancellationRequested) {
            return [2
            /*return*/
            , flatEntries];
          }

          if (flat) {
            flatten(flatEntries, roots, '');
          } else {
            flatEntries = roots;
          }

          return [2
          /*return*/
          , flatEntries.sort(compareEntriesUsingStart)];
      }
    });
  });
}

function compareEntriesUsingStart(a, b) {
  return _range.Range.compareRangesUsingStarts(a.range, b.range);
}

function flatten(bucket, entries, overrideContainerLabel) {
  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
    var entry = entries_1[_i];
    bucket.push({
      kind: entry.kind,
      tags: entry.tags,
      name: entry.name,
      detail: entry.detail,
      containerName: entry.containerName || overrideContainerLabel,
      range: entry.range,
      selectionRange: entry.selectionRange,
      children: undefined
    });

    if (entry.children) {
      flatten(bucket, entry.children, entry.name);
    }
  }
}

(0, _editorExtensions.registerLanguageCommand)('_executeDocumentSymbolProvider', function (accessor, args) {
  var resource = args.resource;

  if (!(resource instanceof _uri.URI)) {
    throw (0, _errors.illegalArgument)('resource');
  }

  var model = accessor.get(_modelService.IModelService).getModel(resource);

  if (model) {
    return getDocumentSymbols(model, false, _cancellation.CancellationToken.None);
  }

  return accessor.get(_resolverService.ITextModelService).createModelReference(resource).then(function (reference) {
    return new Promise(function (resolve, reject) {
      try {
        var result = getDocumentSymbols(reference.object.textEditorModel, false, _cancellation.CancellationToken.None);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    }).finally(function () {
      reference.dispose();
    });
  });
});
},{"../../../base/common/errors.js":"../node_modules/monaco-editor/esm/vs/base/common/errors.js","../../../base/common/uri.js":"../node_modules/monaco-editor/esm/vs/base/common/uri.js","../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../common/services/modelService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js","../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../common/services/resolverService.js":"../node_modules/monaco-editor/esm/vs/editor/common/services/resolverService.js","../documentSymbols/outlineModel.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/documentSymbols/outlineModel.js","../../../base/common/collections.js":"../node_modules/monaco-editor/esm/vs/base/common/collections.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickOutline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QuickOutlineAction = exports.SymbolEntry = void 0;

require("./quickOutline.css");

require("../../../../base/browser/ui/codiconLabel/codiconLabel.js");

require("../../../contrib/documentSymbols/outlineTree.js");

var _cancellation = require("../../../../base/common/cancellation.js");

var _filters = require("../../../../base/common/filters.js");

var strings = _interopRequireWildcard(require("../../../../base/common/strings.js"));

var _quickOpenModel = require("../../../../base/parts/quickopen/browser/quickOpenModel.js");

var _editorExtensions = require("../../../browser/editorExtensions.js");

var _range = require("../../../common/core/range.js");

var _editorContextKeys = require("../../../common/editorContextKeys.js");

var _modes = require("../../../common/modes.js");

var _quickOpen = require("../../../contrib/quickOpen/quickOpen.js");

var _editorQuickOpen = require("./editorQuickOpen.js");

var _standaloneStrings = require("../../../common/standaloneStrings.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var SCOPE_PREFIX = ':';

var SymbolEntry =
/** @class */
function (_super) {
  __extends(SymbolEntry, _super);

  function SymbolEntry(name, type, description, range, highlights, editor, decorator) {
    var _this = _super.call(this) || this;

    _this.name = name;
    _this.type = type;
    _this.description = description;
    _this.range = range;

    _this.setHighlights(highlights);

    _this.editor = editor;
    _this.decorator = decorator;
    return _this;
  }

  SymbolEntry.prototype.getLabel = function () {
    return this.name;
  };

  SymbolEntry.prototype.getAriaLabel = function () {
    return strings.format(_standaloneStrings.QuickOutlineNLS.entryAriaLabel, this.name);
  };

  SymbolEntry.prototype.getIcon = function () {
    return this.type;
  };

  SymbolEntry.prototype.getDescription = function () {
    return this.description;
  };

  SymbolEntry.prototype.getType = function () {
    return this.type;
  };

  SymbolEntry.prototype.getRange = function () {
    return this.range;
  };

  SymbolEntry.prototype.run = function (mode, context) {
    if (mode === 1
    /* OPEN */
    ) {
        return this.runOpen(context);
      }

    return this.runPreview();
  };

  SymbolEntry.prototype.runOpen = function (_context) {
    // Apply selection and focus
    var range = this.toSelection();
    this.editor.setSelection(range);
    this.editor.revealRangeInCenter(range, 0
    /* Smooth */
    );
    this.editor.focus();
    return true;
  };

  SymbolEntry.prototype.runPreview = function () {
    // Select Outline Position
    var range = this.toSelection();
    this.editor.revealRangeInCenter(range, 0
    /* Smooth */
    ); // Decorate if possible

    this.decorator.decorateLine(this.range, this.editor);
    return false;
  };

  SymbolEntry.prototype.toSelection = function () {
    return new _range.Range(this.range.startLineNumber, this.range.startColumn || 1, this.range.startLineNumber, this.range.startColumn || 1);
  };

  return SymbolEntry;
}(_quickOpenModel.QuickOpenEntryGroup);

exports.SymbolEntry = SymbolEntry;

var QuickOutlineAction =
/** @class */
function (_super) {
  __extends(QuickOutlineAction, _super);

  function QuickOutlineAction() {
    return _super.call(this, _standaloneStrings.QuickOutlineNLS.quickOutlineActionInput, {
      id: 'editor.action.quickOutline',
      label: _standaloneStrings.QuickOutlineNLS.quickOutlineActionLabel,
      alias: 'Go to Symbol...',
      precondition: _editorContextKeys.EditorContextKeys.hasDocumentSymbolProvider,
      kbOpts: {
        kbExpr: _editorContextKeys.EditorContextKeys.focus,
        primary: 2048
        /* CtrlCmd */
        | 1024
        /* Shift */
        | 45
        /* KEY_O */
        ,
        weight: 100
        /* EditorContrib */

      },
      contextMenuOpts: {
        group: 'navigation',
        order: 3
      }
    }) || this;
  }

  QuickOutlineAction.prototype.run = function (accessor, editor) {
    var _this = this;

    if (!editor.hasModel()) {
      return undefined;
    }

    var model = editor.getModel();

    if (!_modes.DocumentSymbolProviderRegistry.has(model)) {
      return undefined;
    } // Resolve outline


    return (0, _quickOpen.getDocumentSymbols)(model, true, _cancellation.CancellationToken.None).then(function (result) {
      if (result.length === 0) {
        return;
      }

      _this._run(editor, result);
    });
  };

  QuickOutlineAction.prototype._run = function (editor, result) {
    var _this = this;

    this._show(this.getController(editor), {
      getModel: function (value) {
        return new _quickOpenModel.QuickOpenModel(_this.toQuickOpenEntries(editor, result, value));
      },
      getAutoFocus: function (searchValue) {
        // Remove any type pattern (:) from search value as needed
        if (searchValue.indexOf(SCOPE_PREFIX) === 0) {
          searchValue = searchValue.substr(SCOPE_PREFIX.length);
        }

        return {
          autoFocusPrefixMatch: searchValue,
          autoFocusFirstEntry: !!searchValue
        };
      }
    });
  };

  QuickOutlineAction.prototype.symbolEntry = function (name, type, description, range, highlights, editor, decorator) {
    return new SymbolEntry(name, type, description, _range.Range.lift(range), highlights, editor, decorator);
  };

  QuickOutlineAction.prototype.toQuickOpenEntries = function (editor, flattened, searchValue) {
    var controller = this.getController(editor);
    var results = []; // Convert to Entries

    var normalizedSearchValue = searchValue;

    if (searchValue.indexOf(SCOPE_PREFIX) === 0) {
      normalizedSearchValue = normalizedSearchValue.substr(SCOPE_PREFIX.length);
    }

    for (var _i = 0, flattened_1 = flattened; _i < flattened_1.length; _i++) {
      var element = flattened_1[_i];
      var label = strings.trim(element.name); // Check for meatch

      var highlights = (0, _filters.matchesFuzzy)(normalizedSearchValue, label);

      if (highlights) {
        // Show parent scope as description
        var description = undefined;

        if (element.containerName) {
          description = element.containerName;
        } // Add


        results.push(this.symbolEntry(label, _modes.SymbolKinds.toCssClassName(element.kind), description, element.range, highlights, editor, controller));
      }
    } // Sort properly if actually searching


    if (searchValue) {
      if (searchValue.indexOf(SCOPE_PREFIX) === 0) {
        results = results.sort(this.sortScoped.bind(this, searchValue.toLowerCase()));
      } else {
        results = results.sort(this.sortNormal.bind(this, searchValue.toLowerCase()));
      }
    } // Mark all type groups


    if (results.length > 0 && searchValue.indexOf(SCOPE_PREFIX) === 0) {
      var currentType = null;
      var currentResult = null;
      var typeCounter = 0;

      for (var i = 0; i < results.length; i++) {
        var result = results[i]; // Found new type

        if (currentType !== result.getType()) {
          // Update previous result with count
          if (currentResult) {
            currentResult.setGroupLabel(this.typeToLabel(currentType || '', typeCounter));
          }

          currentType = result.getType();
          currentResult = result;
          typeCounter = 1;
          result.setShowBorder(i > 0);
        } // Existing type, keep counting
        else {
            typeCounter++;
          }
      } // Update previous result with count


      if (currentResult) {
        currentResult.setGroupLabel(this.typeToLabel(currentType || '', typeCounter));
      }
    } // Mark first entry as outline
    else if (results.length > 0) {
        results[0].setGroupLabel(strings.format(_standaloneStrings.QuickOutlineNLS._symbols_, results.length));
      }

    return results;
  };

  QuickOutlineAction.prototype.typeToLabel = function (type, count) {
    switch (type) {
      case 'module':
        return strings.format(_standaloneStrings.QuickOutlineNLS._modules_, count);

      case 'class':
        return strings.format(_standaloneStrings.QuickOutlineNLS._class_, count);

      case 'interface':
        return strings.format(_standaloneStrings.QuickOutlineNLS._interface_, count);

      case 'method':
        return strings.format(_standaloneStrings.QuickOutlineNLS._method_, count);

      case 'function':
        return strings.format(_standaloneStrings.QuickOutlineNLS._function_, count);

      case 'property':
        return strings.format(_standaloneStrings.QuickOutlineNLS._property_, count);

      case 'variable':
        return strings.format(_standaloneStrings.QuickOutlineNLS._variable_, count);

      case 'var':
        return strings.format(_standaloneStrings.QuickOutlineNLS._variable2_, count);

      case 'constructor':
        return strings.format(_standaloneStrings.QuickOutlineNLS._constructor_, count);

      case 'call':
        return strings.format(_standaloneStrings.QuickOutlineNLS._call_, count);
    }

    return type;
  };

  QuickOutlineAction.prototype.sortNormal = function (searchValue, elementA, elementB) {
    var elementAName = elementA.getLabel().toLowerCase();
    var elementBName = elementB.getLabel().toLowerCase(); // Compare by name

    var r = elementAName.localeCompare(elementBName);

    if (r !== 0) {
      return r;
    } // If name identical sort by range instead


    var elementARange = elementA.getRange();
    var elementBRange = elementB.getRange();
    return elementARange.startLineNumber - elementBRange.startLineNumber;
  };

  QuickOutlineAction.prototype.sortScoped = function (searchValue, elementA, elementB) {
    // Remove scope char
    searchValue = searchValue.substr(SCOPE_PREFIX.length); // Sort by type first if scoped search

    var elementAType = elementA.getType();
    var elementBType = elementB.getType();
    var r = elementAType.localeCompare(elementBType);

    if (r !== 0) {
      return r;
    } // Special sort when searching in scoped mode


    if (searchValue) {
      var elementAName = elementA.getLabel().toLowerCase();
      var elementBName = elementB.getLabel().toLowerCase(); // Compare by name

      var r_1 = elementAName.localeCompare(elementBName);

      if (r_1 !== 0) {
        return r_1;
      }
    } // Default to sort by range


    var elementARange = elementA.getRange();
    var elementBRange = elementB.getRange();
    return elementARange.startLineNumber - elementBRange.startLineNumber;
  };

  return QuickOutlineAction;
}(_editorQuickOpen.BaseEditorQuickOpenAction);

exports.QuickOutlineAction = QuickOutlineAction;
(0, _editorExtensions.registerEditorAction)(QuickOutlineAction);
},{"./quickOutline.css":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickOutline.css","../../../../base/browser/ui/codiconLabel/codiconLabel.js":"../node_modules/monaco-editor/esm/vs/base/browser/ui/codiconLabel/codiconLabel.js","../../../contrib/documentSymbols/outlineTree.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/documentSymbols/outlineTree.js","../../../../base/common/cancellation.js":"../node_modules/monaco-editor/esm/vs/base/common/cancellation.js","../../../../base/common/filters.js":"../node_modules/monaco-editor/esm/vs/base/common/filters.js","../../../../base/common/strings.js":"../node_modules/monaco-editor/esm/vs/base/common/strings.js","../../../../base/parts/quickopen/browser/quickOpenModel.js":"../node_modules/monaco-editor/esm/vs/base/parts/quickopen/browser/quickOpenModel.js","../../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../../common/core/range.js":"../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../../../common/editorContextKeys.js":"../node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","../../../common/modes.js":"../node_modules/monaco-editor/esm/vs/editor/common/modes.js","../../../contrib/quickOpen/quickOpen.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/quickOpen/quickOpen.js","./editorQuickOpen.js":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/editorQuickOpen.js","../../../common/standaloneStrings.js":"../node_modules/monaco-editor/esm/vs/editor/common/standaloneStrings.js"}],"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/referenceSearch/standaloneReferenceSearch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StandaloneReferencesController = void 0;

var _editorExtensions = require("../../../browser/editorExtensions.js");

var _codeEditorService = require("../../../browser/services/codeEditorService.js");

var _referencesController = require("../../../contrib/gotoSymbol/peek/referencesController.js");

var _configuration = require("../../../../platform/configuration/common/configuration.js");

var _contextkey = require("../../../../platform/contextkey/common/contextkey.js");

var _instantiation = require("../../../../platform/instantiation/common/instantiation.js");

var _notification = require("../../../../platform/notification/common/notification.js");

var _storage = require("../../../../platform/storage/common/storage.js");

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var StandaloneReferencesController =
/** @class */
function (_super) {
  __extends(StandaloneReferencesController, _super);

  function StandaloneReferencesController(editor, contextKeyService, editorService, notificationService, instantiationService, storageService, configurationService) {
    return _super.call(this, true, editor, contextKeyService, editorService, notificationService, instantiationService, storageService, configurationService) || this;
  }

  StandaloneReferencesController = __decorate([__param(1, _contextkey.IContextKeyService), __param(2, _codeEditorService.ICodeEditorService), __param(3, _notification.INotificationService), __param(4, _instantiation.IInstantiationService), __param(5, _storage.IStorageService), __param(6, _configuration.IConfigurationService)], StandaloneReferencesController);
  return StandaloneReferencesController;
}(_referencesController.ReferencesController);

exports.StandaloneReferencesController = StandaloneReferencesController;
(0, _editorExtensions.registerEditorContribution)(_referencesController.ReferencesController.ID, StandaloneReferencesController);
},{"../../../browser/editorExtensions.js":"../node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js","../../../browser/services/codeEditorService.js":"../node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorService.js","../../../contrib/gotoSymbol/peek/referencesController.js":"../node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/peek/referencesController.js","../../../../platform/configuration/common/configuration.js":"../node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js","../../../../platform/contextkey/common/contextkey.js":"../node_modules/monaco-editor/esm/vs/platform/contextkey/common/contextkey.js","../../../../platform/instantiation/common/instantiation.js":"../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","../../../../platform/notification/common/notification.js":"../node_modules/monaco-editor/esm/vs/platform/notification/common/notification.js","../../../../platform/storage/common/storage.js":"../node_modules/monaco-editor/esm/vs/platform/storage/common/storage.js"}],"monaco-features.js":[function(require,module,exports) {
"use strict";

require("monaco-languages/release/esm/monaco.contribution.js");

require("monaco-editor/esm/vs/editor/editor.all.js");

require("monaco-editor/esm/vs/editor/standalone/browser/accessibilityHelp/accessibilityHelp.js");

require("monaco-editor/esm/vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard.js");

require("monaco-editor/esm/vs/editor/standalone/browser/inspectTokens/inspectTokens.js");

require("monaco-editor/esm/vs/editor/standalone/browser/quickOpen/gotoLine.js");

require("monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickCommand.js");

require("monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickOutline.js");

require("monaco-editor/esm/vs/editor/standalone/browser/referenceSearch/standaloneReferenceSearch.js");
},{"monaco-languages/release/esm/monaco.contribution.js":"../node_modules/monaco-languages/release/esm/monaco.contribution.js","monaco-editor/esm/vs/editor/editor.all.js":"../node_modules/monaco-editor/esm/vs/editor/editor.all.js","monaco-editor/esm/vs/editor/standalone/browser/accessibilityHelp/accessibilityHelp.js":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/accessibilityHelp/accessibilityHelp.js","monaco-editor/esm/vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard.js":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard.js","monaco-editor/esm/vs/editor/standalone/browser/inspectTokens/inspectTokens.js":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/inspectTokens/inspectTokens.js","monaco-editor/esm/vs/editor/standalone/browser/quickOpen/gotoLine.js":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/gotoLine.js","monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickCommand.js":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickCommand.js","monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickOutline.js":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/quickOpen/quickOutline.js","monaco-editor/esm/vs/editor/standalone/browser/referenceSearch/standaloneReferenceSearch.js":"../node_modules/monaco-editor/esm/vs/editor/standalone/browser/referenceSearch/standaloneReferenceSearch.js"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "40967" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}],"../node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"../node_modules/parcel-bundler/src/builtins/bundle-loader.js":[function(require,module,exports) {
var getBundleURL = require('./bundle-url').getBundleURL;

function loadBundlesLazy(bundles) {
  if (!Array.isArray(bundles)) {
    bundles = [bundles];
  }

  var id = bundles[bundles.length - 1];

  try {
    return Promise.resolve(require(id));
  } catch (err) {
    if (err.code === 'MODULE_NOT_FOUND') {
      return new LazyPromise(function (resolve, reject) {
        loadBundles(bundles.slice(0, -1)).then(function () {
          return require(id);
        }).then(resolve, reject);
      });
    }

    throw err;
  }
}

function loadBundles(bundles) {
  return Promise.all(bundles.map(loadBundle));
}

var bundleLoaders = {};

function registerBundleLoader(type, loader) {
  bundleLoaders[type] = loader;
}

module.exports = exports = loadBundlesLazy;
exports.load = loadBundles;
exports.register = registerBundleLoader;
var bundles = {};

function loadBundle(bundle) {
  var id;

  if (Array.isArray(bundle)) {
    id = bundle[1];
    bundle = bundle[0];
  }

  if (bundles[bundle]) {
    return bundles[bundle];
  }

  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();
  var bundleLoader = bundleLoaders[type];

  if (bundleLoader) {
    return bundles[bundle] = bundleLoader(getBundleURL() + bundle).then(function (resolved) {
      if (resolved) {
        module.bundle.register(id, resolved);
      }

      return resolved;
    }).catch(function (e) {
      delete bundles[bundle];
      throw e;
    });
  }
}

function LazyPromise(executor) {
  this.executor = executor;
  this.promise = null;
}

LazyPromise.prototype.then = function (onSuccess, onError) {
  if (this.promise === null) this.promise = new Promise(this.executor);
  return this.promise.then(onSuccess, onError);
};

LazyPromise.prototype.catch = function (onError) {
  if (this.promise === null) this.promise = new Promise(this.executor);
  return this.promise.catch(onError);
};
},{"./bundle-url":"../node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"../node_modules/parcel-bundler/src/builtins/loaders/browser/js-loader.js":[function(require,module,exports) {
module.exports = function loadJSBundle(bundle) {
  return new Promise(function (resolve, reject) {
    var script = document.createElement('script');
    script.async = true;
    script.type = 'text/javascript';
    script.charset = 'utf-8';
    script.src = bundle;

    script.onerror = function (e) {
      script.onerror = script.onload = null;
      reject(e);
    };

    script.onload = function () {
      script.onerror = script.onload = null;
      resolve();
    };

    document.getElementsByTagName('head')[0].appendChild(script);
  });
};
},{}],"../node_modules/parcel-bundler/src/builtins/loaders/browser/css-loader.js":[function(require,module,exports) {
module.exports = function loadCSSBundle(bundle) {
  return new Promise(function (resolve, reject) {
    var link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = bundle;

    link.onerror = function (e) {
      link.onerror = link.onload = null;
      reject(e);
    };

    link.onload = function () {
      link.onerror = link.onload = null;
      resolve();
    };

    document.getElementsByTagName('head')[0].appendChild(link);
  });
};
},{}],0:[function(require,module,exports) {
var b=require("../node_modules/parcel-bundler/src/builtins/bundle-loader.js");b.register("js",require("../node_modules/parcel-bundler/src/builtins/loaders/browser/js-loader.js"));b.register("css",require("../node_modules/parcel-bundler/src/builtins/loaders/browser/css-loader.js"));b.load([]).then(function(){require("monaco-features.js");});
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js",0], null)
//# sourceMappingURL=/monaco-features.04581997.js.map